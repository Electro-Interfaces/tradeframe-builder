/**
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ê–ó–° 4 (—Å–µ—Ç—å 15)
 * –∏ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

// –¶–µ–ª–µ–≤—ã–µ ID –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
const TARGET_NETWORK_ID = 'b5e25b51-a950-481e-a09d-ac25e6b5d6ab'; // –ù–æ—Ä–¥ –õ–∞–π–Ω, external_id: 15
const TARGET_TRADING_POINT_ID = '6969b08d-1cbe-45c2-ae9c-8002c7022b59'; // –ê–ó–° 4

// –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const TABLES_TO_CHECK = [
  'operations',
  'prices', 
  'price_history',
  'tanks',
  'equipment',
  'components',
  'fuel_stocks',
  'fuel_stock_history',
  'shift_reports',
  'messages',
  'user_document_acceptances',
  'notifications',
  'workflows',
  'workflow_executions',
  'trading_transactions',
  'api_logs',
  'system_logs',
  'equipment_events',
  'component_status_records'
];

async function checkTableForTradingPoint(tableName, tradingPointId) {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–≤—è–∑–∏ —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–æ–π
    const possibleFields = [
      'trading_point_id',
      'point_id', 
      'station_id',
      'network_id'
    ];
    
    let data = null;
    let usedField = null;
    
    for (const field of possibleFields) {
      try {
        const query = supabase.from(tableName).select('*');
        
        if (field === 'network_id') {
          query.eq(field, TARGET_NETWORK_ID);
        } else {
          query.eq(field, tradingPointId);
        }
        
        const result = await query.limit(10);
        
        if (!result.error && result.data && result.data.length > 0) {
          data = result.data;
          usedField = field;
          break;
        }
      } catch (fieldError) {
        // –ü–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
        continue;
      }
    }
    
    if (data && data.length > 0) {
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π –ø–æ –ø–æ–ª—é '${usedField}'`);
      console.log(`  üìÑ –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:`, data.slice(0, 3).map(record => ({
        id: record.id,
        created_at: record.created_at || record.timestamp || 'N/A',
        [usedField]: record[usedField]
      })));
      
      return {
        tableName,
        field: usedField,
        count: data.length,
        data
      };
    } else {
      console.log(`  ‚ö™ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ ${tableName}`);
      return null;
    }
    
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error.message);
    return null;
  }
}

async function getAllTablesData() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...\n');
  console.log(`üéØ –¶–µ–ª–µ–≤–∞—è —Å–µ—Ç—å: ${TARGET_NETWORK_ID}`);
  console.log(`üéØ –¶–µ–ª–µ–≤–∞—è –ê–ó–°: ${TARGET_TRADING_POINT_ID}\n`);
  
  const results = [];
  
  for (const tableName of TABLES_TO_CHECK) {
    const result = await checkTableForTradingPoint(tableName, TARGET_TRADING_POINT_ID);
    if (result) {
      results.push(result);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  return results;
}

async function cleanupTableData(tableResult) {
  const { tableName, field, count, data } = tableResult;
  
  try {
    console.log(`üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ${tableName} (${count} –∑–∞–ø–∏—Å–µ–π)...`);
    
    const query = supabase.from(tableName).delete();
    
    if (field === 'network_id') {
      query.eq(field, TARGET_NETWORK_ID);
    } else {
      query.eq(field, TARGET_TRADING_POINT_ID);
    }
    
    const { error } = await query;
    
    if (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ ${tableName}:`, error.message);
      return false;
    } else {
      console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ ${tableName}`);
      return true;
    }
    
  } catch (error) {
    console.log(`  üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ ${tableName}:`, error.message);
    return false;
  }
}

async function main() {
  console.log('üéØ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ê–ó–° 4 (–°–ï–¢–¨ 15)\n');
  
  // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
  const tablesWithData = await getAllTablesData();
  
  if (tablesWithData.length === 0) {
    console.log('\n‚úÖ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ê–ó–° 4');
    console.log('üéâ –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüìä –°–í–û–î–ö–ê –ù–ê–ô–î–ï–ù–ù–´–• –î–ê–ù–ù–´–•:');
  console.log('================================');
  let totalRecords = 0;
  tablesWithData.forEach(table => {
    console.log(`üìã ${table.tableName}: ${table.count} –∑–∞–ø–∏—Å–µ–π`);
    totalRecords += table.count;
  });
  console.log(`üî¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}\n`);
  
  // –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–µ–π—á–∞—Å –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!');
  console.log('üóëÔ∏è  –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...\n');
  
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // –®–∞–≥ 3: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  let successCount = 0;
  let errorCount = 0;
  
  for (const tableResult of tablesWithData) {
    const success = await cleanupTableData(tableResult);
    if (success) {
      successCount++;
    } else {
      errorCount++;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
    await new Promise(resolve => setTimeout(resolve, 200));
  }
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüèÅ –ò–¢–û–ì–ò –û–ß–ò–°–¢–ö–ò:');
  console.log('==================');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: ${errorCount}`);
  console.log(`üìä –ë—ã–ª–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}`);
  
  if (errorCount === 0) {
    console.log('\nüéâ –í–°–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ó–° 4 (–°–ï–¢–¨ 15) –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù–´!');
  } else {
    console.log('\n‚ö†Ô∏è  –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
  }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);