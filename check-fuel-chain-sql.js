/**
 * üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–µ–ø–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–ª–∏–≤–∞ —á–µ—Ä–µ–∑ SQL –∑–∞–ø—Ä–æ—Å—ã
 * –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ ‚Üí –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ‚Üí –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã ‚Üí –¶–µ–Ω—ã
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceRoleKey, {
    auth: { autoRefreshToken: false, persistSession: false }
});

function log(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    console.log(`[${timestamp}] ${icon} ${message}`);
}

async function checkFuelChainIntegrity() {
    log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–µ–ø–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–ª–∏–≤–∞...\n');
    
    const chainData = {
        nomenclature: [],
        equipment: [],
        tanks: [],
        prices: []
    };
    
    const issues = [];
    
    try {
        // 1. –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–ê (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞)
        log('üìö 1. –ü–†–û–í–ï–†–ö–ê –°–ü–†–ê–í–û–ß–ù–ò–ö–ê –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–´...');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
        const { data: nomenclatureData, error: nomenclatureError } = await supabase
            .from('nomenclature')
            .select('*');
            
        if (nomenclatureError && nomenclatureError.code === 'PGRST116') {
            log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ nomenclature –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã', 'warning');
            chainData.nomenclature = [
                { name: '–ê–ò-92', code: '92', type: 'gasoline' },
                { name: '–ê–ò-95', code: '95', type: 'gasoline' },
                { name: '–ê–ò-98', code: '98', type: 'gasoline' },
                { name: '–î–¢', code: 'DT', type: 'diesel' },
                { name: '–î–¢ –ê—Ä–∫—Ç–∏–∫–∞', code: 'DT-A', type: 'diesel' }
            ];
        } else {
            chainData.nomenclature = nomenclatureData || [];
        }
        
        log(`   ‚úÖ –í–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: ${chainData.nomenclature.length}`, 'success');
        chainData.nomenclature.forEach(fuel => {
            log(`      ‚Ä¢ ${fuel.name} (${fuel.code})`);
        });

        // 2. –û–ë–û–†–£–î–û–í–ê–ù–ò–ï (—Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã)
        log('\nüõ¢Ô∏è 2. –ü–†–û–í–ï–†–ö–ê –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø (—Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã)...');
        
        const { data: equipmentData, error: equipmentError } = await supabase
            .from('equipment_templates')
            .select('*')
            .eq('type', 'tank');
            
        if (equipmentError) {
            log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${equipmentError.message}`, 'error');
        } else {
            chainData.equipment = equipmentData || [];
            log(`   ‚úÖ –†–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏: ${chainData.equipment.length}`, 'success');
            
            const equipmentFuels = new Set();
            chainData.equipment.forEach(equip => {
                if (equip.fuel_type) {
                    equipmentFuels.add(equip.fuel_type);
                    log(`      ‚Ä¢ ${equip.name}: ${equip.fuel_type}`);
                }
            });
            
            log(`   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏: ${equipmentFuels.size}`);
        }

        // 3. –†–ï–ó–ï–†–í–£–ê–†–´ (—Ä–∞–∑–¥–µ–ª —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤)
        log('\nüè≠ 3. –ü–†–û–í–ï–†–ö–ê –†–ê–ó–î–ï–õ–ê –†–ï–ó–ï–†–í–£–ê–†–´...');
        
        const { data: tanksData, error: tanksError } = await supabase
            .from('tanks')
            .select('*');
            
        if (tanksError) {
            log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤: ${tanksError.message}`, 'error');
        } else {
            chainData.tanks = tanksData || [];
            log(`   ‚úÖ –†–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ: ${chainData.tanks.length}`, 'success');
            
            const tankFuels = new Set();
            chainData.tanks.forEach(tank => {
                if (tank.fuel_type) {
                    tankFuels.add(tank.fuel_type);
                    log(`      ‚Ä¢ ${tank.name || tank.tank_number}: ${tank.fuel_type}`);
                }
            });
            
            log(`   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö: ${tankFuels.size}`);
        }

        // 4. –¶–ï–ù–´
        log('\nüí∞ 4. –ü–†–û–í–ï–†–ö–ê –¶–ï–ù–´...');
        
        const { data: pricesData, error: pricesError } = await supabase
            .from('prices')
            .select('*');
            
        if (pricesError) {
            log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω: ${pricesError.message}`, 'error');
        } else {
            chainData.prices = pricesData || [];
            log(`   ‚úÖ –ó–∞–ø–∏—Å–µ–π —Ü–µ–Ω: ${chainData.prices.length}`, 'success');
            
            const priceFuels = new Set();
            chainData.prices.forEach(price => {
                if (price.fuel_type) {
                    priceFuels.add(price.fuel_type);
                    log(`      ‚Ä¢ ${price.fuel_type}: ${price.price || price.current_price || '—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
                }
            });
            
            log(`   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ —Å —Ü–µ–Ω–∞–º–∏: ${priceFuels.size}`);
        }

        // 5. –í–ê–õ–ò–î–ê–¶–ò–Ø –¶–ï–õ–û–°–¢–ù–û–°–¢–ò
        log('\nüîç 5. –í–ê–õ–ò–î–ê–¶–ò–Ø –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –¶–ï–ü–û–ß–ö–ò...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –í–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
        const nomenclatureFuels = new Set(chainData.nomenclature.map(n => n.name));
        const equipmentFuels = new Set();
        
        chainData.equipment.forEach(equip => {
            if (equip.fuel_type) {
                equipmentFuels.add(equip.fuel_type);
                if (!nomenclatureFuels.has(equip.fuel_type)) {
                    issues.push(`‚ùå –¢–æ–ø–ª–∏–≤–æ "${equip.fuel_type}" –≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ`);
                }
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        const tankFuels = new Set();
        chainData.tanks.forEach(tank => {
            if (tank.fuel_type) {
                tankFuels.add(tank.fuel_type);
                if (!equipmentFuels.has(tank.fuel_type)) {
                    issues.push(`‚ö†Ô∏è –†–µ–∑–µ—Ä–≤—É–∞—Ä —Å —Ç–æ–ø–ª–∏–≤–æ–º "${tank.fuel_type}" –Ω–µ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è`);
                }
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –¶–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤  
        chainData.prices.forEach(price => {
            if (price.fuel_type && !tankFuels.has(price.fuel_type)) {
                issues.push(`‚ùå –¶–µ–Ω–∞ –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞ "${price.fuel_type}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤`);
            }
        });

        // 6. –†–ï–ó–£–õ–¨–¢–ê–¢–´
        log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –¶–ï–õ–û–°–¢–ù–û–°–¢–ò:');
        log('=' * 60);
        
        log(`üìö –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞: ${chainData.nomenclature.length} –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞`);
        log(`üõ¢Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${chainData.equipment.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ (${equipmentFuels.size} –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞)`);
        log(`üè≠ –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã: ${chainData.tanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ (${tankFuels.size} –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞)`);
        log(`üí∞ –¶–µ–Ω—ã: ${chainData.prices.length} –∑–∞–ø–∏—Å–µ–π —Ü–µ–Ω`);
        
        if (issues.length === 0) {
            log('\nüéâ –¶–ï–ü–û–ß–ö–ê –ü–û–õ–ù–û–°–¢–¨–Æ –¶–ï–õ–û–°–¢–ù–ê!', 'success');
            log('‚úÖ –í—Å–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤—è–∑–∞–Ω—ã –æ—Ç –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–æ —Ü–µ–Ω', 'success');
        } else {
            log(`\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issues.length}`, 'warning');
            issues.forEach(issue => log(issue, 'warning'));
        }

        // 7. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
        log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        if (nomenclatureFuels.size > 0 && equipmentFuels.size > 0) {
            const unusedNomenclature = [...nomenclatureFuels].filter(fuel => !equipmentFuels.has(fuel));
            if (unusedNomenclature.length > 0) {
                log(`üìù –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${unusedNomenclature.join(', ')}`);
            }
        }
        
        if (equipmentFuels.size > 0 && tankFuels.size > 0) {
            const unusedEquipment = [...equipmentFuels].filter(fuel => !tankFuels.has(fuel));
            if (unusedEquipment.length > 0) {
                log(`üìù –í–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤: ${unusedEquipment.join(', ')}`);
            }
        }

        return {
            success: issues.length === 0,
            data: chainData,
            issues: issues
        };

    } catch (error) {
        log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
        return {
            success: false,
            error: error.message
        };
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkFuelChainIntegrity()
    .then(result => {
        if (result.success) {
            log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û', 'success');
            process.exit(0);
        } else {
            log('\n‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –ó–ê–ú–ï–ß–ê–ù–ò–Ø–ú–ò', 'warning');
            process.exit(1);
        }
    })
    .catch(error => {
        log(`\nüí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`, 'error');
        process.exit(1);
    });