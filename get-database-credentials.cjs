/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PostgreSQL
 * –∏–∑ Supabase API
 */

const https = require('https');

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

async function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const req = https.request(url, {
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        'apikey': serviceKey,
        'Authorization': `Bearer ${serviceKey}`,
        ...options.headers
      }
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(data);
          resolve({ status: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    
    if (options.body) {
      req.write(JSON.stringify(options.body));
    }
    
    req.end();
  });
}

async function getDatabaseInfo() {
  console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase...\n');

  // 1. –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
  console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞...');
  try {
    const healthCheck = await makeRequest(`${supabaseUrl}/rest/v1/`);
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω (HTTP ${healthCheck.status})`);
  } catch (error) {
    console.log(`‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    return;
  }

  // 2. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ REST API
  console.log('üóÇÔ∏è –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ö–µ–º—ã...');
  try {
    const tablesInfo = await makeRequest(`${supabaseUrl}/rest/v1/?select=*`);
    if (tablesInfo.status === 200) {
      console.log('‚úÖ REST API —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log(`‚ö†Ô∏è REST API —Å—Ç–∞—Ç—É—Å: ${tablesInfo.status}`);
    }
  } catch (error) {
    console.log(`‚ùå REST API –æ—à–∏–±–∫–∞: ${error.message}`);
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ operations
  console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ operations...');
  try {
    const operationsCheck = await makeRequest(`${supabaseUrl}/rest/v1/operations?select=*&limit=1`);
    if (operationsCheck.status === 200) {
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ operations –¥–æ—Å—Ç—É–ø–Ω–∞ (${operationsCheck.data.length} –∑–∞–ø–∏—Å–µ–π –Ω–∞–π–¥–µ–Ω–æ)`);
    } else {
      console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ operations –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (${operationsCheck.status})`);
      console.log('–û—Ç–≤–µ—Ç:', operationsCheck.data);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ operations: ${error.message}`);
  }

  // 4. –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  console.log('\nüìã –¢–ï–ö–£–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:');
  console.log('‚îÄ'.repeat(60));
  console.log(`Project Ref: tohtryzyffcebtyvkxwh`);
  console.log(`Database: postgres`);
  console.log(`Host (Pooler): aws-0-eu-central-1.pooler.supabase.com`);
  console.log(`Port (Transaction): 6543`);
  console.log(`Port (Session): 5432`);
  console.log(`User: postgres.tohtryzyffcebtyvkxwh`);
  console.log(`Password: tradeframe2024`);
  console.log(`SSL: rejectUnauthorized: false`);

  // 5. –í–æ–∑–º–æ–∂–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
  console.log('\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´:');
  console.log('1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Supabase Dashboard ‚Üí Settings ‚Üí Database');
  console.log('3. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "postgres" –≤–º–µ—Å—Ç–æ "postgres.project"');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤ —Ä–µ–∂–∏–º–µ pause');

  // 6. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä–æ–ª–µ–π
  console.log('\nüß™ –¢–ï–°–¢–û–í–´–ï –ü–ê–†–û–õ–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:');
  const testPasswords = [
    'tradeframe2024',
    'postgres',
    'password',
    'admin',
    '123456',
    'supabase',
    '',
  ];

  console.log('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –ø–∞—Ä–æ–ª–∏:');
  testPasswords.forEach((pwd, i) => {
    console.log(`${i + 1}. "${pwd}"`);
  });

  return {
    host: 'aws-0-eu-central-1.pooler.supabase.com',
    database: 'postgres',
    user: 'postgres.tohtryzyffcebtyvkxwh',
    testPasswords
  };
}

// –¢–µ—Å—Ç —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
async function testPasswords(connectionBase, passwords) {
  console.log('\nüîì –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–û–õ–ï–ô...');
  
  const { Client } = require('pg');
  
  for (let i = 0; i < passwords.length; i++) {
    const password = passwords[i];
    console.log(`\n${i + 1}. –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ä–æ–ª—å: "${password}"`);
    
    const client = new Client({
      ...connectionBase,
      password: password,
      port: 6543, // Transaction pooler
      ssl: { rejectUnauthorized: false }
    });

    try {
      await client.connect();
      console.log(`‚úÖ –£–°–ü–ï–•! –†–∞–±–æ—á–∏–π –ø–∞—Ä–æ–ª—å: "${password}"`);
      
      const result = await client.query('SELECT version()');
      console.log(`üìã PostgreSQL: ${result.rows[0].version.split(' ')[1]}`);
      
      await client.end();
      return password;
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      try { await client.end(); } catch (e) {}
    }
  }
  
  return null;
}

async function main() {
  console.log('üîê –ü–û–ò–°–ö –ü–†–ê–í–ò–õ–¨–ù–´–• –£–ß–ï–¢–ù–´–• –î–ê–ù–ù–´–• POSTGRESQL');
  console.log('=' .repeat(80));
  
  const dbInfo = await getDatabaseInfo();
  
  if (dbInfo) {
    const workingPassword = await testPasswords({
      host: dbInfo.host,
      database: dbInfo.database,
      user: dbInfo.user
    }, dbInfo.testPasswords);
    
    if (workingPassword) {
      console.log('\nüéâ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô –ü–ê–†–û–õ–¨!');
      console.log('=' .repeat(50));
      console.log(`Host: ${dbInfo.host}`);
      console.log(`Port: 6543`);
      console.log(`Database: ${dbInfo.database}`);
      console.log(`User: ${dbInfo.user}`);
      console.log(`Password: ${workingPassword}`);
      console.log('=' .repeat(50));
      console.log('\n‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å —É–¥–∞–ª–µ–Ω–∏–µ–º constraint!');
      
      return {
        host: dbInfo.host,
        port: 6543,
        database: dbInfo.database,
        user: dbInfo.user,
        password: workingPassword
      };
    } else {
      console.log('\n‚ùå –ù–∏ –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥–æ—à–µ–ª');
      console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ Supabase Dashboard manually');
    }
  }
  
  return null;
}

main().then((credentials) => {
  if (credentials) {
    console.log('\nüöÄ –ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!');
  } else {
    console.log('\n‚ö†Ô∏è –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
  }
  process.exit(0);
}).catch(err => {
  console.error('\nüí• –û—à–∏–±–∫–∞:', err);
  process.exit(1);
});