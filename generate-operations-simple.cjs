/**
 * üéØ –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL INSERT –¥–ª—è 250 –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –∞–≤–≥—É—Å—Ç 2025
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –∏ –∏—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤  
const TRADING_POINTS = [
  {
    id: '9baf5375-9929-4774-8366-c0609b9f2a51',
    name: '–ê–ó–° ‚Ññ001 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è',
    external_id: 'station_01',
    fuels: [
      { type: '–ê–ò-95', price: 55.50 },
      { type: '–ê–ò-92', price: 52.30 }
    ]
  },
  {
    id: '9be94f90-84d1-4557-b746-460e13485b65', 
    name: '–ê–ó–° ‚Ññ002 - –°–µ–≤–µ—Ä–Ω–∞—è',
    external_id: 'station_02',
    fuels: [
      { type: '–ê–ò-92', price: 52.50 },
      { type: '–ê–ò-95', price: 55.70 },
      { type: '–î–∏–∑–µ–ª—å', price: 58.80 }
    ]
  },
  {
    id: 'f2566905-c748-4240-ac31-47b626ab625d',
    name: '–ê–ó–° ‚Ññ003 - –Æ–∂–Ω–∞—è', 
    external_id: 'station_03',
    fuels: [
      { type: '–ê–ò-92', price: 52.40 },
      { type: '–ê–ò-95', price: 55.60 },
      { type: '–ê–ò-98', price: 67.20 },
      { type: '–î–∏–∑–µ–ª—å', price: 58.90 }
    ]
  },
  {
    id: 'f7963207-2732-4fae-988e-c73eef7645ca',
    name: '–ê–ó–° ‚Ññ005 - –ü—Ä–æ–º–∑–æ–Ω–∞',
    external_id: 'station_05', 
    fuels: [
      { type: '–ê–ò-95', price: 55.80 },
      { type: '–ê–ò-98', price: 67.40 },
      { type: '–ê–ò-92', price: 52.60 },
      { type: '–î–∏–∑–µ–ª—å', price: 59.10 }
    ]
  },
  {
    id: '35f56ffd-826c-43b3-8f15-0f0e870f20cd',
    name: '–ê–ó–° ‚Ññ006 - –û–∫—Ä—É–∂–Ω–∞—è',
    external_id: 'station_06',
    fuels: [
      { type: '–ê–ò-95', price: 55.90 },
      { type: '–ê–ò-92', price: 52.70 },
      { type: '–ê–ò-98', price: 67.50 },
      { type: '–î–∏–∑–µ–ª—å', price: 59.20 },
      { type: '–î–∏–∑–µ–ª—å –∑–∏–º–Ω–∏–π', price: 61.10 }
    ]
  }
];

const PAYMENT_METHODS = [
  { type: 'bank_card', weight: 60 },
  { type: 'cash', weight: 25 }, 
  { type: 'fuel_card', weight: 10 },
  { type: 'online_orders', weight: 5 }
];

const OPERATION_STATUSES = [
  { status: 'completed', weight: 90 },
  { status: 'error', weight: 2.5 },
  { status: 'pending', weight: 2.5 },
  { status: 'processing', weight: 2.5 }, 
  { status: 'rejected', weight: 1.5 }
];

const OPERATORS = [
  '–ò–≤–∞–Ω–æ–≤ –ò.–ò.', '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.', '–°–∏–¥–æ—Ä–æ–≤ –°.–°.', '–ö–æ–∑–ª–æ–≤ –ö.–ö.',
  '–ú–æ—Ä–æ–∑–æ–≤ –ú.–ú.', '–í–æ–ª–∫–æ–≤ –í.–í.', '–°–æ–∫–æ–ª–æ–≤ –°.–°.', '–õ–µ–±–µ–¥–µ–≤ –õ.–õ.',
  '–°–µ–º–µ–Ω–æ–≤ –°.–°.', '–ï–≥–æ—Ä–æ–≤ –ï.–ï.', '–ü–∞–≤–ª–æ–≤ –ü.–ü.', '–ö—É–∑–Ω–µ—Ü–æ–≤ –ö.–ö.',
  '–ú–∏—Ö–∞–π–ª–æ–≤ –ú.–ú.', '–ù–æ–≤–∏–∫–æ–≤ –ù.–ù.', '–§–µ–¥–æ—Ä–æ–≤ –§.–§.', '–ü–æ–ø–æ–≤ –ë.–ë.'
];

function generateVehicleNumber() {
  const letters = '–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•';
  const regions = ['77', '199', '178', '99', '197', '777', '123', '750'];
  
  const letter1 = letters[Math.floor(Math.random() * letters.length)];
  const numbers = String(Math.floor(Math.random() * 900) + 100);
  const letter2 = letters[Math.floor(Math.random() * letters.length)];
  const letter3 = letters[Math.floor(Math.random() * letters.length)];
  const region = regions[Math.floor(Math.random() * regions.length)];
  
  return `${letter1}${numbers}${letter2}${letter3}${region}`;
}

function weightedRandom(items) {
  const totalWeight = items.reduce((sum, item) => sum + item.weight, 0);
  const randomWeight = Math.random() * totalWeight;
  
  let currentWeight = 0;
  for (const item of items) {
    currentWeight += item.weight;
    if (randomWeight <= currentWeight) {
      return item;
    }
  }
  return items[items.length - 1];
}

function generateTimestamp(date) {
  const dayOfWeek = date.getDay();
  const dayOfMonth = date.getDate();
  
  let activityMultiplier = 1.0;
  if (dayOfWeek === 5) activityMultiplier = 1.4; // –ü—è—Ç–Ω–∏—Ü–∞
  if (dayOfWeek === 6 || dayOfWeek === 0) activityMultiplier = 0.7; // –í—ã—Ö–æ–¥–Ω—ã–µ
  if (dayOfMonth >= 25) activityMultiplier *= 1.2; // –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
  
  let hour;
  if (Math.random() < 0.05) {
    hour = Math.floor(Math.random() * 5); // 0-4 (–Ω–æ—á—å)
  } else if (Math.random() < 0.15) {
    hour = Math.random() < 0.5 ? 
      Math.floor(Math.random() * 3) + 5 : // 5-7 (—É—Ç—Ä–æ)
      Math.floor(Math.random() * 3) + 21; // 21-23 (–≤–µ—á–µ—Ä)
  } else {
    hour = Math.floor(Math.random() * 12) + 8; // 8-19 (–¥–µ–Ω—å)
  }
  
  const minute = Math.floor(Math.random() * 60);
  const second = Math.floor(Math.random() * 60);
  
  return new Date(2025, 7, date.getDate(), hour, minute, second);
}

function generateOperations(targetCount = 250) {
  const operations = [];
  
  for (let i = 0; i < targetCount; i++) {
    // –°–ª—É—á–∞–π–Ω—ã–π –¥–µ–Ω—å –∞–≤–≥—É—Å—Ç–∞ 2025
    const day = Math.floor(Math.random() * 31) + 1;
    const date = new Date(2025, 7, day);
    const operationTime = generateTimestamp(date);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –∏ —Ç–æ–ø–ª–∏–≤–æ
    const tradingPoint = TRADING_POINTS[Math.floor(Math.random() * TRADING_POINTS.length)];
    const fuel = tradingPoint.fuels[Math.floor(Math.random() * tradingPoint.fuels.length)];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    const quantity = +(Math.random() * 70 + 10).toFixed(2);
    const priceVariation = 1 + (Math.random() - 0.5) * 0.06;
    const price = +(fuel.price * priceVariation).toFixed(1);
    const totalCost = +(quantity * price).toFixed(2);
    
    const paymentMethod = weightedRandom(PAYMENT_METHODS);
    const status = weightedRandom(OPERATION_STATUSES);
    
    const duration = Math.floor(Math.random() * 4) + 2;
    const endTime = new Date(operationTime.getTime() + duration * 60 * 1000);
    
    const operationId = `TXN-2025-08-${String(day).padStart(2, '0')}-${String(i + 1).padStart(3, '0')}`;
    
    const operation = {
      id: operationId,
      operation_type: 'sale',
      status: status.status,
      start_time: operationTime.toISOString(),
      end_time: status.status === 'completed' ? endTime.toISOString() : null,
      duration: status.status === 'completed' ? duration : null,
      trading_point_id: tradingPoint.external_id,
      trading_point_name: tradingPoint.name,
      device_id: `PUMP-${String(Math.floor(Math.random() * 10) + 1).padStart(3, '0')}`,
      transaction_id: `TXN-${Date.now()}-${i}`,
      fuel_type: fuel.type,
      quantity: quantity,
      price: price,
      total_cost: totalCost,
      payment_method: paymentMethod.type,
      details: `–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ø–ª–∏–≤–∞ ${fuel.type}`,
      progress: status.status === 'completed' ? 100 : 
               status.status === 'processing' ? Math.floor(Math.random() * 80) + 20 :
               status.status === 'pending' ? 0 : 
               Math.floor(Math.random() * 50),
      operator_name: OPERATORS[Math.floor(Math.random() * OPERATORS.length)],
      customer_id: `CUST-${Math.floor(Math.random() * 99999)}`,
      vehicle_number: generateVehicleNumber(),
      metadata: '{}',
      created_at: operationTime.toISOString(),
      updated_at: (status.status === 'completed' ? endTime : operationTime).toISOString()
    };
    
    operations.push(operation);
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  operations.sort((a, b) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime());
  
  return operations;
}

function generateReport(operations) {
  const report = {
    total: operations.length,
    byStatus: {},
    byPayment: {},
    byFuelType: {},
    byTradingPoint: {},
    totalRevenue: 0
  };
  
  operations.forEach(op => {
    report.byStatus[op.status] = (report.byStatus[op.status] || 0) + 1;
    report.byPayment[op.payment_method] = (report.byPayment[op.payment_method] || 0) + 1;
    report.byFuelType[op.fuel_type] = (report.byFuelType[op.fuel_type] || 0) + 1;
    report.byTradingPoint[op.trading_point_name] = (report.byTradingPoint[op.trading_point_name] || 0) + 1;
    
    if (op.status === 'completed') {
      report.totalRevenue += op.total_cost;
    }
  });
  
  report.totalRevenue = +report.totalRevenue.toFixed(2);
  
  return report;
}

function escapeString(str) {
  if (str === null || str === undefined) return 'NULL';
  return `'${str.toString().replace(/'/g, "''")}'`;
}

function generateSQL(operations) {
  let sql = `-- üéØ –î–µ–º–æ-–æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –î–µ–º–æ —Å–µ—Ç–∏ –ê–ó–° (–ê–≤–≥—É—Å—Ç 2025)
-- –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}

-- –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞–≤–≥—É—Å—Ç–∞ 2025
DELETE FROM operations 
WHERE start_time >= '2025-08-01T00:00:00Z' 
  AND start_time < '2025-09-01T00:00:00Z';

-- –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
INSERT INTO operations (
  id, operation_type, status, start_time, end_time, duration,
  trading_point_id, trading_point_name, device_id, transaction_id,
  fuel_type, quantity, price, total_cost, payment_method,
  details, progress, operator_name, customer_id, vehicle_number,
  metadata, created_at, updated_at
) VALUES\n`;

  const values = operations.map(op => {
    return `  (${escapeString(op.id)}, ${escapeString(op.operation_type)}, ${escapeString(op.status)}, ` +
           `${escapeString(op.start_time)}, ${op.end_time ? escapeString(op.end_time) : 'NULL'}, ` +
           `${op.duration || 'NULL'}, ${escapeString(op.trading_point_id)}, ` +
           `${escapeString(op.trading_point_name)}, ${escapeString(op.device_id)}, ` +
           `${escapeString(op.transaction_id)}, ${escapeString(op.fuel_type)}, ` +
           `${op.quantity}, ${op.price}, ${op.total_cost}, ${escapeString(op.payment_method)}, ` +
           `${escapeString(op.details)}, ${op.progress}, ${escapeString(op.operator_name)}, ` +
           `${escapeString(op.customer_id)}, ${escapeString(op.vehicle_number)}, ` +
           `${escapeString(op.metadata)}, ${escapeString(op.created_at)}, ${escapeString(op.updated_at)})`;
  });

  sql += values.join(',\n');
  sql += ';\n\n-- ‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!';
  
  return sql;
}

function main() {
  console.log('üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –î–µ–º–æ —Å–µ—Ç–∏ –ê–ó–°');
  console.log('üìÖ –ü–µ—Ä–∏–æ–¥: –ê–≤–≥—É—Å—Ç 2025');
  console.log('üé≤ –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 250 –æ–ø–µ—Ä–∞—Ü–∏–π\n');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
  console.log('‚ö° –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏...');
  const operations = generateOperations(250);
  
  // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
  const report = generateReport(operations);
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò:');
  console.log(`üìà –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${report.total}`);
  console.log(`üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${report.totalRevenue.toLocaleString('ru-RU')} ‚ÇΩ`);
  
  console.log('\nüìã –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
  Object.entries(report.byStatus).forEach(([status, count]) => {
    const percent = ((count / report.total) * 100).toFixed(1);
    console.log(`  ${status}: ${count} (${percent}%)`);
  });
  
  console.log('\nüí≥ –ü–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã:');
  Object.entries(report.byPayment).forEach(([method, count]) => {
    const percent = ((count / report.total) * 100).toFixed(1);
    console.log(`  ${method}: ${count} (${percent}%)`);
  });
  
  console.log('\n‚õΩ –ü–æ —Ç–∏–ø–∞–º —Ç–æ–ø–ª–∏–≤–∞:');
  Object.entries(report.byFuelType).forEach(([fuel, count]) => {
    const percent = ((count / report.total) * 100).toFixed(1);
    console.log(`  ${fuel}: ${count} (${percent}%)`);
  });
  
  console.log('\nüè™ –ü–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º:');
  Object.entries(report.byTradingPoint).forEach(([station, count]) => {
    const percent = ((count / report.total) * 100).toFixed(1);
    console.log(`  ${station}: ${count} (${percent}%)`);
  });
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL
  console.log('\nüìù –°–æ–∑–¥–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç...');
  const sql = generateSQL(operations);
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
  const fs = require('fs');
  const filename = 'demo-operations-august-2025.sql';
  fs.writeFileSync(filename, sql, 'utf8');
  
  console.log(`‚úÖ SQL —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: ${filename}`);
  console.log('\nüì§ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase SQL Editor');
  console.log(`2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ${filename}`);
  console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å');
  console.log('\nüéâ –ì–û–¢–û–í–û!');
}

main();