/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ Supabase
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function createInstructionTables() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã instruction_topics...');
    const { error: topicsError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS instruction_topics (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          key VARCHAR(255) UNIQUE NOT NULL,
          route VARCHAR(500) NOT NULL,
          title VARCHAR(500) NOT NULL,
          description TEXT,
          is_active BOOLEAN DEFAULT true,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
          views_total INTEGER DEFAULT 0
        );
        
        -- –ò–Ω–¥–µ–∫—Å—ã
        CREATE INDEX IF NOT EXISTS idx_instruction_topics_key ON instruction_topics(key);
        CREATE INDEX IF NOT EXISTS idx_instruction_topics_route ON instruction_topics(route);
        CREATE INDEX IF NOT EXISTS idx_instruction_topics_active ON instruction_topics(is_active);
      `
    });

    if (topicsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è instruction_topics:', topicsError);
      return;
    }

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–µ—Ä—Å–∏–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã instruction_versions...');
    const { error: versionsError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS instruction_versions (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          topic_id UUID NOT NULL REFERENCES instruction_topics(id) ON DELETE CASCADE,
          version INTEGER NOT NULL DEFAULT 1,
          status VARCHAR(20) CHECK (status IN ('draft', 'published', 'archived')) DEFAULT 'draft',
          locale VARCHAR(5) DEFAULT 'ru',
          title VARCHAR(500) NOT NULL,
          content_md TEXT NOT NULL,
          content_html TEXT NOT NULL,
          changelog TEXT,
          editor_id UUID,
          editor_name VARCHAR(255),
          published_at TIMESTAMP WITH TIME ZONE,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
          views_count INTEGER DEFAULT 0,
          
          -- –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Ç–µ–º—ã –∏ –ª–æ–∫–∞–ª–∏
          UNIQUE(topic_id, version, locale)
        );
        
        -- –ò–Ω–¥–µ–∫—Å—ã
        CREATE INDEX IF NOT EXISTS idx_instruction_versions_topic ON instruction_versions(topic_id);
        CREATE INDEX IF NOT EXISTS idx_instruction_versions_status ON instruction_versions(status);
        CREATE INDEX IF NOT EXISTS idx_instruction_versions_locale ON instruction_versions(locale);
        CREATE INDEX IF NOT EXISTS idx_instruction_versions_published ON instruction_versions(published_at);
      `
    });

    if (versionsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è instruction_versions:', versionsError);
      return;
    }

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    console.log('üëÅÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã instruction_views...');
    const { error: viewsError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS instruction_views (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          topic_id UUID NOT NULL REFERENCES instruction_topics(id) ON DELETE CASCADE,
          version_id UUID NOT NULL REFERENCES instruction_versions(id) ON DELETE CASCADE,
          user_id UUID,
          session_id VARCHAR(255),
          ip_address INET,
          user_agent TEXT,
          viewed_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
          duration_seconds INTEGER DEFAULT 0
        );
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        CREATE INDEX IF NOT EXISTS idx_instruction_views_topic ON instruction_views(topic_id);
        CREATE INDEX IF NOT EXISTS idx_instruction_views_version ON instruction_views(version_id);
        CREATE INDEX IF NOT EXISTS idx_instruction_views_user ON instruction_views(user_id);
        CREATE INDEX IF NOT EXISTS idx_instruction_views_date ON instruction_views(viewed_at);
      `
    });

    if (viewsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è instruction_views:', viewsError);
      return;
    }

    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

    // 4. –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º
    const demoTopics = [
      {
        key: 'admin.instructions',
        route: '/admin/instructions',
        title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏',
        description: '–ö–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ'
      },
      {
        key: 'admin.networks', 
        route: '/admin/networks',
        title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç—è–º–∏',
        description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–µ–π –∏ —Ç–æ—á–µ–∫'
      },
      {
        key: 'settings.data-exchange',
        route: '/settings/data-exchange', 
        title: '–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏',
        description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –≤–Ω–µ—à–Ω–∏–º API'
      }
    ];

    for (const topic of demoTopics) {
      const { data: topicData, error: insertError } = await supabase
        .from('instruction_topics')
        .insert(topic)
        .select()
        .single();

      if (insertError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–º—ã ${topic.key}:`, insertError);
        continue;
      }

      // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
      const demoVersion = {
        topic_id: topicData.id,
        version: 1,
        status: 'published',
        locale: 'ru',
        title: topic.title,
        content_md: `# ${topic.title}

${topic.description}

## –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º:

1. **–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å** —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
2. **–°–æ–∑–¥–∞–≤–∞—Ç—å** –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
3. **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å** —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
4. **–£–¥–∞–ª—è—Ç—å** –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

## –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã

> –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

### –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

\`\`\`
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
\`\`\`

**–í–∞–∂–Ω–æ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

---

*–≠—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π.*`,
        content_html: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        changelog: '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
        editor_name: '–°–∏—Å—Ç–µ–º–∞',
        published_at: new Date().toISOString()
      };

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
      demoVersion.content_html = demoVersion.content_md
        .replace(/^# (.+)$/gm, '<h1>$1</h1>')
        .replace(/^## (.+)$/gm, '<h2>$1</h2>')
        .replace(/^### (.+)$/gm, '<h3>$1</h3>')
        .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.+?)\*/g, '<em>$1</em>')
        .replace(/`([^`]+)`/g, '<code>$1</code>')
        .replace(/^> (.+)$/gm, '<blockquote>$1</blockquote>')
        .replace(/^(\d+)\. (.+)$/gm, '<li>$2</li>')
        .replace(/^---$/gm, '<hr>')
        .replace(/\n/g, '<br>');

      const { error: versionError } = await supabase
        .from('instruction_versions')
        .insert(demoVersion);

      if (versionError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤–µ—Ä—Å–∏–∏ –¥–ª—è ${topic.key}:`, versionError);
      } else {
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${topic.title}`);
      }
    }

    console.log('üéâ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
createInstructionTables().then(() => {
  console.log('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});