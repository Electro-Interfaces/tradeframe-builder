/**
 * –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è external_id —á–µ—Ä–µ–∑ SQL –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
 */

import { executeSelect } from './tools/sql-direct.js';
import https from 'https';
import url from 'url';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

/**
 * –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ REST API
 */
async function updateNetwork(id, data) {
    return new Promise((resolve, reject) => {
        const requestUrl = `${SUPABASE_URL}/rest/v1/networks?id=eq.${id}`;
        const postData = JSON.stringify(data);

        const parsedUrl = url.parse(requestUrl);
        
        const options = {
            hostname: parsedUrl.hostname,
            port: parsedUrl.port || 443,
            path: parsedUrl.path,
            method: 'PATCH',
            headers: {
                'apikey': SERVICE_KEY,
                'Authorization': `Bearer ${SERVICE_KEY}`,
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData),
                'Prefer': 'return=representation'
            }
        };

        const req = https.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    console.log('üì° HTTP Status:', res.statusCode);
                    console.log('üìù Response:', data);
                    
                    if (res.statusCode >= 200 && res.statusCode < 300) {
                        const result = data ? JSON.parse(data) : null;
                        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                        resolve(result);
                    } else {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', res.statusCode, data);
                        reject(new Error(`HTTP ${res.statusCode}: ${data}`));
                    }
                } catch (error) {
                    reject(error);
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        req.write(postData);
        req.end();
    });
}

async function main() {
    try {
        console.log('üîÑ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è external_id...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        const networks = await executeSelect('networks', { limit: 1 });
        if (networks.length === 0) {
            console.log('‚ùå –ù–µ—Ç —Å–µ—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }
        
        const network = networks[0];
        console.log(`üìã –¢–µ–∫—É—â–∞—è —Å–µ—Ç—å: ${network.name} (external_id: "${network.external_id}")`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º external_id
        const newExternalId = 'TEST_' + Date.now();
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º external_id –Ω–∞: ${newExternalId}`);
        
        const updateData = {
            external_id: newExternalId,
            updated_at: new Date().toISOString()
        };
        
        const result = await updateNetwork(network.id, updateData);
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', result);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const updatedNetworks = await executeSelect('networks', { 
            eq: { id: network.id }
        });
        
        if (updatedNetworks.length > 0) {
            const updatedNetwork = updatedNetworks[0];
            console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: external_id = "${updatedNetwork.external_id}"`);
            
            if (updatedNetwork.external_id === newExternalId) {
                console.log('üéâ –¢–µ—Å—Ç –ü–†–û–®–ï–õ! external_id –æ–±–Ω–æ–≤–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ');
            } else {
                console.log('‚ùå –¢–µ—Å—Ç –ü–†–û–í–ê–õ–ï–ù! external_id –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è');
            }
        }
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    }
}

main();