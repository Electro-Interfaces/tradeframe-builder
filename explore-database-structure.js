/**
 * üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å –∏ –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceRoleKey, {
    auth: { autoRefreshToken: false, persistSession: false }
});

function log(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    console.log(`[${timestamp}] ${icon} ${message}`);
}

async function exploreTable(tableName, description = '') {
    log(`üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${tableName} ${description}...`);
    
    try {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const { data, error } = await supabase
            .from(tableName)
            .select('*')
            .limit(5);

        if (error) {
            log(`   ‚ùå ${tableName}: ${error.message}`, 'error');
            return null;
        }

        log(`   ‚úÖ ${tableName}: ${data.length} –∑–∞–ø–∏—Å–µ–π`, 'success');
        
        if (data.length > 0) {
            const columns = Object.keys(data[0]);
            log(`   üìä –ö–æ–ª–æ–Ω–∫–∏: ${columns.join(', ')}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            log(`   üìù –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏:`);
            const example = data[0];
            Object.keys(example).forEach(key => {
                const value = example[key];
                const displayValue = value === null ? 'null' : 
                                  typeof value === 'string' ? `"${value.substring(0, 50)}${value.length > 50 ? '...' : ''}"` :
                                  value;
                log(`      ${key}: ${displayValue}`);
            });
        } else {
            log(`   üìù –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è`, 'warning');
        }

        return { tableName, data, columns: data.length > 0 ? Object.keys(data[0]) : [] };
    } catch (error) {
        log(`   ‚ùå ${tableName}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - ${error.message}`, 'error');
        return null;
    }
}

async function exploreDatabaseStructure() {
    log('üöÄ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• –î–õ–Ø –¶–ï–ü–û–ß–ö–ò –¢–û–ü–õ–ò–í–ê...\n');

    const tables = [
        { name: 'nomenclature', desc: '(—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞)' },
        { name: 'fuel_types', desc: '(–≤–æ–∑–º–æ–∂–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–æ–ø–ª–∏–≤–∞)' },
        { name: 'equipment_templates', desc: '(—à–∞–±–ª–æ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)' },
        { name: 'equipment', desc: '(—Ä–µ–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)' },
        { name: 'tanks', desc: '(—Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã)' },
        { name: 'prices', desc: '(—Ü–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ)' },
        { name: 'fuel_prices', desc: '(–≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ü–µ–Ω)' },
        { name: 'operations', desc: '(–æ–ø–µ—Ä–∞—Ü–∏–∏ - –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞)' }
    ];

    const results = {};

    for (const table of tables) {
        const result = await exploreTable(table.name, table.desc);
        if (result) {
            results[table.name] = result;
        }
        log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    }

    // –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    log('üìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–õ–Ø –¶–ï–ü–û–ß–ö–ò –¢–û–ü–õ–ò–í–ê:');
    log('=' * 60);

    // –ò—â–µ–º –ø–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∏–¥–∞–º–∏ —Ç–æ–ø–ª–∏–≤–∞
    const fuelFields = ['fuel_type', 'fuel_name', 'fuel_id', 'type', 'name', 'product_type'];
    
    Object.entries(results).forEach(([tableName, tableData]) => {
        const relevantFields = tableData.columns.filter(col => 
            fuelFields.some(fuelField => col.toLowerCase().includes(fuelField.toLowerCase()))
        );
        
        if (relevantFields.length > 0) {
            log(`üî• ${tableName}: –ü–æ–ª—è —Ç–æ–ø–ª–∏–≤–∞ - ${relevantFields.join(', ')}`, 'success');
        }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–≤—è–∑–∏
    log('\nüîó –ê–ù–ê–õ–ò–ó –í–û–ó–ú–û–ñ–ù–´–• –°–í–Ø–ó–ï–ô:');
    
    if (results.equipment_templates) {
        log('üìã –®–∞–±–ª–æ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –¥–ª—è —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞');
    }
    
    if (results.tanks) {
        log('üõ¢Ô∏è –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑—å —Å —Ç–æ–ø–ª–∏–≤–æ–º');
        if (results.tanks.data.length > 0) {
            const tankExample = results.tanks.data[0];
            const fuelRelatedFields = Object.keys(tankExample).filter(key => 
                key.toLowerCase().includes('fuel') || key.toLowerCase().includes('type') || key.toLowerCase().includes('product')
            );
            log(`   üîç –ü–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ–ø–ª–∏–≤–æ–º: ${fuelRelatedFields.join(', ')}`);
        }
    }

    return results;
}

// –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
exploreDatabaseStructure()
    .then(results => {
        log('\n‚úÖ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û', 'success');
        log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${Object.keys(results).length}`);
    })
    .catch(error => {
        log(`\nüí• –û–®–ò–ë–ö–ê –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø: ${error.message}`, 'error');
        process.exit(1);
    });