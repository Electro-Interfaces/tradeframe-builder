/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã system_config —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
 */

const API_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const API_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

async function createSystemConfigTable() {
    console.log('üóÑÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã system_config...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü–∞
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...');
        const checkResponse = await fetch(`${API_URL}/rest/v1/system_config?select=id&limit=1`, {
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (checkResponse.ok) {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ system_config —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return true;
        }
        
        if (checkResponse.status !== 404) {
            console.error(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${checkResponse.status}`);
            return false;
        }
        
        console.log('üìù –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ PostgREST –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    // –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Supabase Dashboard –∏–ª–∏ CLI
    
    console.log('');
    console.log('üõ†Ô∏è –ù–ï–û–ë–•–û–î–ò–ú–û –°–û–ó–î–ê–¢–¨ –¢–ê–ë–õ–ò–¶–£ –í–†–£–ß–ù–£–Æ');
    console.log('');
    console.log('üìã –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard:');
    console.log('https://supabase.com/dashboard/project/tohtryzyffcebtyvkxwh/sql');
    console.log('');
    console.log('üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π SQL:');
    console.log('');
    console.log('-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã system_config');
    console.log(`CREATE TABLE IF NOT EXISTS system_config (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    config_key VARCHAR(255) UNIQUE NOT NULL,
    config_value JSONB NOT NULL,
    config_type VARCHAR(50) DEFAULT 'general',
    description TEXT,
    is_encrypted BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
CREATE INDEX IF NOT EXISTS idx_system_config_key ON system_config(config_key);
CREATE INDEX IF NOT EXISTS idx_system_config_type ON system_config(config_type);

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RLS (Row Level Security)
ALTER TABLE system_config ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è service_role (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)
CREATE POLICY IF NOT EXISTS "Allow service role full access" ON system_config
    FOR ALL USING (auth.role() = 'service_role');

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
CREATE POLICY IF NOT EXISTS "Allow authenticated users to read" ON system_config
    FOR SELECT USING (auth.role() = 'authenticated');

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_system_config_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
DROP TRIGGER IF EXISTS update_system_config_updated_at ON system_config;
CREATE TRIGGER update_system_config_updated_at
    BEFORE UPDATE ON system_config
    FOR EACH ROW EXECUTE PROCEDURE update_system_config_updated_at();`);
    
    console.log('');
    console.log('üéØ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –≤ Dashboard:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
    console.log('2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node simple-create-config.js');
    console.log('');
    
    return false;
}

async function insertInitialData() {
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    const initialConfigs = [
        {
            config_key: 'database_connections',
            config_value: {
                currentConnectionId: 'supabase-main',
                debugMode: false,
                lastUpdated: new Date().toISOString(),
                availableConnections: [
                    {
                        id: 'supabase-main',
                        name: '–û—Å–Ω–æ–≤–Ω–∞—è –ë–î Supabase',
                        url: 'https://tohtryzyffcebtyvkxwh.supabase.co',
                        type: 'supabase',
                        description: '–û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏',
                        isActive: true,
                        isDefault: true,
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString(),
                        settings: {
                            timeout: 8000,
                            retryAttempts: 3,
                            ssl: true,
                            schema: 'public',
                            autoApiKey: true
                        }
                    },
                    {
                        id: 'mock-data',
                        name: '–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ (Mock)',
                        url: 'localStorage',
                        type: 'mock',
                        description: '–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                        isActive: false,
                        isDefault: false,
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString(),
                        settings: {
                            timeout: 1000,
                            retryAttempts: 3
                        }
                    }
                ]
            },
            config_type: 'database',
            description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö'
        },
        {
            config_key: 'system_settings',
            config_value: {
                systemName: 'TradeFrame',
                version: '1.0.0',
                environment: 'production',
                timezone: 'Europe/Moscow',
                language: 'ru'
            },
            config_type: 'system',
            description: '–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
        }
    ];
    
    let inserted = 0;
    
    for (const config of initialConfigs) {
        try {
            const response = await fetch(`${API_URL}/rest/v1/system_config`, {
                method: 'POST',
                headers: {
                    'apikey': API_KEY,
                    'Authorization': `Bearer ${API_KEY}`,
                    'Content-Type': 'application/json',
                    'Prefer': 'return=representation'
                },
                body: JSON.stringify(config)
            });
            
            if (response.ok) {
                const result = await response.json();
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.config_key}`);
                inserted++;
            } else {
                const error = await response.text();
                console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${config.config_key}: ${response.status} ${error}`);
            }
            
        } catch (error) {
            console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ${config.config_key}:`, error.message);
        }
    }
    
    console.log(`üìä –ò—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${inserted}/${initialConfigs.length} –∑–∞–ø–∏—Å–µ–π`);
    return inserted > 0;
}

async function main() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã system_config...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ
    try {
        const testResponse = await fetch(`${API_URL}/rest/v1/networks?select=id&limit=1`, {
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!testResponse.ok) {
            console.error(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${testResponse.status}`);
            return;
        }
        
        console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', error.message);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    const tableExists = await createSystemConfigTable();
    
    if (tableExists) {
        console.log('');
        console.log('üéâ –¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞! –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        const dataAdded = await insertInitialData();
        
        if (dataAdded) {
            console.log('');
            console.log('üéâ –ì–û–¢–û–í–û! –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            console.log('');
            console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
            console.log('- –û—Ç–∫—Ä–æ–π—Ç–µ test-new-architecture.html');
            console.log('- –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É system_config"');
            console.log('- –ó–∞–ø—É—Å—Ç–∏—Ç–µ "–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"');
        }
    }
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});