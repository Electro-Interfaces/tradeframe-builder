/**
 * –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ API –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ê–ó–° 4
 */

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

const TARGET_TRADING_POINT_ID = '6969b08d-1cbe-45c2-ae9c-8002c7022b59'; // –ê–ó–° 4

async function testApiParams() {
  console.log('üß™ –¢–ï–°–¢ API –ü–ê–†–ê–ú–ï–¢–†–û–í –î–õ–Ø –ê–ó–° 4');
  console.log('ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', TARGET_TRADING_POINT_ID);
  console.log('=====================================\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  const { data: tradingPoint, error: tpError } = await supabase
    .from('trading_points')
    .select('*')
    .eq('id', TARGET_TRADING_POINT_ID)
    .single();
    
  if (tpError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', tpError);
    return;
  }
  
  console.log('üè™ –¢–û–†–ì–û–í–ê–Ø –¢–û–ß–ö–ê:');
  console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${tradingPoint.name}`);
  console.log(`   External ID: ${tradingPoint.external_id || '–ù–ï –£–ö–ê–ó–ê–ù'}`);
  console.log(`   Code: ${tradingPoint.code || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
  console.log(`   Network ID: ${tradingPoint.network_id}`);
  
  // Station ID = external_id —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  const stationId = tradingPoint.external_id || tradingPoint.code || '';
  console.log(`   üìã Station ID (–¥–ª—è API): "${stationId}"`);
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ç–∏
  let systemId = '';
  
  if (tradingPoint.network_id) {
    console.log('\nüåê –°–ï–¢–¨:');
    
    const { data: network, error: networkError } = await supabase
      .from('networks')
      .select('*')
      .eq('id', tradingPoint.network_id)
      .single();
      
    if (networkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–∏:', networkError);
    } else {
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${network.name}`);
      console.log(`   External ID: ${network.external_id || '–ù–ï –£–ö–ê–ó–ê–ù'}`);
      
      systemId = network.external_id || network.name || '';
      console.log(`   üìã System ID (–¥–ª—è API): "${systemId}"`);
    }
  }
  
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ï API –ü–ê–†–ê–ú–ï–¢–†–´:');
  console.log('============================');
  console.log(`System (—Å–µ—Ç—å): "${systemId}"`);
  console.log(`Station (—Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞): "${stationId}"`);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const baseUrl = 'https://pos.autooplata.ru/tms';
  const endpoint = '/tanks';
  const fullUrl = `${baseUrl}${endpoint}?system=${systemId}&station=${stationId}`;
  
  console.log('\nüåê URL –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(fullUrl);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (!systemId || !stationId) {
    console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!');
    if (!systemId) {
      console.log('   - System ID (external_id —Å–µ—Ç–∏) –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    if (!stationId) {
      console.log('   - Station ID (external_id —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏) –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    console.log('\nüí° –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å external_id –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  } else {
    console.log('\n‚úÖ –í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ù–ê–ô–î–ï–ù–´ - API –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    console.log('\nüß™ –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–†–û–° –ö API:');
    console.log('---------------------------');
    
    try {
      const authString = Buffer.from('UserApi:PasswordApi').toString('base64');
      
      const response = await fetch(fullUrl, {
        method: 'GET',
        headers: {
          'Authorization': `Basic ${authString}`,
          'Accept': 'application/json',
          'User-Agent': 'tradeframe-builder/1.0'
        },
        timeout: 10000
      });
      
      console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API!');
        console.log(`üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${Array.isArray(data) ? '–º–∞—Å—Å–∏–≤' : typeof data}`);
        if (Array.isArray(data)) {
          console.log(`üõ¢Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤: ${data.length}`);
          if (data.length > 0) {
            console.log('üõ¢Ô∏è  –ü–µ—Ä–≤—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä:', JSON.stringify(data[0], null, 2));
          }
        } else {
          console.log('üìÑ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
        }
      } else {
        const errorText = await response.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞ API: ${response.status} - ${errorText}`);
      }
      
    } catch (fetchError) {
      console.log(`üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${fetchError.message}`);
    }
  }
}

testApiParams().catch(console.error);