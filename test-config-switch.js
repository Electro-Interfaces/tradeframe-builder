/**
 * –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
 */

const API_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const API_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

async function getCurrentConfig() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    try {
        const response = await fetch(`${API_URL}/rest/v1/system_config?select=*&config_key=eq.database_connections`, {
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${await response.text()}`);
        }

        const data = await response.json();
        return data[0].config_value;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
        return null;
    }
}

async function switchConnection(fromId, toId) {
    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${fromId} ‚Üí ${toId}`);
    
    try {
        const config = await getCurrentConfig();
        if (!config) return false;

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const connections = config.availableConnections.map(conn => ({
            ...conn,
            isActive: conn.id === toId
        }));

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const updatedConfig = {
            ...config,
            currentConnectionId: toId,
            availableConnections: connections,
            lastUpdated: new Date().toISOString()
        };

        const response = await fetch(`${API_URL}/rest/v1/system_config?config_key=eq.database_connections`, {
            method: 'PATCH',
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json',
                'Prefer': 'return=representation'
            },
            body: JSON.stringify({
                config_value: updatedConfig,
                updated_at: new Date().toISOString()
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${await response.text()}`);
        }

        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: ${toId}`);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', error.message);
        return false;
    }
}

async function testServiceWithConfig(serviceName, testUrl, expectedConnection) {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${serviceName}...`);
    
    try {
        const config = await getCurrentConfig();
        const activeConnection = config.availableConnections.find(c => c.id === config.currentConnectionId);
        
        if (activeConnection.id !== expectedConnection) {
            console.log(`‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ${expectedConnection}, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ ${activeConnection.id}`);
        }

        const response = await fetch(testUrl, {
            headers: {
                'apikey': activeConnection.settings?.apiKey || API_KEY,
                'Authorization': `Bearer ${activeConnection.settings?.apiKey || API_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        const result = {
            service: serviceName,
            usedConnection: activeConnection.id,
            connectionName: activeConnection.name,
            url: activeConnection.url,
            testUrl: testUrl,
            status: response.status,
            timestamp: new Date().toISOString()
        };

        console.log(`‚úÖ ${serviceName}:`, result);
        return result;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ ${serviceName}:`, error.message);
        return { service: serviceName, error: error.message };
    }
}

async function runFullConfigTest() {
    console.log('üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò');
    console.log('='.repeat(60));
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const initialConfig = await getCurrentConfig();
    if (!initialConfig) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
        return;
    }

    const initialConnection = initialConfig.currentConnectionId;
    console.log(`üìç –ò—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${initialConnection}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    const alternativeConnection = initialConfig.availableConnections.find(
        c => c.id !== initialConnection && c.type === 'supabase'
    );

    if (!alternativeConnection) {
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        console.log('\nüìä –¢–ï–°–¢–ò–†–£–ï–ú –°–ï–†–í–ò–°–´ –° –¢–ï–ö–£–©–ï–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô:');
        await testServiceWithConfig('tanks', `${API_URL}/rest/v1/tanks?limit=1`, initialConnection);
        await testServiceWithConfig('fuel_prices', `${API_URL}/rest/v1/fuel_prices?limit=1`, initialConnection);
        await testServiceWithConfig('operations', `${API_URL}/rest/v1/operations?limit=1`, initialConnection);
        await testServiceWithConfig('trading_points', `${API_URL}/rest/v1/trading_points?limit=1`, initialConnection);
        await testServiceWithConfig('equipment_templates', `${API_URL}/rest/v1/equipment_templates?limit=1`, initialConnection);
        
        return;
    }

    console.log(`üéØ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: ${alternativeConnection.id}`);

    // –®–ê–ì 1: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å –∏—Å—Ö–æ–¥–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    console.log('\nüìä –®–ê–ì 1: –¢–ï–°–¢–ò–†–£–ï–ú –°–ï–†–í–ò–°–´ –° –ò–°–•–û–î–ù–´–ú –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú');
    console.log('-'.repeat(50));
    
    const results1 = [];
    results1.push(await testServiceWithConfig('tanks', `${API_URL}/rest/v1/tanks?limit=1`, initialConnection));
    results1.push(await testServiceWithConfig('fuel_prices', `${API_URL}/rest/v1/fuel_prices?limit=1`, initialConnection));
    results1.push(await testServiceWithConfig('operations', `${API_URL}/rest/v1/operations?limit=1`, initialConnection));
    results1.push(await testServiceWithConfig('trading_points', `${API_URL}/rest/v1/trading_points?limit=1`, initialConnection));

    // –®–ê–ì 2: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\nüîÑ –®–ê–ì 2: –ü–ï–†–ï–ö–õ–Æ–ß–ê–ï–ú –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï');
    console.log('-'.repeat(50));
    
    const switchSuccess = await switchConnection(initialConnection, alternativeConnection.id);
    if (!switchSuccess) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        return;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –®–ê–ì 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å –Ω–æ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º  
    console.log('\nüìä –®–ê–ì 3: –¢–ï–°–¢–ò–†–£–ï–ú –°–ï–†–í–ò–°–´ –° –ù–û–í–´–ú –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú');
    console.log('-'.repeat(50));
    
    const results2 = [];
    results2.push(await testServiceWithConfig('tanks', `${API_URL}/rest/v1/tanks?limit=1`, alternativeConnection.id));
    results2.push(await testServiceWithConfig('fuel_prices', `${API_URL}/rest/v1/fuel_prices?limit=1`, alternativeConnection.id));
    results2.push(await testServiceWithConfig('operations', `${API_URL}/rest/v1/operations?limit=1`, alternativeConnection.id));
    results2.push(await testServiceWithConfig('trading_points', `${API_URL}/rest/v1/trading_points?limit=1`, alternativeConnection.id));

    // –®–ê–ì 4: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\n‚Ü©Ô∏è –®–ê–ì 4: –í–û–ó–í–†–ê–©–ê–ï–ú –ò–°–•–û–î–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï');
    console.log('-'.repeat(50));
    
    await switchConnection(alternativeConnection.id, initialConnection);
    console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${initialConnection}`);

    // –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    console.log('\nüìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    console.log('='.repeat(60));
    
    const allServicesUseCentralizedConfig = results1.every(r => !r.error) && results2.every(r => !r.error);
    const servicesRespondToConfigChanges = results1.every((r1, i) => {
        const r2 = results2[i];
        return r1.usedConnection !== r2.usedConnection;
    });

    console.log(`‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ${allServicesUseCentralizedConfig ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`‚úÖ –°–µ—Ä–≤–∏—Å—ã —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${servicesRespondToConfigChanges ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (allServicesUseCentralizedConfig && servicesRespondToConfigChanges) {
        console.log('\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
        console.log('üîß –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('üîÑ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    } else {
        console.log('\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
        if (!allServicesUseCentralizedConfig) {
            console.log('- –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
        }
        if (!servicesRespondToConfigChanges) {
            console.log('- –°–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        }
    }

    console.log('\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('–ò—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', results1.map(r => `${r.service}: ${r.usedConnection}`).join(', '));
    console.log('–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', results2.map(r => `${r.service}: ${r.usedConnection}`).join(', '));
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
runFullConfigTest().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
});