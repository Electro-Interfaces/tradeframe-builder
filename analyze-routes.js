import fs from 'fs';

// –ß–∏—Ç–∞–µ–º App.tsx
const content = fs.readFileSync('src/App.tsx', 'utf8');

// –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
const routeMatches = content.match(/<Route path="([^"]*)" element={<([^}]+) \/>}/g) || [];

console.log('üìä –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –†–ê–ó–î–ï–õ–û–í –ú–ï–ù–Æ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:\n');

const sections = [];

routeMatches.forEach(match => {
  const pathMatch = match.match(/path="([^"]*)"/);
  const componentMatch = match.match(/element={<([^}]+)/);
  
  if (pathMatch && componentMatch) {
    const path = pathMatch[1];
    const component = componentMatch[1].split(' ')[0]; // –£–±–∏—Ä–∞–µ–º props
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–æ—É—Ç—ã
    if (!path.includes('*') && !path.includes('login') && !path === '/') {
      sections.push({
        path: path,
        component: component,
        category: path.split('/')[1] || 'root'
      });
    }
  }
});

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const categories = {
  admin: { title: 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã', sections: [] },
  settings: { title: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã', sections: [] },
  network: { title: 'üåê –°–µ—Ç–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã', sections: [] },
  point: { title: 'üè™ –¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏', sections: [] },
  profile: { title: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', sections: [] }
};

sections.forEach(section => {
  const category = section.category;
  if (categories[category]) {
    categories[category].sections.push(section);
  } else if (section.path === '/profile') {
    categories.profile.sections.push(section);
  }
});

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
let totalSections = 0;
Object.entries(categories).forEach(([key, category]) => {
  if (category.sections.length > 0) {
    console.log(`${category.title} (${category.sections.length}):`);
    category.sections.forEach((section, i) => {
      console.log(`   ${i + 1}. ${section.path} ‚Üí ${section.component}`);
      totalSections++;
    });
    console.log('');
  }
});

console.log(`üî¢ –ò–¢–û–ì–û –†–ê–ó–î–ï–õ–û–í –ú–ï–ù–Æ: ${totalSections}`);
console.log(`\nüìã –°–ü–ò–°–û–ö –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:`);

const uniqueComponents = [...new Set(sections.map(s => s.component))].sort();
uniqueComponents.forEach((comp, i) => {
  console.log(`${i + 1}. ${comp}`);
});

console.log(`\nüî¢ –ò–¢–û–ì–û –£–ù–ò–ö–ê–õ–¨–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í: ${uniqueComponents.length}`);