#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ Telegram –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç SQL –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö TradeFrame
 */

const { Client } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const DATABASE_URL = process.env.DATABASE_URL || 
                     process.env.SUPABASE_DB_URL ||
                     (process.env.SUPABASE_URL ? 
                       `postgresql://postgres:${process.env.SUPABASE_SERVICE_ROLE_KEY}@db.${process.env.SUPABASE_URL.split('//')[1].split('.')[0]}.supabase.co:5432/postgres` :
                       null);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if (!DATABASE_URL) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:');
  console.log('  - DATABASE_URL');
  console.log('  - SUPABASE_DB_URL');
  console.log('  - VITE_SUPABASE_URL (—Å –ø–∞—Ä–æ–ª–µ–º)');
  process.exit(1);
}

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–∏–≥—Ä–∞—Ü–∏–∏
const migrationFile = path.join(__dirname, 'create-telegram-verification-tables.sql');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
if (!fs.existsSync(migrationFile)) {
  console.error('‚ùå –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', migrationFile);
  process.exit(1);
}

console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ Telegram –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
console.log('üìÑ –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏:', migrationFile);
console.log('üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', DATABASE_URL.replace(/(:\/\/[^:]+:)[^@]+(@)/, '$1***$2'));

async function runMigration() {
  const client = new Client({
    connectionString: DATABASE_URL,
    ssl: DATABASE_URL.includes('supabase.co') ? { rejectUnauthorized: false } : false
  });

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    const migrationSQL = fs.readFileSync(migrationFile, 'utf8');

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    const result = await client.query(migrationSQL);
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤...');
    
    const tablesQuery = `
      SELECT table_name, table_type 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('telegram_verification_codes')
      ORDER BY table_name;
    `;
    
    const tables = await client.query(tablesQuery);
    console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    tables.rows.forEach(row => {
      console.log(`   ‚úì ${row.table_name} (${row.table_type})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const functionsQuery = `
      SELECT routine_name, routine_type
      FROM information_schema.routines
      WHERE routine_schema = 'public'
      AND routine_name LIKE '%telegram%'
      ORDER BY routine_name;
    `;
    
    const functions = await client.query(functionsQuery);
    if (functions.rows.length > 0) {
      console.log('üîß –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
      functions.rows.forEach(row => {
        console.log(`   ‚úì ${row.routine_name}() (${row.routine_type})`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    const indexesQuery = `
      SELECT indexname, tablename
      FROM pg_indexes
      WHERE schemaname = 'public'
      AND (indexname LIKE '%telegram%' OR tablename = 'telegram_verification_codes')
      ORDER BY tablename, indexname;
    `;
    
    const indexes = await client.query(indexesQuery);
    if (indexes.rows.length > 0) {
      console.log('üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã:');
      indexes.rows.forEach(row => {
        console.log(`   ‚úì ${row.indexname} –Ω–∞ ${row.tablename}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users
    console.log('üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü—ã users...');
    
    const userColumnsQuery = `
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns
      WHERE table_schema = 'public'
      AND table_name = 'users'
      AND column_name LIKE 'telegram%'
      ORDER BY column_name;
    `;
    
    const userColumns = await client.query(userColumnsQuery);
    if (userColumns.rows.length > 0) {
      console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ users:');
      userColumns.rows.forEach(row => {
        console.log(`   ‚úì ${row.column_name} (${row.data_type}, nullable: ${row.is_nullable})`);
      });
    } else {
      console.log('‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ users');
    }

    // –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...');
    
    try {
      const testResult = await client.query(
        'SELECT generate_verification_code($1) as code',
        ['00000000-0000-0000-0000-000000000000'] // –¢–µ—Å—Ç–æ–≤—ã–π UUID
      );
      
      if (testResult.rows[0]?.code) {
        console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω: ${testResult.rows[0].code}`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
        await client.query(
          'DELETE FROM telegram_verification_codes WHERE verification_code = $1',
          [testResult.rows[0].code]
        );
        console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω');
      }
    } catch (testError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, user —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç):', testError.message);
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    
    const statsQuery = `
      SELECT 
        (SELECT COUNT(*) FROM telegram_verification_codes) as verification_codes_count,
        (SELECT COUNT(*) FROM users WHERE telegram_chat_id IS NOT NULL) as users_with_telegram,
        (SELECT COUNT(*) FROM users WHERE telegram_notifications_enabled = true) as users_notifications_enabled
    `;
    
    const stats = await client.query(statsQuery);
    const stat = stats.rows[0];
    
    console.log(`   ‚Ä¢ –ö–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ë–î: ${stat.verification_codes_count}`);
    console.log(`   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram: ${stat.users_with_telegram}`);  
    console.log(`   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: ${stat.users_notifications_enabled}`);
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞ (—Å–º. telegram-bot-setup.md)');
    console.log('   2. –û–±–Ω–æ–≤–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
    console.log('   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      console.log('   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π DATABASE_URL');
      console.log('   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
    } else if (error.code === '28000') {
      console.log('\nüí° –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π:');
      console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ DATABASE_URL');
      console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü');
    } else if (error.code === '42P01') {
      console.log('\nüí° –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–±–ª–∏—Ü–∞:');
      console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
    
    process.exit(1);
    
  } finally {
    await client.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
runMigration().catch(console.error);

console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
console.log(`   DATABASE_URL: ${DATABASE_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
console.log('');