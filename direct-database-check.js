/**
 * –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
 */

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

async function checkDatabase() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏...');
        const operationsResponse = await fetch(`${supabaseUrl}/rest/v1/operations?limit=10`, {
            headers: {
                'apikey': serviceKey,
                'Authorization': `Bearer ${serviceKey}`
            }
        });
        
        if (operationsResponse.ok) {
            const operations = await operationsResponse.json();
            console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ:', operations.length);
            console.log('üìä –û–±—Ä–∞–∑—Ü—ã –æ–ø–µ—Ä–∞—Ü–∏–π:', operations.slice(0, 3).map(op => ({
                id: op.id,
                trading_point_id: op.trading_point_id,
                trading_point_id_type: typeof op.trading_point_id,
                status: op.status,
                total_cost: op.total_cost
            })));
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:', operationsResponse.status);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏
        console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏...');
        const tradingPointsResponse = await fetch(`${supabaseUrl}/rest/v1/trading_points?limit=10`, {
            headers: {
                'apikey': serviceKey,
                'Authorization': `Bearer ${serviceKey}`
            }
        });
        
        if (tradingPointsResponse.ok) {
            const tradingPoints = await tradingPointsResponse.json();
            console.log('‚úÖ –¢–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞–π–¥–µ–Ω–æ:', tradingPoints.length);
            console.log('üìä –û–±—Ä–∞–∑—Ü—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫:', tradingPoints.slice(0, 3).map(tp => ({
                id: tp.id,
                id_type: typeof tp.id,
                name: tp.name,
                network_id: tp.network_id
            })));
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫:', tradingPointsResponse.status);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
        console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...');
        const completedOpsResponse = await fetch(`${supabaseUrl}/rest/v1/operations?status=eq.completed&limit=20`, {
            headers: {
                'apikey': serviceKey,
                'Authorization': `Bearer ${serviceKey}`
            }
        });
        
        if (completedOpsResponse.ok) {
            const completedOps = await completedOpsResponse.json();
            console.log('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ:', completedOps.length);
            
            const withTradingPoint = completedOps.filter(op => op.trading_point_id);
            console.log('üìç –û–ø–µ—Ä–∞—Ü–∏–π —Å trading_point_id:', withTradingPoint.length);
            
            if (withTradingPoint.length > 0) {
                const tradingPointStats = {};
                withTradingPoint.forEach(op => {
                    const tpId = op.trading_point_id;
                    tradingPointStats[tpId] = (tradingPointStats[tpId] || 0) + 1;
                });
                
                console.log('üìä –û–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º:', tradingPointStats);
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–µ—Ä–≤–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ
                const firstTradingPointId = Object.keys(tradingPointStats)[0];
                if (firstTradingPointId) {
                    console.log(`\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ ${firstTradingPointId}...`);
                    
                    const filteredResponse = await fetch(`${supabaseUrl}/rest/v1/operations?status=eq.completed&trading_point_id=eq.${firstTradingPointId}`, {
                        headers: {
                            'apikey': serviceKey,
                            'Authorization': `Bearer ${serviceKey}`
                        }
                    });
                    
                    if (filteredResponse.ok) {
                        const filteredOps = await filteredResponse.json();
                        console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π:', filteredOps.length);
                        console.log('üí∞ –û–±—â–∞—è —Å—É–º–º–∞:', filteredOps.reduce((sum, op) => sum + (op.total_cost || 0), 0));
                        
                        if (filteredOps.length === 0) {
                            console.log('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –æ–ø–µ—Ä–∞—Ü–∏–π, —Ö–æ—Ç—è –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å');
                        }
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filteredResponse.status);
                    }
                }
            } else {
                console.log('üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–∏ –æ–¥–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –∏–º–µ–µ—Ç trading_point_id!');
            }
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:', completedOpsResponse.status);
        }
        
        console.log('\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫
checkDatabase().catch(console.error);