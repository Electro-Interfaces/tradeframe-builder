// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ UUID –≤—Å–µ—Ö –ê–ó–°
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

function collectAllAZSUuids() {
  console.log('üîç –°–±–æ—Ä UUID –≤—Å–µ—Ö –ê–ó–°...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const tradingPointsData = localStorage.getItem('trading_points');
    
    if (!tradingPointsData) {
      console.error('‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage');
      return null;
    }
    
    const tradingPoints = JSON.parse(tradingPointsData);
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${tradingPoints.length} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ê–ó–°
    const azsPoints = tradingPoints
      .filter(tp => tp.name && (tp.name.includes('–ê–ó–°') || tp.name.includes('‚Ññ')))
      .sort((a, b) => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const numA = parseInt(a.name.match(/‚Ññ(\d+)/)?.[1] || '0');
        const numB = parseInt(b.name.match(/‚Ññ(\d+)/)?.[1] || '0');
        return numA - numB;
      });
    
    console.log(`üè™ –ù–∞–π–¥–µ–Ω–æ ${azsPoints.length} –ê–ó–°:`);
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –ê–ó–°
    azsPoints.forEach((azs, i) => {
      console.log(`${i+1}. ${azs.name} - UUID: ${azs.id}`);
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –º–∞–ø–ø–∏–Ω–≥–∞
    console.log('\nüîß –ö–û–î –î–õ–Ø tradingNetworkAPI.ts:');
    console.log('const stationToUuidMapping: Record<number, string> = {');
    azsPoints.forEach((azs, i) => {
      const stationNumber = i + 1;
      console.log(`  ${stationNumber}: '${azs.id}',   // ${azs.name}`);
    });
    console.log('};');
    
    console.log('\nüîß –ö–û–î –î–õ–Ø pricesCache.ts:');
    console.log('const uuidToStationMapping: Record<string, number> = {');
    azsPoints.forEach((azs, i) => {
      const stationNumber = i + 1;
      console.log(`  '${azs.id}': ${stationNumber},   // ${azs.name}`);
    });
    console.log('};');
    
    return azsPoints;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ UUID:', error);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
const result = collectAllAZSUuids();

if (result && result.length > 0) {
  console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.length} –ê–ó–°. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –º–∞–ø–ø–∏–Ω–≥–∞ –≤—ã—à–µ.`);
  
  // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  window.foundAZSList = result;
  console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ window.foundAZSList');
} else {
  console.log('‚ùå –ê–ó–° –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
}