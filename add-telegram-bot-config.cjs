#!/usr/bin/env node

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –±–æ—Ç–∞ –≤ system_config
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceRoleKey, {
  auth: { autoRefreshToken: false, persistSession: false }
});

async function addTelegramBotConfig() {
  console.log('ü§ñ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –±–æ—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É...');
  
  try {
    // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    console.log('1Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞...');
    const { error: tokenError } = await supabase
      .from('system_config')
      .upsert({
        config_key: 'telegram_bot_token',
        config_value: '8162072057:AAGGbs9LH9kGSwauKh4B0LsbJY3xvX-tNOs',
        config_type: 'telegram',
        description: '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        is_encrypted: false
      });
    
    if (tokenError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', tokenError.message);
    } else {
      console.log('‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω');
    }
    
    // 2. Username –±–æ—Ç–∞
    console.log('2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º username –±–æ—Ç–∞...');
    const { error: usernameError } = await supabase
      .from('system_config')
      .upsert({
        config_key: 'telegram_bot_username',
        config_value: '@TradeControl_DW_Export_Bot',
        config_type: 'telegram',
        description: 'Username Telegram –±–æ—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ',
        is_encrypted: false
      });
    
    if (usernameError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è username:', usernameError.message);
    } else {
      console.log('‚úÖ Username –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω');
    }
    
    // 3. –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    console.log('3Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
    const telegramSettings = {
      enabled: true,
      botToken: '8162072057:AAGGbs9LH9kGSwauKh4B0LsbJY3xvX-tNOs',
      botUsername: '@TradeControl_DW_Export_Bot',
      botId: '8162072057',
      verificationEnabled: true,
      notificationsEnabled: true,
      codeExpiryMinutes: 15,
      maxRetries: 3,
      webhookUrl: null,
      pollingEnabled: true
    };
    
    const { error: settingsError } = await supabase
      .from('system_config')
      .upsert({
        config_key: 'telegram_integration',
        config_value: telegramSettings,
        config_type: 'integration',
        description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        is_encrypted: false
      });
    
    if (settingsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', settingsError.message);
    } else {
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }
    
    // 4. –û–±–Ω–æ–≤–ª—è–µ–º api_settings
    console.log('4Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º api_settings...');
    const { data: currentApiSettings } = await supabase
      .from('system_config')
      .select('config_value')
      .eq('config_key', 'api_settings')
      .single();
    
    if (currentApiSettings) {
      const updatedApiSettings = {
        ...currentApiSettings.config_value,
        telegram: {
          botToken: '8162072057:AAGGbs9LH9kGSwauKh4B0LsbJY3xvX-tNOs',
          botUsername: '@TradeControl_DW_Export_Bot',
          enabled: true
        }
      };
      
      const { error: apiUpdateError } = await supabase
        .from('system_config')
        .update({
          config_value: updatedApiSettings,
          updated_at: new Date().toISOString()
        })
        .eq('config_key', 'api_settings');
      
      if (apiUpdateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è api_settings:', apiUpdateError.message);
      } else {
        console.log('‚úÖ api_settings –æ–±–Ω–æ–≤–ª–µ–Ω —Å Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    const { data: telegramConfigs } = await supabase
      .from('system_config')
      .select('*')
      .or('config_key.ilike.%telegram%,config_type.eq.telegram,config_type.eq.integration')
      .order('config_key');
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${telegramConfigs?.length || 0}`);
    telegramConfigs?.forEach(config => {
      console.log(`   ‚úÖ ${config.config_key} (${config.config_type})`);
      console.log(`      üìù ${config.description}`);
    });
    
    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É!');
    console.log('\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    console.log('4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

addTelegramBotConfig().catch(console.error);