/**
 * üîó –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ —Å–≤—è–∑–µ–π —Ç–æ–ø–ª–∏–≤–∞
 * 
 * –†–ï–ê–õ–¨–ù–ê–Ø –¶–ï–ü–û–ß–ö–ê:
 * fuel_types ‚Üí tanks.fuel_type_id ‚Üí operations.fuel_type
 * nomenclature (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫)
 * equipment (—Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã fuel_tank –±–µ–∑ –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏ —Å –≤–∏–¥–æ–º —Ç–æ–ø–ª–∏–≤–∞ –≤ —à–∞–±–ª–æ–Ω–∞—Ö)
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceRoleKey, {
    auth: { autoRefreshToken: false, persistSession: false }
});

function log(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    console.log(`[${timestamp}] ${icon} ${message}`);
}

async function analyzeRealFuelChain() {
    log('üîó –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ô –¶–ï–ü–û–ß–ö–ò –°–í–Ø–ó–ï–ô –¢–û–ü–õ–ò–í–ê –í –î–ï–ú–û –°–ï–¢–ò –ê–ó–°...\n');
    
    const chainData = {
        fuelTypes: [],
        nomenclature: [],
        tanks: [],
        equipment: [],
        operations: []
    };
    
    try {
        // 1. –°–ü–†–ê–í–û–ß–ù–ò–ö –í–ò–î–û–í –¢–û–ü–õ–ò–í–ê (fuel_types)
        log('üî• 1. –ó–ê–ì–†–£–ó–ö–ê –°–ü–†–ê–í–û–ß–ù–ò–ö–ê fuel_types...');
        const { data: fuelTypes } = await supabase
            .from('fuel_types')
            .select('*');
        chainData.fuelTypes = fuelTypes || [];
        
        log(`   ‚úÖ –í–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –≤ fuel_types: ${chainData.fuelTypes.length}`, 'success');
        chainData.fuelTypes.forEach(fuel => {
            log(`      ‚Ä¢ ${fuel.name} (${fuel.code}) - ${fuel.category}`);
        });

        // 2. –°–ü–†–ê–í–û–ß–ù–ò–ö –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–´ (nomenclature)
        log('\nüìö 2. –ó–ê–ì–†–£–ó–ö–ê –°–ü–†–ê–í–û–ß–ù–ò–ö–ê nomenclature...');
        const { data: nomenclature } = await supabase
            .from('nomenclature')
            .select('*');
        chainData.nomenclature = nomenclature || [];
        
        log(`   ‚úÖ –í–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –≤ nomenclature: ${chainData.nomenclature.length}`, 'success');
        chainData.nomenclature.forEach(fuel => {
            log(`      ‚Ä¢ ${fuel.name} (${fuel.internal_code})`);
        });

        // 3. –†–ï–ó–ï–†–í–£–ê–†–´ (tanks) - –æ—Å–Ω–æ–≤–Ω–∞—è —Å–≤—è–∑—å —á–µ—Ä–µ–∑ fuel_type_id
        log('\nüõ¢Ô∏è 3. –ó–ê–ì–†–£–ó–ö–ê –†–ï–ó–ï–†–í–£–ê–†–û–í tanks...');
        const { data: tanks } = await supabase
            .from('tanks')
            .select('*');
        chainData.tanks = tanks || [];
        
        log(`   ‚úÖ –†–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤: ${chainData.tanks.length}`, 'success');
        chainData.tanks.forEach(tank => {
            log(`      ‚Ä¢ ${tank.name}: fuel_type_id=${tank.fuel_type_id || '–ù–ï –£–ö–ê–ó–ê–ù'}`);
        });

        // 4. –û–ë–û–†–£–î–û–í–ê–ù–ò–ï (equipment) - —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –∫–∞–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        log('\nüè≠ 4. –ó–ê–ì–†–£–ó–ö–ê –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø equipment (—Ç–∏–ø fuel_tank)...');
        const { data: equipment } = await supabase
            .from('equipment')
            .select('*')
            .eq('system_type', 'fuel_tank');
        chainData.equipment = equipment || [];
        
        log(`   ‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä: ${chainData.equipment.length}`, 'success');
        chainData.equipment.forEach(equip => {
            log(`      ‚Ä¢ ${equip.display_name}`);
        });

        // 5. –û–ü–ï–†–ê–¶–ò–ò (operations) - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞
        log('\nüí∞ 5. –ó–ê–ì–†–£–ó–ö–ê –û–ü–ï–†–ê–¶–ò–ô operations (–ø—Ä–∏–º–µ—Ä)...');
        const { data: operations } = await supabase
            .from('operations')
            .select('fuel_type')
            .limit(20);
        chainData.operations = operations || [];
        
        const operationsFuels = [...new Set(chainData.operations.map(op => op.fuel_type).filter(Boolean))];
        log(`   ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö: ${operationsFuels.length}`, 'success');
        operationsFuels.forEach(fuel => {
            log(`      ‚Ä¢ ${fuel}`);
        });

        // 6. –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô
        log('\nüîç –ê–ù–ê–õ–ò–ó –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –°–í–Ø–ó–ï–ô:');
        log('=' * 50);
        
        const issues = [];
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const fuelTypeNames = new Set(chainData.fuelTypes.map(f => f.name));
        const fuelTypeCodes = new Set(chainData.fuelTypes.map(f => f.code));
        const fuelTypeIds = new Set(chainData.fuelTypes.map(f => f.id));
        const nomenclatureNames = new Set(chainData.nomenclature.map(n => n.name));
        const tankFuelTypeIds = new Set(chainData.tanks.map(t => t.fuel_type_id).filter(Boolean));
        const operationFuels = new Set(operationsFuels);

        log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú:');
        log(`üîπ fuel_types: ${fuelTypeNames.size} –≤–∏–¥–æ–≤ (${Array.from(fuelTypeNames).join(', ')})`);
        log(`üîπ nomenclature: ${nomenclatureNames.size} –≤–∏–¥–æ–≤ (${Array.from(nomenclatureNames).join(', ')})`);
        log(`üîπ tanks —Å fuel_type_id: ${tankFuelTypeIds.size} —Å–≤—è–∑–µ–π`);
        log(`üîπ operations: ${operationFuels.size} –≤–∏–¥–æ–≤ (${Array.from(operationFuels).join(', ')})`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –¥–æ–ª–∂–Ω—ã —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ fuel_types
        log('\nüîç –ü–†–û–í–ï–†–ö–ê 1: –°–≤—è–∑—å tanks.fuel_type_id ‚Üí fuel_types.id');
        let tanksFuelMismatches = 0;
        chainData.tanks.forEach(tank => {
            if (tank.fuel_type_id) {
                if (!fuelTypeIds.has(tank.fuel_type_id)) {
                    issues.push(`‚ùå –†–µ–∑–µ—Ä–≤—É–∞—Ä "${tank.name}" —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π fuel_type_id: ${tank.fuel_type_id}`);
                    tanksFuelMismatches++;
                } else {
                    const fuelType = chainData.fuelTypes.find(f => f.id === tank.fuel_type_id);
                    log(`   ‚úÖ ${tank.name} ‚Üí ${fuelType ? fuelType.name : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                }
            } else {
                issues.push(`‚ö†Ô∏è –†–µ–∑–µ—Ä–≤—É–∞—Ä "${tank.name}" –Ω–µ –∏–º–µ–µ—Ç fuel_type_id`);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ nomenclature –∏ fuel_types
        log('\nüîç –ü–†–û–í–ï–†–ö–ê 2: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ nomenclature ‚Üî fuel_types');
        const nomenclatureNotInFuelTypes = [...nomenclatureNames].filter(name => !fuelTypeNames.has(name));
        const fuelTypesNotInNomenclature = [...fuelTypeNames].filter(name => !nomenclatureNames.has(name));
        
        if (nomenclatureNotInFuelTypes.length > 0) {
            issues.push(`‚ö†Ô∏è –í nomenclature –µ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ fuel_types: ${nomenclatureNotInFuelTypes.join(', ')}`);
        }
        if (fuelTypesNotInNomenclature.length > 0) {
            issues.push(`‚ö†Ô∏è –í fuel_types –µ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ nomenclature: ${fuelTypesNotInNomenclature.join(', ')}`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –û–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞
        log('\nüîç –ü–†–û–í–ï–†–ö–ê 3: –í–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö');
        const operationsUnknownFuels = [...operationFuels].filter(fuel => !fuelTypeNames.has(fuel));
        if (operationsUnknownFuels.length > 0) {
            issues.push(`‚ùå –û–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞: ${operationsUnknownFuels.join(', ')}`);
        }

        // 7. –†–ï–ó–£–õ–¨–¢–ê–¢–´
        log('\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        log('=' * 50);
        
        if (issues.length === 0) {
            log('üéâ –í–°–ï –°–í–Ø–ó–ò –í –¶–ï–ü–û–ß–ö–ï –ö–û–†–†–ï–ö–¢–ù–´!', 'success');
            log('‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–ª–∏–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', 'success');
        } else {
            log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issues.length}`, 'warning');
            issues.forEach(issue => log(issue, 'warning'));
        }

        // 8. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ê–†–•–ò–¢–ï–ö–¢–£–†–ï
        log('\nüí° –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        log('1. üìù –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫: fuel_types (—Å ID –¥–ª—è —Å–≤—è–∑–µ–π)');
        log('2. üîó –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –¥–æ–ª–∂–Ω—ã —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ fuel_types —á–µ—Ä–µ–∑ fuel_type_id');
        log('3. üí∞ –¶–µ–Ω—ã —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∫ fuel_type_id –∏–∑ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤');
        log('4. ‚öñÔ∏è nomenclature –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è API');

        return {
            success: issues.length === 0,
            data: chainData,
            issues: issues,
            statistics: {
                fuelTypes: fuelTypeNames.size,
                nomenclature: nomenclatureNames.size,
                tanksWithFuelType: chainData.tanks.filter(t => t.fuel_type_id).length,
                operationFuels: operationFuels.size
            }
        };

    } catch (error) {
        log(`üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`, 'error');
        return { success: false, error: error.message };
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeRealFuelChain()
    .then(result => {
        if (result.success) {
            log('\n‚úÖ –ê–ù–ê–õ–ò–ó –¶–ï–ü–û–ß–ö–ò –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û', 'success');
        } else {
            log('\n‚ö†Ô∏è –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –° –ó–ê–ú–ï–ß–ê–ù–ò–Ø–ú–ò', 'warning');
        }
        
        if (result.statistics) {
            log(`\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: fuel_types=${result.statistics.fuelTypes}, tanks_linked=${result.statistics.tanksWithFuelType}, operations=${result.statistics.operationFuels}`);
        }
    })
    .catch(error => {
        log(`\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`, 'error');
        process.exit(1);
    });