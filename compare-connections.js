/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: —á—Ç–æ –±—ã–ª–æ –≤ apiConfigService VS —á—Ç–æ –ø–æ–ø–∞–ª–æ –≤ –ë–î
 */

const API_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const API_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

// –ò—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ apiConfigService.ts
const originalConnections = [
    {
        id: 'mock',
        name: 'Mock Data (–î–µ–º–æ)',
        url: 'localStorage',
        type: 'mock',
        description: '–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤ localStorage',
        isActive: false,
        isDefault: false,
        settings: {
            timeout: 1000,
            retryAttempts: 3
        }
    },
    {
        id: 'local-db',
        name: '–õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î',
        url: 'http://localhost:3001/api/v1',
        type: 'postgresql',
        description: '–õ–æ–∫–∞–ª—å–Ω–∞—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
        isActive: false,
        isDefault: true,
        settings: {
            timeout: 5000,
            retryAttempts: 3,
            poolSize: 10,
            ssl: false
        }
    },
    {
        id: 'prod-db',
        name: '–ü—Ä–æ–¥–∞–∫—à–Ω –ë–î',
        url: 'https://api.tradeframe.production.com/v1',
        type: 'postgresql',
        description: '–ü—Ä–æ–¥–∞–∫—à–Ω PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
        isActive: false,
        isDefault: false,
        settings: {
            timeout: 10000,
            retryAttempts: 5,
            poolSize: 20,
            ssl: true
        }
    },
    {
        id: 'supabase-db',
        name: 'Supabase –ë–î',
        url: 'https://tohtryzyffcebtyvkxwh.supabase.co',
        type: 'supabase',
        description: 'Supabase PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å REST API (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç)',
        isActive: true,
        isDefault: false,
        settings: {
            timeout: 8000,
            retryAttempts: 3,
            ssl: true,
            apiKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY',
            serviceRoleKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY',
            schema: 'public',
            autoApiKey: true
        }
    },
    {
        id: 'trading-network-api',
        name: 'API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏',
        url: 'https://pos.autooplata.ru/tms/',
        type: 'external-api',
        description: '–í–Ω–µ—à–Ω–∏–π API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å POS-—Å–∏—Å—Ç–µ–º–æ–π',
        isActive: false,
        isDefault: false,
        settings: {
            timeout: 10000,
            retryAttempts: 3,
            ssl: true,
            authType: 'basic',
            username: 'UserApi',
            password: 'lHQfLZHzB3tn'
        }
    }
];

async function getConnectionsFromDB() {
    console.log('üóÑÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        const response = await fetch(`${API_URL}/rest/v1/system_config?select=*&config_key=eq.database_connections`, {
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${await response.text()}`);
        }
        
        const data = await response.json();
        
        if (data.length === 0) {
            console.log('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è database_connections –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î');
            return null;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è database_connections –≤ –ë–î`);
        return data[0].config_value.availableConnections || [];
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î:', error.message);
        return null;
    }
}

function compareConnections(original, db) {
    console.log('\nüìã –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô:\n');
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞
    const originalMap = new Map(original.map(conn => [conn.id, conn]));
    const dbMap = new Map(db.map(conn => [conn.id, conn]));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –µ—Å—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ
    console.log('üìå –ò–°–•–û–î–ù–´–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø (–∏–∑ apiConfigService.ts):');
    original.forEach((conn, i) => {
        console.log(`${i + 1}. ${conn.id} - "${conn.name}" (${conn.type})`);
        console.log(`   URL: ${conn.url}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${conn.description}`);
        console.log(`   –ê–∫—Ç–∏–≤–Ω–æ: ${conn.isActive}, –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${conn.isDefault}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (conn.settings) {
            console.log(`   –ù–∞—Å—Ç—Ä–æ–π–∫–∏:`);
            Object.entries(conn.settings).forEach(([key, value]) => {
                if (key.includes('password') || key.includes('Key')) {
                    console.log(`     ${key}: ${typeof value === 'string' ? value.substring(0, 20) + '...' : value}`);
                } else {
                    console.log(`     ${key}: ${value}`);
                }
            });
        }
        console.log('');
    });
    
    console.log('\nüóÑÔ∏è –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
    db.forEach((conn, i) => {
        console.log(`${i + 1}. ${conn.id} - "${conn.name}" (${conn.type})`);
        console.log(`   URL: ${conn.url}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${conn.description}`);
        console.log(`   –ê–∫—Ç–∏–≤–Ω–æ: ${conn.isActive}, –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${conn.isDefault}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (conn.settings) {
            console.log(`   –ù–∞—Å—Ç—Ä–æ–π–∫–∏:`);
            Object.entries(conn.settings).forEach(([key, value]) => {
                if (key.includes('password') || key.includes('Key')) {
                    console.log(`     ${key}: ${typeof value === 'string' ? value.substring(0, 20) + '...' : value}`);
                } else {
                    console.log(`     ${key}: ${value}`);
                }
            });
        }
        console.log('');
    });
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –†–ê–ó–õ–ò–ß–ò–ô:\n');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –ë–î
    const missingInDB = original.filter(conn => !dbMap.has(conn.id));
    if (missingInDB.length > 0) {
        console.log('‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –í –ë–î:');
        missingInDB.forEach(conn => {
            console.log(`   - ${conn.id}: ${conn.name} (${conn.type})`);
        });
        console.log('');
    }
    
    // –ù–æ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –ë–î
    const newInDB = db.filter(conn => !originalMap.has(conn.id));
    if (newInDB.length > 0) {
        console.log('‚ú® –ù–û–í–´–ï –í –ë–î:');
        newInDB.forEach(conn => {
            console.log(`   + ${conn.id}: ${conn.name} (${conn.type})`);
        });
        console.log('');
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –æ—Ç–ª–∏—á–∏—è–º–∏
    console.log('üîÑ –†–ê–ó–õ–ò–ß–ò–Ø –í –ù–ê–°–¢–†–û–ô–ö–ê–•:');
    let hasDifferences = false;
    
    original.forEach(origConn => {
        const dbConn = dbMap.get(origConn.id);
        if (dbConn) {
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            const fieldsToCompare = ['name', 'url', 'type', 'description', 'isActive', 'isDefault'];
            
            fieldsToCompare.forEach(field => {
                if (origConn[field] !== dbConn[field]) {
                    console.log(`   ${origConn.id}.${field}: "${origConn[field]}" ‚Üí "${dbConn[field]}"`);
                    hasDifferences = true;
                }
            });
            
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (origConn.settings && dbConn.settings) {
                const origSettings = origConn.settings;
                const dbSettings = dbConn.settings;
                
                // –í—Å–µ –∫–ª—é—á–∏ –∏–∑ –æ–±–æ–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                const allSettingsKeys = new Set([
                    ...Object.keys(origSettings),
                    ...Object.keys(dbSettings)
                ]);
                
                allSettingsKeys.forEach(key => {
                    if (origSettings[key] !== dbSettings[key]) {
                        const origValue = key.includes('password') || key.includes('Key') 
                            ? (origSettings[key] ? `${origSettings[key].toString().substring(0, 20)}...` : 'undefined')
                            : origSettings[key];
                        const dbValue = key.includes('password') || key.includes('Key') 
                            ? (dbSettings[key] ? `${dbSettings[key].toString().substring(0, 20)}...` : 'undefined')
                            : dbSettings[key];
                        console.log(`   ${origConn.id}.settings.${key}: "${origValue}" ‚Üí "${dbValue}"`);
                        hasDifferences = true;
                    }
                });
            }
        }
    });
    
    if (!hasDifferences && missingInDB.length === 0) {
        console.log('   ‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—á–Ω—ã');
    }
    
    return {
        totalOriginal: original.length,
        totalDB: db.length,
        missing: missingInDB.length,
        new: newInDB.length,
        identical: !hasDifferences && missingInDB.length === 0
    };
}

async function main() {
    console.log('üîç –ê–ù–ê–õ–ò–ó –ú–ò–ì–†–ê–¶–ò–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô');
    console.log('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: apiConfigService.ts ‚Üí system_config (–ë–î)');
    console.log('=====================================');
    
    const dbConnections = await getConnectionsFromDB();
    
    if (!dbConnections) {
        console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ë–î');
        console.log('üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('1. –¢–∞–±–ª–∏—Ü–∞ system_config –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
        console.log('2. –ó–∞–ø–∏—Å—å database_connections –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        console.log('3. –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ë–î');
        return;
    }
    
    const analysis = compareConnections(originalConnections, dbConnections);
    
    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`–ò—Å—Ö–æ–¥–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${analysis.totalOriginal}`);
    console.log(`–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${analysis.totalDB}`);
    console.log(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î: ${analysis.missing}`);
    console.log(`–ù–æ–≤—ã—Ö –≤ –ë–î: ${analysis.new}`);
    console.log(`–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–Ω—ã: ${analysis.identical ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (analysis.missing > 0) {
        console.log('\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–ï–ô–°–¢–í–ò–ï:');
        console.log('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ë–î.');
        console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ system_config.');
    } else if (analysis.identical) {
        console.log('\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê:');
        console.log('–í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
    } else {
        console.log('\nüîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ù–ê:');
        console.log('–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
    }
}

main().catch(error => {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
    process.exit(1);
});