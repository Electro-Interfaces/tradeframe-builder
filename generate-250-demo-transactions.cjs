const fs = require('fs');

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 250 –¥–µ–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–µ—Ç–∏ –ê–ó–° –∑–∞ –∞–≤–≥—É—Å—Ç 2025
console.log('üè≠ –°–æ–∑–¥–∞–µ–º 250 –¥–µ–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–µ—Ç–∏ –ê–ó–°...');

// –í–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
const fuelTypes = [
  { type: '–ê–ò-92', price: 58.20, weight: 25, tankCapacity: 50000 },  // 25% –ø—Ä–æ–¥–∞–∂
  { type: '–ê–ò-95', price: 63.80, weight: 40, tankCapacity: 60000 },  // 40% –ø—Ä–æ–¥–∞–∂
  { type: '–ê–ò-98', price: 67.50, weight: 10, tankCapacity: 30000 },  // 10% –ø—Ä–æ–¥–∞–∂
  { type: '–î–¢', price: 59.50, weight: 20, tankCapacity: 50000 },     // 20% –ø—Ä–æ–¥–∞–∂
  { type: '–ê–ò-100', price: 68.50, weight: 5, tankCapacity: 25000 }   // 5% –ø—Ä–æ–¥–∞–∂
];

// –í–∏–¥—ã –æ–ø–ª–∞—Ç—ã —Å –≤–µ—Å–∞–º–∏
const paymentMethods = [
  { method: 'cash', name: '–ù–∞–ª–∏—á–Ω—ã–µ', weight: 20 },
  { method: 'bank_card', name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã', weight: 45 },
  { method: 'fuel_card', name: '–¢–æ–ø–ª–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã', weight: 30 },
  { method: 'online_order', name: '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã', weight: 5 }
];

// –î–µ–º–æ —Å–µ—Ç—å –ê–ó–°
const stations = [
  { id: 'station_01', toNumber: '001', name: '–ê–ó–° ‚Ññ1 –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è', pumps: 8, posTerminals: 4 },
  { id: 'station_02', toNumber: '002', name: '–ê–ó–° ‚Ññ2 –°–µ–≤–µ—Ä–Ω–∞—è', pumps: 6, posTerminals: 3 },
  { id: 'station_03', toNumber: '003', name: '–ê–ó–° ‚Ññ3 –Æ–∂–Ω–∞—è', pumps: 10, posTerminals: 5 },
  { id: 'station_04', toNumber: '004', name: '–ê–ó–° ‚Ññ4 –í–æ—Å—Ç–æ—á–Ω–∞—è', pumps: 6, posTerminals: 3 },
  { id: 'station_05', toNumber: '005', name: '–ê–ó–° ‚Ññ5 –ü—Ä–æ–º–∑–æ–Ω–∞', pumps: 12, posTerminals: 6 },
  { id: 'station_06', toNumber: '006', name: '–ê–ó–° ‚Ññ6 –¢—Ä–∞—Å—Å–∞ –ú4', pumps: 10, posTerminals: 5 }
];

// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–º–µ–Ω
const operators = [
  '–ò–≤–∞–Ω–æ–≤ –ò.–ò.', '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.', '–°–∏–¥–æ—Ä–æ–≤ –°.–°.', '–ö–æ–∑–ª–æ–≤ –ö.–ö.',
  '–°–º–∏—Ä–Ω–æ–≤ –°.–ú.', '–§–µ–¥–æ—Ä–æ–≤ –§.–§.', '–ù–∏–∫–æ–ª–∞–µ–≤ –ù.–ù.', '–ü–æ–ø–æ–≤ –ë.–ë.',
  '–ú–æ—Ä–æ–∑–æ–≤ –ú.–ú.', '–í–æ–ª–∫–æ–≤ –í.–í.', '–°–æ–∫–æ–ª–æ–≤ –°.–°.', '–õ–µ–±–µ–¥–µ–≤ –õ.–õ.'
];

// –°—Ç–∞—Ç—É—Å—ã –æ–ø–µ—Ä–∞—Ü–∏–π
const statuses = [
  { status: 'completed', weight: 93 },
  { status: 'failed', weight: 2 },
  { status: 'in_progress', weight: 3 },
  { status: 'pending', weight: 2 }
];

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
function weightedRandom(items) {
  const totalWeight = items.reduce((sum, item) => sum + item.weight, 0);
  let random = Math.random() * totalWeight;
  
  for (let item of items) {
    random -= item.weight;
    if (random <= 0) {
      return item;
    }
  }
  return items[0];
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
function generateVehicleNumber() {
  const letters = '–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•';
  const regions = ['77', '99', '197', '177', '199', '777', '797', '123', '178'];
  
  const letter1 = letters[Math.floor(Math.random() * letters.length)];
  const numbers = Math.floor(Math.random() * 900) + 100;
  const letter2 = letters[Math.floor(Math.random() * letters.length)];
  const letter3 = letters[Math.floor(Math.random() * letters.length)];
  const region = regions[Math.floor(Math.random() * regions.length)];
  
  return `${letter1}${numbers}${letter2}${letter3}${region}`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
function generateCardNumber(paymentMethod) {
  if (paymentMethod === 'cash') return null;
  
  const patterns = {
    'bank_card': ['4***', '5***', '6***'],
    'fuel_card': ['7***', '8***'],
    'online_order': ['9***']
  };
  
  const pattern = patterns[paymentMethod] || ['****'];
  const prefix = pattern[Math.floor(Math.random() * pattern.length)];
  const suffix = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
  
  return `${prefix} ${suffix}`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function generateTransaction(index) {
  const fuel = weightedRandom(fuelTypes);
  const payment = weightedRandom(paymentMethods);
  const station = stations[index % stations.length];
  const status = weightedRandom(statuses);
  
  // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –∞–≤–≥—É—Å—Ç–µ 2025
  const day = Math.floor(Math.random() * 31) + 1;
  const hour = 6 + Math.floor(Math.random() * 18); // 6:00 - 23:59
  const minute = Math.floor(Math.random() * 60);
  const second = Math.floor(Math.random() * 60);
  
  const startTime = new Date(2025, 7, day, hour, minute, second); // 7 = –∞–≤–≥—É—Å—Ç
  
  // –ó–∞–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (15-80 –ª–∏—Ç—Ä–æ–≤)
  const orderedQuantity = Math.round((15 + Math.random() * 65) * 100) / 100;
  const orderedAmount = Math.round(orderedQuantity * fuel.price * 100) / 100;
  
  // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–ø—É—Å–∫ (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞)
  let actualQuantity, actualAmount;
  if (status.status === 'completed') {
    // –ù–µ–±–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∑–∞–∫–∞–∑–∞ (¬±2%)
    const deviation = 0.98 + Math.random() * 0.04;
    actualQuantity = Math.round(orderedQuantity * deviation * 100) / 100;
    actualAmount = Math.round(actualQuantity * fuel.price * 100) / 100;
  } else if (status.status === 'in_progress') {
    // –ß–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç–ø—É—Å–∫
    const progress = 0.3 + Math.random() * 0.4; // 30-70%
    actualQuantity = Math.round(orderedQuantity * progress * 100) / 100;
    actualAmount = Math.round(actualQuantity * fuel.price * 100) / 100;
  } else {
    // –î–ª—è failed/pending - –æ—Ç–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω—ã–º
    actualQuantity = status.status === 'failed' ? 0 : Math.round(orderedQuantity * 0.1 * 100) / 100;
    actualAmount = actualQuantity * fuel.price;
  }
  
  // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
  let duration, endTime;
  if (status.status === 'completed') {
    duration = 2 + Math.floor(Math.random() * 4); // 2-5 –º–∏–Ω—É—Ç
    endTime = new Date(startTime.getTime() + duration * 60000);
  } else if (status.status === 'in_progress') {
    duration = Math.floor(Math.random() * 3); // 0-2 –º–∏–Ω—É—Ç—ã (–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–æ)
    endTime = duration > 0 ? new Date(startTime.getTime() + duration * 60000) : null;
  } else {
    duration = status.status === 'failed' ? 1 : 0;
    endTime = duration > 0 ? new Date(startTime.getTime() + duration * 60000) : null;
  }
  
  const pumpId = Math.floor(Math.random() * station.pumps) + 1;
  const posId = Math.floor(Math.random() * station.posTerminals) + 1;
  const shiftNumber = hour < 8 ? "1" : hour < 16 ? "2" : "3"; // 3 —Å–º–µ–Ω—ã –ø–æ 8 —á–∞—Å–æ–≤
  const operatorIndex = Math.floor(Math.random() * operators.length);
  
  return {
    id: `TXN-2025-08-${String(day).padStart(2, '0')}-${station.toNumber}-${String(index + 1).padStart(3, '0')}`,
    operationType: "sale",
    status: status.status,
    startTime: startTime.toISOString(),
    endTime: endTime ? endTime.toISOString() : undefined,
    duration: duration,
    tradingPointId: station.id,
    tradingPointName: station.name,
    deviceId: `PUMP-${String(pumpId).padStart(3, '0')}`,
    transactionId: `TXN-${startTime.getTime()}-${index}`,
    fuelType: fuel.type,
    quantity: actualQuantity, // legacy field
    price: fuel.price,
    totalCost: actualAmount, // legacy field
    paymentMethod: payment.method,
    details: `–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ø–ª–∏–≤–∞ ${fuel.type}${status.status !== 'completed' ? ` - ${getStatusText(status.status)}` : ''}`,
    progress: status.status === 'completed' ? 100 : 
              status.status === 'in_progress' ? Math.floor(50 + Math.random() * 40) :
              status.status === 'pending' ? Math.floor(10 + Math.random() * 20) : 0,
    lastUpdated: endTime ? endTime.toISOString() : startTime.toISOString(),
    operatorName: operators[operatorIndex],
    customerId: `CUST-${Math.floor(Math.random() * 100000)}`,
    vehicleNumber: generateVehicleNumber(),
    metadata: {
      tankLevel: Math.floor(Math.random() * 80) + 20, // 20-100%
      pumpPressure: Math.floor(Math.random() * 10) + 90 // 90-100 PSI
    },
    createdAt: startTime.toISOString(),
    updatedAt: endTime ? endTime.toISOString() : startTime.toISOString(),
    
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    shiftNumber: shiftNumber,
    toNumber: station.toNumber,
    posNumber: `POS-${String(posId).padStart(3, '0')}`,
    cardNumber: generateCardNumber(payment.method),
    orderedQuantity: orderedQuantity,
    orderedAmount: orderedAmount,
    actualQuantity: actualQuantity,
    actualAmount: actualAmount
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
  const statusMap = {
    'failed': '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
    'in_progress': '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
    'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
  };
  return statusMap[status] || status;
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 250 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
const transactions = [];
for (let i = 0; i < 250; i++) {
  transactions.push(generateTransaction(i));
}

// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
transactions.sort((a, b) => new Date(b.startTime).getTime() - new Date(a.startTime).getTime());

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = {
  byStatus: {},
  byFuelType: {},
  byPaymentMethod: {},
  byStation: {}
};

transactions.forEach(op => {
  stats.byStatus[op.status] = (stats.byStatus[op.status] || 0) + 1;
  stats.byFuelType[op.fuelType] = (stats.byFuelType[op.fuelType] || 0) + 1;
  stats.byPaymentMethod[op.paymentMethod] = (stats.byPaymentMethod[op.paymentMethod] || 0) + 1;
  stats.byStation[op.tradingPointName] = (stats.byStation[op.tradingPointName] || 0) + 1;
});

console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactions.length);
console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
console.log('–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:', stats.byStatus);
console.log('–ü–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞:', stats.byFuelType);
console.log('–ü–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã:', stats.byPaymentMethod);
console.log('–ü–æ –ê–ó–°:', stats.byStation);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
const total = transactions.length;
console.log('\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:');
console.log('–°—Ç–∞—Ç—É—Å—ã:');
Object.entries(stats.byStatus).forEach(([status, count]) => {
  console.log(`   ${status}: ${count} (${((count/total)*100).toFixed(1)}%)`);
});

console.log('–í–∏–¥—ã –æ–ø–ª–∞—Ç—ã:');
Object.entries(stats.byPaymentMethod).forEach(([method, count]) => {
  console.log(`   ${method}: ${count} (${((count/total)*100).toFixed(1)}%)`);
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
fs.writeFileSync('demo-250-transactions.json', JSON.stringify(transactions, null, 2));
console.log('\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ demo-250-transactions.json');

module.exports = transactions;