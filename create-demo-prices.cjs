// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ü–µ–Ω –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ê–ó–°
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://tshglrthsmyxhlsrrsmt.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRzaGdscnRoc215eGhsc3Jyc210Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMDc4MzI5NywiZXhwIjoyMDQ2MzU5Mjk3fQ.NHXfz4p5SaYWwZdA4MxeKg6J4vRBfuBFhJx0N4Q5I_g';

const supabase = createClient(supabaseUrl, serviceKey);

async function createDemoPricesSetup() {
  console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω –¥–ª—è –¥–µ–º–æ –ê–ó–°...');

  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É prices
    console.log('\nüìã –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã prices...');
    
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS prices (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        trading_point_id UUID NOT NULL,
        fuel_type_id UUID NOT NULL,
        
        price_net INTEGER NOT NULL CHECK (price_net >= 0),
        vat_rate DECIMAL(5,2) NOT NULL DEFAULT 20.00,
        price_gross INTEGER NOT NULL CHECK (price_gross >= 0),
        
        source VARCHAR(20) NOT NULL DEFAULT 'manual',
        unit VARCHAR(10) NOT NULL DEFAULT 'L',
        
        valid_from TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        is_active BOOLEAN NOT NULL DEFAULT true,
        
        created_by TEXT DEFAULT 'demo-user',
        reason TEXT,
        
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
      );
      
      ALTER TABLE prices ENABLE ROW LEVEL SECURITY;
      
      DROP POLICY IF EXISTS "prices_public_policy" ON prices;
      CREATE POLICY "prices_public_policy" ON prices FOR ALL USING (true);
    `;

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
    const { error: createError } = await supabase
      .from('_supabase_empty_table_hack')
      .select()
      .limit(0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ prices
    const { data: existingPrices, error: checkError } = await supabase
      .from('prices')
      .select('id')
      .limit(1);
    
    if (checkError && checkError.code === 'PGRST116') {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ prices –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –≤ Supabase SQL Editor:');
      console.log('\n' + createTableSQL);
      console.log('\n‚ö†Ô∏è  –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç.');
      return;
    } else if (checkError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', checkError.message);
      return;
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ prices —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìä –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...');
    
    const [tpResult, ftResult] = await Promise.all([
      supabase
        .from('trading_points')
        .select('id, name, external_id')
        .eq('network_id', 'f5f5961a-4ae0-409f-b4ba-1f630a329434') // –î–µ–º–æ —Å–µ—Ç—å
        .order('name'),
      supabase
        .from('fuel_types')
        .select('id, name, code')
        .eq('is_active', true)
        .order('name')
        .limit(5)
    ]);
    
    if (tpResult.error || ftResult.error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', tpResult.error || ftResult.error);
      return;
    }
    
    const tradingPoints = tpResult.data || [];
    const fuelTypes = ftResult.data || [];
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: ${tradingPoints.length}`);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞: ${fuelTypes.length}`);

    // 3. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–µ–Ω—ã
    console.log('\nüßπ –®–∞–≥ 3: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–µ–º–æ-—Ü–µ–Ω...');
    
    const { error: deleteError } = await supabase
      .from('prices')
      .delete()
      .eq('created_by', 'demo-user');
    
    if (deleteError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ü–µ–Ω:', deleteError.message);
    } else {
      console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –¥–µ–º–æ-—Ü–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã');
    }

    // 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–µ–º–æ-—Ü–µ–Ω—ã
    console.log('\nüí∞ –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Ü–µ–Ω...');
    
    const demoPrices = [];
    const baseDate = new Date();
    
    // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø–æ —Ç–∏–ø–∞–º —Ç–æ–ø–ª–∏–≤–∞ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
    const basePrices = {
      'AI92': 5000,     // 50.00 —Ä—É–±
      'AI95': 5300,     // 53.00 —Ä—É–± 
      'AI98': 5800,     // 58.00 —Ä—É–±
      'DT_SUMMER': 5200, // 52.00 —Ä—É–±
      'DT_WINTER': 5250, // 52.50 —Ä—É–±
      'DT_ARCTIC': 5300, // 53.00 —Ä—É–±
      'PROPANE': 2800,   // 28.00 —Ä—É–±
      'BUTANE': 3200     // 32.00 —Ä—É–±
    };
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ê–ó–°
    const stationModifiers = {
      '–ê–ó–° ‚Ññ001 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è': 1.0,    // –¶–µ–Ω—Ç—Ä - –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
      '–ê–ó–° ‚Ññ002 - –°–µ–≤–µ—Ä–Ω–∞—è': 0.98,      // –°–µ–≤–µ—Ä - –Ω–µ–º–Ω–æ–≥–æ –¥–µ—à–µ–≤–ª–µ
      '–ê–ó–° ‚Ññ003 - –Æ–∂–Ω–∞—è': 1.02,         // –Æ–≥ - –Ω–µ–º–Ω–æ–≥–æ –¥–æ—Ä–æ–∂–µ
      '–ê–ó–° ‚Ññ005 - –ü—Ä–æ–º–∑–æ–Ω–∞': 0.95,      // –ü—Ä–æ–º–∑–æ–Ω–∞ - –¥–µ—à–µ–≤–ª–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
      '–ê–ó–° ‚Ññ006 - –û–∫—Ä—É–∂–Ω–∞—è': 1.05       // –¢—Ä–∞—Å—Å–∞ - –¥–æ—Ä–æ–∂–µ
    };
    
    for (const tp of tradingPoints) {
      const modifier = stationModifiers[tp.name] || 1.0;
      
      for (const ft of fuelTypes.slice(0, 4)) { // –ü–µ—Ä–≤—ã–µ 4 –≤–∏–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ê–ó–°
        const basePrice = basePrices[ft.code] || 5000;
        const adjustedPrice = Math.round(basePrice * modifier);
        const grossPrice = Math.round(adjustedPrice * 1.2); // +20% –ù–î–°
        
        demoPrices.push({
          trading_point_id: tp.id,
          fuel_type_id: ft.id,
          price_net: adjustedPrice,
          vat_rate: 20.00,
          price_gross: grossPrice,
          source: 'manual',
          unit: 'L',
          valid_from: baseDate.toISOString(),
          is_active: true,
          created_by: 'demo-user',
          reason: `–î–µ–º–æ-—Ü–µ–Ω–∞ –Ω–∞ ${ft.name} –¥–ª—è ${tp.name}`,
          created_at: baseDate.toISOString(),
          updated_at: baseDate.toISOString()
        });
      }
    }
    
    console.log(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${demoPrices.length} –¥–µ–º–æ-—Ü–µ–Ω`);

    // 5. –í—Å—Ç–∞–≤–ª—è–µ–º –¥–µ–º–æ-—Ü–µ–Ω—ã –ø–∞–∫–µ—Ç–∞–º–∏
    const BATCH_SIZE = 10;
    let insertedCount = 0;
    
    for (let i = 0; i < demoPrices.length; i += BATCH_SIZE) {
      const batch = demoPrices.slice(i, i + BATCH_SIZE);
      
      const { data, error } = await supabase
        .from('prices')
        .insert(batch);
      
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ ${Math.floor(i/BATCH_SIZE) + 1}:`, error.message);
      } else {
        insertedCount += batch.length;
        console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ —Ü–µ–Ω: ${insertedCount}/${demoPrices.length}`);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω...');
    
    const { data: createdPrices, error: checkPricesError } = await supabase
      .from('prices')
      .select(`
        *,
        fuel_types(name, code),
        trading_points(name)
      `)
      .eq('created_by', 'demo-user')
      .eq('is_active', true);
    
    if (checkPricesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω:', checkPricesError.message);
    } else {
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω: ${createdPrices?.length || 0}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ê–ó–° –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
      const pricesByStation = {};
      (createdPrices || []).forEach(price => {
        const stationName = price.trading_points?.name || 'Unknown';
        if (!pricesByStation[stationName]) {
          pricesByStation[stationName] = [];
        }
        pricesByStation[stationName].push(price);
      });
      
      console.log('\nüìä –¶–µ–Ω—ã –ø–æ –ê–ó–°:');
      Object.entries(pricesByStation).forEach(([station, prices]) => {
        console.log(`\n  üè™ ${station}:`);
        prices.forEach(price => {
          const priceRub = (price.price_gross / 100).toFixed(2);
          console.log(`    ‚Ä¢ ${price.fuel_types?.name}: ${priceRub} ‚ÇΩ/–ª`);
        });
      });
    }

    console.log('\nüéâ –î–µ–º–æ-—Ü–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª —Ü–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Ü–µ–Ω
createDemoPricesSetup();