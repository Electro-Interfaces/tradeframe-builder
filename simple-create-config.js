/**
 * –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ë–î
 * –ü–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ SQL –ø–∞—Ä—Å–∏–Ω–≥–∞
 */

const API_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const API_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const initialConfigs = [
    {
        config_key: 'database_connections',
        config_value: {
            currentConnectionId: 'supabase-main',
            availableConnections: [
                {
                    id: 'supabase-main',
                    name: '–û—Å–Ω–æ–≤–Ω–∞—è –ë–î Supabase',
                    url: 'https://tohtryzyffcebtyvkxwh.supabase.co',
                    type: 'supabase',
                    description: '–û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏',
                    isActive: true,
                    isDefault: true,
                    settings: {
                        timeout: 8000,
                        retryAttempts: 3,
                        ssl: true,
                        schema: 'public',
                        autoApiKey: true
                    }
                },
                {
                    id: 'mock-data',
                    name: '–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ (Mock)',
                    url: 'localStorage',
                    type: 'mock',
                    description: '–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                    isActive: false,
                    isDefault: false,
                    settings: {
                        timeout: 1000,
                        retryAttempts: 3
                    }
                }
            ]
        },
        config_type: 'database',
        description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö'
    },
    {
        config_key: 'api_settings',
        config_value: {
            debugMode: false,
            enableRealTime: true,
            cacheTimeout: 30000,
            maxRetries: 3
        },
        config_type: 'api',
        description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π'
    },
    {
        config_key: 'system_settings',
        config_value: {
            systemName: 'TradeFrame',
            version: '1.0.0',
            environment: 'production',
            timezone: 'Europe/Moscow',
            language: 'ru'
        },
        config_type: 'system',
        description: '–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
    }
];

async function checkTableExists() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã system_config...');
    
    try {
        const response = await fetch(`${API_URL}/rest/v1/system_config?select=id&limit=1`, {
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ system_config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return true;
        } else if (response.status === 404) {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ system_config –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return false;
        } else {
            const error = await response.text();
            console.error(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status} ${error}`);
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
        return false;
    }
}

async function insertConfig(config) {
    console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${config.config_key}`);
    
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
        const checkResponse = await fetch(`${API_URL}/rest/v1/system_config?select=id&config_key=eq.${config.config_key}`, {
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (checkResponse.ok) {
            const existing = await checkResponse.json();
            if (existing.length > 0) {
                console.log(`‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${config.config_key} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                const updateResponse = await fetch(`${API_URL}/rest/v1/system_config?config_key=eq.${config.config_key}`, {
                    method: 'PATCH',
                    headers: {
                        'apikey': API_KEY,
                        'Authorization': `Bearer ${API_KEY}`,
                        'Content-Type': 'application/json',
                        'Prefer': 'return=representation'
                    },
                    body: JSON.stringify({
                        config_value: config.config_value,
                        description: config.description,
                        updated_at: new Date().toISOString()
                    })
                });
                
                if (!updateResponse.ok) {
                    const error = await updateResponse.text();
                    throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateResponse.status} ${error}`);
                }
                
                console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${config.config_key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
                return 'updated';
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const insertResponse = await fetch(`${API_URL}/rest/v1/system_config`, {
            method: 'POST',
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json',
                'Prefer': 'return=representation'
            },
            body: JSON.stringify(config)
        });
        
        if (!insertResponse.ok) {
            const error = await insertResponse.text();
            throw new Error(`–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: ${insertResponse.status} ${error}`);
        }
        
        const result = await insertResponse.json();
        console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${config.config_key} —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${result[0]?.id}`);
        return 'created';
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å ${config.config_key}:`, error.message);
        throw error;
    }
}

async function readAllConfigs() {
    console.log('üìñ –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...');
    
    try {
        const response = await fetch(`${API_URL}/rest/v1/system_config?select=*&order=config_type,config_key`, {
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            const error = await response.text();
            throw new Error(`HTTP ${response.status}: ${error}`);
        }
        
        const configs = await response.json();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${configs.length}`);
        
        configs.forEach((config, i) => {
            console.log(`${i + 1}. ${config.config_key} (${config.config_type})`);
            console.log(`   ${config.description}`);
            console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${new Date(config.created_at).toLocaleString()}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            const valueStr = JSON.stringify(config.config_value);
            const preview = valueStr.length > 100 ? valueStr.substring(0, 100) + '...' : valueStr;
            console.log(`   –î–∞–Ω–Ω—ã–µ: ${preview}`);
            console.log('');
        });
        
        return configs;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
        throw error;
    }
}

async function main() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        const testResponse = await fetch(`${API_URL}/rest/v1/networks?select=id&limit=1`, {
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!testResponse.ok) {
            throw new Error(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${testResponse.status}`);
        }
        
        console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        const tableExists = await checkTableExists();
        
        if (!tableExists) {
            console.log('');
            console.log('üõ†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´');
            console.log('–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π SQL –≤ Supabase Dashboard:');
            console.log('');
            console.log('CREATE TABLE system_config (');
            console.log('    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),');
            console.log('    config_key VARCHAR(255) UNIQUE NOT NULL,');
            console.log('    config_value JSONB NOT NULL,');
            console.log('    config_type VARCHAR(50) DEFAULT \'general\',');
            console.log('    description TEXT,');
            console.log('    is_encrypted BOOLEAN DEFAULT false,');
            console.log('    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),');
            console.log('    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()');
            console.log(');');
            console.log('');
            console.log('-- –ò–Ω–¥–µ–∫—Å—ã');
            console.log('CREATE INDEX idx_system_config_key ON system_config(config_key);');
            console.log('CREATE INDEX idx_system_config_type ON system_config(config_type);');
            console.log('');
            console.log('-- RLS');
            console.log('ALTER TABLE system_config ENABLE ROW LEVEL SECURITY;');
            console.log('CREATE POLICY "Allow service role full access" ON system_config FOR ALL USING (auth.role() = \'service_role\');');
            console.log('CREATE POLICY "Allow authenticated users to read" ON system_config FOR SELECT USING (auth.role() = \'authenticated\');');
            console.log('');
            console.log('üìã –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        let createdCount = 0;
        let updatedCount = 0;
        
        for (const config of initialConfigs) {
            try {
                const result = await insertConfig(config);
                if (result === 'created') {
                    createdCount++;
                } else if (result === 'updated') {
                    updatedCount++;
                }
            } catch (error) {
                console.error(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${config.config_key} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏`);
            }
        }
        
        console.log(`\nüìä –ò—Ç–æ–≥–æ: —Å–æ–∑–¥–∞–Ω–æ ${createdCount}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount}`);
        
        // –ß–∏—Ç–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüìñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await readAllConfigs();
        
        console.log('\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('');
        console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –û–±–Ω–æ–≤–∏—Ç—å apiConfigService.ts –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î');
        console.log('2. –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ localStorage');
        console.log('3. –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
main().catch(error => {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});