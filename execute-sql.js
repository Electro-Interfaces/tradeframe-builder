/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Supabase REST API
 */

import fs from 'fs';

const API_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const API_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

async function executeSQLFile(filename) {
    console.log(`üìÑ –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª: ${filename}`);
    
    try {
        const sqlContent = fs.readFileSync(filename, 'utf8');
        console.log(`‚úÖ SQL —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω (${sqlContent.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π)
        const sqlCommands = sqlContent
            .split(';')
            .map(cmd => cmd.trim())
            .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
            
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ SQL –∫–æ–º–∞–Ω–¥: ${sqlCommands.length}`);
        
        let successCount = 0;
        let errorCount = 0;
        
        for (let i = 0; i < sqlCommands.length; i++) {
            const command = sqlCommands[i];
            console.log(`\nüîß –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${i + 1}/${sqlCommands.length}:`);
            console.log(command.substring(0, 100) + (command.length > 100 ? '...' : ''));
            
            try {
                await executeSQLCommand(command);
                successCount++;
                console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            } catch (error) {
                errorCount++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, error.message);
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            }
        }
        
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} —Å –æ—à–∏–±–∫–∞–º–∏`);
        return { success: successCount, errors: errorCount };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º:', error.message);
        throw error;
    }
}

async function executeSQLCommand(sql) {
    // –î–ª—è –∫–æ–º–∞–Ω–¥ CREATE TABLE, INSERT –∏ –¥—Ä. –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–¥—Ö–æ–¥
    if (sql.toLowerCase().includes('create table')) {
        return await executeCreateTable(sql);
    }
    
    if (sql.toLowerCase().includes('insert into')) {
        return await executeInsert(sql);
    }
    
    if (sql.toLowerCase().includes('select')) {
        return await executeSelect(sql);
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ REST API):', sql.substring(0, 50));
}

async function executeCreateTable(sql) {
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ –ø–æ–ø—ã—Ç–∫—É –≤—Å—Ç–∞–≤–∫–∏ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É)
    console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –ü—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ system_config
    const response = await fetch(`${API_URL}/rest/v1/system_config?select=id&limit=1`, {
        headers: {
            'apikey': API_KEY,
            'Authorization': `Bearer ${API_KEY}`,
            'Content-Type': 'application/json'
        }
    });
    
    if (response.status === 404) {
        throw new Error('–¢–∞–±–ª–∏—Ü–∞ system_config –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard.');
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞');
}

async function executeInsert(sql) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ INSERT –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ REST API
    if (sql.includes('system_config')) {
        return await insertSystemConfig(sql);
    }
}

async function insertSystemConfig(sql) {
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ system_config...');
    
    // –ü–∞—Ä—Å–∏–º INSERT –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const valuesMatch = sql.match(/VALUES\s*\(\s*'([^']+)'[^,]*,\s*'({[^}]+.*?})'/);
    if (!valuesMatch) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å INSERT –∫–æ–º–∞–Ω–¥—É');
    }
    
    const configKey = valuesMatch[1];
    const configValueStr = valuesMatch[2].replace(/'/g, '"');
    
    let configValue;
    try {
        configValue = JSON.parse(configValueStr);
    } catch (e) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${e.message}`);
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
    const typeMatch = sql.match(/'([^']+)',\s*'[^']*'\s*\)(?:\s*ON CONFLICT)?$/);
    const descMatch = sql.match(/'([^']+)'\s*\)\s*ON CONFLICT/);
    
    const data = {
        config_key: configKey,
        config_value: configValue,
        config_type: 'database', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        description: descMatch ? descMatch[1] : '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
    };
    
    console.log(`–î–æ–±–∞–≤–ª—è–µ–º: ${configKey}`);
    
    const response = await fetch(`${API_URL}/rest/v1/system_config`, {
        method: 'POST',
        headers: {
            'apikey': API_KEY,
            'Authorization': `Bearer ${API_KEY}`,
            'Content-Type': 'application/json',
            'Prefer': 'return=representation'
        },
        body: JSON.stringify(data)
    });
    
    if (!response.ok) {
        const error = await response.text();
        throw new Error(`HTTP ${response.status}: ${error}`);
    }
    
    const result = await response.json();
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID: ${result[0]?.id}`);
}

async function executeSelect(sql) {
    console.log('üìñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞...');
    
    if (sql.includes('system_config')) {
        const response = await fetch(`${API_URL}/rest/v1/system_config?select=*&order=config_type,config_key`, {
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            const error = await response.text();
            throw new Error(`HTTP ${response.status}: ${error}`);
        }
        
        const data = await response.json();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${data.length}`);
        
        data.forEach((record, i) => {
            console.log(`${i + 1}. ${record.config_key} (${record.config_type})`);
            console.log(`   ${record.description}`);
            console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${new Date(record.created_at).toLocaleString()}`);
        });
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è system_config...');
    
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        const testResponse = await fetch(`${API_URL}/rest/v1/networks?select=id&limit=1`, {
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!testResponse.ok) {
            throw new Error(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${testResponse.status}`);
        }
        
        console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Ñ–∞–π–ª
        const result = await executeSQLFile('create-system-config-table.sql');
        
        console.log('\nüéâ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.success} —É—Å–ø–µ—à–Ω–æ, ${result.errors} –æ—à–∏–±–æ–∫`);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);