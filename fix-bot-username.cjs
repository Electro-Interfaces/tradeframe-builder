#!/usr/bin/env node

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ username –±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã
 * –ó–∞–º–µ–Ω—è–µ–º @tradeframe_bot –Ω–∞ @TradeControl_DW_Export_Bot
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceRoleKey, {
  auth: { autoRefreshToken: false, persistSession: false }
});

const CORRECT_BOT_USERNAME = 'TradeControl_DW_Export_Bot';  // –ë–ï–ó @
const CORRECT_BOT_URL = `https://t.me/${CORRECT_BOT_USERNAME}`;

async function fixBotUsername() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ username –±–æ—Ç–∞...');
  console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–æ—Ç: @${CORRECT_BOT_USERNAME}`);
  console.log(`üîó URL –±–æ—Ç–∞: ${CORRECT_BOT_URL}`);
  
  try {
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º telegram_bot_username
    console.log('\n1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º telegram_bot_username...');
    const { error: usernameError } = await supabase
      .from('system_config')
      .update({
        config_value: CORRECT_BOT_USERNAME,  // –ë–ï–ó @
        updated_at: new Date().toISOString()
      })
      .eq('config_key', 'telegram_bot_username');
    
    if (usernameError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è username:', usernameError.message);
    } else {
      console.log('‚úÖ telegram_bot_username –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    console.log('2Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º telegram_integration...');
    const { data: currentIntegration } = await supabase
      .from('system_config')
      .select('config_value')
      .eq('config_key', 'telegram_integration')
      .single();
    
    if (currentIntegration) {
      const updatedIntegration = {
        ...currentIntegration.config_value,
        botUsername: CORRECT_BOT_USERNAME,  // –ë–ï–ó @
        botUrl: CORRECT_BOT_URL
      };
      
      const { error: integrationError } = await supabase
        .from('system_config')
        .update({
          config_value: updatedIntegration,
          updated_at: new Date().toISOString()
        })
        .eq('config_key', 'telegram_integration');
      
      if (integrationError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', integrationError.message);
      } else {
        console.log('‚úÖ telegram_integration –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      }
    }
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º api_settings
    console.log('3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º api_settings...');
    const { data: currentApi } = await supabase
      .from('system_config')
      .select('config_value')
      .eq('config_key', 'api_settings')
      .single();
    
    if (currentApi && currentApi.config_value.telegram) {
      const updatedApi = {
        ...currentApi.config_value,
        telegram: {
          ...currentApi.config_value.telegram,
          botUsername: CORRECT_BOT_USERNAME,  // –ë–ï–ó @
          botUrl: CORRECT_BOT_URL
        }
      };
      
      const { error: apiError } = await supabase
        .from('system_config')
        .update({
          config_value: updatedApi,
          updated_at: new Date().toISOString()
        })
        .eq('config_key', 'api_settings');
      
      if (apiError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è api_settings:', apiError.message);
      } else {
        console.log('‚úÖ api_settings –æ–±–Ω–æ–≤–ª–µ–Ω');
      }
    }
    
    // 4. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Vite
    console.log('4Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
    const { error: viteError } = await supabase
      .from('system_config')
      .upsert({
        config_key: 'vite_telegram_bot_username',
        config_value: CORRECT_BOT_USERNAME,
        config_type: 'frontend',
        description: 'Username Telegram –±–æ—Ç–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–±–µ–∑ @)',
        is_encrypted: false
      });
    
    if (viteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è vite –Ω–∞—Å—Ç—Ä–æ–µ–∫:', viteError.message);
    } else {
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    const { data: telegramConfigs } = await supabase
      .from('system_config')
      .select('config_key, config_value, description')
      .or('config_key.ilike.%telegram%,config_type.eq.telegram,config_type.eq.integration')
      .order('config_key');
    
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
    telegramConfigs?.forEach(config => {
      console.log(`   üîß ${config.config_key}:`);
      if (config.config_key.includes('username') || config.config_key.includes('bot')) {
        console.log(`      üìù ${JSON.stringify(config.config_value)}`);
      }
      console.log(`      üí≠ ${config.description}`);
    });
    
    console.log('\nüéâ Username –±–æ—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!');
    console.log(`‚úÖ –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: @${CORRECT_BOT_USERNAME}`);
    console.log(`üîó URL: ${CORRECT_BOT_URL}`);
    
    console.log('\nüéØ –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (Ctrl+F5)');
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí Telegram');
    console.log('3. –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞');
    console.log(`4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É: ${CORRECT_BOT_URL}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

fixBotUsername().catch(console.error);