/**
 * –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ç–∞—Ä—É—é (localStorage) vs –Ω–æ–≤—É—é (database) –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–µ—Ä–≤–∏—Å–æ–≤
const SERVICES_DIR = './src/services';
const PAGES_DIR = './src/pages';

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const OLD_CONFIG_PATTERNS = [
    'apiConfigService',
    'localStorage.getItem',
    'sessionStorage.getItem',
    'apiConfigService.getCurrentConfig',
    'apiConfigService.switchConnection'
];

const NEW_CONFIG_PATTERNS = [
    'apiConfigServiceDB',
    'systemConfigService',
    'supabaseConfigManager',
    'apiConfigServiceDB.getCurrentConfig',
    'systemConfigService.getDatabaseConfig'
];

function searchInFile(filePath, patterns) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        const matches = [];
        
        patterns.forEach(pattern => {
            const regex = new RegExp(pattern, 'g');
            const found = content.match(regex);
            if (found) {
                matches.push({ pattern, count: found.length });
            }
        });
        
        return matches;
    } catch (error) {
        return [];
    }
}

function analyzeDirectory(dirPath, type = 'service') {
    const results = [];
    
    try {
        const files = fs.readdirSync(dirPath);
        
        files.forEach(file => {
            if (file.endsWith('.ts') || file.endsWith('.tsx')) {
                const filePath = path.join(dirPath, file);
                const oldMatches = searchInFile(filePath, OLD_CONFIG_PATTERNS);
                const newMatches = searchInFile(filePath, NEW_CONFIG_PATTERNS);
                
                if (oldMatches.length > 0 || newMatches.length > 0) {
                    results.push({
                        file,
                        path: filePath,
                        type,
                        oldConfig: oldMatches,
                        newConfig: newMatches,
                        usesOld: oldMatches.length > 0,
                        usesNew: newMatches.length > 0
                    });
                }
            }
        });
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}:`, error.message);
    }
    
    return results;
}

function printAnalysisResults() {
    console.log('üîç –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –°–ï–†–í–ò–°–ê–ú–ò');
    console.log('='.repeat(60));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    console.log('\nüìÅ –ê–ù–ê–õ–ò–ó –î–ò–†–ï–ö–¢–û–†–ò–ò /src/services:');
    const servicesResults = analyzeDirectory(SERVICES_DIR, 'service');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('\nüìÑ –ê–ù–ê–õ–ò–ó –î–ò–†–ï–ö–¢–û–†–ò–ò /src/pages:');
    const pagesResults = analyzeDirectory(PAGES_DIR, 'page');
    
    const allResults = [...servicesResults, ...pagesResults];
    
    if (allResults.length === 0) {
        console.log('‚ùå –§–∞–π–ª—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const usingOldOnly = allResults.filter(r => r.usesOld && !r.usesNew);
    const usingNewOnly = allResults.filter(r => r.usesNew && !r.usesOld);
    const usingBoth = allResults.filter(r => r.usesOld && r.usesNew);
    const usingNeither = allResults.filter(r => !r.usesOld && !r.usesNew);
    
    console.log('\nüìä –°–í–û–î–ö–ê –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:');
    console.log('-'.repeat(40));
    console.log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: ${allResults.length}`);
    console.log(`–ò—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–ª—å–∫–æ –°–¢–ê–†–£–Æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ${usingOldOnly.length}`);
    console.log(`–ò—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–ª—å–∫–æ –ù–û–í–£–Æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ${usingNewOnly.length}`);
    console.log(`–ò—Å–ø–æ–ª—å–∑—É—é—Ç –û–ë–ï–ò –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${usingBoth.length}`);
    console.log('');
    
    // –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å–æ —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    if (usingOldOnly.length > 0) {
        console.log('üî¥ –§–ê–ô–õ–´, –ò–°–ü–û–õ–¨–ó–£–Æ–©–ò–ï –°–¢–ê–†–£–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ (localStorage):');
        usingOldOnly.forEach(result => {
            console.log(`\n   üìÑ ${result.file} (${result.type})`);
            console.log(`      –ü—É—Ç—å: ${result.path}`);
            result.oldConfig.forEach(match => {
                console.log(`      ‚ö†Ô∏è  ${match.pattern} (${match.count} —Ä–∞–∑)`);
            });
        });
        console.log('');
    }
    
    // –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    if (usingNewOnly.length > 0) {
        console.log('üü¢ –§–ê–ô–õ–´, –ò–°–ü–û–õ–¨–ó–£–Æ–©–ò–ï –ù–û–í–£–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ (database):');
        usingNewOnly.forEach(result => {
            console.log(`\n   üìÑ ${result.file} (${result.type})`);
            console.log(`      –ü—É—Ç—å: ${result.path}`);
            result.newConfig.forEach(match => {
                console.log(`      ‚úÖ ${match.pattern} (${match.count} —Ä–∞–∑)`);
            });
        });
        console.log('');
    }
    
    // –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (usingBoth.length > 0) {
        console.log('üü° –§–ê–ô–õ–´, –ò–°–ü–û–õ–¨–ó–£–Æ–©–ò–ï –û–ë–ï–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò (—Ç—Ä–µ–±—É—é—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞):');
        usingBoth.forEach(result => {
            console.log(`\n   üìÑ ${result.file} (${result.type})`);
            console.log(`      –ü—É—Ç—å: ${result.path}`);
            console.log('      –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
            result.oldConfig.forEach(match => {
                console.log(`        ‚ö†Ô∏è  ${match.pattern} (${match.count} —Ä–∞–∑)`);
            });
            console.log('      –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
            result.newConfig.forEach(match => {
                console.log(`        ‚úÖ ${match.pattern} (${match.count} —Ä–∞–∑)`);
            });
        });
        console.log('');
    }
    
    // –ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò –ú–ò–ì–†–ê–¶–ò–ò
    console.log('üéØ –ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò –ú–ò–ì–†–ê–¶–ò–ò:');
    console.log('-'.repeat(40));
    
    const migrationReadiness = (usingNewOnly.length + usingBoth.length) / allResults.length * 100;
    const oldConfigFiles = usingOldOnly.length + usingBoth.length;
    
    console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏: ${migrationReadiness.toFixed(1)}%`);
    console.log(`üîÑ –§–∞–π–ª–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${oldConfigFiles}`);
    
    if (usingOldOnly.length === 0) {
        console.log('‚úÖ –í–°–ï –§–ê–ô–õ–´ –ò–°–ü–û–õ–¨–ó–£–Æ–¢ –ù–û–í–£–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ!');
        console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ó–ê–í–ï–†–®–ï–ù–ê');
    } else {
        console.log('‚ö†Ô∏è –ú–ò–ì–†–ê–¶–ò–Ø –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê');
        console.log(`üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å ${usingOldOnly.length} —Ñ–∞–π–ª–æ–≤`);
    }
    
    console.log('');
    console.log('üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (usingOldOnly.length > 0) {
        console.log('1. –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
        console.log('2. –ó–∞–º–µ–Ω–∏—Ç—å apiConfigService –Ω–∞ apiConfigServiceDB');
        console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã');
    }
    if (usingBoth.length > 0) {
        console.log('4. –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö');
        console.log('5. –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É');
    }
    if (usingNewOnly.length === allResults.length) {
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã');
        console.log('üîÑ –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"');
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–µ—Å—Ç
function findSpecificIssues() {
    console.log('\nüîç –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–†–û–ë–õ–ï–ú:');
    console.log('-'.repeat(40));
    
    const problematicPatterns = [
        'localStorage.getItem("database_connections")',
        'apiConfigService.getCurrentConfig()',
        'import.*apiConfigService.*from',
        'useEffect.*apiConfigService'
    ];
    
    const allFiles = [
        ...fs.readdirSync(SERVICES_DIR).map(f => path.join(SERVICES_DIR, f)),
        ...fs.readdirSync(PAGES_DIR).map(f => path.join(PAGES_DIR, f))
    ].filter(f => f.endsWith('.ts') || f.endsWith('.tsx'));
    
    let foundIssues = 0;
    
    allFiles.forEach(filePath => {
        problematicPatterns.forEach(pattern => {
            const matches = searchInFile(filePath, [pattern]);
            if (matches.length > 0) {
                console.log(`‚ö†Ô∏è ${path.basename(filePath)}: ${pattern}`);
                foundIssues++;
            }
        });
    });
    
    if (foundIssues === 0) {
        console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
        console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–µ—Å—Ç: ${foundIssues}`);
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
try {
    printAnalysisResults();
    findSpecificIssues();
} catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
}