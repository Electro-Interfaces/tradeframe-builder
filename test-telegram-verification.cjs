#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è –∏–º–∏—Ç–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–æ–≤
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceRoleKey, {
  auth: { autoRefreshToken: false, persistSession: false }
});

async function simulateTelegramVerification(verificationCode, fakeChatId) {
  console.log(`ü§ñ –ò–º–∏—Ç–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–¥ "${verificationCode}" –≤ Telegram –±–æ—Ç–µ`);
  console.log(`üì± –ò–º–∏—Ç–∞—Ü–∏—è: Chat ID = ${fakeChatId}`);
  
  try {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: result, error } = await supabase
      .rpc('verify_telegram_code', {
        p_verification_code: verificationCode,
        p_chat_id: fakeChatId.toString()
      });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
      return false;
    }
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', result);
    
    if (result?.success) {
      console.log('‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!');
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.user.name} (${result.user.email})`);
      console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
      console.log(`üì± Chat ID ${fakeChatId} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É`);
    } else {
      console.log('‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      console.log(`üîç –ö–æ–¥ –æ—à–∏–±–∫–∏: ${result?.error_code || 'UNKNOWN'}`);
    }
    
    return result?.success || false;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    return false;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏ chat_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const verificationCode = process.argv[2];
const chatId = process.argv[3] || Math.floor(Math.random() * 1000000000); // –°–ª—É—á–∞–π–Ω—ã–π chat_id

if (!verificationCode) {
  console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
  console.log('node test-telegram-verification.cjs TF6AYX');
  console.log('node test-telegram-verification.cjs TF6AYX 123456789');
  console.log('');
  console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
  supabase
    .from('telegram_verification_codes')
    .select(`
      verification_code,
      users:user_id (name, email)
    `)
    .eq('is_used', false)
    .gt('expires_at', new Date().toISOString())
    .then(({ data: codes }) => {
      if (codes && codes.length > 0) {
        codes.forEach(code => {
          console.log(`  üîë ${code.verification_code} - ${code.users?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        });
      } else {
        console.log('  üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤');
      }
      process.exit(1);
    });
} else {
  simulateTelegramVerification(verificationCode, chatId).then(success => {
    if (success) {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üí° –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ –ü—Ä–æ—Ñ–∏–ª–µ');
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É');
    }
    process.exit(success ? 0 : 1);
  }).catch(console.error);
}