/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–æ–≤–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Node.js –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏
 */

const { createClient } = require('@supabase/supabase-js');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—Ä–∞—Ç—å—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const SUPABASE_KEY = process.env.VITE_SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_SERVICE_KEY || 'your-key';

console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
console.log('==================================================');

/**
 * –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
 */
async function testBasicConnection() {
    console.log('\nüì° –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase');
    
    try {
        const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
        
        // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const { data, error } = await supabase
            .from('networks')
            .select('id, name')
            .limit(1);
            
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
            return false;
        }
        
        console.log('‚úÖ –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${data?.length || 0}`);
        
        if (data && data.length > 0) {
            console.log(`   –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏: ${JSON.stringify(data[0])}`);
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 2: –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 */
async function testSystemConfig() {
    console.log('\n‚öôÔ∏è –¢–µ—Å—Ç 2: –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
    
    try {
        const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É system_config
        const { data: configData, error: configError } = await supabase
            .from('system_config')
            .select('config_key, config_type')
            .limit(5);
            
        if (configError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', configError.message);
            
            // –í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            if (configError.code === '42P01') {
                console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ system_config –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å');
                return 'need_setup';
            }
            
            return false;
        }
        
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞');
        console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${configData?.length || 0}`);
        
        if (configData && configData.length > 0) {
            console.log('   –ö–ª—é—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
            configData.forEach(config => {
                console.log(`   - ${config.config_key} (${config.config_type})`);
            });
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 3: –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function testDataTables() {
    console.log('\nüóÑÔ∏è –¢–µ—Å—Ç 3: –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö');
    
    const tables = [
        { name: 'networks', description: '–¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏' },
        { name: 'trading_points', description: '–¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏' },
        { name: 'equipment_templates', description: '–®–∞–±–ª–æ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' },
        { name: 'user_preferences', description: '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' }
    ];
    
    const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
    const results = {};
    
    for (const table of tables) {
        try {
            console.log(`\n   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: ${table.name} (${table.description})`);
            
            const { data, error, count } = await supabase
                .from(table.name)
                .select('*', { count: 'exact', head: true });
                
            if (error) {
                console.error(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                results[table.name] = { status: 'error', error: error.message };
            } else {
                console.log(`   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞, –∑–∞–ø–∏—Å–µ–π: ${count || 0}`);
                results[table.name] = { status: 'ok', count: count || 0 };
            }
            
        } catch (error) {
            console.error(`   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            results[table.name] = { status: 'critical', error: error.message };
        }
    }
    
    console.log('\nüìä –°–≤–æ–¥–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º:');
    Object.entries(results).forEach(([table, result]) => {
        const status = result.status === 'ok' ? '‚úÖ' : 
                      result.status === 'error' ? '‚ö†Ô∏è' : '‚ùå';
        const info = result.status === 'ok' ? `(${result.count} –∑–∞–ø–∏—Å–µ–π)` : 
                     `(${result.error})`;
        console.log(`   ${status} ${table} ${info}`);
    });
    
    return results;
}

/**
 * –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (RLS)
 */
async function testPermissions() {
    console.log('\nüîê –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (RLS)');
    
    try {
        const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —á—Ç–µ–Ω–∏—è
        const { data: readData, error: readError } = await supabase
            .from('networks')
            .select('id, name')
            .limit(1);
            
        if (readError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:', readError.message);
            
            if (readError.code === '42501') {
                console.log('‚ö†Ô∏è RLS –∞–∫—Ç–∏–≤–µ–Ω - –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
                return 'rls_active';
            }
            
            return false;
        } else {
            console.log('‚úÖ –ß—Ç–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ');
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏ (—Ç–µ—Å—Ç)
        const testData = {
            name: '–¢–ï–°–¢ - –£–¥–∞–ª–∏—Ç—å',
            external_id: 'test-' + Date.now(),
            description: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤'
        };
        
        const { data: writeData, error: writeError } = await supabase
            .from('networks')
            .insert(testData)
            .select()
            .single();
            
        if (writeError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', writeError.message);
            
            if (writeError.code === '42501') {
                console.log('‚ö†Ô∏è –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–µ—â–µ–Ω–∞ RLS - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
                return 'read_only';
            }
            
            return false;
        } else {
            console.log('‚úÖ –ó–∞–ø–∏—Å—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∞');
            
            // –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            if (writeData) {
                await supabase
                    .from('networks')
                    .delete()
                    .eq('id', writeData.id);
                console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
            }
            
            return 'full_access';
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error.message);
        return false;
    }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n');
    
    const results = {
        basicConnection: await testBasicConnection(),
        systemConfig: await testSystemConfig(),
        dataTables: await testDataTables(),
        permissions: await testPermissions()
    };
    
    console.log('\n' + '='.repeat(50));
    console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('='.repeat(50));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let allGood = true;
    
    console.log('\n‚úÖ –£–°–ü–ï–®–ù–´–ï –¢–ï–°–¢–´:');
    if (results.basicConnection === true) {
        console.log('  - –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
        console.log('  - ‚ùå –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        allGood = false;
    }
    
    if (results.systemConfig === true) {
        console.log('  - –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞');
    } else if (results.systemConfig === 'need_setup') {
        console.log('  - ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    } else {
        console.log('  - ‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        allGood = false;
    }
    
    if (typeof results.dataTables === 'object') {
        const tableStats = Object.values(results.dataTables);
        const okTables = tableStats.filter(t => t.status === 'ok').length;
        const totalTables = tableStats.length;
        console.log(`  - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: ${okTables}/${totalTables}`);
        
        if (okTables < totalTables) {
            console.log('  - ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }
    }
    
    if (results.permissions === 'full_access') {
        console.log('  - –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å)');
    } else if (results.permissions === 'read_only') {
        console.log('  - –ü—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —á—Ç–µ–Ω–∏–µ (RLS –∞–∫—Ç–∏–≤–µ–Ω)');
    } else if (results.permissions === 'rls_active') {
        console.log('  - RLS –∞–∫—Ç–∏–≤–µ–Ω, –Ω—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
    } else {
        console.log('  - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        allGood = false;
    }
    
    console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    
    if (!results.basicConnection) {
        console.log('  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SUPABASE_URL –∏ –∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        console.log('  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç Supabase –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    if (results.systemConfig === 'need_setup') {
        console.log('  - –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É system_config –≤ Supabase');
        console.log('  - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"');
    }
    
    if (results.permissions === 'rls_active') {
        console.log('  - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞');
        console.log('  - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ service_role –∫–ª—é—á –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞');
    }
    
    console.log('\n' + (allGood ? 'üéâ –í–°–ï –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' : '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø'));
    console.log('='.repeat(50));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
    runTests().catch(error => {
        console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error);
        process.exit(1);
    });
}

module.exports = { runTests, testBasicConnection, testSystemConfig, testDataTables, testPermissions };