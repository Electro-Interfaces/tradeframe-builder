/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã system_config –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ localStorage –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */

import { createClient } from '@supabase/supabase-js';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreXdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function createSystemConfigTable() {
    console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã system_config...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ SQL
        const createTableSQL = `
            CREATE TABLE IF NOT EXISTS system_config (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                config_key VARCHAR(255) UNIQUE NOT NULL,
                config_value JSONB NOT NULL,
                config_type VARCHAR(50) DEFAULT 'general',
                description TEXT,
                is_encrypted BOOLEAN DEFAULT false,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                created_by UUID REFERENCES auth.users(id),
                updated_by UUID REFERENCES auth.users(id)
            );
            
            -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            CREATE INDEX IF NOT EXISTS idx_system_config_key ON system_config(config_key);
            CREATE INDEX IF NOT EXISTS idx_system_config_type ON system_config(config_type);
            
            -- –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ RLS
            ALTER TABLE system_config ENABLE ROW LEVEL SECURITY;
            
            -- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è (–≤—Å–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
            CREATE POLICY "Allow authenticated users to read system config" ON system_config
                FOR SELECT USING (auth.role() = 'authenticated');
            
            -- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ service_role)
            CREATE POLICY "Allow service role to modify system config" ON system_config
                FOR ALL USING (auth.role() = 'service_role');
                
            -- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
            CREATE OR REPLACE FUNCTION update_system_config_updated_at()
            RETURNS TRIGGER AS $$
            BEGIN
                NEW.updated_at = NOW();
                RETURN NEW;
            END;
            $$ language 'plpgsql';
            
            -- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
            DROP TRIGGER IF EXISTS update_system_config_updated_at ON system_config;
            CREATE TRIGGER update_system_config_updated_at
                BEFORE UPDATE ON system_config
                FOR EACH ROW EXECUTE PROCEDURE update_system_config_updated_at();
        `;
        
        const { data, error } = await supabase.rpc('exec_sql', { 
            sql: createTableSQL 
        });
        
        if (error) {
            // –ï—Å–ª–∏ RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
            console.log('‚ö†Ô∏è –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º...');
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—ç—Ç–∞–ø–Ω–æ
            const { error: createError } = await supabase
                .from('system_config')
                .select('*')
                .limit(0);
                
            if (createError && createError.message.includes('does not exist')) {
                console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ SQL —Ñ–∞–π–ª...');
                // –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ Supabase Dashboard –∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
                console.log('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ Supabase Dashboard:');
                console.log(createTableSQL);
                return false;
            }
        }
        
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ system_config —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
        return false;
    }
}

async function insertInitialConfig() {
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    // –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    const initialConfigs = [
        {
            config_key: 'database_connections',
            config_value: {
                currentConnectionId: 'supabase-db',
                availableConnections: [
                    {
                        id: 'supabase-db',
                        name: '–û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Supabase',
                        url: 'https://tohtryzyffcebtyvkxwh.supabase.co',
                        type: 'supabase',
                        description: '–û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏',
                        isActive: true,
                        isDefault: true,
                        settings: {
                            timeout: 8000,
                            retryAttempts: 3,
                            ssl: true,
                            schema: 'public',
                            autoApiKey: true
                        }
                    },
                    {
                        id: 'mock-data',
                        name: '–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ (Mock)',
                        url: 'localStorage',
                        type: 'mock',
                        description: '–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                        isActive: false,
                        isDefault: false,
                        settings: {
                            timeout: 1000,
                            retryAttempts: 3
                        }
                    }
                ]
            },
            config_type: 'database',
            description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö'
        },
        {
            config_key: 'api_settings',
            config_value: {
                debugMode: false,
                enableRealTime: true,
                cacheTimeout: 30000,
                maxRetries: 3
            },
            config_type: 'api',
            description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π'
        },
        {
            config_key: 'system_settings',
            config_value: {
                systemName: 'TradeFrame',
                version: '1.0.0',
                environment: 'production',
                timezone: 'Europe/Moscow',
                language: 'ru'
            },
            config_type: 'system',
            description: '–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
        },
        {
            config_key: 'security_settings',
            config_value: {
                sessionTimeout: 3600,
                requireHttps: true,
                enableCORS: true,
                allowedOrigins: ['http://localhost:3006', 'https://tohtryzyffcebtyvkxwh.supabase.co']
            },
            config_type: 'security',
            description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã'
        }
    ];
    
    let successCount = 0;
    
    for (const config of initialConfigs) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            const { data: existing } = await supabase
                .from('system_config')
                .select('id')
                .eq('config_key', config.config_key)
                .single();
                
            if (existing) {
                console.log(`‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${config.config_key} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...`);
                
                const { error: updateError } = await supabase
                    .from('system_config')
                    .update({
                        config_value: config.config_value,
                        description: config.description,
                        updated_at: new Date().toISOString()
                    })
                    .eq('config_key', config.config_key);
                    
                if (updateError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${config.config_key}:`, updateError);
                } else {
                    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.config_key}`);
                    successCount++;
                }
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                const { error: insertError } = await supabase
                    .from('system_config')
                    .insert(config);
                    
                if (insertError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${config.config_key}:`, insertError);
                } else {
                    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.config_key}`);
                    successCount++;
                }
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å ${config.config_key}:`, error);
        }
    }
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${initialConfigs.length} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
    return successCount > 0;
}

async function main() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const { data: testData, error: testError } = await supabase
        .from('networks')
        .select('id')
        .limit(1);
        
    if (testError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', testError);
        return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const { data: configTest, error: configError } = await supabase
        .from('system_config')
        .select('id')
        .limit(1);
        
    if (configError && configError.message.includes('does not exist')) {
        console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ system_config –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        console.log('üõ†Ô∏è –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ Supabase Dashboard –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π SQL:');
        console.log('');
        console.log('-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        console.log(`CREATE TABLE system_config (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    config_key VARCHAR(255) UNIQUE NOT NULL,
    config_value JSONB NOT NULL,
    config_type VARCHAR(50) DEFAULT 'general',
    description TEXT,
    is_encrypted BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–Ω–¥–µ–∫—Å—ã
CREATE INDEX idx_system_config_key ON system_config(config_key);
CREATE INDEX idx_system_config_type ON system_config(config_type);

-- RLS –ø–æ–ª–∏—Ç–∏–∫–∏
ALTER TABLE system_config ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow authenticated users to read system config" ON system_config
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Allow service role to modify system config" ON system_config
    FOR ALL USING (auth.role() = 'service_role');`);
        
        console.log('');
        console.log('üìã –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        return;
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ system_config –¥–æ—Å—Ç—É–ø–Ω–∞');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const success = await insertInitialConfig();
    
    if (success) {
        console.log('üéâ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        console.log('');
        console.log('üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –û–±–Ω–æ–≤–∏—Ç—å apiConfigService.ts –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
        console.log('2. –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage');
        console.log('3. –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        console.log('');
        console.log('üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:');
        console.log('SELECT * FROM system_config ORDER BY config_type, config_key;');
    } else {
        console.log('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(console.error);