/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_preferences —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –∫ PostgreSQL
 */

import fs from 'fs';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceKey);

async function createTable() {
  console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_preferences...');
  
  // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
  const createTableSQL = `
    -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    CREATE TABLE IF NOT EXISTS public.user_preferences (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        user_id UUID NOT NULL,
        preference_key VARCHAR(100) NOT NULL,
        preference_value TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        
        -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        UNIQUE(user_id, preference_key)
    );
    
    -- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    COMMENT ON TABLE public.user_preferences IS '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
    COMMENT ON COLUMN public.user_preferences.preference_key IS '–ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: selected_network, selected_trading_point)';
    COMMENT ON COLUMN public.user_preferences.preference_value IS '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏';
  `;
  
  try {
    console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º supabase.rpc –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ SQL
    const { data, error } = await supabase.rpc('exec_sql', { 
      query: createTableSQL 
    });
    
    if (error) {
      console.log('‚ùå RPC exec_sql –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ fetch –Ω–∞–ø—Ä—è–º—É—é
      await tryDirectFetch();
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ RPC:', data);
      await verifyTable();
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
    await tryDirectFetch();
  }
}

async function tryDirectFetch() {
  console.log('üîÑ –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å...');
  
  const sql = `
    CREATE TABLE IF NOT EXISTS public.user_preferences (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        user_id UUID NOT NULL,
        preference_key VARCHAR(100) NOT NULL,
        preference_value TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, preference_key)
    );
  `;
  
  try {
    const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
      method: 'POST',
      headers: {
        'apikey': serviceKey,
        'Authorization': `Bearer ${serviceKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ sql: sql })
    });
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ HTTP:', result);
      await verifyTable();
    } else {
      const error = await response.text();
      console.log('‚ùå HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ insert
      await tryManualCreation();
    }
    
  } catch (error) {
    console.log('‚ùå HTTP –æ—à–∏–±–∫–∞:', error);
    await tryManualCreation();
  }
}

async function tryManualCreation() {
  console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ...');
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  try {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø–æ–∫–∞–∂–µ—Ç —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç
    const { data, error } = await supabase
      .from('user_preferences')
      .select('*')
      .limit(1);
      
    if (error && error.code === 'PGRST116') {
      console.log('üìã –¢–∞–±–ª–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ Supabase Dashboard:');
      console.log('');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://supabase.com/dashboard');
      console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç tohtryzyffcebtyvkxwh');
      console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Table Editor');
      console.log('4. –ù–∞–∂–º–∏—Ç–µ "Create a new table"');
      console.log('5. –ò–º—è —Ç–∞–±–ª–∏—Ü—ã: user_preferences');
      console.log('6. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–ª–æ–Ω–∫–∏:');
      console.log('   - id (uuid, primary key, default: gen_random_uuid())');
      console.log('   - user_id (uuid, not null)');
      console.log('   - preference_key (varchar, not null)');
      console.log('   - preference_value (text)');
      console.log('   - created_at (timestamptz, default: now())');
      console.log('   - updated_at (timestamptz, default: now())');
      console.log('7. –î–æ–±–∞–≤—å—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ (user_id, preference_key)');
      console.log('');
      console.log('–ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∏–∑ —Ñ–∞–π–ª–∞ create-user-preferences-table.sql');
    } else {
      console.log('ü§î –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', error);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  }
}

async function verifyTable() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å...');
  
  try {
    const { data, error } = await supabase
      .from('user_preferences')
      .select('*')
      .limit(1);
      
    if (error) {
      if (error.code === 'PGRST116') {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ:', error);
      }
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_preferences —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞!');
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await testTableOperation();
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
  }
}

async function testTableOperation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const { data, error } = await supabase
      .from('user_preferences')
      .insert({
        user_id: '00000000-0000-0000-0000-000000000001',
        preference_key: 'test_preference',
        preference_value: 'test_value'
      })
      .select()
      .single();
      
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', error);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', data);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('user_preferences')
        .delete()
        .eq('id', data.id);
        
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
      console.log('üéâ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫
createTable().catch(console.error);