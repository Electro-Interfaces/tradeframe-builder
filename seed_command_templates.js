/**
 * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–æ–º–∞–Ω–¥
 */

import { createClient } from '@supabase/supabase-js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(SUPABASE_URL, SERVICE_KEY);

// –°–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∫–æ–º–∞–Ω–¥
const systemTemplates = [
  {
    id: 'ct_system_backup_daily',
    name: 'system_backup_daily',
    display_name: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ',
    description: '–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã',
    category: 'backup',
    status: 'active',
    is_system: true,
    version: '1.0.0',
    param_schema: {
      type: 'object',
      properties: {
        backup_type: {
          type: 'string',
          enum: ['full', 'incremental', 'differential'],
          default: 'incremental'
        },
        compression: {
          type: 'boolean',
          default: true
        }
      }
    },
    default_params: {
      backup_type: 'incremental',
      compression: true
    },
    required_params: [],
    allowed_targets: ['all_networks', 'specific_network'],
    execution_timeout: 3600,
    retry_count: 2,
    required_permissions: ['system_admin'],
    is_dangerous: false,
    requires_confirmation: false,
    supports_scheduling: true,
    supports_batch_execution: false,
    examples: []
  },
  {
    id: 'ct_fuel_price_update',
    name: 'fuel_price_update',
    display_name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ',
    description: '–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫',
    category: 'pricing',
    status: 'active',
    is_system: true,
    version: '1.2.0',
    param_schema: {
      type: 'object',
      properties: {
        fuel_type: {
          type: 'string',
          enum: ['AI-92', 'AI-95', 'AI-98', 'DT', 'gas']
        },
        price_change: {
          type: 'object',
          properties: {
            type: { type: 'string', enum: ['absolute', 'percent'] },
            value: { type: 'number' }
          }
        },
        effective_date: {
          type: 'string',
          format: 'date-time'
        }
      },
      required: ['fuel_type', 'price_change']
    },
    default_params: {
      effective_date: null
    },
    required_params: ['fuel_type', 'price_change'],
    allowed_targets: ['all_trading_points', 'specific_trading_point', 'specific_network'],
    execution_timeout: 300,
    retry_count: 1,
    required_permissions: ['price_management'],
    is_dangerous: true,
    requires_confirmation: true,
    supports_scheduling: true,
    supports_batch_execution: true,
    examples: [
      {
        name: 'Increase AI-95 by 2 rubles',
        description: '–£–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–Ω—É –ê–ò-95 –Ω–∞ 2 —Ä—É–±–ª—è',
        params: {
          fuel_type: 'AI-95',
          price_change: { type: 'absolute', value: 2.00 }
        }
      }
    ]
  },
  {
    id: 'ct_equipment_restart',
    name: 'equipment_restart',
    display_name: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
    description: '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
    category: 'equipment_control',
    status: 'active',
    is_system: true,
    version: '1.0.0',
    param_schema: {
      type: 'object',
      properties: {
        graceful: {
          type: 'boolean',
          default: true,
          description: '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö'
        },
        delay_seconds: {
          type: 'integer',
          minimum: 0,
          maximum: 300,
          default: 30
        }
      }
    },
    default_params: {
      graceful: true,
      delay_seconds: 30
    },
    required_params: [],
    allowed_targets: ['specific_equipment', 'equipment_type'],
    execution_timeout: 600,
    retry_count: 0,
    required_permissions: ['equipment_control'],
    is_dangerous: true,
    requires_confirmation: true,
    supports_scheduling: true,
    supports_batch_execution: false,
    examples: []
  },
  {
    id: 'ct_shift_report_generate',
    name: 'shift_report_generate',
    display_name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–º–µ–Ω–µ',
    description: '–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–º–µ–Ω–µ',
    category: 'reporting',
    status: 'active',
    is_system: true,
    version: '1.1.0',
    param_schema: {
      type: 'object',
      properties: {
        shift_id: {
          type: 'string',
          description: 'ID —Å–º–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞'
        },
        include_fuel_data: {
          type: 'boolean',
          default: true
        },
        include_pos_data: {
          type: 'boolean',
          default: true
        },
        format: {
          type: 'string',
          enum: ['pdf', 'excel', 'json'],
          default: 'pdf'
        }
      },
      required: ['shift_id']
    },
    default_params: {
      include_fuel_data: true,
      include_pos_data: true,
      format: 'pdf'
    },
    required_params: ['shift_id'],
    allowed_targets: ['specific_trading_point', 'all_trading_points'],
    execution_timeout: 180,
    retry_count: 1,
    required_permissions: ['report_generation'],
    is_dangerous: false,
    requires_confirmation: false,
    supports_scheduling: false,
    supports_batch_execution: true,
    examples: []
  },
  {
    id: 'ct_maintenance_check',
    name: 'maintenance_check',
    display_name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
    description: '–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¢–û –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
    category: 'maintenance',
    status: 'active',
    is_system: true,
    version: '1.0.0',
    param_schema: {
      type: 'object',
      properties: {
        check_type: {
          type: 'string',
          enum: ['routine', 'preventive', 'emergency'],
          default: 'routine'
        },
        equipment_age_threshold: {
          type: 'integer',
          minimum: 30,
          maximum: 365,
          default: 90,
          description: '–í–æ–∑—Ä–∞—Å—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –¥–Ω—è—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'
        }
      }
    },
    default_params: {
      check_type: 'routine',
      equipment_age_threshold: 90
    },
    required_params: [],
    allowed_targets: ['all_networks', 'specific_network', 'equipment_type', 'specific_equipment'],
    execution_timeout: 300,
    retry_count: 1,
    required_permissions: ['maintenance_access'],
    is_dangerous: false,
    requires_confirmation: false,
    supports_scheduling: true,
    supports_batch_execution: true,
    examples: []
  }
];

async function seedCommandTemplates() {
  console.log('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–æ–º–∞–Ω–¥...');

  try {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (–¥–ª—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏)
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...');
    const { error: deleteError } = await supabase
      .from('command_templates')
      .delete()
      .eq('is_system', true);

    if (deleteError) {
      console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', deleteError.message);
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...');
    const { data, error } = await supabase
      .from('command_templates')
      .insert(systemTemplates)
      .select();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:', error);
      throw error;
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${data.length} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥:`);
    data.forEach(template => {
      console.log(`  - ${template.display_name} (${template.category})`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤
    const { count, error: countError } = await supabase
      .from('command_templates')
      .select('*', { count: 'exact', head: true });

    if (countError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', countError.message);
    } else {
      console.log(`üìä –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${count}`);
    }

    console.log('\nüéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫
seedCommandTemplates().catch(console.error);