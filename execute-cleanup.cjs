const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

async function executeCleanup() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–µ–º–æ-–æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –∞–≤–≥—É—Å—Ç...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let supabaseUrl, supabaseKey;
    
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      if (process.env.VITE_SUPABASE_URL && process.env.VITE_SUPABASE_ANON_KEY) {
        supabaseUrl = process.env.VITE_SUPABASE_URL;
        supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ–º–æ
        supabaseUrl = 'https://vxlswbjgsjdvsgwojlka.supabase.co';
        supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ4bHN3Ympnc2pkdnNnd29qbGthIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM3MzI3MTYsImV4cCI6MjA0OTMwODcxNn0.aDGa_3JoNDJaQg5fUECqjqUBBVa9lLCxzWLdBVzN6Ws';
        console.log('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
      process.exit(1);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createClient(supabaseUrl, supabaseKey);
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –∞–≤–≥—É—Å—Ç...');
    const { data: operationsToCheck, error: checkError } = await supabase
      .from('operations')
      .select('id, start_time, trading_point_id, operation_type')
      .lt('start_time', '2025-09-02T00:00:00Z')
      .order('start_time');
    
    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π:', checkError);
      process.exit(1);
    }
    
    const countToDelete = operationsToCheck?.length || 0;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${countToDelete}`);
    
    if (countToDelete === 0) {
      console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –∞–≤–≥—É—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–∞–∑–∞ —É–∂–µ —á–∏—Å—Ç–∞—è');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º
    const byTradingPoint = {};
    operationsToCheck.forEach(op => {
      const tpId = op.trading_point_id || 'unknown';
      if (!byTradingPoint[tpId]) {
        byTradingPoint[tpId] = 0;
      }
      byTradingPoint[tpId]++;
    });
    
    console.log('\nüìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º:');
    Object.entries(byTradingPoint).forEach(([tpId, count]) => {
      console.log(`   ${tpId}: ${count} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    if (operationsToCheck.length > 0) {
      const firstOp = operationsToCheck[0];
      const lastOp = operationsToCheck[operationsToCheck.length - 1];
      console.log(`\nüìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: ${firstOp.start_time} - ${lastOp.start_time}`);
    }
    
    console.log('\n‚ö†Ô∏è –°—Ç–∞–Ω—Ü–∏—è 4 —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å 2 —Å–µ–Ω—Ç—è–±—Ä—è 2025');
    console.log('‚ÑπÔ∏è –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ —ç—Ç–æ–π –¥–∞—Ç—ã —è–≤–ª—è—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    console.log('\nüóëÔ∏è –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –∞–≤–≥—É—Å—Ç...');
    const { data: deletedOps, error: deleteError } = await supabase
      .from('operations')
      .delete()
      .lt('start_time', '2025-09-02T00:00:00Z')
      .select('id');
    
    if (deleteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:', deleteError);
      process.exit(1);
    }
    
    const deletedCount = deletedOps?.length || 0;
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${deletedCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏...');
    const { data: remainingAugustOps, error: verifyError } = await supabase
      .from('operations')
      .select('id')
      .lt('start_time', '2025-09-02T00:00:00Z');
    
    if (verifyError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', verifyError);
    } else {
      const remainingCount = remainingAugustOps?.length || 0;
      if (remainingCount === 0) {
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –∞–≤–≥—É—Å—Ç –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å');
      } else {
        console.log(`‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª–æ—Å—å ${remainingCount} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –∞–≤–≥—É—Å—Ç`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å 2 —Å–µ–Ω—Ç—è–±—Ä—è
    const { data: septemberOps, error: septError } = await supabase
      .from('operations')
      .select('id')
      .gte('start_time', '2025-09-02T00:00:00Z');
    
    if (septError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ–Ω—Ç—è–±—Ä—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:', septError);
    } else {
      const septemberCount = septemberOps?.length || 0;
      console.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏–π —Å 2 —Å–µ–Ω—Ç—è–±—Ä—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${septemberCount}`);
    }
    
    console.log('\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('‚ùå –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∑–∞ –∞–≤–≥—É—Å—Ç —É–¥–∞–ª–µ–Ω—ã');
    console.log('‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å 2 —Å–µ–Ω—Ç—è–±—Ä—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    console.log('üîÑ –¢–µ–ø–µ—Ä—å —Å—Ç–∞–Ω—Ü–∏—è 4 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    
  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:');
    console.error(error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
executeCleanup();