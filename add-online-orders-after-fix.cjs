/**
 * –ó–ê–ü–£–°–ö–ê–¢–¨ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø CONSTRAINT –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!
 * –î–æ–±–∞–≤–ª—è–µ—Ç 25 –æ–ø–µ—Ä–∞—Ü–∏–π —Å payment_method = 'online_order' (10% –æ—Ç 250)
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceKey);

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const tradingPoints = [
  { id: 'station_01', name: '–ê–ó–° ‚Ññ1 –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è' },
  { id: 'station_02', name: '–ê–ó–° ‚Ññ2 –°–µ–≤–µ—Ä–Ω–∞—è' },
  { id: 'station_03', name: '–ê–ó–° ‚Ññ3 –Æ–∂–Ω–∞—è' },
  { id: 'station_04', name: '–ê–ó–° ‚Ññ4 –í–æ—Å—Ç–æ—á–Ω–∞—è' },
  { id: 'station_05', name: '–ê–ó–° ‚Ññ5 –ü—Ä–æ–º–∑–æ–Ω–∞' }
];

const fuelTypes = ['–ê–ò-92', '–ê–ò-95', '–ê–ò-98', '–ê–ò-100', '–î–¢'];
const operators = ['–ò–≤–∞–Ω–æ–≤ –ò.–ò.', '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.', '–°–∏–¥–æ—Ä–æ–≤ –°.–°.', '–ú–æ—Ä–æ–∑–æ–≤ –ú.–ú.', '–õ–µ–±–µ–¥–µ–≤ –õ.–õ.'];
const devices = ['PUMP-001', 'PUMP-002', 'PUMP-003', 'PUMP-004', 'PUMP-005', 'PUMP-006'];

const fuelPrices = {
  '–ê–ò-92': { min: 52, max: 54 },
  '–ê–ò-95': { min: 55, max: 57 },
  '–ê–ò-98': { min: 62, max: 65 },
  '–ê–ò-100': { min: 68, max: 72 },
  '–î–¢': { min: 58, max: 61 }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
function randomInRange(min, max) {
  return Math.random() * (max - min) + min;
}

function randomAugust2025Date() {
  const start = new Date('2025-08-01T00:00:00Z');
  const end = new Date('2025-08-31T23:59:59Z');
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
}

function generateVehicleNumber() {
  const letters = '–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•';
  const regions = ['77', '78', '99', '177', '197', '199', '777'];
  
  const letter1 = letters[Math.floor(Math.random() * letters.length)];
  const num1 = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
  const letter2 = letters[Math.floor(Math.random() * letters.length)];
  const letter3 = letters[Math.floor(Math.random() * letters.length)];
  const region = regions[Math.floor(Math.random() * regions.length)];
  
  return `${letter1}${num1}${letter2}${letter3}${region}`;
}

function generateCustomerId() {
  return `CUST-${Math.floor(Math.random() * 100000)}`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å online_order
function generateOnlineOrderOperation(index) {
  const tradingPoint = tradingPoints[Math.floor(Math.random() * tradingPoints.length)];
  const fuelType = fuelTypes[Math.floor(Math.random() * fuelTypes.length)];
  const operator = operators[Math.floor(Math.random() * operators.length)];
  const device = devices[Math.floor(Math.random() * devices.length)];
  
  const startTime = randomAugust2025Date();
  const endTime = new Date(startTime.getTime() + Math.floor(randomInRange(3, 10)) * 60000); // 3-10 –º–∏–Ω—É—Ç
  const duration = Math.floor((endTime.getTime() - startTime.getTime()) / 60000);
  
  const quantity = randomInRange(20, 75); // 20-75 –ª–∏—Ç—Ä–æ–≤ –¥–ª—è –æ–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑–æ–≤
  const priceRange = fuelPrices[fuelType];
  const price = randomInRange(priceRange.min, priceRange.max);
  const totalCost = quantity * price;
  
  const operationId = `ONL-${startTime.getFullYear()}-${String(startTime.getMonth() + 1).padStart(2, '0')}-${String(startTime.getDate()).padStart(2, '0')}-${String(index).padStart(3, '0')}`;
  const transactionId = `TXN-${startTime.getTime()}-${Math.floor(Math.random() * 1000)}`;
  
  return {
    id: operationId,
    operation_type: 'sale',
    status: Math.random() > 0.1 ? 'completed' : 'pending', // 90% completed, 10% pending
    start_time: startTime.toISOString(),
    end_time: endTime.toISOString(),
    duration: duration,
    trading_point_id: tradingPoint.id,
    trading_point_name: tradingPoint.name,
    device_id: device,
    transaction_id: transactionId,
    fuel_type: fuelType,
    quantity: Math.round(quantity * 100) / 100,
    price: Math.round(price * 100) / 100,
    total_cost: Math.round(totalCost * 100) / 100,
    payment_method: 'online_order', // üéØ –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å!
    details: `–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑ —Ç–æ–ø–ª–∏–≤–∞ ${fuelType} —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`,
    progress: Math.random() > 0.1 ? 100 : Math.floor(randomInRange(0, 90)),
    operator_name: operator,
    customer_id: generateCustomerId(),
    vehicle_number: generateVehicleNumber(),
    metadata: {
      order_source: 'mobile_app',
      payment_confirmed: true,
      pre_authorization: true
    },
    created_at: startTime.toISOString(),
    updated_at: endTime.toISOString()
  };
}

async function addOnlineOrderOperations() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å online_order...');
    console.log('‚ö†Ô∏è  –£–ë–ï–î–ò–¢–ï–°–¨, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ SQL —Å–∫—Ä–∏–ø—Ç fix-payment-constraint.sql!');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ constraint –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è online_order...');
    
    const testOperation = {
      id: `TEST-CONSTRAINT-${Date.now()}`,
      operation_type: 'sale',
      status: 'completed',
      start_time: new Date().toISOString(),
      payment_method: 'online_order',
      details: '–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const { data: testData, error: testError } = await supabase
      .from('operations')
      .insert(testOperation)
      .select();
    
    if (testError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê: Constraint –≤—Å–µ –µ—â–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç online_order!');
      console.error('üí° –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç fix-payment-constraint.sql –≤ Supabase Dashboard');
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', testError.message);
      return false;
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await supabase.from('operations').delete().eq('id', testOperation.id);
    console.log('‚úÖ Constraint –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å online_order –æ–ø–µ—Ä–∞—Ü–∏–∏');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 25 –æ–ø–µ—Ä–∞—Ü–∏–π (10% –æ—Ç 250)
    const operations = [];
    for (let i = 1; i <= 25; i++) {
      operations.push(generateOnlineOrderOperation(i));
    }
    
    console.log(`üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π —Å online_order`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–∞—á–∫–∞–º–∏ –ø–æ 10
    const batchSize = 10;
    let totalAdded = 0;
    
    for (let i = 0; i < operations.length; i += batchSize) {
      const batch = operations.slice(i, i + batchSize);
      
      const { data, error } = await supabase
        .from('operations')
        .insert(batch)
        .select();
      
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—á–∫–∏ ${Math.floor(i/batchSize) + 1}:`, error.message);
        continue;
      }
      
      totalAdded += data.length;
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${data.length} –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–∞—á–∫–∞ ${Math.floor(i/batchSize) + 1})`);
    }
    
    console.log(`üéâ –£–°–ü–ï–•! –î–æ–±–∞–≤–ª–µ–Ω–æ ${totalAdded} –æ–ø–µ—Ä–∞—Ü–∏–π —Å payment_method = 'online_order'`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { count: totalOperations } = await supabase
      .from('operations')
      .select('*', { count: 'exact', head: true });
      
    const { count: onlineOrderCount } = await supabase
      .from('operations')
      .select('*', { count: 'exact', head: true })
      .eq('payment_method', 'online_order');
    
    console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`üí≥ –û–ø–µ—Ä–∞—Ü–∏–π —Å online_order: ${onlineOrderCount}`);
    console.log(`üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${totalOperations}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç online_order: ${((onlineOrderCount / totalOperations) * 100).toFixed(1)}%`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    const paymentMethods = ['cash', 'bank_card', 'fuel_card', 'online_order'];
    console.log('\nüí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã:');
    
    for (const method of paymentMethods) {
      const { count } = await supabase
        .from('operations')
        .select('*', { count: 'exact', head: true })
        .eq('payment_method', method);
        
      const percentage = ((count / totalOperations) * 100).toFixed(1);
      console.log(`   ${method}: ${count} (${percentage}%)`);
    }
    
    return true;
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫
addOnlineOrderOperations().then((success) => {
  if (success) {
    console.log('\nüéØ –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤ —Ä–∞–∑–¥–µ–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –ø—Ä–∏–º–µ—Ä—ã —Å online_order');
    console.log('üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:3006/network/operations-transactions');
  } else {
    console.log('\nüíî –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ constraint –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
  }
  
  process.exit(success ? 0 : 1);
});