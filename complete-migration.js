/**
 * –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏–∑ apiConfigService.ts –≤ –ë–î
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */

const API_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const API_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

// –ü–û–õ–ù–´–ô –Ω–∞–±–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ apiConfigService.ts
const completeConfig = {
    currentConnectionId: 'supabase-db',
    debugMode: false,
    lastUpdated: new Date().toISOString(),
    availableConnections: [
        {
            id: 'mock',
            name: 'Mock Data (–î–µ–º–æ)',
            url: 'localStorage',
            type: 'mock',
            description: '–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤ localStorage',
            isActive: false,
            isDefault: false,
            createdAt: new Date('2024-01-01').toISOString(),
            updatedAt: new Date().toISOString(),
            settings: {
                timeout: 1000,
                retryAttempts: 3
            }
        },
        {
            id: 'local-db',
            name: '–õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î',
            url: 'http://localhost:3001/api/v1',
            type: 'postgresql',
            description: '–õ–æ–∫–∞–ª—å–Ω–∞—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            isActive: false,
            isDefault: true,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            settings: {
                timeout: 5000,
                retryAttempts: 3,
                poolSize: 10,
                ssl: false
            }
        },
        {
            id: 'prod-db',
            name: '–ü—Ä–æ–¥–∞–∫—à–Ω –ë–î',
            url: 'https://api.tradeframe.production.com/v1',
            type: 'postgresql',
            description: '–ü—Ä–æ–¥–∞–∫—à–Ω PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            isActive: false,
            isDefault: false,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            settings: {
                timeout: 10000,
                retryAttempts: 5,
                poolSize: 20,
                ssl: true
            }
        },
        {
            id: 'supabase-db',
            name: 'Supabase –ë–î',
            url: 'https://tohtryzyffcebtyvkxwh.supabase.co',
            type: 'supabase',
            description: 'Supabase PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å REST API (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç)',
            isActive: true,
            isDefault: false,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            settings: {
                timeout: 8000,
                retryAttempts: 3,
                ssl: true,
                apiKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreXdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY',
                serviceRoleKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreXdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY',
                schema: 'public',
                autoApiKey: true
            }
        },
        {
            id: 'trading-network-api',
            name: 'API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏',
            url: 'https://pos.autooplata.ru/tms/',
            type: 'external-api',
            description: '–í–Ω–µ—à–Ω–∏–π API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å POS-—Å–∏—Å—Ç–µ–º–æ–π',
            isActive: false,
            isDefault: false,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            settings: {
                timeout: 10000,
                retryAttempts: 3,
                ssl: true,
                authType: 'basic',
                username: 'UserApi',
                password: 'lHQfLZHzB3tn'
            }
        }
    ]
};

async function updateDatabaseConnections() {
    console.log('üîÑ –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –í –ë–î...');
    console.log('=====================================');
    
    try {
        console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é database_connections...');
        
        const response = await fetch(`${API_URL}/rest/v1/system_config?config_key=eq.database_connections`, {
            method: 'PATCH',
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json',
                'Prefer': 'return=representation'
            },
            body: JSON.stringify({
                config_value: completeConfig,
                description: '–ü–û–õ–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö (–º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ apiConfigService.ts)',
                updated_at: new Date().toISOString()
            })
        });
        
        if (!response.ok) {
            const error = await response.text();
            throw new Error(`HTTP ${response.status}: ${error}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è database_connections —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        console.log(`üìä ID –∑–∞–ø–∏—Å–∏: ${result[0]?.id}`);
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
        return false;
    }
}

async function verifyMigration() {
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ò...');
    
    try {
        const response = await fetch(`${API_URL}/rest/v1/system_config?select=*&config_key=eq.database_connections`, {
            headers: {
                'apikey': API_KEY,
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${await response.text()}`);
        }
        
        const data = await response.json();
        const dbConfig = data[0].config_value;
        
        console.log(`‚úÖ –¢–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${dbConfig.currentConnectionId}`);
        console.log(`‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: ${dbConfig.debugMode}`);
        console.log(`‚úÖ –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${dbConfig.availableConnections.length}`);
        console.log('');
        
        console.log('üìã –°–ü–ò–°–û–ö –í–°–ï–• –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –í –ë–î:');
        dbConfig.availableConnections.forEach((conn, i) => {
            const activeStatus = conn.isActive ? 'üü¢ –ê–ö–¢–ò–í–ù–û' : '‚ö´ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ';
            const defaultStatus = conn.isDefault ? '‚≠ê –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é' : '';
            console.log(`${i + 1}. ${conn.id} - "${conn.name}" (${conn.type}) ${activeStatus} ${defaultStatus}`);
            console.log(`   URL: ${conn.url}`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${conn.description}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
            if (conn.settings) {
                console.log('   –ù–∞—Å—Ç—Ä–æ–π–∫–∏:');
                Object.entries(conn.settings).forEach(([key, value]) => {
                    if (key.includes('Key') || key.includes('password')) {
                        console.log(`     ${key}: ${typeof value === 'string' ? value.substring(0, 20) + '...' : value}`);
                    } else {
                        console.log(`     ${key}: ${value}`);
                    }
                });
            }
            console.log('');
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        const criticalConnections = ['supabase-db', 'trading-network-api'];
        const missingCritical = criticalConnections.filter(id => 
            !dbConfig.availableConnections.find(conn => conn.id === id)
        );
        
        if (missingCritical.length > 0) {
            console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –û–¢–°–£–¢–°–¢–í–£–Æ–¢:');
            missingCritical.forEach(id => console.log(`   - ${id}`));
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è Supabase
        const supabaseConn = dbConfig.availableConnections.find(conn => conn.id === 'supabase-db');
        if (supabaseConn) {
            const hasApiKey = !!(supabaseConn.settings?.apiKey || supabaseConn.settings?.serviceRoleKey);
            if (!hasApiKey) {
                console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ –¥–ª—è Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!');
                return false;
            } else {
                console.log('‚úÖ API –∫–ª—é—á–∏ –¥–ª—è Supabase –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API
        const externalConn = dbConfig.availableConnections.find(conn => conn.id === 'trading-network-api');
        if (externalConn) {
            const hasAuth = !!(externalConn.settings?.username && externalConn.settings?.password);
            if (!hasAuth) {
                console.log('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API');
            } else {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            }
        }
        
        console.log('\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
        console.log('–í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
        return false;
    }
}

async function main() {
    console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–£–Æ –ú–ò–ì–†–ê–¶–ò–Æ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô');
    console.log('–¶–µ–ª—å: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –í–°–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ apiConfigService.ts –≤ system_config');
    console.log('');
    
    // –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ë–î
    const migrationSuccess = await updateDatabaseConnections();
    
    if (!migrationSuccess) {
        console.log('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
        return;
    }
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const verificationSuccess = await verifyMigration();
    
    if (verificationSuccess) {
        console.log('');
        console.log('‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê!');
        console.log('üîÑ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã: localStorage ‚Üí Database');
        console.log('üîí API –∫–ª—é—á–∏ –∏ –ø–∞—Ä–æ–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');
        console.log('üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é');
        console.log('');
        console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É');
        console.log('2. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É DatabaseSettings.tsx');
        console.log('3. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π localStorage –ø–æ–¥—Ö–æ–¥');
    } else {
        console.log('‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    }
}

main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});