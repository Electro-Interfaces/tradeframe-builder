/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è btovbg@mail.ru
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞ –Ω–æ–≤—ã–π SHA-256 –∞–ª–≥–æ—Ä–∏—Ç–º
 */

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

// –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ SHA-256 (–∫–∞–∫ –≤ –Ω–æ–≤–æ–º authService)
async function createPasswordHash(password, salt) {
  const passwordWithSalt = password + salt;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º SHA-256 –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ base64
  if (crypto && crypto.subtle) {
    const encoder = new TextEncoder();
    const data = encoder.encode(passwordWithSalt);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return btoa(String.fromCharCode(...hashArray));
  } else {
    return btoa(passwordWithSalt);
  }
}

function generateSalt() {
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}

async function fixBtovbgPassword() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è btovbg@mail.ru...')

  const email = 'btovbg@mail.ru'
  const password = 'nnnbbbvvv123'

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–æ–ª—å –∏ —Ö–µ—à —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
  const newSalt = generateSalt()
  const newHash = await createPasswordHash(password, newSalt)

  console.log('üìù –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:')
  console.log('Email:', email)
  console.log('Password:', password)
  console.log('New Salt:', newSalt)
  console.log('New Hash:', newHash.substring(0, 20) + '...')

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const { data, error } = await supabase
    .from('users')
    .update({
      pwd_salt: newSalt,
      pwd_hash: newHash,
      updated_at: new Date().toISOString()
    })
    .eq('email', email)
    .select()

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
    return
  }

  if (data && data.length > 0) {
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      email: data[0].email,
      name: data[0].name,
      salt: data[0].pwd_salt,
      hash: data[0].pwd_hash.substring(0, 20) + '...'
    })
  } else {
    console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–π —Ö–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ö–µ—à...')
  const testHash = await createPasswordHash(password, newSalt)
  const isValid = testHash === newHash
  console.log('–¢–µ—Å—Ç-—Ö–µ—à:', testHash.substring(0, 20) + '...')
  console.log('–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', isValid ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixBtovbgPassword().catch(console.error)