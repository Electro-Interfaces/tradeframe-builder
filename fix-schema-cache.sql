-- ============================================================================
-- FIX SCHEMA CACHE ISSUE FOR CREATE OPERATIONS
-- ============================================================================
-- –ü—Ä–æ–±–ª–µ–º–∞: PostgREST –Ω–µ –≤–∏–¥–∏—Ç –∫–æ–ª–æ–Ω–∫—É 'status' –≤ –∫—ç—à–µ —Å—Ö–µ–º—ã
-- –†–µ—à–µ–Ω–∏–µ: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—Ö–µ–º—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
-- ============================================================================

-- 1. –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–†–£–ö–¢–£–†–£ –¢–ê–ë–õ–ò–¶–´ equipment_templates
SELECT 
    'üîç CHECKING equipment_templates STRUCTURE' as info,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = 'equipment_templates' 
AND table_schema = 'public'
ORDER BY ordinal_position;

-- 2. –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ö–û–õ–û–ù–ö–ê STATUS –°–£–©–ï–°–¢–í–£–ï–¢
SELECT 
    'üìã STATUS COLUMN CHECK' as info,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'equipment_templates' 
            AND column_name = 'status' 
            AND table_schema = 'public'
        ) 
        THEN '‚úÖ status column EXISTS' 
        ELSE '‚ùå status column MISSING' 
    END as status_check;

-- 3. –ï–°–õ–ò –ö–û–õ–û–ù–ö–ê –û–¢–°–£–¢–°–¢–í–£–ï–¢ - –î–û–ë–ê–í–õ–Ø–ï–ú –ï–Å
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'equipment_templates' 
        AND column_name = 'status' 
        AND table_schema = 'public'
    ) THEN
        ALTER TABLE equipment_templates ADD COLUMN status BOOLEAN NOT NULL DEFAULT true;
        RAISE NOTICE '‚úÖ Added status column to equipment_templates';
    ELSE
        RAISE NOTICE '‚úÖ Status column already exists';
    END IF;
END $$;

-- 4. –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –¢–ê–ë–õ–ò–¶–´ –î–õ–Ø POSTGREST
ANALYZE equipment_templates;

-- 5. –î–ê–ï–ú –ü–†–ê–í–ê –ù–ê –ù–û–í–£–Æ –ö–û–õ–û–ù–ö–£ (–µ—Å–ª–∏ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞)
GRANT SELECT, UPDATE ON equipment_templates TO anon;
GRANT SELECT, UPDATE ON equipment_templates TO authenticated;

-- 6. –ü–†–û–í–ï–†–Ø–ï–ú –ü–†–ê–í–ê –ù–ê –¢–ê–ë–õ–ò–¶–£
SELECT 
    'üîë TABLE PRIVILEGES CHECK' as info,
    grantee,
    privilege_type,
    is_grantable
FROM information_schema.role_table_grants 
WHERE table_name = 'equipment_templates'
AND grantee IN ('anon', 'authenticated', 'public')
ORDER BY grantee, privilege_type;

-- 7. –ü–†–û–í–ï–†–Ø–ï–ú SAMPLE DATA
SELECT 
    'üìä SAMPLE DATA CHECK' as info,
    id,
    name,
    system_type,
    status,
    created_at
FROM equipment_templates 
LIMIT 3;

-- 8. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - –¢–ï–°–¢–û–í–ê–Ø –ó–ê–ü–ò–°–¨
DO $$
DECLARE
    test_id UUID := gen_random_uuid();
BEGIN
    -- –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    INSERT INTO equipment_templates (
        id, 
        name, 
        technical_code, 
        system_type, 
        status, 
        description
    ) VALUES (
        test_id,
        'Schema Cache Test',
        'SCHEMA_TEST_' || extract(epoch from now()),
        'test',
        true,
        'Test record to verify schema cache'
    );
    
    RAISE NOTICE '‚úÖ Test record created successfully with ID: %', test_id;
    
    -- –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    DELETE FROM equipment_templates WHERE id = test_id;
    RAISE NOTICE '‚úÖ Test record cleaned up';
    
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Test record creation failed: %', SQLERRM;
END $$;

-- ============================================================================
-- –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–°–¢GR–ï–°–¢ –ö–≠–®–ï
-- ============================================================================

SELECT '
üìã POSTGREST SCHEMA CACHE INFO:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ Schema structure verified
‚úÖ Table analyzed for PostgREST
‚úÖ Permissions granted to anon role
‚úÖ Test record creation verified

üí° NOTES:
‚Ä¢ PostgREST caches table schemas for performance
‚Ä¢ After schema changes, cache may need time to refresh
‚Ä¢ This can cause "column not found" errors temporarily
‚Ä¢ Running ANALYZE helps PostgREST discover schema changes

üîß IF PROBLEM PERSISTS:
‚Ä¢ Wait 1-2 minutes for cache refresh
‚Ä¢ Try restarting PostgREST service in Supabase
‚Ä¢ Check Supabase logs in Dashboard

' as info;

SELECT '‚úÖ SCHEMA CACHE FIX COMPLETED!' as result;