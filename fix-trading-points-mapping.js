/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
 * –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É operations.trading_point_id –∏ trading_points.id
 */

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

async function fixTradingPointsMapping() {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏...');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏
        const tradingPointsResponse = await fetch(`${supabaseUrl}/rest/v1/trading_points`, {
            headers: {
                'apikey': serviceKey,
                'Authorization': `Bearer ${serviceKey}`
            }
        });
        
        const tradingPoints = await tradingPointsResponse.json();
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫:', tradingPoints.length);
        
        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ station_XX -> UUID
        const stationMapping = {
            'station_01': tradingPoints.find(tp => tp.name.includes('001'))?.id,
            'station_02': tradingPoints.find(tp => tp.name.includes('002'))?.id,
            'station_03': tradingPoints.find(tp => tp.name.includes('003'))?.id,
            'station_04': tradingPoints.find(tp => tp.name.includes('004'))?.id,
            'station_05': tradingPoints.find(tp => tp.name.includes('005'))?.id,
        };
        
        console.log('üìä –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞–Ω—Ü–∏–π:', stationMapping);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ ID –Ω–∞–π–¥–µ–Ω—ã
        const missingMappings = Object.entries(stationMapping).filter(([key, value]) => !value);
        if (missingMappings.length > 0) {
            console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è:', missingMappings.map(([key]) => key));
            
            // –î–æ–±–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏
            const networkId = tradingPoints[0]?.network_id;
            if (networkId) {
                for (const [stationId] of missingMappings) {
                    const stationNumber = stationId.replace('station_', '').padStart(3, '0');
                    console.log(`‚ûï –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –¥–ª—è ${stationId}...`);
                    
                    const newTradingPoint = {
                        network_id: networkId,
                        name: `–ê–ó–° ‚Ññ${stationNumber}`,
                        external_id: stationId,
                        address: `–ê–¥—Ä–µ—Å –ê–ó–° ${stationNumber}`,
                        is_active: true
                    };
                    
                    const createResponse = await fetch(`${supabaseUrl}/rest/v1/trading_points`, {
                        method: 'POST',
                        headers: {
                            'apikey': serviceKey,
                            'Authorization': `Bearer ${serviceKey}`,
                            'Content-Type': 'application/json',
                            'Prefer': 'return=representation'
                        },
                        body: JSON.stringify(newTradingPoint)
                    });
                    
                    if (createResponse.ok) {
                        const [createdTP] = await createResponse.json();
                        stationMapping[stationId] = createdTP.id;
                        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ ${stationId} —Å ID ${createdTP.id}`);
                    } else {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${stationId}:`, await createResponse.text());
                    }
                }
            }
        }
        
        // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        console.log('\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º trading_point_id –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö...');
        
        for (const [oldId, newId] of Object.entries(stationMapping)) {
            if (!newId) continue;
            
            console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ ${oldId} -> ${newId}...`);
            
            const updateResponse = await fetch(`${supabaseUrl}/rest/v1/operations?trading_point_id=eq.${oldId}`, {
                method: 'PATCH',
                headers: {
                    'apikey': serviceKey,
                    'Authorization': `Bearer ${serviceKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ trading_point_id: newId })
            });
            
            if (updateResponse.ok) {
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è ${oldId}`);
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π ${oldId}:`, await updateResponse.text());
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
        
        const checkResponse = await fetch(`${supabaseUrl}/rest/v1/operations?status=eq.completed&limit=10`, {
            headers: {
                'apikey': serviceKey,
                'Authorization': `Bearer ${serviceKey}`
            }
        });
        
        if (checkResponse.ok) {
            const operations = await checkResponse.json();
            const tradingPointIds = [...new Set(operations.map(op => op.trading_point_id))];
            console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ trading_point_id –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', tradingPointIds);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ ID —Ç–µ–ø–µ—Ä—å —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
            const allTradingPointIds = tradingPoints.map(tp => tp.id);
            const validIds = tradingPointIds.filter(id => allTradingPointIds.includes(id));
            const invalidIds = tradingPointIds.filter(id => !allTradingPointIds.includes(id));
            
            console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID:', validIds.length);
            console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID:', invalidIds.length);
            
            if (invalidIds.length === 0) {
                console.log('üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
                console.log('üí° –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫');
            } else {
                console.log('‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID:', invalidIds);
            }
        }
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫
fixTradingPointsMapping().catch(console.error);