/**
 * üîç –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ë–î
 */

import { readFileSync, existsSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const serviceArchitecturePatterns = {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Supabase –≤ –Ω–∞—à–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
    hasSupabaseConnection: [
        'supabaseService',
        'createClient',
        'from @supabase/supabase-js',
        'supabaseClient',
        'getSupabaseClient'
    ],
    hasRealQueries: [
        '.select(',
        '.insert(',
        '.update(',
        '.delete(',
        '.from(',
        '.eq(',
        '.match(',
        '.order('
    ],
    hasProperAsync: [
        'async ',
        'await ',
        'Promise<'
    ],
    hasConfigIntegration: [
        'apiConfigServiceDB',
        'supabaseConfigManager',
        'SupabaseConnectionHelper',
        'executeSupabaseOperation'
    ],
    avoidsMockPatterns: [
        'localStorage.getItem',
        'mockData',
        'demoData',
        'testData: ['
    ]
};

const criticalServices = [
    {
        name: 'Equipment Supabase',
        path: 'src/services/equipmentSupabase.ts',
        critical: true,
        tables: ['equipment_templates', 'equipment']
    },
    {
        name: 'Operations Supabase', 
        path: 'src/services/operationsSupabaseService.ts',
        critical: true,
        tables: ['operations']
    },
    {
        name: 'Prices Supabase',
        path: 'src/services/pricesSupabaseService.ts', 
        critical: true,
        tables: ['prices']
    },
    {
        name: 'Users Supabase',
        path: 'src/services/usersSupabaseService.ts',
        critical: true,
        tables: ['users']
    },
    {
        name: 'Components Supabase',
        path: 'src/services/componentsSupabase.ts',
        critical: true, 
        tables: ['components']
    },
    {
        name: 'Tanks Service Supabase',
        path: 'src/services/tanksServiceSupabase.ts',
        critical: true,
        tables: ['tanks']
    }
];

const configServices = [
    {
        name: 'Supabase Service Client',
        path: 'src/services/supabaseServiceClient.ts',
        role: 'core_client'
    },
    {
        name: 'Supabase Config Manager',
        path: 'src/services/supabaseConfigManager.ts', 
        role: 'config_management'
    },
    {
        name: 'API Config Service DB',
        path: 'src/services/apiConfigServiceDB.ts',
        role: 'api_configuration'
    },
    {
        name: 'Supabase Connection Helper',
        path: 'src/services/supabaseConnectionHelper.ts',
        role: 'connection_helper'
    }
];

function log(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    console.log(`[${timestamp}] ${icon} ${message}`);
}

function analyzeServiceArchitecture(servicePath) {
    try {
        const fullPath = join(__dirname, servicePath);
        
        if (!existsSync(fullPath)) {
            return { exists: false, error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }
        
        const content = readFileSync(fullPath, 'utf8');
        
        const analysis = {
            exists: true,
            fileSize: content.length,
            lines: content.split('\n').length
        };
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase (–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞—é—â–∞—è –Ω–∞—à—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)
        analysis.hasSupabaseConnection = serviceArchitecturePatterns.hasSupabaseConnection
            .some(pattern => content.includes(pattern));
            
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
        analysis.hasRealQueries = serviceArchitecturePatterns.hasRealQueries
            .some(pattern => content.includes(pattern));
            
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        analysis.hasProperAsync = serviceArchitecturePatterns.hasProperAsync
            .some(pattern => content.includes(pattern));
            
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        analysis.hasConfigIntegration = serviceArchitecturePatterns.hasConfigIntegration
            .some(pattern => content.includes(pattern));
            
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±–µ–∂–∞–Ω–∏—è Mock –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        analysis.avoidsMockPatterns = !serviceArchitecturePatterns.avoidsMockPatterns
            .some(pattern => content.includes(pattern));
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        analysis.hasTableReferences = content.includes('from(') || content.includes("from('") || content.includes('from("');
        analysis.hasErrorHandling = content.includes('try {') || content.includes('catch');
        analysis.hasTypeDefinitions = content.includes('interface') || content.includes('type ') || content.includes(': Promise<');
        analysis.hasExports = content.includes('export');
        
        // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        let score = 0;
        const maxScore = 10;
        
        if (analysis.hasSupabaseConnection) score += 2;
        if (analysis.hasRealQueries) score += 2;
        if (analysis.hasProperAsync) score += 1;
        if (analysis.hasConfigIntegration) score += 2;
        if (analysis.avoidsMockPatterns) score += 1;
        if (analysis.hasTableReferences) score += 1;
        if (analysis.hasErrorHandling) score += 0.5;
        if (analysis.hasTypeDefinitions) score += 0.5;
        
        analysis.readinessScore = score;
        analysis.readinessPercent = Math.round((score / maxScore) * 100);
        analysis.isReady = analysis.readinessPercent >= 80;
        
        return analysis;
        
    } catch (error) {
        return { exists: false, error: error.message };
    }
}

function validateCoreInfrastructure() {
    log('üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã Supabase...');
    
    const infrastructureResults = {};
    let coreReady = true;
    
    configServices.forEach(service => {
        const analysis = analyzeServiceArchitecture(service.path);
        infrastructureResults[service.name] = analysis;
        
        if (analysis.exists && analysis.isReady) {
            log(`‚úÖ ${service.name}: –ì–æ—Ç–æ–≤ (${analysis.readinessPercent}%)`);
        } else if (analysis.exists) {
            log(`‚ö†Ô∏è ${service.name}: –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è (${analysis.readinessPercent}%)`);
            if (service.role === 'core_client') coreReady = false;
        } else {
            log(`‚ùå ${service.name}: ${analysis.error}`);
            coreReady = false;
        }
    });
    
    return { results: infrastructureResults, ready: coreReady };
}

function validateBusinessServices() {
    log('üíº –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-—Å–µ—Ä–≤–∏—Å–æ–≤...');
    
    const serviceResults = {};
    let criticalServicesReady = 0;
    let totalCriticalServices = criticalServices.filter(s => s.critical).length;
    
    criticalServices.forEach(service => {
        const analysis = analyzeServiceArchitecture(service.path);
        serviceResults[service.name] = analysis;
        
        if (analysis.exists) {
            log(`üìä ${service.name} –∞–Ω–∞–ª–∏–∑:`);
            log(`   üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase: ${analysis.hasSupabaseConnection ? '‚úÖ' : '‚ùå'}`);
            log(`   üóÑÔ∏è –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î: ${analysis.hasRealQueries ? '‚úÖ' : '‚ùå'}`);
            log(`   ‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${analysis.hasProperAsync ? '‚úÖ' : '‚ùå'}`);
            log(`   üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: ${analysis.hasConfigIntegration ? '‚úÖ' : '‚ùå'}`);
            log(`   üö´ –ò–∑–±–µ–≥–∞–µ—Ç Mock: ${analysis.avoidsMockPatterns ? '‚úÖ' : '‚ùå'}`);
            log(`   üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${analysis.readinessPercent}%`);
            
            if (analysis.isReady) {
                log(`‚úÖ ${service.name}: –ì–û–¢–û–í –∫ —Ä–∞–±–æ—Ç–µ —Å –ë–î`, 'success');
                if (service.critical) criticalServicesReady++;
            } else {
                log(`‚ùå ${service.name}: –ù–ï –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –ë–î`, 'error');
            }
        } else {
            log(`‚ùå ${service.name}: ${analysis.error}`, 'error');
        }
        
        log(''); // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    });
    
    return {
        results: serviceResults,
        criticalReady: criticalServicesReady,
        totalCritical: totalCriticalServices,
        readyPercent: Math.round((criticalServicesReady / totalCriticalServices) * 100)
    };
}

function checkMockModeDisabled() {
    log('üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Mock —Ä–µ–∂–∏–º–∞...');
    
    try {
        const apiConfigPath = join(__dirname, 'src/services/apiConfigServiceDB.ts');
        const content = readFileSync(apiConfigPath, 'utf8');
        
        const mockDisabledChecks = {
            hasForceFlag: content.includes('const forceDatabaseMode = true'),
            returnsAlwaysFalse: content.includes('return false; // MOCK –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù'),
            hasDisableConfig: content.includes('disableMock: true'),
            noMockConnections: !content.includes("type: 'mock'")
        };
        
        const allChecksPass = Object.values(mockDisabledChecks).every(Boolean);
        
        log(`   üîß Force database mode: ${mockDisabledChecks.hasForceFlag ? '‚úÖ' : '‚ùå'}`);
        log(`   üö´ Always returns false: ${mockDisabledChecks.returnsAlwaysFalse ? '‚úÖ' : '‚ùå'}`);
        log(`   ‚öôÔ∏è Disable config present: ${mockDisabledChecks.hasDisableConfig ? '‚úÖ' : '‚ùå'}`);
        log(`   üìù No mock connections: ${mockDisabledChecks.noMockConnections ? '‚úÖ' : '‚ùå'}`);
        
        if (allChecksPass) {
            log('‚úÖ Mock —Ä–µ–∂–∏–º –ü–û–õ–ù–û–°–¢–¨–Æ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–¥–µ', 'success');
        } else {
            log('‚ö†Ô∏è Mock —Ä–µ–∂–∏–º –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω', 'warning');
        }
        
        return { disabled: allChecksPass, checks: mockDisabledChecks };
        
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Mock —Ä–µ–∂–∏–º–∞: ${error.message}`, 'error');
        return { disabled: false, error: error.message };
    }
}

function generateValidationReport(infrastructureCheck, servicesCheck, mockCheck) {
    const report = {
        timestamp: new Date().toISOString(),
        summary: {
            infrastructureReady: infrastructureCheck.ready,
            criticalServicesReady: servicesCheck.criticalReady,
            totalCriticalServices: servicesCheck.totalCritical,
            criticalReadyPercent: servicesCheck.readyPercent,
            mockDisabled: mockCheck.disabled,
            overallHealthy: false
        },
        details: {
            infrastructure: infrastructureCheck.results,
            services: servicesCheck.results,
            mockStatus: mockCheck
        },
        recommendations: []
    };
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    report.summary.overallHealthy = 
        infrastructureCheck.ready && 
        servicesCheck.readyPercent >= 90 && 
        mockCheck.disabled;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if (!infrastructureCheck.ready) {
        report.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ Supabase');
    }
    
    if (servicesCheck.readyPercent < 90) {
        report.recommendations.push('–î–æ–≤–µ—Å—Ç–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–æ 90%+');
    }
    
    if (!mockCheck.disabled) {
        report.recommendations.push('–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∏—Ç—å Mock —Ä–µ–∂–∏–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }
    
    if (report.summary.overallHealthy) {
        report.recommendations.push('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å –ë–î');
    }
    
    return report;
}

async function runDatabaseValidation() {
    log('üöÄ –ó–ê–ü–£–°–ö –í–ê–õ–ò–î–ê–¶–ò–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –†–ï–ê–õ–¨–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•...\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´ SUPABASE');
    const infrastructureCheck = validateCoreInfrastructure();
    log('');
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-—Å–µ—Ä–≤–∏—Å–æ–≤
    log('2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ò–ó–ù–ï–°-–°–ï–†–í–ò–°–û–í');
    const servicesCheck = validateBusinessServices();
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Mock
    log('3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø MOCK –†–ï–ñ–ò–ú–ê');
    const mockCheck = checkMockModeDisabled();
    log('');
    
    // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    const report = generateValidationReport(infrastructureCheck, servicesCheck, mockCheck);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const reportPath = join(__dirname, `database-validation-report-${Date.now()}.json`);
    writeFileSync(reportPath, JSON.stringify(report, null, 2));
    
    // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
    log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò');
    log('=' * 60);
    log(`üèóÔ∏è –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞: ${infrastructureCheck.ready ? '‚úÖ' : '‚ùå'}`);
    log(`üíº –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã: ${servicesCheck.criticalReady}/${servicesCheck.totalCritical} (${servicesCheck.readyPercent}%)`);
    log(`üö´ Mock –æ—Ç–∫–ª—é—á–µ–Ω: ${mockCheck.disabled ? '‚úÖ' : '‚ùå'}`);
    log(`üéØ –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${report.summary.overallHealthy ? '‚úÖ –ì–û–¢–û–í–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –†–ê–ë–û–¢–´'}`);
    
    if (report.recommendations.length > 0) {
        log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        report.recommendations.forEach(rec => log(`   - ${rec}`));
    }
    
    log(`\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: ${reportPath}`);
    
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    if (report.summary.overallHealthy) {
        log('\nüéâ –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê: –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –ë–î!', 'success');
        return { success: true, report };
    } else {
        log('\n‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–ö–ê–ó–ê–õ–ê –ü–†–û–ë–õ–ï–ú–´: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞', 'warning');
        return { success: false, report };
    }
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
runDatabaseValidation()
    .then(result => {
        if (result.success) {
            log('\n‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û', 'success');
            process.exit(0);
        } else {
            log('\n‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –ó–ê–ú–ï–ß–ê–ù–ò–Ø–ú–ò', 'warning');
            process.exit(1);
        }
    })
    .catch(error => {
        log(`\nüí• –û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò: ${error.message}`, 'error');
        process.exit(1);
    });