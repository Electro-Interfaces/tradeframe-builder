const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase (–∏—Å–ø–æ–ª—å–∑—É–µ–º SERVICE_ROLE key –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

async function executeDirectSQL() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã...');
  
  try {
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É system_config...');
    const createTableResult = await supabase.rpc('exec_sql', {
      sql_query: `
        CREATE TABLE IF NOT EXISTS system_config (
          id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
          config_key text UNIQUE NOT NULL,
          config_value jsonb NOT NULL,
          description text,
          created_at timestamp with time zone DEFAULT now(),
          updated_at timestamp with time zone DEFAULT now(),
          is_active boolean DEFAULT true
        );
      `
    });
    
    if (createTableResult.error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', createTableResult.error.message);
      
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é –≤—Å—Ç–∞–≤–∫—É
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—É—é –≤—Å—Ç–∞–≤–∫—É...');
      const { data: testInsert, error: testError } = await supabase
        .from('system_config')
        .select('count')
        .limit(1);
      
      if (testError && testError.code === '42P01') {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ system_config –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ SQL...');
        
        // –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
        const { error: directError } = await supabase.rpc('exec_sql', { 
          sql_query: `
            DO $$
            BEGIN
              CREATE TABLE IF NOT EXISTS system_config (
                id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
                config_key text UNIQUE NOT NULL,
                config_value jsonb NOT NULL,
                description text,
                created_at timestamp with time zone DEFAULT now(),
                updated_at timestamp with time zone DEFAULT now(),
                is_active boolean DEFAULT true
              );
              
              ALTER TABLE system_config ENABLE ROW LEVEL SECURITY;
              
              CREATE POLICY IF NOT EXISTS "Enable read access for all users" ON system_config
                FOR SELECT USING (true);
                
              CREATE POLICY IF NOT EXISTS "Enable insert for all users" ON system_config
                FOR INSERT WITH CHECK (true);
                
              CREATE POLICY IF NOT EXISTS "Enable update for all users" ON system_config
                FOR UPDATE USING (true);
            EXCEPTION
              WHEN OTHERS THEN
                RAISE NOTICE 'Error: %', SQLERRM;
            END$$;
          `
        });
        
        if (directError) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ SQL:', directError.message);
        } else {
          console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL');
        }
      }
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ system_config —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // 2. –í—Å—Ç–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
    console.log('üìù –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
    const configData = {
      enabled: false,
      baseUrl: "https://pos.autooplata.ru/tms",
      systemId: "15",
      defaultStationId: "77",
      timeout: 30000,
      authType: "basic",
      username: "UserApi",
      password: "lHQfLZHzB3tn",
      endpoints: {
        tanks: "/api/get_level_measure",
        transactions: "/api/get_transactions",
        auth: "/api/auth",
        services: "/api/get_services",
        prices: "/api/get_prices",
        monitoring: "/api/monitoring"
      },
      defaultParams: {
        refreshInterval: 60,
        maxRecords: 1000
      },
      retryAttempts: 3,
      universalMapping: {
        enabled: false,
        syncStrategy: "hybrid",
        conflictResolution: "prefer_internal",
        mappings: []
      }
    };
    
    // –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ upsert
    const { data: insertedConfig, error: insertError } = await supabase
      .from('system_config')
      .upsert({
        config_key: 'trading_network_integration',
        config_value: configData,
        description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏',
        is_active: true
      }, {
        onConflict: 'config_key'
      })
      .select()
      .single();
    
    if (insertError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', insertError.message);
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ SQL
      const { error: sqlInsertError } = await supabase.rpc('exec_sql', {
        sql_query: `
          INSERT INTO system_config (config_key, config_value, description, is_active)
          VALUES (
            'trading_network_integration',
            '${JSON.stringify(configData)}'::jsonb,
            '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏',
            true
          )
          ON CONFLICT (config_key) 
          DO UPDATE SET 
            config_value = EXCLUDED.config_value,
            updated_at = now();
        `
      });
      
      if (sqlInsertError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ SQL –≤—Å—Ç–∞–≤–∫–∏:', sqlInsertError.message);
      } else {
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ SQL');
      }
    } else {
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞:', insertedConfig.id);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    const { data: config, error: configError } = await supabase
      .from('system_config')
      .select('*')
      .eq('config_key', 'trading_network_integration')
      .single();
    
    if (configError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', configError.message);
    } else {
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ –Ω–∞–π–¥–µ–Ω–∞:');
      console.log('üìã ID:', config.id);
      console.log('üîë –ö–ª—é—á:', config.config_key);
      console.log('üìù –û–ø–∏—Å–∞–Ω–∏–µ:', config.description);
      console.log('‚ö° –ê–∫—Ç–∏–≤–Ω–∞:', config.is_active);
      console.log('üïí –°–æ–∑–¥–∞–Ω–∞:', config.created_at);
      console.log('üì¶ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', JSON.stringify(config.config_value).length, '—Å–∏–º–≤–æ–ª–æ–≤');
    }
    
    console.log('\n‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('üìã Stack trace:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏...');
executeDirectSQL().then(() => {
  console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch((error) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});