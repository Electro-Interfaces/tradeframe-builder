/**
 * –ü—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_preferences —á–µ—Ä–µ–∑ Supabase REST API
 */

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

async function executeSQL() {
  console.log('üîß –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É user_preferences...');
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ –ø–æ–ª–∏—Ç–∏–∫ RLS
  const createTableSQL = `
    CREATE TABLE IF NOT EXISTS user_preferences (
      id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
      user_id UUID NOT NULL,
      preference_key VARCHAR(100) NOT NULL,
      preference_value TEXT,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(user_id, preference_key)
    );
  `;
  
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ PostgREST direct SQL execution
    const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
      method: 'POST',
      headers: {
        'apikey': serviceKey,
        'Authorization': `Bearer ${serviceKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        sql: createTableSQL
      })
    });
    
    if (response.ok) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ exec_sql RPC');
    } else {
      const error = await response.text();
      console.log('‚ùå exec_sql –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
      await tryAlternativeMethods();
    }
    
  } catch (error) {
    console.log('‚ùå –ü—Ä—è–º–æ–π SQL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
    await tryAlternativeMethods();
  }
}

async function tryAlternativeMethods() {
  console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...');
  
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    const testResponse = await fetch(`${supabaseUrl}/rest/v1/user_preferences`, {
      method: 'POST',
      headers: {
        'apikey': serviceKey,
        'Authorization': `Bearer ${serviceKey}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=minimal'
      },
      body: JSON.stringify({
        user_id: '00000000-0000-0000-0000-000000000000',
        preference_key: 'test_key',
        preference_value: 'test_value'
      })
    });
    
    if (testResponse.ok) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_preferences —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞!');
      
      // –£–¥–∞–ª–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await fetch(`${supabaseUrl}/rest/v1/user_preferences?user_id=eq.00000000-0000-0000-0000-000000000000&preference_key=eq.test_key`, {
        method: 'DELETE',
        headers: {
          'apikey': serviceKey,
          'Authorization': `Bearer ${serviceKey}`
        }
      });
      
    } else {
      const error = await testResponse.text();
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error);
      
      if (error.includes('relation "user_preferences" does not exist')) {
        console.log('üìã –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ Supabase Dashboard');
        console.log('üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
        console.log('1. –ò–¥–∏—Ç–µ –Ω–∞ https://supabase.com/dashboard');
        console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç tohtryzyffcebtyvkxwh');
        console.log('3. SQL Editor ‚Üí New Query');
        console.log('4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∏–∑ —Ñ–∞–π–ª–∞ create-user-preferences-table.sql');
      }
    }
    
  } catch (error) {
    console.log('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏:', error.message);
  }
}

async function checkTableExists() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...');
  
  try {
    const response = await fetch(`${supabaseUrl}/rest/v1/user_preferences?limit=1`, {
      method: 'GET',
      headers: {
        'apikey': serviceKey,
        'Authorization': `Bearer ${serviceKey}`
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_preferences —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞');
      console.log('üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ:', data.length);
      return true;
    } else {
      const error = await response.text();
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error);
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    return false;
  }
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã user_preferences');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü–∞
  const tableExists = await checkTableExists();
  
  if (!tableExists) {
    console.log('üìù –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å...');
    await executeSQL();
  } else {
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è
  await checkTableExists();
}

main().catch(console.error);