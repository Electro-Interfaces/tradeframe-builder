/**
 * üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç 
 * —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase –±–µ–∑ Mock —Ä–µ–∂–∏–º–∞
 */

import { readFileSync, existsSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const criticalServices = [
    {
        name: 'Equipment Supabase',
        path: 'src/services/equipmentSupabase.ts',
        testQueries: ['list', 'create', 'update', 'delete'],
        table: 'equipment_templates',
        critical: true
    },
    {
        name: 'Operations Supabase',
        path: 'src/services/operationsSupabaseService.ts',
        testQueries: ['list', 'getById', 'create'],
        table: 'operations',
        critical: true
    },
    {
        name: 'Prices Supabase',
        path: 'src/services/pricesSupabaseService.ts',
        testQueries: ['list', 'current', 'history'],
        table: 'prices',
        critical: true
    },
    {
        name: 'Users Supabase',
        path: 'src/services/usersSupabaseService.ts',
        testQueries: ['list', 'create', 'update'],
        table: 'users',
        critical: true
    },
    {
        name: 'Tanks Service Supabase',
        path: 'src/services/tanksServiceSupabase.ts',
        testQueries: ['list', 'update'],
        table: 'tanks',
        critical: true
    },
    {
        name: 'Components Supabase',
        path: 'src/services/componentsSupabase.ts',
        testQueries: ['list', 'create'],
        table: 'components',
        critical: true
    },
    {
        name: 'Instructions Supabase',
        path: 'src/services/instructionsSupabaseService.ts',
        testQueries: ['list', 'create'],
        table: 'instructions',
        critical: false
    },
    {
        name: 'Messages Supabase',
        path: 'src/services/messagesSupabaseService.ts',
        testQueries: ['list', 'send'],
        table: 'messages',
        critical: false
    },
    {
        name: 'Workflows Supabase',
        path: 'src/services/workflowsSupabaseService.ts',
        testQueries: ['list', 'execute'],
        table: 'workflows',
        critical: false
    }
];

const testResults = {
    timestamp: new Date().toISOString(),
    totalServices: criticalServices.length,
    testedServices: 0,
    passedServices: 0,
    failedServices: 0,
    criticalServicesPassed: 0,
    totalCriticalServices: criticalServices.filter(s => s.critical).length,
    services: {},
    overallHealth: 0,
    supabaseConnected: false,
    mockCompletelyDisabled: false
};

function log(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    console.log(`[${timestamp}] ${icon} ${message}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ Supabase –∑–∞–ø—Ä–æ—Å—ã
function analyzeServiceForRealQueries(servicePath) {
    try {
        const fullPath = join(__dirname, servicePath);
        
        if (!existsSync(fullPath)) {
            return {
                exists: false,
                error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
            };
        }
        
        const content = readFileSync(fullPath, 'utf8');
        
        const analysis = {
            exists: true,
            hasSupabaseImport: content.includes('@supabase/supabase-js') || content.includes('createClient'),
            hasSupabaseQueries: content.includes('.select(') || content.includes('.insert(') || content.includes('.update(') || content.includes('.delete('),
            hasRealTableQueries: content.includes('.from(') || content.includes('from '),
            hasMockQueries: content.includes('mock') || content.includes('Mock') || content.includes('localStorage'),
            hasDirectDatabaseCalls: content.includes('supabase.') || content.includes('client.'),
            hasApiEndpoints: content.includes('/api/') || content.includes('fetch('),
            usesSupabaseClient: content.includes('supabaseClient') || content.includes('getSupabaseClient'),
            hasAsyncMethods: content.includes('async ') && content.includes('await '),
            exportsCount: (content.match(/export/g) || []).length,
            fileSize: content.length
        };
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Supabase
        analysis.realQueryScore = 0;
        if (analysis.hasSupabaseImport) analysis.realQueryScore += 2;
        if (analysis.hasSupabaseQueries) analysis.realQueryScore += 3;
        if (analysis.hasRealTableQueries) analysis.realQueryScore += 3;
        if (analysis.hasDirectDatabaseCalls) analysis.realQueryScore += 2;
        if (analysis.usesSupabaseClient) analysis.realQueryScore += 2;
        if (analysis.hasAsyncMethods) analysis.realQueryScore += 1;
        if (!analysis.hasMockQueries) analysis.realQueryScore += 2; // –ë–æ–Ω—É—Å –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Mock
        if (!analysis.hasApiEndpoints) analysis.realQueryScore += 1; // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        
        analysis.maxScore = 16;
        analysis.scorePercent = Math.round((analysis.realQueryScore / analysis.maxScore) * 100);
        
        analysis.isReady = analysis.scorePercent >= 80 && analysis.hasSupabaseQueries && !analysis.hasMockQueries;
        
        return analysis;
        
    } catch (error) {
        return {
            exists: false,
            error: error.message
        };
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function checkSupabaseConfiguration() {
    log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        const configFiles = [
            'src/services/supabaseConfigManager.ts',
            'src/services/apiConfigServiceDB.ts',
            'src/services/apiSwitch.ts'
        ];
        
        let configScore = 0;
        const configResults = {};
        
        configFiles.forEach(configFile => {
            const analysis = analyzeServiceForRealQueries(configFile);
            configResults[configFile] = analysis;
            
            if (analysis.exists && analysis.isReady) {
                configScore += 1;
                log(`‚úÖ ${configFile}: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (${analysis.scorePercent}%)`);
            } else if (analysis.exists) {
                log(`‚ö†Ô∏è ${configFile}: –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ (${analysis.scorePercent}%)`);
            } else {
                log(`‚ùå ${configFile}: ${analysis.error}`);
            }
        });
        
        const overallConfigHealth = Math.round((configScore / configFiles.length) * 100);
        log(`üìä –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${overallConfigHealth}%`);
        
        return {
            health: overallConfigHealth,
            ready: overallConfigHealth >= 80,
            details: configResults
        };
        
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`, 'error');
        return { health: 0, ready: false, error: error.message };
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
function testServiceRealQueries(service) {
    log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: ${service.name}`);
    
    const analysis = analyzeServiceForRealQueries(service.path);
    
    if (!analysis.exists) {
        log(`‚ùå ${service.name}: ${analysis.error}`, 'error');
        testResults.failedServices++;
        testResults.services[service.name] = {
            status: 'failed',
            error: analysis.error,
            critical: service.critical
        };
        return false;
    }
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    log(`üìä ${service.name} –∞–Ω–∞–ª–∏–∑:`);
    log(`   üîó Supabase –∏–º–ø–æ—Ä—Ç: ${analysis.hasSupabaseImport ? '‚úÖ' : '‚ùå'}`);
    log(`   üóÑÔ∏è Supabase –∑–∞–ø—Ä–æ—Å—ã: ${analysis.hasSupabaseQueries ? '‚úÖ' : '‚ùå'}`);
    log(`   üìã –ó–∞–ø—Ä–æ—Å—ã –∫ —Ç–∞–±–ª–∏—Ü–∞–º: ${analysis.hasRealTableQueries ? '‚úÖ' : '‚ùå'}`);
    log(`   üö´ Mock –∑–∞–ø—Ä–æ—Å—ã: ${analysis.hasMockQueries ? '‚ùå' : '‚úÖ'}`);
    log(`   üì° –ü—Ä—è–º—ã–µ DB –≤—ã–∑–æ–≤—ã: ${analysis.hasDirectDatabaseCalls ? '‚úÖ' : '‚ùå'}`);
    log(`   ‚ö° Async –º–µ—Ç–æ–¥—ã: ${analysis.hasAsyncMethods ? '‚úÖ' : '‚ùå'}`);
    log(`   üìà –û–±—â–∏–π –±–∞–ª–ª: ${analysis.realQueryScore}/${analysis.maxScore} (${analysis.scorePercent}%)`);
    
    const passed = analysis.isReady;
    
    if (passed) {
        log(`‚úÖ ${service.name}: –ì–û–¢–û–í –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º –∫ –ë–î (${analysis.scorePercent}%)`, 'success');
        testResults.passedServices++;
        
        if (service.critical) {
            testResults.criticalServicesPassed++;
            log(`üî• –ö–†–ò–¢–ò–ß–ù–´–ô —Å–µ—Ä–≤–∏—Å ${service.name} –≥–æ—Ç–æ–≤!`, 'success');
        }
        
        testResults.services[service.name] = {
            status: 'passed',
            score: analysis.scorePercent,
            analysis: analysis,
            critical: service.critical
        };
        
    } else {
        log(`‚ùå ${service.name}: –ù–ï –≥–æ—Ç–æ–≤ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º (${analysis.scorePercent}%)`, 'error');
        testResults.failedServices++;
        
        if (service.critical) {
            log(`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–ï–†–í–ò–° ${service.name} –ù–ï –ì–û–¢–û–í!`, 'error');
        }
        
        testResults.services[service.name] = {
            status: 'failed',
            score: analysis.scorePercent,
            analysis: analysis,
            critical: service.critical,
            issues: []
        };
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        const issues = [];
        if (!analysis.hasSupabaseImport) issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º–ø–æ—Ä—Ç Supabase');
        if (!analysis.hasSupabaseQueries) issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Supabase –∑–∞–ø—Ä–æ—Å—ã');
        if (analysis.hasMockQueries) issues.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Mock –∑–∞–ø—Ä–æ—Å—ã');
        if (!analysis.hasDirectDatabaseCalls) issues.push('–ù–µ—Ç –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∫ –ë–î');
        
        testResults.services[service.name].issues = issues;
        log(`   üîß –ü—Ä–æ–±–ª–µ–º—ã: ${issues.join(', ')}`);
    }
    
    testResults.testedServices++;
    return passed;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
function generateDetailedReport() {
    testResults.overallHealth = testResults.testedServices > 0 ? 
        Math.round((testResults.passedServices / testResults.testedServices) * 100) : 0;
    
    const criticalHealth = testResults.totalCriticalServices > 0 ?
        Math.round((testResults.criticalServicesPassed / testResults.totalCriticalServices) * 100) : 0;
    
    log('\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –ì–û–¢–û–í–ù–û–°–¢–ò –ö –†–ï–ê–õ–¨–ù–´–ú –ó–ê–ü–†–û–°–ê–ú –ö –ë–î');
    log('='.repeat(80));
    
    log(`üéØ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    log(`   üìä –í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${testResults.totalServices}`);
    log(`   ‚úÖ –ì–æ—Ç–æ–≤—ã –∫ –ë–î: ${testResults.passedServices}`);
    log(`   ‚ùå –ù–µ –≥–æ—Ç–æ–≤—ã: ${testResults.failedServices}`);
    log(`   üî• –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –≥–æ—Ç–æ–≤–æ: ${testResults.criticalServicesPassed}/${testResults.totalCriticalServices}`);
    log(`   üìà –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: ${testResults.overallHealth}%`);
    log(`   üéØ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å–µ: ${criticalHealth}%`);
    
    // –°—Ç–∞—Ç—É—Å –ø–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
    log(`\nüî• –°—Ç–∞—Ç—É—Å –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:`);
    Object.entries(testResults.services).forEach(([serviceName, result]) => {
        if (result.critical) {
            const icon = result.status === 'passed' ? '‚úÖ' : '‚ùå';
            const score = result.score || 0;
            log(`   ${icon} ${serviceName}: ${result.status} (${score}%)`);
            
            if (result.issues && result.issues.length > 0) {
                log(`      üîß –ü—Ä–æ–±–ª–µ–º—ã: ${result.issues.join(', ')}`);
            }
        }
    });
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
    
    if (testResults.overallHealth === 100) {
        log(`   üéâ –í–°–ï –°–ï–†–í–ò–°–´ –ì–û–¢–û–í–´ –ö –†–ï–ê–õ–¨–ù–´–ú –ó–ê–ü–†–û–°–ê–ú –ö –ë–î!`, 'success');
        log(`   ‚úÖ Mock —Ä–µ–∂–∏–º –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é`, 'success');
        log(`   üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`, 'success');
    } else if (testResults.overallHealth >= 80) {
        log(`   ‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –≥–æ—Ç–æ–≤–æ, –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è`, 'warning');
        log(`   üîß –°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö`, 'warning');
    } else {
        log(`   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤`, 'error');
        log(`   üö´ Mock —Ä–µ–∂–∏–º –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞—Ç—å –ù–ï–õ–¨–ó–Ø`, 'error');
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
    const reportPath = join(__dirname, `supabase-real-queries-report-${Date.now()}.json`);
    writeFileSync(reportPath, JSON.stringify(testResults, null, 2));
    log(`\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    
    return testResults;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runSupabaseRealQueriesTest() {
    log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –†–ï–ê–õ–¨–ù–´–• –ó–ê–ü–†–û–°–û–í –ö SUPABASE...\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò SUPABASE');
    const configCheck = checkSupabaseConfiguration();
    testResults.supabaseConnected = configCheck.ready;
    
    if (configCheck.ready) {
        log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n', 'success');
    } else {
        log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Supabase!\n', 'error');
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    log('2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –°–ï–†–í–ò–°–û–í –ù–ê –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –†–ï–ê–õ–¨–ù–´–ú –ó–ê–ü–†–û–°–ê–ú');
    
    for (const service of criticalServices) {
        testServiceRealQueries(service);
        log(''); // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    }
    
    // 3. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Mock —Ä–µ–∂–∏–º–∞
    log('3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–ì–û –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø MOCK –†–ï–ñ–ò–ú–ê');
    
    try {
        const apiConfigPath = join(__dirname, 'src/services/apiConfigServiceDB.ts');
        const content = readFileSync(apiConfigPath, 'utf8');
        
        const mockDisabled = content.includes('return false; // MOCK –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù') &&
                            content.includes('const forceDatabaseMode = true');
        
        if (mockDisabled) {
            log('‚úÖ Mock —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–¥–µ', 'success');
            testResults.mockCompletelyDisabled = true;
        } else {
            log('‚ùå Mock —Ä–µ–∂–∏–º –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω!', 'error');
            testResults.mockCompletelyDisabled = false;
        }
        
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Mock —Ä–µ–∂–∏–º–∞: ${error.message}`, 'error');
    }
    
    // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    const finalReport = generateDetailedReport();
    
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    log('\nüéØ –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    
    if (finalReport.overallHealth === 100 && finalReport.mockCompletelyDisabled && configCheck.ready) {
        log('üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï –¢–û–õ–¨–ö–û –° –ë–î!', 'success');
        log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Supabase', 'success');
        log('‚úÖ Mock —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω', 'success');
        log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'success');
        return { success: true, health: 100, ready: true };
    } else {
        const issues = [];
        if (finalReport.overallHealth < 100) issues.push(`–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${finalReport.overallHealth}%`);
        if (!finalReport.mockCompletelyDisabled) issues.push('Mock –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω');
        if (!configCheck.ready) issues.push('–ü—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        
        log(`‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê: ${issues.join(', ')}`, 'error');
        log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–ª–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –ë–î', 'warning');
        return { success: false, health: finalReport.overallHealth, issues: issues };
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
runSupabaseRealQueriesTest()
    .then(result => {
        if (result.success) {
            log('\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Ç–æ–ª—å–∫–æ —Å –ë–î!', 'success');
            process.exit(0);
        } else {
            log('\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞', 'warning');
            process.exit(1);
        }
    })
    .catch(error => {
        log(`\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: ${error.message}`, 'error');
        process.exit(1);
    });