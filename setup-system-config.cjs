/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã system_config –∏ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º HTTP –∫–ª–∏–µ–Ω—Ç–µ
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY;

console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
console.log('==================================');

async function setupSystemConfig() {
    if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
        console.error('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        console.error('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ .env —Å–æ–¥–µ—Ä–∂–∏—Ç:');
        console.error('VITE_SUPABASE_URL=https://your-project.supabase.co');
        console.error('SUPABASE_SERVICE_ROLE_KEY=your-service-role-key');
        process.exit(1);
    }

    console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase...');
    console.log(`URL: ${SUPABASE_URL}`);
    console.log(`Service Key: ${SUPABASE_SERVICE_KEY.substring(0, 30)}...`);

    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

    try {
        console.log('\nüìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã system_config');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        const { data: tableCheck, error: tableError } = await supabase
            .from('system_config')
            .select('count(*)', { count: 'exact', head: true });

        if (tableError && tableError.code === '42P01') {
            console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ system_config –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º...');
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            const { error: createError } = await supabase.rpc('exec_sql', {
                sql: `
                    CREATE TABLE system_config (
                        id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
                        config_key text UNIQUE NOT NULL,
                        config_value jsonb,
                        config_type text DEFAULT 'general',
                        description text,
                        is_encrypted boolean DEFAULT false,
                        created_at timestamp with time zone DEFAULT now(),
                        updated_at timestamp with time zone DEFAULT now()
                    );
                    
                    -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                    CREATE INDEX idx_system_config_key ON system_config(config_key);
                    CREATE INDEX idx_system_config_type ON system_config(config_type);
                    
                    -- –°–æ–∑–¥–∞–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏
                    ALTER TABLE system_config ENABLE ROW LEVEL SECURITY;
                    
                    -- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è (–∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø)
                    CREATE POLICY "system_config_select" ON system_config
                        FOR SELECT USING (true);
                    
                    -- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ service_role)
                    CREATE POLICY "system_config_insert" ON system_config
                        FOR INSERT WITH CHECK (auth.role() = 'service_role');
                    
                    CREATE POLICY "system_config_update" ON system_config
                        FOR UPDATE USING (auth.role() = 'service_role');
                    
                    CREATE POLICY "system_config_delete" ON system_config
                        FOR DELETE USING (auth.role() = 'service_role');
                `
            });

            if (createError) {
                // –ï—Å–ª–∏ RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL
                console.log('‚ö†Ô∏è RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL...');
                
                const createTableSql = `
                    CREATE TABLE IF NOT EXISTS system_config (
                        id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
                        config_key text UNIQUE NOT NULL,
                        config_value jsonb,
                        config_type text DEFAULT 'general',
                        description text,
                        is_encrypted boolean DEFAULT false,
                        created_at timestamp with time zone DEFAULT now(),
                        updated_at timestamp with time zone DEFAULT now()
                    )
                `;

                console.log('üìÑ SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:');
                console.log(createTableSql);
                console.log('\n‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç SQL –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard > SQL Editor');
                console.log('–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ');
                return;
            } else {
                console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ system_config —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            }
        } else if (tableError) {
            throw tableError;
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ system_config —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        console.log('\nüìã –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é database_connections');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î
        const { data: dbConfig, error: configError } = await supabase
            .from('system_config')
            .select('*')
            .eq('config_key', 'database_connections')
            .single();

        if (configError && configError.code === 'PGRST116') {
            console.log('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è database_connections –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º...');
            
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            const defaultConfig = {
                currentConnectionId: 'supabase-main',
                availableConnections: [
                    {
                        id: 'supabase-main',
                        name: '–û—Å–Ω–æ–≤–Ω–∞—è –ë–î Supabase',
                        type: 'supabase',
                        url: SUPABASE_URL,
                        description: '–û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase',
                        isActive: true,
                        isDefault: true,
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString(),
                        settings: {
                            timeout: 30000,
                            retryAttempts: 3,
                            ssl: true,
                            schema: 'public',
                            apiKey: SUPABASE_ANON_KEY,
                            serviceRoleKey: SUPABASE_SERVICE_KEY
                        }
                    }
                ],
                debugMode: true,
                lastUpdated: new Date().toISOString()
            };

            const { error: insertError } = await supabase
                .from('system_config')
                .insert({
                    config_key: 'database_connections',
                    config_value: defaultConfig,
                    config_type: 'database',
                    description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö'
                });

            if (insertError) {
                throw insertError;
            } else {
                console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è database_connections —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                console.log('   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: supabase-main');
                console.log(`   - URL: ${SUPABASE_URL}`);
                console.log('   - –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –≤–∫–ª—é—á–µ–Ω');
            }
        } else if (configError) {
            throw configError;
        } else {
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è database_connections —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            console.log(`   - ID: ${dbConfig.config_key}`);
            console.log(`   - –¢–∏–ø: ${dbConfig.config_type}`);
            console.log(`   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${dbConfig.config_value?.availableConnections?.length || 0}`);
        }

        console.log('\nüìã –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
        const { data: tradingConfig, error: tradingError } = await supabase
            .from('system_config')
            .select('*')
            .eq('config_key', 'trading_network_integration')
            .single();

        if (tradingError && tradingError.code === 'PGRST116') {
            console.log('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è trading_network_integration –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º...');
            
            const tradingNetworkConfig = {
                enabled: true,
                baseUrl: 'https://pos.autooplata.ru/tms',
                systemId: '',
                defaultStationId: '',
                authType: 'basic',
                username: 'UserApi',
                password: 'PasswordApi',
                apiKey: '',
                timeout: 30000,
                retryAttempts: 3,
                endpoints: {
                    tanks: '/tanks',
                    transactions: '/transactions'
                },
                defaultParams: {
                    refreshInterval: 60,
                    maxRecords: 1000,
                    dateFormat: 'YYYY-MM-DDTHH:mm:ss'
                },
                lastUpdated: new Date().toISOString()
            };

            const { error: tradingInsertError } = await supabase
                .from('system_config')
                .insert({
                    config_key: 'trading_network_integration',
                    config_value: tradingNetworkConfig,
                    config_type: 'api',
                    description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç—å—é'
                });

            if (tradingInsertError) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏:', tradingInsertError.message);
            } else {
                console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è trading_network_integration —Å–æ–∑–¥–∞–Ω–∞');
            }
        } else {
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è trading_network_integration —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:');
        console.log('‚Ä¢ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ system_config (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∞)');
        console.log('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
        console.log('‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è database_connections');
        console.log('‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏');
        console.log('\n‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        console.error('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.error('‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ service_role –∫–ª—é—á –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
        console.error('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase –ø—Ä–æ–µ–∫—Ç–∞');
        console.error('‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupSystemConfig();