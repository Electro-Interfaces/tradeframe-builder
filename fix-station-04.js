/**
 * –î–æ–∏—Å–ø—Ä–∞–≤–ª—è–µ–º station_04 –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

async function fixStation04() {
    console.log('üîß –î–æ–∏—Å–ø—Ä–∞–≤–ª—è–µ–º station_04...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
        const tradingPointsResponse = await fetch(`${supabaseUrl}/rest/v1/trading_points?limit=1`, {
            headers: {
                'apikey': serviceKey,
                'Authorization': `Bearer ${serviceKey}`
            }
        });
        
        const sampleTP = (await tradingPointsResponse.json())[0];
        console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', Object.keys(sampleTP));
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –±–µ–∑ is_active
        const networkId = sampleTP.network_id;
        const newTradingPoint = {
            network_id: networkId,
            name: '–ê–ó–° ‚Ññ004',
            external_id: 'station_04',
            address: '–ê–¥—Ä–µ—Å –ê–ó–° 004'
        };
        
        console.log('‚ûï –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É station_04...');
        
        const createResponse = await fetch(`${supabaseUrl}/rest/v1/trading_points`, {
            method: 'POST',
            headers: {
                'apikey': serviceKey,
                'Authorization': `Bearer ${serviceKey}`,
                'Content-Type': 'application/json',
                'Prefer': 'return=representation'
            },
            body: JSON.stringify(newTradingPoint)
        });
        
        if (createResponse.ok) {
            const [createdTP] = await createResponse.json();
            const newId = createdTP.id;
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ station_04 —Å ID ${newId}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ station_04...');
            
            const updateResponse = await fetch(`${supabaseUrl}/rest/v1/operations?trading_point_id=eq.station_04`, {
                method: 'PATCH',
                headers: {
                    'apikey': serviceKey,
                    'Authorization': `Bearer ${serviceKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ trading_point_id: newId })
            });
            
            if (updateResponse.ok) {
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è station_04`);
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:`, await updateResponse.text());
            }
            
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è station_04:', await createResponse.text());
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        console.log('\nüß™ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
        
        const checkResponse = await fetch(`${supabaseUrl}/rest/v1/operations?status=eq.completed&limit=100`, {
            headers: {
                'apikey': serviceKey,
                'Authorization': `Bearer ${serviceKey}`
            }
        });
        
        if (checkResponse.ok) {
            const operations = await checkResponse.json();
            const tradingPointIds = [...new Set(operations.map(op => op.trading_point_id))];
            console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ trading_point_id:', tradingPointIds);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            const allTPResponse = await fetch(`${supabaseUrl}/rest/v1/trading_points`, {
                headers: {
                    'apikey': serviceKey,
                    'Authorization': `Bearer ${serviceKey}`
                }
            });
            
            const allTradingPoints = await allTPResponse.json();
            const allTPIds = allTradingPoints.map(tp => tp.id);
            
            const validIds = tradingPointIds.filter(id => allTPIds.includes(id));
            const invalidIds = tradingPointIds.filter(id => !allTPIds.includes(id));
            
            console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID:', validIds.length);
            console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID:', invalidIds.length);
            
            if (invalidIds.length === 0) {
                console.log('üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –ü–û–õ–ù–û–°–¢–¨–Æ!');
                console.log('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º');
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É
                const testTradingPointId = validIds[0];
                console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ ${testTradingPointId}...`);
                
                const testResponse = await fetch(`${supabaseUrl}/rest/v1/operations?status=eq.completed&trading_point_id=eq.${testTradingPointId}`, {
                    headers: {
                        'apikey': serviceKey,
                        'Authorization': `Bearer ${serviceKey}`
                    }
                });
                
                const testOps = await testResponse.json();
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏: ${testOps.length}`);
                console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${testOps.reduce((sum, op) => sum + (op.total_cost || 0), 0)}`);
                
            } else {
                console.log('‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID:', invalidIds);
            }
        }
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞:', error);
    }
}

fixStation04().catch(console.error);