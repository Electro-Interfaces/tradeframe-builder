// Service Worker –¥–ª—è TradeFrame PWA - Full PWA Version
console.log('[SW] üöÄ TradeFrame Service Worker starting...', {
  timestamp: new Date().toISOString(),
  scope: self.registration.scope,
  location: self.location.href,
  userAgent: self.navigator.userAgent.substring(0, 50)
});

// –î–µ—Ç–µ–∫—Ü–∏—è iOS –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
const isIOS = /iPad|iPhone|iPod/.test(self.navigator.userAgent);
if (isIOS) {
  console.log('[SW] üçé iOS detected, applying iOS-specific PWA fixes');
}

const CACHE_NAME = `tradeframe-v${Date.now()}`; // –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å–±–æ—Ä–∫–∏
const BASE_PATH = new URL(self.registration.scope).pathname;

console.log('[SW] üîß Configuration:', {
  CACHE_NAME,
  BASE_PATH,
  scope: self.registration.scope
});

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CORE_CACHE_URLS = [
  BASE_PATH,
  BASE_PATH + 'index.html',
  BASE_PATH + 'manifest.json',
  BASE_PATH + 'icon.svg',
  BASE_PATH + 'favicon.ico',
  BASE_PATH + 'icon-192x192.png',
  BASE_PATH + 'icon-512x512.png'
];

// –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ SW —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
self.addEventListener('install', event => {
  console.log('[SW] Installing service worker version:', CACHE_NAME);
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('[SW] Caching core app resources');
        return cache.addAll(CORE_CACHE_URLS);
      })
      .then(() => {
        console.log('[SW] Core resources cached successfully');
        return self.skipWaiting(); // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π SW —Å—Ä–∞–∑—É
      })
      .catch(error => {
        console.error('[SW] Install failed:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        return Promise.resolve();
      })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è SW
self.addEventListener('activate', event => {
  console.log('[SW] Activating service worker');
  event.waitUntil(
    caches.keys()
      .then(cacheNames => {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–µ—à–∏
        return Promise.all(
          cacheNames.map(cacheName => {
            if (cacheName !== CACHE_NAME) {
              console.log('[SW] Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('[SW] Activation complete, claiming clients');
        return self.clients.claim();
      })
      .catch(error => {
        console.error('[SW] Activation failed:', error);
      })
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ fetch –∑–∞–ø—Ä–æ—Å–æ–≤ - Cache First –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏, Network First –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
self.addEventListener('fetch', event => {
  const url = new URL(event.request.url);

  // –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–∫–æ–Ω–∫–∏, –º–∞–Ω–∏—Ñ–µ—Å—Ç)
  if (event.request.destination === 'image' ||
      url.pathname.endsWith('.png') ||
      url.pathname.endsWith('.svg') ||
      url.pathname.endsWith('.ico') ||
      url.pathname.endsWith('manifest.json')) {
    event.respondWith(
      caches.match(event.request)
        .then(cachedResponse => {
          if (cachedResponse) {
            return cachedResponse;
          }
          return fetch(event.request).then(networkResponse => {
            // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if (networkResponse.ok) {
              const responseClone = networkResponse.clone();
              caches.open(CACHE_NAME).then(cache => {
                cache.put(event.request, responseClone);
              });
            }
            return networkResponse;
          });
        })
        .catch(() => {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          if (event.request.destination === 'image') {
            return new Response('', { status: 404 });
          }
        })
    );
  }
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è SPA
  else if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request)
        .catch((error) => {
          console.log('[SW] Navigation failed, returning cached index.html', { error: error.message, isIOS });
          if (isIOS) {
            console.log('[SW] üçé iOS PWA navigation error, applying iOS-specific handling');
          }
          return caches.match(BASE_PATH + 'index.html')
            .then(cachedResponse => {
              if (cachedResponse) {
                return cachedResponse;
              }
              // Fallback offline —Å—Ç—Ä–∞–Ω–∏—Ü–∞
              return new Response(`
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>TradeFrame - –û—Ñ–ª–∞–π–Ω</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body {
      margin: 0; padding: 20px; font-family: Arial, sans-serif;
      background: #1e293b; color: white; text-align: center;
    }
    .offline { margin-top: 50px; }
    .retry { margin-top: 20px; padding: 10px 20px; background: #3b82f6;
             color: white; border: none; border-radius: 5px; cursor: pointer; }
  </style>
</head>
<body>
  <div class="offline">
    <h1>üåê TradeFrame</h1>
    <p>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p>
    <button class="retry" onclick="window.location.reload()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
  </div>
</body>
</html>`, {
                headers: { 'Content-Type': 'text/html' }
              });
            });
        })
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('[SW] Received SKIP_WAITING message, activating new version');
    self.skipWaiting();
  }
});
/*
const CACHE_NAME = 'tradecontrol-v1';
const OFFLINE_URL = '/offline.html';

// –†–µ—Å—É—Ä—Å—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_URLS = [
  '/',
  '/offline.html',
  '/manifest.json',
  '/icon.svg',
  '/favicon.ico'
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', event => {
  console.log('[SW] Installing...');
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('[SW] Caching app shell');
        return cache.addAll(CACHE_URLS);
      })
      .then(() => {
        console.log('[SW] Installed successfully');
        return self.skipWaiting();
      })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', event => {
  console.log('[SW] Activating...');
  
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('[SW] Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('[SW] Activated successfully');
      return self.clients.claim();
    })
  );
});

*/