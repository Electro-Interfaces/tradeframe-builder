import React, { createContext, useContext, useEffect, useState } from "react";
import { networksService } from "@/services/networksService";
import { tradingPointsService } from "@/services/tradingPointsService";
import { Network } from "@/types/network";
import { useAuth } from "@/contexts/AuthContext";

type SelectionContextValue = {
  selectedNetwork: Network | null;
  setSelectedNetwork: (networkId: string) => void;
  selectedTradingPoint: string;
  setSelectedTradingPoint: (v: string) => void;
  isAllTradingPoints: boolean;
};

const SelectionContext = createContext<SelectionContextValue | undefined>(undefined);

export function SelectionProvider({ children }: { children: React.ReactNode }) {
  const [selectedNetworkId, setSelectedNetworkId] = useState<string>("");
  const [selectedTradingPoint, setSelectedTradingPoint] = useState<string>("");
  const { user } = useAuth();

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–µ—Ç–∏ –ø–æ ID
  const [selectedNetwork, setSelectedNetworkState] = useState<Network | null>(null);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    if (!selectedNetworkId) {
      networksService.getAll().then(networks => {
        if (networks.length > 0) {
          // –î–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–µ—Ç–∏ –ë–¢–û
          if (user && user.role === 'bto_manager') {
            const btoNetwork = networks.find(n => n.external_id === "15" || n.name?.toLowerCase().includes('–±—Ç–æ'));
            if (btoNetwork) {
              setSelectedNetworkId(btoNetwork.id);
            } else {
              console.error('BTO network not found for manager role');
            }
          } else {
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π - –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞
            const btoNetwork = networks.find(n => n.name && n.name.toLowerCase().includes('–±—Ç–æ'));
            const demoNetwork = networks.find(n => n.external_id === "1");
            const networkToSelect = btoNetwork || demoNetwork || networks[0];
            setSelectedNetworkId(networkToSelect.id);
          }
        }
      }).catch(error => {
        console.error('Failed to load networks at startup:', error);
      });
    }
  }, [user]);
  
  useEffect(() => {
    if (selectedNetworkId) {
      networksService.getById(selectedNetworkId)
        .then(network => {
          setSelectedNetworkState(network);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É "–ê–ó–° 4" –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –∏ –µ—Å–ª–∏ localStorage –ø—É—Å—Ç
          if (!selectedTradingPoint && typeof window !== 'undefined') {
            const savedTradingPoint = localStorage.getItem("tc:selectedTradingPoint");
            if (!savedTradingPoint || savedTradingPoint.trim() === '') {
              tradingPointsService.getByNetworkId(selectedNetworkId)
                .then(tradingPoints => {
                  // –ò—â–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É "–ê–ó–° 4" –∏–ª–∏ —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                  const azs4Point = tradingPoints.find(p => 
                    p.name && (
                      p.name.toLowerCase().includes('–∞–∑—Å 4') || 
                      p.name.toLowerCase().includes('–∞–∑—Å4') ||
                      p.name.toLowerCase() === '–∞–∑—Å 4'
                    )
                  );
                  
                  if (azs4Point) {
                    setSelectedTradingPoint(azs4Point.id);
                  } else if (tradingPoints.length > 0) {
                    // –ï—Å–ª–∏ –ê–ó–° 4 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                    setSelectedTradingPoint(tradingPoints[0].id);
                  }
                })
                .catch(error => {
                  console.error('Failed to load trading points:', error);
                });
            }
          }
        })
        .catch(error => {
          console.error('Failed to load network:', error);
          setSelectedNetworkState(null);
          // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
          networksService.getAll().then(networks => {
            if (networks.length > 0) {
              console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Ç—å:', networks[0]);
              setSelectedNetworkId(networks[0].id);
            }
          });
        });
    } else {
      setSelectedNetworkState(null);
    }
  }, [selectedNetworkId]);

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è setSelectedNetwork, –∫–æ—Ç–æ—Ä–∞—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∏
  const handleSetSelectedNetwork = (networkId: string) => {
    // –î–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —Ä–∞–∑—Ä–µ—à–∞–µ–º –º–µ–Ω—è—Ç—å —Å–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ë–¢–û
    if (user && user.role === 'bto_manager') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Å–µ—Ç—å - —ç—Ç–æ –ë–¢–û
      networksService.getById(networkId).then(network => {
        if (network && (network.external_id === "15" || network.name?.toLowerCase().includes('–±—Ç–æ'))) {
          setSelectedNetworkId(networkId);
          if (selectedTradingPoint) {
            setSelectedTradingPoint("");
          }
        } else {
          console.warn('BTO manager access denied for network:', network?.name);
          // –ù–µ –º–µ–Ω—è–µ–º —Å–µ—Ç—å, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –ë–¢–û
        }
      }).catch(error => {
        console.error('Network validation error:', error);
      });
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π - –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
      setSelectedNetworkId(networkId);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∏
      if (selectedTradingPoint) {
        setSelectedTradingPoint("");
      }
    }
  };

  // Hydrate from localStorage on first mount
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (typeof window !== 'undefined') {
      try {
        const savedNetwork = localStorage.getItem("tc:selectedNetwork");
        const savedTradingPoint = localStorage.getItem("tc:selectedTradingPoint");
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if (savedNetwork && savedNetwork.trim()) {
          console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç—å –∏–∑ localStorage:', savedNetwork);
          setSelectedNetworkId(savedNetwork);
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if (savedTradingPoint) {
          setSelectedTradingPoint(savedTradingPoint);
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è LocalStorage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', e);
      }
    }
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å selectedNetworkId

  // Persist to localStorage
  useEffect(() => {
    if (typeof window !== 'undefined') {
      try {
        localStorage.setItem("tc:selectedNetwork", selectedNetworkId || "");
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', e);
      }
    }
  }, [selectedNetworkId]);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      try {
        localStorage.setItem("tc:selectedTradingPoint", selectedTradingPoint || "");
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', e);
      }
    }
  }, [selectedTradingPoint]);

  const isAllTradingPoints = selectedTradingPoint === "all";

  const value: SelectionContextValue = {
    selectedNetwork,
    setSelectedNetwork: handleSetSelectedNetwork,
    selectedTradingPoint,
    setSelectedTradingPoint,
    isAllTradingPoints,
  };

  return (
    <SelectionContext.Provider value={value}>{children}</SelectionContext.Provider>
  );
}

export function useSelection() {
  const ctx = useContext(SelectionContext);
  if (!ctx) throw new Error("useSelection must be used within SelectionProvider");
  return ctx;
}

