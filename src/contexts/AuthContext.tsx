import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { SupabaseAuthService, type AuthUser } from '../services/supabaseAuthService';
import { testServiceConnection } from '../services/supabaseServiceClient';

// –¢–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π
export interface User {
  id: string;
  email: string;
  name: string;
  role: string;
  networkId?: string;
  tradingPointIds: string[];
  permissions: string[];
  status?: 'active' | 'inactive' | 'blocked';
  lastLogin?: string;
}

export interface UserRole {
  roleId: number;
  roleName: string;
  roleCode: string;
  scope: 'Global' | 'Network' | 'Trading Point' | 'Assigned';
  scopeValue?: string | null;
  permissions: string[];
}

export interface Role {
  id: number;
  name: string;
  code: string;
  scope: 'Global' | 'Network' | 'Trading Point' | 'Assigned';
  description: string;
  isSystem: boolean;
  permissions: string[];
}

// –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export const SYSTEM_ROLES: Role[] = [
  {
    id: 1,
    name: "–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    code: "super_admin",
    scope: "Global",
    description: "–ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ",
    isSystem: false, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    permissions: ["all"]
  },
  {
    id: 2,
    name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–µ—Ç–∏",
    code: "network_admin", 
    scope: "Network",
    description: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏ –ê–ó–°",
    isSystem: false, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    permissions: [
      "network.manage", "points.manage", "users.manage", "roles.assign",
      "tanks.manage", "calibration.perform", "prices.manage", "reports.view",
      "audit.view", "workflows.manage"
    ]
  },
  {
    id: 3,
    name: "–ú–µ–Ω–µ–¥–∂–µ—Ä –¢–æ—á–∫–∏",
    code: "point_manager",
    scope: "Trading Point", 
    description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–æ–π",
    isSystem: false, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    permissions: [
      "point.manage", "tanks.view", "tanks.calibrate", "tanks.settings",
      "prices.edit", "reports.view", "drains.approve", "operations.manage"
    ]
  },
  {
    id: 4,
    name: "–û–ø–µ—Ä–∞—Ç–æ—Ä / –ö–∞—Å—Å–∏—Ä",
    code: "operator",
    scope: "Trading Point",
    description: "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ", 
    isSystem: false, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    permissions: [
      "transactions.create", "shifts.manage", "reports.view",
      "tanks.view", "drains.view", "prices.view"
    ]
  },
  {
    id: 5,
    name: "–í–æ–¥–∏—Ç–µ–ª—å –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä", 
    code: "driver",
    scope: "Assigned",
    description: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–∏–≤–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
    isSystem: false, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    permissions: [
      "deliveries.register", "fuel.unload", "drains.create", "tanks.view"
    ]
  }
];

// –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const MOCK_CURRENT_USER: User = {
  id: 1,
  email: "admin@example.com", 
  firstName: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
  lastName: "–°–∏—Å—Ç–µ–º—ã",
  phone: "+7 (999) 123-45-67",
  status: 'active',
  lastLogin: "16.12.2024 14:30",
  roles: [
    {
      roleId: 2,
      roleName: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–µ—Ç–∏", 
      roleCode: "network_admin",
      scope: "Network",
      scopeValue: "–°–µ—Ç—å –¶–µ–Ω—Ç—Ä",
      permissions: [
        "network.manage", "points.manage", "users.manage", "roles.assign",
        "tanks.manage", "calibration.perform", "prices.manage", "reports.view",
        "audit.view", "workflows.manage"
      ]
    }
  ],
  permissions: [
    "network.manage", "points.manage", "users.manage", "roles.assign",
    "tanks.manage", "calibration.perform", "prices.manage", "reports.view", 
    "audit.view", "workflows.manage"
  ]
};

interface AuthContextType {
  user: User | null;
  roles: Role[];
  loading: boolean;
  hasPermission: (permission: string) => boolean;
  hasRole: (roleCode: string) => boolean;
  canManageTanks: () => boolean;
  canCalibrate: () => boolean;
  canManagePrices: () => boolean;
  canManageUsers: () => boolean;
  canViewReports: () => boolean;
  canApproveDrains: () => boolean;
  getUserRole: () => string;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  refreshUser: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<User | null>(null);
  const [roles, setRoles] = useState<Role[]>(SYSTEM_ROLES);
  const [loading, setLoading] = useState(true);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        if (typeof window !== 'undefined') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
          const savedUser = localStorage.getItem('currentUser');
          const authToken = localStorage.getItem('auth_token');
          
          if (savedUser && authToken) {
            try {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ savedUser —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON
              if (savedUser.startsWith('[object Object]') || savedUser === '[object Object]') {
                console.warn('üö´ Corrupted localStorage data detected, clearing...');
                localStorage.removeItem('currentUser');
                localStorage.removeItem('auth_token');
                setUser(null);
                return;
              }
              
              // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
              const parsedUser = JSON.parse(savedUser);
              console.log('üîÑ Restoring user from localStorage:', parsedUser);
              setUser(parsedUser);
            } catch (error) {
              console.error('‚ùå Error parsing saved user data:', error);
              console.log('üßπ Clearing corrupted localStorage data');
              localStorage.removeItem('currentUser');
              localStorage.removeItem('auth_token');
              setUser(null);
            }
          } else {
            // –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–æ–π—Ç–∏
            setUser(null);
            console.log('‚ùå No saved session - user needs to login');
          }
        } else {
          // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
          setUser(null);
        }
      } catch (error) {
        console.error('Auth initialization error:', error);
        setUser(null);
        // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (typeof window !== 'undefined') {
          localStorage.removeItem('currentUser');
          localStorage.removeItem('auth_token');
        }
      } finally {
        setLoading(false);
      }
    };

    initializeAuth();
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  const hasPermission = (permission: string): boolean => {
    if (!user) return false;
    
    // –°—É–ø–µ—Ä –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if (user.permissions.includes('all')) return true;
    
    return user.permissions.includes(permission);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏
  const hasRole = (roleCode: string): boolean => {
    if (!user) return false;
    
    return user.roles.some(role => role.roleCode === roleCode);
  };

  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  const canManageTanks = (): boolean => {
    return hasPermission('tanks.manage') || hasRole('network_admin') || hasRole('super_admin');
  };

  const canCalibrate = (): boolean => {
    return hasPermission('calibration.perform') || hasPermission('tanks.calibrate') || 
           hasRole('network_admin') || hasRole('point_manager') || hasRole('super_admin');
  };

  const canManagePrices = (): boolean => {
    return hasPermission('prices.manage') || hasPermission('prices.edit') ||
           hasRole('network_admin') || hasRole('point_manager') || hasRole('super_admin');
  };

  const canManageUsers = (): boolean => {
    return hasPermission('users.manage') || hasRole('network_admin') || hasRole('super_admin');
  };

  const canViewReports = (): boolean => {
    return hasPermission('reports.view') || hasRole('operator') || 
           hasRole('point_manager') || hasRole('network_admin') || hasRole('super_admin');
  };

  const canApproveDrains = (): boolean => {
    return hasPermission('drains.approve') || hasRole('point_manager') || 
           hasRole('network_admin') || hasRole('super_admin');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const getUserRole = (): string => {
    if (!user || user.roles.length === 0) return 'driver';
    
    const primaryRole = user.roles[0];
    
    switch (primaryRole.roleCode) {
      case 'super_admin':
      case 'network_admin':
        return 'admin';
      case 'point_manager':
        return 'manager';
      case 'operator':
        return 'operator';
      case 'driver':
      default:
        return 'driver';
    }
  };

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ Supabase
  const login = async (email: string, password: string): Promise<void> => {
    setLoading(true);
    try {
      console.log('üîê Starting login process for:', email);
      const authUser = await SupabaseAuthService.login(email, password);
      console.log('‚úÖ AuthUser from Supabase:', authUser);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º AuthUser –≤ User –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const contextUser: User = {
        id: authUser.id,
        email: authUser.email,
        name: authUser.name, // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        role: authUser.role,
        networkId: authUser.networkId,
        tradingPointIds: authUser.tradingPointIds,
        permissions: authUser.permissions,
        status: 'active',
        lastLogin: new Date().toISOString()
      };

      console.log('üéØ Context user being set:', contextUser);
      setUser(contextUser);
      
      // RLS –Ω–µ –Ω—É–∂–µ–Ω –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ service role –∫–ª—é—á–∞
      console.log('‚úÖ Using service role key - RLS bypassed');
      
      if (typeof window !== 'undefined') {
        try {
          const userJson = JSON.stringify(contextUser);
          console.log('üíæ Saving user as JSON:', userJson);
          localStorage.setItem('currentUser', userJson);
          localStorage.setItem('auth_token', 'supabase_session');
          console.log('‚úÖ Successfully saved to localStorage');
        } catch (error) {
          console.error('‚ùå Error saving user to localStorage:', error);
        }
      }
    } catch (error: any) {
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    } finally {
      setLoading(false);
    }
  };

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const logout = async (): Promise<void> => {
    try {
      console.log('üö™ Starting logout process');
      await SupabaseAuthService.logout();
      setUser(null);
      
      if (typeof window !== 'undefined') {
        localStorage.removeItem('currentUser');
        localStorage.removeItem('auth_token');
        console.log('üßπ Cleared localStorage on logout');
      }
    } catch (error: any) {
      console.error('‚ùå Logout error:', error);
      // –î–∞–∂–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setUser(null);
      if (typeof window !== 'undefined') {
        localStorage.removeItem('currentUser');
        localStorage.removeItem('auth_token');
        console.log('üßπ Force cleared localStorage after error');
      }
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const refreshUser = async (): Promise<void> => {
    setLoading(true);
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤
      if (user) {
        const updatedUser = { ...user };
        setUser(updatedUser);
        if (typeof window !== 'undefined') {
          localStorage.setItem('currentUser', JSON.stringify(updatedUser));
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    } finally {
      setLoading(false);
    }
  };

  const value: AuthContextType = {
    user,
    roles,
    loading,
    hasPermission,
    hasRole,
    canManageTanks,
    canCalibrate,
    canManagePrices,
    canManageUsers,
    canViewReports,
    canApproveDrains,
    getUserRole,
    login,
    logout,
    refreshUser
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

// –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
export function usePermissions() {
  const { hasPermission, hasRole, canManageTanks, canCalibrate, canManagePrices, canManageUsers, canViewReports, canApproveDrains } = useAuth();
  
  return {
    hasPermission,
    hasRole,
    canManageTanks,
    canCalibrate,
    canManagePrices,
    canManageUsers,
    canViewReports,
    canApproveDrains
  };
}