/**
 * –ù–æ–≤—ã–π —á–∏—Å—Ç—ã–π AuthContext —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º authService –∏ permissionService
 */

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { authService, type AppUser } from '../services/auth/authService';
import { permissionService, type MenuVisibility } from '../services/auth/permissionService';

interface AuthContextType {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  user: AppUser | null;
  loading: boolean;

  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  hasPermission: (permission: string) => boolean;
  isAdmin: () => boolean;

  // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
  canManageTanks: () => boolean;
  canCalibrate: () => boolean;
  canManagePrices: () => boolean;
  canManageUsers: () => boolean;
  canViewReports: () => boolean;

  // –í–∏–¥–∏–º–æ—Å—Ç—å –º–µ–Ω—é
  getMenuVisibility: () => MenuVisibility;

  // –£—Ç–∏–ª–∏—Ç—ã
  getRoleDisplayName: () => string;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const STORAGE_KEYS = {
  USER: 'tradeframe_user_v2',
  TOKEN: 'tradeframe_token_v2'
} as const;

export function NewAuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<AppUser | null>(null);
  const [loading, setLoading] = useState(true);

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  const clearAuthData = () => {
    // –ù–æ–≤—ã–µ –∫–ª—é—á–∏
    localStorage.removeItem(STORAGE_KEYS.USER);
    localStorage.removeItem(STORAGE_KEYS.TOKEN);

    // –°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    localStorage.removeItem('tradeframe_user');
    localStorage.removeItem('authToken');
    localStorage.removeItem('currentUser');
    localStorage.removeItem('auth_token');
  };

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ email –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  const saveAuthSession = (email: string) => {
    try {
      sessionStorage.setItem('current_user_email', email);
      sessionStorage.setItem('auth_timestamp', Date.now().toString());
    } catch (error) {
      console.error('‚ùå NewAuthContext: Failed to save auth session:', error);
    }
  };

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç email –∏–∑ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  const getSessionEmail = (): string | null => {
    try {
      const email = sessionStorage.getItem('current_user_email');
      const timestamp = sessionStorage.getItem('auth_timestamp');

      if (!email || !timestamp) {
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ —Å—Ç–∞—Ä—à–µ 8 —á–∞—Å–æ–≤
      const sessionAge = Date.now() - parseInt(timestamp);
      const maxAge = 8 * 60 * 60 * 1000; // 8 —á–∞—Å–æ–≤

      if (sessionAge > maxAge) {
        console.log('‚è∞ Session expired, clearing');
        clearAuthData();
        return null;
      }

      return email;
    } catch (error) {
      console.error('‚ùå NewAuthContext: Failed to get session email:', error);
      return null;
    }
  };

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  const loadFreshUserData = async (email: string): Promise<AppUser | null> => {
    try {
      console.log('üîÑ Loading fresh user data from database for:', email);

      const dbUser = await authService.getUserByEmail(email);
      if (!dbUser) {
        console.log('‚ùå User not found in database');
        return null;
      }

      // –û–¢–õ–ê–î–ö–ê: –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–∏—à–ª–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ù–û–í–ê–Ø –°–•–ï–ú–ê)
      console.log('üîç DEBUG: dbUser.user_roles =', dbUser.user_roles);

      // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã –ë–î
      const userRoles = (dbUser as any).user_roles || [];
      const primaryRole = userRoles[0]?.role;

      let userRole = 'user';
      let roleId = 0;
      let permissions: string[] = [];

      if (primaryRole) {
        console.log('üé≠ NewAuthContext: Found role from DB:', primaryRole);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ —Ä–æ–ª–∏ –∏–ª–∏ –∏–º—è –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
        userRole = primaryRole.code || primaryRole.name;
        roleId = primaryRole.id;
        permissions = primaryRole.permissions || [];

        // –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω —Ä–æ–ª–µ–π –Ω–∞ –∫–æ–¥—ã (–µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω)
        if (!primaryRole.code) {
          const roleNameToCode: Record<string, string> = {
            '–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': 'super_admin',
            '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∏': 'network_admin',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä': 'manager',
            '–û–ø–µ—Ä–∞—Ç–æ—Ä': 'operator',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–¢–û': 'bto_manager'
          };

          if (roleNameToCode[primaryRole.name]) {
            console.log('üé≠ NewAuthContext FRESH –†–û–õ–¨ –ú–ê–ü–ü–ò–ù–ì:', primaryRole.name, '->', roleNameToCode[primaryRole.name]);
            userRole = roleNameToCode[primaryRole.name];
          }
        }
      } else {
        console.log('‚ö†Ô∏è NewAuthContext: No roles found in DB, using default "user"');
      }

      const userData: AppUser = {
        id: dbUser.id,
        email: dbUser.email,
        name: dbUser.name,
        phone: dbUser.phone,
        status: dbUser.status,
        role: userRole,
        roleId: roleId,
        permissions: permissions
      };

      console.log('‚úÖ Fresh user data loaded, role:', userData.role);
      return userData;
    } catch (error) {
      console.error('‚ùå NewAuthContext: Error loading fresh user data:', error);
      return null;
    }
  };

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        console.log('üîÑ NewAuthContext: Initializing authentication...');
        console.log('üîÑ NewAuthContext: Device info:', {
          userAgent: navigator.userAgent,
          isMobile: /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
          url: window.location.href,
          host: window.location.host,
          protocol: window.location.protocol
        });

        const sessionEmail = getSessionEmail();
        if (sessionEmail) {
          console.log('üîÑ NewAuthContext: Active session found, loading fresh data for:', sessionEmail);

          const freshUser = await loadFreshUserData(sessionEmail);
          if (freshUser) {
            setUser(freshUser);
            console.log('‚úÖ NewAuthContext: Fresh user data loaded from database, role:', freshUser.role);
          } else {
            console.log('‚ö†Ô∏è NewAuthContext: Failed to load fresh data, clearing session');
            clearAuthData();
          }
        } else {
          console.log('‚ÑπÔ∏è NewAuthContext: No active session found');
        }
      } catch (error) {
        console.error('‚ùå NewAuthContext: Initialization error:', error);
        console.error('‚ùå NewAuthContext: Error stack:', error.stack);
        clearAuthData();
      } finally {
        console.log('üîÑ NewAuthContext: Setting loading to false');
        setLoading(false);
      }
    };

    initializeAuth();
  }, []);

  /**
   * –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
   */
  const login = async (email: string, password: string): Promise<void> => {
    setLoading(true);

    try {
      console.log('üîê NewAuthContext: Attempting login for:', email);

      const authenticatedUser = await authService.authenticate(email, password);

      if (!authenticatedUser) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      }

      setUser(authenticatedUser);
      saveAuthSession(email); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ email –≤ —Å–µ—Å—Å–∏–∏

      console.log('‚úÖ NewAuthContext: Login successful for:', authenticatedUser.email, 'role:', authenticatedUser.role);
    } catch (error: any) {
      console.error('‚ùå NewAuthContext: Login failed:', error);
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    } finally {
      setLoading(false);
    }
  };

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  const logout = () => {
    console.log('üîê NewAuthContext: Logging out user');
    setUser(null);
    clearAuthData();
    // –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    sessionStorage.removeItem('current_user_email');
    sessionStorage.removeItem('auth_timestamp');
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   */
  const hasPermission = (permission: string): boolean => {
    if (!user) return false;
    return permissionService.hasPermission(user, permission);
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
   */
  const isAdmin = (): boolean => {
    if (!user) return false;
    return permissionService.isAdmin(user);
  };

  /**
   * –í–∏–¥–∏–º–æ—Å—Ç—å –º–µ–Ω—é
   */
  const getMenuVisibility = (): MenuVisibility => {
    if (!user) {
      return {
        admin: false,
        networks: false,
        tradingPoint: false,
        settings: false,
        reports: false
      };
    }
    return permissionService.getMenuVisibility(user);
  };

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ä–æ–ª–∏
   */
  const getRoleDisplayName = (): string => {
    if (!user) return '–ì–æ—Å—Ç—å';
    return permissionService.getRoleDisplayName(user.role);
  };

  // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const canManageTanks = (): boolean => {
    if (!user) return false;
    return permissionService.canManageTanks(user);
  };

  const canCalibrate = (): boolean => {
    if (!user) return false;
    return permissionService.canCalibrate(user);
  };

  const canManagePrices = (): boolean => {
    if (!user) return false;
    return permissionService.canManagePrices(user);
  };

  const canManageUsers = (): boolean => {
    if (!user) return false;
    return permissionService.canManageUsers(user);
  };

  const canViewReports = (): boolean => {
    if (!user) return false;
    return permissionService.canViewReports(user);
  };

  const value: AuthContextType = {
    user,
    loading,
    login,
    logout,
    hasPermission,
    isAdmin,
    canManageTanks,
    canCalibrate,
    canManagePrices,
    canManageUsers,
    canViewReports,
    getMenuVisibility,
    getRoleDisplayName
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useNewAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useNewAuth must be used within a NewAuthProvider');
  }
  return context;
}