/**
 * –ù–æ–≤—ã–π —á–∏—Å—Ç—ã–π AuthContext —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º authService –∏ permissionService
 */

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { authService, type AppUser } from '../services/auth/authService';
import { permissionService, type MenuVisibility } from '../services/auth/permissionService';

interface AuthContextType {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  user: AppUser | null;
  loading: boolean;

  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  hasPermission: (permission: string) => boolean;
  isAdmin: () => boolean;

  // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
  canManageTanks: () => boolean;
  canCalibrate: () => boolean;
  canManagePrices: () => boolean;
  canManageUsers: () => boolean;
  canViewReports: () => boolean;

  // –í–∏–¥–∏–º–æ—Å—Ç—å –º–µ–Ω—é
  getMenuVisibility: () => MenuVisibility;

  // –£—Ç–∏–ª–∏—Ç—ã
  getRoleDisplayName: () => string;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const STORAGE_KEYS = {
  USER: 'tradeframe_user_v2',
  TOKEN: 'tradeframe_token_v2'
} as const;

export function NewAuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<AppUser | null>(null);
  const [loading, setLoading] = useState(true);

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  const clearAuthData = () => {
    // –ù–æ–≤—ã–µ –∫–ª—é—á–∏
    localStorage.removeItem(STORAGE_KEYS.USER);
    localStorage.removeItem(STORAGE_KEYS.TOKEN);

    // –°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    localStorage.removeItem('tradeframe_user');
    localStorage.removeItem('authToken');
    localStorage.removeItem('currentUser');
    localStorage.removeItem('auth_token');
  };

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
   */
  const saveUserData = (userData: AppUser) => {
    try {
      localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userData));
      localStorage.setItem(STORAGE_KEYS.TOKEN, 'authenticated');
    } catch (error) {
      console.error('‚ùå NewAuthContext: Failed to save user data:', error);
    }
  };

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
   */
  const loadUserData = (): AppUser | null => {
    try {
      const savedUser = localStorage.getItem(STORAGE_KEYS.USER);
      const savedToken = localStorage.getItem(STORAGE_KEYS.TOKEN);

      if (!savedUser || !savedToken) {
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (savedUser.startsWith('[object Object]') || savedUser === '[object Object]') {
        clearAuthData();
        return null;
      }

      const userData = JSON.parse(savedUser);

      // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!userData.id || !userData.email) {
        clearAuthData();
        return null;
      }

      return userData;
    } catch (error) {
      console.error('‚ùå NewAuthContext: Failed to load user data:', error);
      clearAuthData();
      return null;
    }
  };

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  useEffect(() => {
    const initializeAuth = () => {
      try {
        console.log('üîÑ NewAuthContext: Initializing authentication...');
        console.log('üîÑ NewAuthContext: Device info:', {
          userAgent: navigator.userAgent,
          isMobile: /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
          url: window.location.href,
          host: window.location.host,
          protocol: window.location.protocol
        });

        const savedUser = loadUserData();
        if (savedUser) {
          setUser(savedUser);
          console.log('‚úÖ NewAuthContext: User restored from storage:', savedUser.email);
          console.log('‚úÖ NewAuthContext: User data keys present in localStorage:', Object.keys(localStorage).filter(key => key.includes('tradeframe')));
        } else {
          console.log('‚ÑπÔ∏è NewAuthContext: No saved user found');
          console.log('‚ÑπÔ∏è NewAuthContext: Available localStorage keys:', Object.keys(localStorage).filter(key => key.includes('tradeframe')));
        }
      } catch (error) {
        console.error('‚ùå NewAuthContext: Initialization error:', error);
        console.error('‚ùå NewAuthContext: Error stack:', error.stack);
        clearAuthData();
      } finally {
        console.log('üîÑ NewAuthContext: Setting loading to false');
        setLoading(false);
      }
    };

    initializeAuth();
  }, []);

  /**
   * –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
   */
  const login = async (email: string, password: string): Promise<void> => {
    setLoading(true);

    try {
      console.log('üîê NewAuthContext: Attempting login for:', email);

      const authenticatedUser = await authService.authenticate(email, password);

      if (!authenticatedUser) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      }

      setUser(authenticatedUser);
      saveUserData(authenticatedUser);

      console.log('‚úÖ NewAuthContext: Login successful for:', authenticatedUser.email);
    } catch (error: any) {
      console.error('‚ùå NewAuthContext: Login failed:', error);
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    } finally {
      setLoading(false);
    }
  };

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  const logout = () => {
    console.log('üîê NewAuthContext: Logging out user');
    setUser(null);
    clearAuthData();
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   */
  const hasPermission = (permission: string): boolean => {
    if (!user) return false;
    return permissionService.hasPermission(user, permission);
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
   */
  const isAdmin = (): boolean => {
    if (!user) return false;
    return permissionService.isAdmin(user);
  };

  /**
   * –í–∏–¥–∏–º–æ—Å—Ç—å –º–µ–Ω—é
   */
  const getMenuVisibility = (): MenuVisibility => {
    if (!user) {
      return {
        admin: false,
        networks: false,
        tradingPoint: false,
        settings: false,
        reports: false
      };
    }
    return permissionService.getMenuVisibility(user);
  };

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ä–æ–ª–∏
   */
  const getRoleDisplayName = (): string => {
    if (!user) return '–ì–æ—Å—Ç—å';
    return permissionService.getRoleDisplayName(user.role);
  };

  // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const canManageTanks = (): boolean => {
    if (!user) return false;
    return permissionService.canManageTanks(user);
  };

  const canCalibrate = (): boolean => {
    if (!user) return false;
    return permissionService.canCalibrate(user);
  };

  const canManagePrices = (): boolean => {
    if (!user) return false;
    return permissionService.canManagePrices(user);
  };

  const canManageUsers = (): boolean => {
    if (!user) return false;
    return permissionService.canManageUsers(user);
  };

  const canViewReports = (): boolean => {
    if (!user) return false;
    return permissionService.canViewReports(user);
  };

  const value: AuthContextType = {
    user,
    loading,
    login,
    logout,
    hasPermission,
    isAdmin,
    canManageTanks,
    canCalibrate,
    canManagePrices,
    canManageUsers,
    canViewReports,
    getMenuVisibility,
    getRoleDisplayName
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useNewAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useNewAuth must be used within a NewAuthProvider');
  }
  return context;
}