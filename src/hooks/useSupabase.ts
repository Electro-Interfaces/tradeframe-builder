/**
 * React —Ö—É–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º Supabase –∫–ª–∏–µ–Ω—Ç–æ–º
 */

import { useState, useEffect } from 'react';
import { useQueryClient } from '@tanstack/react-query';
import { supabaseClient } from '@/lib/supabase/client';
import { CacheUtils } from '@/lib/supabase/queryClient';
import { toast } from '@/hooks/use-toast';
import { useIsMobile } from '@/hooks/use-mobile';

interface SupabaseStatus {
  isInitialized: boolean;
  isConnected: boolean;
  isLoading: boolean;
  error: string | null;
  latency: number | null;
}

export function useSupabase() {
  const queryClient = useQueryClient();
  const isMobile = useIsMobile();
  const [status, setStatus] = useState<SupabaseStatus>({
    isInitialized: false,
    isConnected: false,
    isLoading: true,
    error: null,
    latency: null
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  const initialize = async () => {
    setStatus(prev => ({ ...prev, isLoading: true, error: null }));

    try {
      const initialized = await supabaseClient.initialize();
      
      if (initialized) {
        const startTime = Date.now();
        const connectionTest = await supabaseClient.testConnection();
        const latency = Date.now() - startTime;

        setStatus({
          isInitialized: true,
          isConnected: connectionTest.success,
          isLoading: false,
          error: connectionTest.success ? null : connectionTest.error || null,
          latency: connectionTest.success ? latency : null
        });

        if (connectionTest.success) {
          // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
          await CacheUtils.prefetchCriticalData();
          
          if (!isMobile) {
            toast({
              title: "‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω",
              description: `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (${latency}ms)`,
            });
          }
        } else {
          if (!isMobile) {
            toast({
              title: "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Supabase",
              description: connectionTest.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
              variant: "destructive",
            });
          }
        }
      } else {
        setStatus({
          isInitialized: false,
          isConnected: false,
          isLoading: false,
          error: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
          latency: null
        });
      }
    } catch (error: any) {
      setStatus({
        isInitialized: false,
        isConnected: false,
        isLoading: false,
        error: error.message,
        latency: null
      });

      toast({
        title: "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Supabase",
        description: error.message,
        variant: "destructive",
      });
    }
  };

  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const reconnect = async () => {
    await initialize();
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const checkConnection = async (): Promise<boolean> => {
    try {
      const startTime = Date.now();
      const result = await supabaseClient.testConnection();
      const latency = Date.now() - startTime;

      setStatus(prev => ({
        ...prev,
        isConnected: result.success,
        error: result.success ? null : result.error || null,
        latency: result.success ? latency : null
      }));

      return result.success;
    } catch (error: any) {
      setStatus(prev => ({
        ...prev,
        isConnected: false,
        error: error.message,
        latency: null
      }));
      return false;
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  const clearCache = () => {
    CacheUtils.clearAll();
    toast({
      title: "üßπ –ö—ç—à –æ—á–∏—â–µ–Ω",
      description: "–í—Å–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã",
    });
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    initialize();
  }, []);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (!status.isInitialized) return;

    const interval = setInterval(async () => {
      await checkConnection();
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    return () => clearInterval(interval);
  }, [status.isInitialized]);

  return {
    status,
    initialize,
    reconnect,
    checkConnection,
    clearCache,
    client: supabaseClient,
    
    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è React Query
    invalidateUsers: CacheUtils.invalidateUsers,
    invalidateRoles: CacheUtils.invalidateRoles,
    invalidatePrices: CacheUtils.invalidatePrices,
    invalidateEquipment: CacheUtils.invalidateEquipment,
  };
}