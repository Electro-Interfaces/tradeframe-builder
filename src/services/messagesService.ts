/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏
 * –í–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
 */

import { PersistentStorage } from '@/utils/persistentStorage';

export type MessageType = 'chat' | 'system' | 'alert' | 'info' | 'warning' | 'error';
export type TicketStatus = 'new' | 'open' | 'in_progress' | 'waiting_response' | 'resolved' | 'closed';
export type TicketPriority = 'low' | 'medium' | 'high' | 'critical';
export type NotificationStatus = 'unread' | 'read' | 'archived';
export type NotificationChannel = 'email' | 'telegram' | 'webhook' | 'sms' | 'push';
export type NotificationTrigger = 'equipment_status' | 'tank_level' | 'transaction' | 'workflow_completed' | 'shift_closed' | 'manual';

// –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–ô

export interface ChatMessage {
  id: string;
  authorId: string;
  authorName: string;
  authorAvatar?: string;
  text: string;
  timestamp: string;
  isCurrentUser: boolean;
  messageType: MessageType;
  replyToId?: string;
  attachments?: string[];
  metadata?: Record<string, any>;
  createdAt: Date;
  updatedAt: Date;
}

export interface TicketMessage {
  id: string;
  ticketId: string;
  authorId: string;
  authorName: string;
  authorRole: 'user' | 'support' | 'admin';
  text: string;
  timestamp: string;
  attachments?: string[];
  isInternal?: boolean; // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  metadata?: Record<string, any>;
  createdAt: Date;
}

export interface SupportTicket {
  id: string;
  title: string;
  description: string;
  priority: TicketPriority;
  status: TicketStatus;
  category?: string;
  tags?: string[];
  createdBy: string;
  createdByName: string;
  assignedTo?: string;
  assignedToName?: string;
  messages: TicketMessage[];
  createdAt: Date;
  updatedAt: Date;
  resolvedAt?: Date;
  closedAt?: Date;
  responseTime?: number; // –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
  resolutionTime?: number; // –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
  satisfaction?: number; // –æ—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5
  metadata?: Record<string, any>;
}

// –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô

export interface NotificationRule {
  id: string;
  name: string;
  description?: string;
  isActive: boolean;
  priority: TicketPriority;
  trigger: NotificationTrigger;
  conditions: Record<string, any>;
  channels: NotificationChannel[];
  recipients: string[];
  messageTemplate: string;
  cooldownMinutes?: number; // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  createdBy: string;
  createdByName: string;
  createdAt: Date;
  updatedAt: Date;
  lastTriggered?: {
    date: string;
    status: 'sent' | 'failed';
    message?: string;
  };
}

export interface Notification {
  id: string;
  ruleId?: string;
  title: string;
  message: string;
  type: MessageType;
  priority: TicketPriority;
  status: NotificationStatus;
  recipientId: string;
  recipientName: string;
  channel: NotificationChannel;
  triggerData?: Record<string, any>;
  sentAt?: string;
  readAt?: string;
  archivedAt?: string;
  metadata?: Record<string, any>;
  createdAt: Date;
  updatedAt: Date;
}

// INPUT –¢–ò–ü–´

export interface ChatMessageInput {
  authorId: string;
  authorName: string;
  text: string;
  messageType?: MessageType;
  replyToId?: string;
  attachments?: string[];
  metadata?: Record<string, any>;
}

export interface SupportTicketInput {
  title: string;
  description: string;
  priority?: TicketPriority;
  category?: string;
  tags?: string[];
  createdBy: string;
  createdByName: string;
  assignedTo?: string;
  assignedToName?: string;
  metadata?: Record<string, any>;
}

export interface NotificationRuleInput {
  name: string;
  description?: string;
  isActive?: boolean;
  priority?: TicketPriority;
  trigger: NotificationTrigger;
  conditions: Record<string, any>;
  channels: NotificationChannel[];
  recipients: string[];
  messageTemplate: string;
  cooldownMinutes?: number;
  createdBy: string;
  createdByName: string;
}

export interface NotificationInput {
  title: string;
  message: string;
  type?: MessageType;
  priority?: TicketPriority;
  recipientId: string;
  recipientName: string;
  channel: NotificationChannel;
  ruleId?: string;
  triggerData?: Record<string, any>;
  metadata?: Record<string, any>;
}

// –ù–ê–ß–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï

const initialChatMessages: ChatMessage[] = [
  {
    id: "MSG-001",
    authorId: "1",
    authorName: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç TradeFrame!",
    timestamp: "2024-08-30T09:00:00Z",
    isCurrentUser: false,
    messageType: "system",
    createdAt: new Date('2024-08-30T09:00:00Z'),
    updatedAt: new Date('2024-08-30T09:00:00Z')
  },
  {
    id: "MSG-002", 
    authorId: "2",
    authorName: "–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
    text: "–ö–æ–ª–ª–µ–≥–∏, –Ω–∞ –ê–ó–° ‚Ññ003 –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º —á–µ–∫–æ–≤. –ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å?",
    timestamp: "2024-08-30T10:15:00Z",
    isCurrentUser: false,
    messageType: "chat",
    createdAt: new Date('2024-08-30T10:15:00Z'),
    updatedAt: new Date('2024-08-30T10:15:00Z')
  },
  {
    id: "MSG-003",
    authorId: "3",
    authorName: "–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤", 
    text: "–ï–ª–µ–Ω–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –Ø –ø–æ—Å–º–æ—Ç—Ä—é —É–¥–∞–ª–µ–Ω–Ω–æ.",
    timestamp: "2024-08-30T10:18:00Z",
    isCurrentUser: false,
    messageType: "chat",
    replyToId: "MSG-002",
    createdAt: new Date('2024-08-30T10:18:00Z'),
    updatedAt: new Date('2024-08-30T10:18:00Z')
  }
];

const initialTickets: SupportTicket[] = [
  {
    id: "TICKET-001",
    title: "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä —á–µ–∫–æ–≤",
    description: "–ù–∞ –ê–ó–° ‚Ññ003 –ø—Ä–∏–Ω—Ç–µ—Ä —á–µ–∫–æ–≤ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É 'Paper Jam'. –ë—É–º–∞–≥–∞ –µ—Å—Ç—å, –Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç.",
    priority: "high",
    status: "in_progress",
    category: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
    tags: ["–ø—Ä–∏–Ω—Ç–µ—Ä", "—á–µ–∫–∏", "–ê–ó–°-003"],
    createdBy: "2",
    createdByName: "–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
    assignedTo: "3",
    assignedToName: "–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤",
    messages: [
      {
        id: "TMSG-001",
        ticketId: "TICKET-001",
        authorId: "2",
        authorName: "–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
        authorRole: "user",
        text: "–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–∞—á–∞–ª –≥–ª—é—á–∏—Ç—å –æ–∫–æ–ª–æ —á–∞—Å–∞ –Ω–∞–∑–∞–¥. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –ø–æ–º–æ–≥–ª–∞.",
        timestamp: "2024-08-30T10:30:00Z",
        createdAt: new Date('2024-08-30T10:30:00Z')
      },
      {
        id: "TMSG-002",
        ticketId: "TICKET-001",
        authorId: "3", 
        authorName: "–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤",
        authorRole: "support",
        text: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∑–∞—Å—Ç—Ä—è–ª–∞ –ª–∏ –±—É–º–∞–≥–∞ –≤–Ω—É—Ç—Ä–∏. –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ä—É–ª–æ–Ω –±—É–º–∞–≥–∏.",
        timestamp: "2024-08-30T10:45:00Z",
        createdAt: new Date('2024-08-30T10:45:00Z')
      }
    ],
    createdAt: new Date('2024-08-30T10:25:00Z'),
    updatedAt: new Date('2024-08-30T10:45:00Z'),
    responseTime: 15
  },
  {
    id: "TICKET-002",
    title: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ç–æ–ø–ª–∏–≤–∞",
    description: "–î–∞—Ç—á–∏–∫ —É—Ä–æ–≤–Ω—è –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–µ ‚Ññ1 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
    priority: "medium",
    status: "open",
    category: "–î–∞—Ç—á–∏–∫–∏",
    tags: ["–¥–∞—Ç—á–∏–∫", "—É—Ä–æ–≤–µ–Ω—å", "—Ä–µ–∑–µ—Ä–≤—É–∞—Ä"],
    createdBy: "4",
    createdByName: "–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞",
    messages: [
      {
        id: "TMSG-003",
        ticketId: "TICKET-002",
        authorId: "4",
        authorName: "–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞",
        authorRole: "user",
        text: "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Ä—É—á–Ω—ã—Ö –∑–∞–º–µ—Ä–æ–≤ –Ω–∞ 200 –ª–∏—Ç—Ä–æ–≤",
        timestamp: "2024-08-30T14:20:00Z",
        createdAt: new Date('2024-08-30T14:20:00Z')
      }
    ],
    createdAt: new Date('2024-08-30T14:15:00Z'),
    updatedAt: new Date('2024-08-30T14:20:00Z')
  }
];

const initialNotificationRules: NotificationRule[] = [
  {
    id: "RULE-001",
    name: "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞",
    description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–º —É—Ä–æ–≤–Ω–µ —Ç–æ–ø–ª–∏–≤–∞ –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–µ",
    isActive: true,
    priority: "high",
    trigger: "tank_level",
    conditions: {
      level: "low",
      threshold: 500,
      fuelTypes: ["–ê–ò-95", "–ê–ò-92", "–î–¢"]
    },
    channels: ["email", "telegram"],
    recipients: ["manager@demo-azs.ru", "@admin_telegram"],
    messageTemplate: "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞!\n\n–†–µ–∑–µ—Ä–≤—É–∞—Ä: {tankNumber}\n–¢–æ–ø–ª–∏–≤–æ: {fuelType}\n–û—Å—Ç–∞—Ç–æ–∫: {level} –ª\n–¢–æ—á–∫–∞: {tradingPointName}",
    cooldownMinutes: 60,
    createdBy: "1",
    createdByName: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    createdAt: new Date('2024-08-25T10:00:00Z'),
    updatedAt: new Date('2024-08-25T10:00:00Z'),
    lastTriggered: {
      date: "2024-08-30T08:30:00Z",
      status: "sent"
    }
  },
  {
    id: "RULE-002",
    name: "–û—à–∏–±–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    isActive: true,
    priority: "critical",
    trigger: "equipment_status",
    conditions: {
      status: "error",
      errorLevel: "critical",
      equipmentTypes: ["pump", "pos", "printer"]
    },
    channels: ["email", "telegram", "sms"],
    recipients: ["tech@demo-azs.ru", "@tech_support", "+79123456789"],
    messageTemplate: "üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø!\n\n–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipmentName}\n–û—à–∏–±–∫–∞: {errorMessage}\n–í—Ä–µ–º—è: {timestamp}\n–¢–æ—á–∫–∞: {tradingPointName}\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!",
    cooldownMinutes: 15,
    createdBy: "1",
    createdByName: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
    createdAt: new Date('2024-08-20T15:00:00Z'),
    updatedAt: new Date('2024-08-20T15:00:00Z')
  },
  {
    id: "RULE-003",
    name: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã",
    description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã –∏ –∏—Ç–æ–≥–∞—Ö",
    isActive: true,
    priority: "info",
    trigger: "shift_closed",
    conditions: {
      minRevenue: 50000 // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    },
    channels: ["email"],
    recipients: ["manager@demo-azs.ru", "accounting@demo-azs.ru"],
    messageTemplate: "üìä –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞\n\n–°–º–µ–Ω–∞: #{shiftNumber}\n–û–ø–µ—Ä–∞—Ç–æ—Ä: {operatorName}\n–í—ã—Ä—É—á–∫–∞: {totalRevenue} —Ä—É–±.\n–û–±—ä–µ–º: {totalVolume} –ª\n–¢–æ—á–∫–∞: {tradingPointName}",
    cooldownMinutes: 1,
    createdBy: "2",
    createdByName: "–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
    createdAt: new Date('2024-08-28T12:00:00Z'),
    updatedAt: new Date('2024-08-28T12:00:00Z')
  }
];

const initialNotifications: Notification[] = [
  {
    id: "NOTIF-001",
    ruleId: "RULE-001",
    title: "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ê–ò-95",
    message: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–µ ‚Ññ1 –Ω–∞ –ê–ó–° ‚Ññ001. –û—Å—Ç–∞—Ç–æ–∫: 450 –ª",
    type: "warning",
    priority: "high",
    status: "read",
    recipientId: "2",
    recipientName: "–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
    channel: "email",
    triggerData: {
      tankNumber: "1",
      fuelType: "–ê–ò-95", 
      level: 450,
      tradingPointId: "point1",
      tradingPointName: "–ê–ó–° ‚Ññ001 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è"
    },
    sentAt: "2024-08-30T08:30:00Z",
    readAt: "2024-08-30T08:45:00Z",
    createdAt: new Date('2024-08-30T08:30:00Z'),
    updatedAt: new Date('2024-08-30T08:45:00Z')
  },
  {
    id: "NOTIF-002",
    ruleId: "RULE-002",
    title: "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ —á–µ–∫–æ–≤",
    message: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ —á–µ–∫–æ–≤ –Ω–∞ –ê–ó–° ‚Ññ003. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!",
    type: "error",
    priority: "critical", 
    status: "unread",
    recipientId: "3",
    recipientName: "–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤",
    channel: "telegram",
    triggerData: {
      equipmentId: "EQ-003",
      equipmentName: "–ü—Ä–∏–Ω—Ç–µ—Ä —á–µ–∫–æ–≤ ThermalPrint-58",
      errorCode: "PAPER_JAM",
      errorMessage: "–ó–∞–º—è—Ç–∏–µ –±—É–º–∞–≥–∏",
      tradingPointId: "point3",
      tradingPointName: "–ê–ó–° ‚Ññ003 - –Æ–∂–Ω–∞—è"
    },
    sentAt: "2024-08-30T10:25:00Z",
    createdAt: new Date('2024-08-30T10:25:00Z'),
    updatedAt: new Date('2024-08-30T10:25:00Z')
  },
  {
    id: "NOTIF-003",
    title: "–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
    message: "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ 31.08.2024 –≤ 02:00. –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è: 30 –º–∏–Ω—É—Ç.",
    type: "info",
    priority: "low",
    status: "read",
    recipientId: "1",
    recipientName: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    channel: "email",
    sentAt: "2024-08-29T18:00:00Z",
    readAt: "2024-08-29T18:15:00Z",
    createdAt: new Date('2024-08-29T18:00:00Z'),
    updatedAt: new Date('2024-08-29T18:15:00Z')
  }
];

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
let chatMessagesData: ChatMessage[] = PersistentStorage.load<ChatMessage>('chatMessages', initialChatMessages);
let ticketsData: SupportTicket[] = PersistentStorage.load<SupportTicket>('supportTickets', initialTickets);
let notificationRulesData: NotificationRule[] = PersistentStorage.load<NotificationRule>('notificationRules', initialNotificationRules);
let notificationsData: Notification[] = PersistentStorage.load<Notification>('notifications', initialNotifications);

let nextChatMessageId = Math.max(...chatMessagesData.map(msg => parseInt(msg.id.replace('MSG-', '')) || 0)) + 1;
let nextTicketId = Math.max(...ticketsData.map(t => parseInt(t.id.replace('TICKET-', '')) || 0)) + 1;
let nextTicketMessageId = Math.max(...ticketsData.flatMap(t => t.messages.map(m => parseInt(m.id.replace('TMSG-', '')) || 0))) + 1;
let nextRuleId = Math.max(...notificationRulesData.map(r => parseInt(r.id.replace('RULE-', '')) || 0)) + 1;
let nextNotificationId = Math.max(...notificationsData.map(n => parseInt(n.id.replace('NOTIF-', '')) || 0)) + 1;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
const saveChatMessages = () => {
  PersistentStorage.save('chatMessages', chatMessagesData);
};

const saveTickets = () => {
  PersistentStorage.save('supportTickets', ticketsData);
};

const saveNotificationRules = () => {
  PersistentStorage.save('notificationRules', notificationRulesData);
};

const saveNotifications = () => {
  PersistentStorage.save('notifications', notificationsData);
};

// API —Å–µ—Ä–≤–∏—Å —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
export const messagesService = {
  // ====== –ß–ê–¢ –°–û–û–ë–©–ï–ù–ò–Ø ======

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
  async getAllChatMessages(): Promise<ChatMessage[]> {
    await new Promise(resolve => setTimeout(resolve, 150));
    return [...chatMessagesData].sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());
  },

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
  async sendChatMessage(input: ChatMessageInput): Promise<ChatMessage> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const newMessage: ChatMessage = {
      id: `MSG-${String(nextChatMessageId++).padStart(3, '0')}`,
      authorId: input.authorId,
      authorName: input.authorName,
      text: input.text,
      timestamp: new Date().toISOString(),
      isCurrentUser: false, // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      messageType: input.messageType || 'chat',
      replyToId: input.replyToId,
      attachments: input.attachments,
      metadata: input.metadata,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    chatMessagesData.push(newMessage);
    saveChatMessages();
    
    return newMessage;
  },

  // ====== –¢–ò–ö–ï–¢–´ –ü–û–î–î–ï–†–ñ–ö–ò ======

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã
  async getAllTickets(): Promise<SupportTicket[]> {
    await new Promise(resolve => setTimeout(resolve, 150));
    return [...ticketsData].sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ç –ø–æ ID
  async getTicketById(id: string): Promise<SupportTicket | null> {
    await new Promise(resolve => setTimeout(resolve, 100));
    return ticketsData.find(t => t.id === id) || null;
  },

  // –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç
  async createTicket(input: SupportTicketInput): Promise<SupportTicket> {
    await new Promise(resolve => setTimeout(resolve, 250));
    
    const newTicket: SupportTicket = {
      id: `TICKET-${String(nextTicketId++).padStart(3, '0')}`,
      title: input.title,
      description: input.description,
      priority: input.priority || 'medium',
      status: 'new',
      category: input.category,
      tags: input.tags || [],
      createdBy: input.createdBy,
      createdByName: input.createdByName,
      assignedTo: input.assignedTo,
      assignedToName: input.assignedToName,
      messages: [],
      createdAt: new Date(),
      updatedAt: new Date(),
      metadata: input.metadata
    };

    ticketsData.push(newTicket);
    saveTickets();
    
    return newTicket;
  },

  // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Ç–∏–∫–µ—Ç—É
  async addTicketMessage(ticketId: string, message: Omit<TicketMessage, 'id' | 'ticketId' | 'createdAt'>): Promise<TicketMessage | null> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const ticket = ticketsData.find(t => t.id === ticketId);
    if (!ticket) return null;
    
    const newMessage: TicketMessage = {
      id: `TMSG-${String(nextTicketMessageId++).padStart(3, '0')}`,
      ticketId,
      authorId: message.authorId,
      authorName: message.authorName,
      authorRole: message.authorRole,
      text: message.text,
      timestamp: new Date().toISOString(),
      attachments: message.attachments,
      isInternal: message.isInternal,
      metadata: message.metadata,
      createdAt: new Date()
    };
    
    ticket.messages.push(newMessage);
    ticket.updatedAt = new Date();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ —Ä–∞–±–æ—Ç–µ" –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if (ticket.status === 'new' && message.authorRole === 'support') {
      ticket.status = 'in_progress';
    }
    
    saveTickets();
    
    return newMessage;
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
  async updateTicketStatus(id: string, status: TicketStatus): Promise<SupportTicket | null> {
    await new Promise(resolve => setTimeout(resolve, 150));
    
    const ticket = ticketsData.find(t => t.id === id);
    if (!ticket) return null;
    
    ticket.status = status;
    ticket.updatedAt = new Date();
    
    if (status === 'resolved') {
      ticket.resolvedAt = new Date();
    } else if (status === 'closed') {
      ticket.closedAt = new Date();
    }
    
    saveTickets();
    
    return ticket;
  },

  // ====== –ü–†–ê–í–ò–õ–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ======

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
  async getAllNotificationRules(): Promise<NotificationRule[]> {
    await new Promise(resolve => setTimeout(resolve, 120));
    return [...notificationRulesData].sort((a, b) => a.name.localeCompare(b.name));
  },

  // –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async createNotificationRule(input: NotificationRuleInput): Promise<NotificationRule> {
    await new Promise(resolve => setTimeout(resolve, 250));
    
    const newRule: NotificationRule = {
      id: `RULE-${String(nextRuleId++).padStart(3, '0')}`,
      name: input.name,
      description: input.description,
      isActive: input.isActive ?? true,
      priority: input.priority || 'medium',
      trigger: input.trigger,
      conditions: input.conditions,
      channels: input.channels,
      recipients: input.recipients,
      messageTemplate: input.messageTemplate,
      cooldownMinutes: input.cooldownMinutes,
      createdBy: input.createdBy,
      createdByName: input.createdByName,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    notificationRulesData.push(newRule);
    saveNotificationRules();
    
    return newRule;
  },

  // ====== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ======

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async getAllNotifications(): Promise<Notification[]> {
    await new Promise(resolve => setTimeout(resolve, 120));
    return [...notificationsData].sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
  },

  // –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getNotificationsByRecipient(recipientId: string): Promise<Notification[]> {
    await new Promise(resolve => setTimeout(resolve, 100));
    return notificationsData
      .filter(n => n.recipientId === recipientId)
      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
  },

  // –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  async createNotification(input: NotificationInput): Promise<Notification> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const newNotification: Notification = {
      id: `NOTIF-${String(nextNotificationId++).padStart(3, '0')}`,
      ruleId: input.ruleId,
      title: input.title,
      message: input.message,
      type: input.type || 'info',
      priority: input.priority || 'medium',
      status: 'unread',
      recipientId: input.recipientId,
      recipientName: input.recipientName,
      channel: input.channel,
      triggerData: input.triggerData,
      sentAt: new Date().toISOString(),
      metadata: input.metadata,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    notificationsData.push(newNotification);
    saveNotifications();
    
    return newNotification;
  },

  // –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  async markNotificationAsRead(id: string): Promise<Notification | null> {
    await new Promise(resolve => setTimeout(resolve, 100));
    
    const notification = notificationsData.find(n => n.id === id);
    if (!notification) return null;
    
    if (notification.status === 'unread') {
      notification.status = 'read';
      notification.readAt = new Date().toISOString();
      notification.updatedAt = new Date();
      
      saveNotifications();
    }
    
    return notification;
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  async getStatistics(): Promise<{
    totalMessages: number;
    totalTickets: number;
    ticketsByStatus: Record<TicketStatus, number>;
    ticketsByPriority: Record<TicketPriority, number>;
    totalNotifications: number;
    unreadNotifications: number;
    activeRules: number;
  }> {
    await new Promise(resolve => setTimeout(resolve, 100));
    
    const totalMessages = chatMessagesData.length;
    const totalTickets = ticketsData.length;
    
    const ticketsByStatus = ticketsData.reduce((acc, ticket) => {
      acc[ticket.status] = (acc[ticket.status] || 0) + 1;
      return acc;
    }, {} as Record<TicketStatus, number>);
    
    const ticketsByPriority = ticketsData.reduce((acc, ticket) => {
      acc[ticket.priority] = (acc[ticket.priority] || 0) + 1;
      return acc;
    }, {} as Record<TicketPriority, number>);
    
    const totalNotifications = notificationsData.length;
    const unreadNotifications = notificationsData.filter(n => n.status === 'unread').length;
    const activeRules = notificationRulesData.filter(r => r.isActive).length;
    
    return {
      totalMessages,
      totalTickets,
      ticketsByStatus,
      ticketsByPriority,
      totalNotifications,
      unreadNotifications,
      activeRules
    };
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç store –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const messagesStore = {
  getAllChatMessages: (): ChatMessage[] => [...chatMessagesData],
  getAllTickets: (): SupportTicket[] => [...ticketsData],
  getAllNotifications: (): Notification[] => [...notificationsData],
  getAllNotificationRules: (): NotificationRule[] => [...notificationRulesData],
  
  getTicketById: (id: string): SupportTicket | undefined => 
    ticketsData.find(t => t.id === id),
    
  updateTicket: (id: string, updates: Partial<SupportTicket>): SupportTicket | null => {
    const index = ticketsData.findIndex(t => t.id === id);
    if (index === -1) return null;
    
    ticketsData[index] = {
      ...ticketsData[index],
      ...updates,
      updatedAt: new Date()
    };
    
    saveTickets();
    return ticketsData[index];
  }
};