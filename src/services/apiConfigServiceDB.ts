/**
 * üõ†Ô∏è –ù–û–í–´–ô –°–ï–†–í–ò–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô API
 * 
 * –ó–∞–º–µ–Ω—è–µ—Ç localStorage –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç systemConfigService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */

import { systemConfigService, DatabaseConnection, DatabaseConfig } from './systemConfigService';
import { PersistentStorage } from '@/utils/persistentStorage';

export interface ApiConfig {
  currentConnectionId: string;
  availableConnections: DatabaseConnection[];
  debugMode: boolean;
  lastUpdated: Date;
}

class ApiConfigServiceDB {
  private isInitialized = false;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ApiConfigServiceDB...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const health = await systemConfigService.healthCheck();
      
      if (!health.healthy) {
        throw new Error('–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
      }
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞');

      this.isInitialized = true;
      console.log('‚úÖ ApiConfigServiceDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ApiConfigServiceDB:', error);
      this.isInitialized = false;
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  async getCurrentConfig(): Promise<ApiConfig> {
    await this.initialize();

    console.log('üîç ApiConfigServiceDB.getCurrentConfig()');

    if (!this.isInitialized) {
      throw new Error('–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
    }

    try {
      const dbConfig = await systemConfigService.getDatabaseConfig();
      
      if (!dbConfig) {
        throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç ApiConfig
      const apiConfig: ApiConfig = {
        currentConnectionId: dbConfig.currentConnectionId,
        availableConnections: dbConfig.availableConnections,
        debugMode: dbConfig.debugMode,
        lastUpdated: dbConfig.lastUpdated
      };

      console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î: ${apiConfig.availableConnections.length} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π`);
      return apiConfig;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async getCurrentConnection(): Promise<DatabaseConnection | null> {
    await this.initialize();

    console.log('üîç ApiConfigServiceDB.getCurrentConnection()');

    if (!this.isInitialized) {
      throw new Error('–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    }

    try {
      const connection = await systemConfigService.getCurrentConnection();
      
      if (connection) {
        console.log(`‚úÖ –¢–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ë–î: ${connection.name} (${connection.type})`);
      } else {
        console.log('‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î');
      }

      return connection;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async switchConnection(connectionId: string): Promise<{
    success: boolean;
    error?: string;
    connection?: DatabaseConnection;
  }> {
    await this.initialize();

    console.log(`üîÑ ApiConfigServiceDB.switchConnection(${connectionId})`);

    if (!this.isInitialized) {
      throw new Error('–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    }

    try {
      const result = await systemConfigService.switchConnection(connectionId);
      
      if (result.success) {
        const connection = await systemConfigService.getCurrentConnection();
        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ –ë–î: ${connection?.name}`);
        
        return {
          success: true,
          connection: connection || undefined
        };
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.error}`);
        return result;
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async getCurrentApiUrl(): Promise<string> {
    const connection = await this.getCurrentConnection();
    if (!connection) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');
    }
    if (!connection.url) {
      throw new Error('URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
    }
    return connection.url;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ mock —Ä–µ–∂–∏–º
   * –û–ë–ù–û–í–õ–ï–ù–û: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–¢–ö–õ–Æ–ß–ï–ù MOCK –†–ï–ñ–ò–ú
   */
  async isMockMode(): Promise<boolean> {
    // Mock —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    return false;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async getCurrentConnectionType(): Promise<string> {
    const connection = await this.getCurrentConnection();
    if (!connection) {
      throw new Error('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.');
    }
    return connection.type;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async getAllConnections(): Promise<DatabaseConnection[]> {
    const config = await this.getCurrentConfig();
    return config.availableConnections;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  async getUsageStats() {
    const connection = await this.getCurrentConnection();
    const config = await this.getCurrentConfig();
    const isMock = await this.isMockMode();
    
    return {
      currentConnection: connection?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      connectionType: connection?.type || 'unknown',
      totalConnections: config.availableConnections.length,
      mockMode: isMock,
      debugMode: config.debugMode,
      lastUpdated: config.lastUpdated,
      storageType: 'database'
    };
  }

  /**
   * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
   */
  async setDebugMode(enabled: boolean): Promise<void> {
    await this.initialize();

    if (!this.isInitialized) {
      throw new Error('–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    }

    try {
      const dbConfig = await systemConfigService.getDatabaseConfig();
      if (dbConfig) {
        dbConfig.debugMode = enabled;
        await systemConfigService.setDatabaseConfig(dbConfig);
        console.log(`‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async updateConnection(connectionId: string, updates: Partial<DatabaseConnection>): Promise<{
    success: boolean;
    error?: string;
  }> {
    await this.initialize();
    
    console.log(`üîÑ ApiConfigServiceDB.updateConnection(${connectionId})`);

    if (!this.isInitialized) {
      throw new Error('–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    }

    try {
      const result = await systemConfigService.updateConnection(connectionId, updates);
      
      if (result.success) {
        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ${connectionId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î`);
        // –û—á–∏—â–∞–µ–º –∫–µ—à —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        this.clearCache();
      }
      
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  private clearCache(): void {
    // –ï—Å–ª–∏ –±—É–¥–µ—Ç –∫–µ—à - –∑–¥–µ—Å—å –µ–≥–æ –æ—á–∏—Å—Ç–∏–º
    console.log('üóëÔ∏è Cache cleared');
  }

  private updateConnectionLocalStorage(connectionId: string, updates: Partial<DatabaseConnection>): {
    success: boolean;
    error?: string;
  } {
    throw new Error('LocalStorage fallback –æ—Ç–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const apiConfigServiceDB = new ApiConfigServiceDB();

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
export const getApiBaseUrl = async (): Promise<string> => {
  return await apiConfigServiceDB.getCurrentApiUrl();
};

export const isApiMockMode = async (): Promise<boolean> => {
  return await apiConfigServiceDB.isMockMode();
};