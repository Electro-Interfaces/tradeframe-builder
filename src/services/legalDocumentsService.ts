/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∞–≤–æ–≤—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Supabase
 * –ó–∞–º–µ–Ω—è–µ—Ç localStorage –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */

import { LegalDocumentsSupabaseService } from './legalDocumentsSupabaseService';
import { apiConfigService } from './apiConfigService';
import type {
  DocumentType,
  DocumentVersion,
  DocumentVersionInput,
  DocumentVersionUpdate,
  UserDocumentAcceptance,
  UserLegalStatus,
  AuditLogEntry,
  DocumentStatistics,
  DocumentTypeInfo,
  AcceptanceJournalFilters,
  AuditLogFilters,
  UserConsentRequirement,
  DocumentStatus,
  DOCUMENT_TYPES,
  AcceptanceSource
} from '@/types/legal';

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—Ç–∞—Ä—ã–º API)
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getCurrentUser = () => {
  try {
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser && !savedUser.includes('[object Object]')) {
      const parsedUser = JSON.parse(savedUser);
      if (parsedUser && parsedUser.id && parsedUser.email) {
        return {
          id: parsedUser.id,
          name: parsedUser.name || 'User',
          email: parsedUser.email,
          role: 'superadmin' as const
        };
      }
    }
  } catch (error) {
    console.error('Error parsing current user:', error);
  }
  
  // Fallback to mock user
  return {
    id: 'user_admin',
    name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã',
    email: 'admin@demo-azs.ru',
    role: 'superadmin' as const
  };
};

// –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
export const legalDocumentsService = {
  // === –†–ê–ë–û–¢–ê –° –¢–ò–ü–ê–ú–ò –î–û–ö–£–ú–ï–ù–¢–û–í ===
  
  async getDocumentTypes(): Promise<DocumentTypeInfo[]> {
    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ Supabase...');
      return await LegalDocumentsSupabaseService.getDocumentTypes();
    } catch (error) {
      console.error('‚ùå Supabase error, using fallback:', error);
      
      // –ü—Ä–æ—Å—Ç–æ–π fallback —Å –±–∞–∑–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏
      return [
        {
          code: 'tos' as DocumentType,
          title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
          current_version: undefined
        },
        {
          code: 'privacy' as DocumentType,
          title: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', 
          current_version: undefined
        },
        {
          code: 'pdn' as DocumentType,
          title: '–ü–æ–ª–∏—Ç–∏–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
          current_version: undefined
        }
      ];
    }
  },

  // === –†–ê–ë–û–¢–ê –° –í–ï–†–°–ò–Ø–ú–ò –î–û–ö–£–ú–ï–ù–¢–û–í ===

  async getDocumentVersions(docTypeCode?: DocumentType): Promise<DocumentVersion[]> {
    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Ä—Å–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ Supabase...');
      return await LegalDocumentsSupabaseService.getDocumentVersions(docTypeCode);
    } catch (error) {
      console.error('‚ùå Supabase error, returning empty array:', error);
      return [];
    }
  },

  async getDocumentVersion(versionId: string): Promise<DocumentVersion | null> {
    try {
      return await LegalDocumentsSupabaseService.getDocumentVersion(versionId);
    } catch (error) {
      console.error('‚ùå Supabase error getting document version:', error);
      return null;
    }
  },

  async getCurrentDocumentVersion(docTypeCode: DocumentType): Promise<DocumentVersion | null> {
    try {
      return await LegalDocumentsSupabaseService.getCurrentDocumentVersion(docTypeCode);
    } catch (error) {
      console.error('‚ùå Supabase error getting current document version:', error);
      return null;
    }
  },

  getLatestVersion(docTypeCode: DocumentType): DocumentVersion | null {
    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null
    // –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å getCurrentDocumentVersion
    console.warn('‚ö†Ô∏è getLatestVersion is deprecated, use getCurrentDocumentVersion instead');
    return null;
  },

  // === –†–ê–ë–û–¢–ê –° –°–û–ì–õ–ê–°–ò–Ø–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===

  async acceptDocument(versionId: string, userId?: string, source: AcceptanceSource = 'web'): Promise<UserDocumentAcceptance> {
    try {
      const actualUserId = userId || getCurrentUser().id;
      const actualUserEmail = getCurrentUser().email;
      
      console.log('üìù –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç:', { versionId, actualUserId, source });
      
      return await LegalDocumentsSupabaseService.acceptDocument(
        versionId, 
        actualUserId, 
        actualUserEmail,
        source
      );
    } catch (error) {
      console.error('‚ùå Error accepting document:', error);
      throw error;
    }
  },

  async acceptDocumentByType(docType: DocumentType, userId?: string, source: AcceptanceSource = 'web'): Promise<UserDocumentAcceptance> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const currentVersion = await this.getCurrentDocumentVersion(docType);
      if (!currentVersion) {
        throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ ${docType}`);
      }
      
      return await this.acceptDocument(currentVersion.id, userId, source);
    } catch (error) {
      console.error('‚ùå Error accepting document by type:', error);
      throw error;
    }
  },

  async getUserAcceptances(userId: string): Promise<UserDocumentAcceptance[]> {
    try {
      return await LegalDocumentsSupabaseService.getUserAcceptances(userId);
    } catch (error) {
      console.error('‚ùå Supabase error getting user acceptances:', error);
      return [];
    }
  },

  async getUserConsentRequirement(userId: string): Promise<UserConsentRequirement> {
    try {
      return await LegalDocumentsSupabaseService.getUserConsentRequirement(userId);
    } catch (error) {
      console.error('‚ùå Supabase error getting consent requirement:', error);
      
      // Fallback - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–æ–≥–ª–∞—Å–∏—è —Ç—Ä–µ–±—É—é—Ç—Å—è
      return {
        user_id: userId,
        requires_consent: true,
        pending_documents: [],
        current_acceptances: []
      };
    }
  },

  async updateUserLegalStatus(userId: string, docType: DocumentType, versionId: string): Promise<void> {
    try {
      await LegalDocumentsSupabaseService.updateUserLegalStatus(userId, docType, versionId);
    } catch (error) {
      console.error('‚ùå Error updating user legal status:', error);
      throw error;
    }
  },

  // === –ñ–£–†–ù–ê–õ–´ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

  async getAcceptanceJournal(filters: AcceptanceJournalFilters = {}): Promise<UserDocumentAcceptance[]> {
    try {
      return await LegalDocumentsSupabaseService.getAcceptanceJournal(filters);
    } catch (error) {
      console.error('‚ùå Supabase error getting acceptance journal:', error);
      return [];
    }
  },

  async getDocumentStatistics(): Promise<DocumentStatistics[]> {
    try {
      return await LegalDocumentsSupabaseService.getDocumentStatistics();
    } catch (error) {
      console.error('‚ùå Supabase error getting document statistics:', error);
      return [];
    }
  },

  // === –ú–ï–¢–û–î–´ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏) ===

  async createDocumentDraft(input: DocumentVersionInput): Promise<DocumentVersion> {
    console.warn('‚ö†Ô∏è createDocumentDraft not implemented in Supabase service yet');
    throw new Error('–°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
  },

  async updateDocumentVersion(versionId: string, update: DocumentVersionUpdate): Promise<DocumentVersion> {
    console.warn('‚ö†Ô∏è updateDocumentVersion not implemented in Supabase service yet');
    throw new Error('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
  },

  async publishDocumentVersion(versionId: string): Promise<DocumentVersion> {
    console.warn('‚ö†Ô∏è publishDocumentVersion not implemented in Supabase service yet');
    throw new Error('–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
  },

  async archiveDocumentVersion(versionId: string): Promise<DocumentVersion> {
    console.warn('‚ö†Ô∏è archiveDocumentVersion not implemented in Supabase service yet');
    throw new Error('–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
  },

  async getAuditLog(filters: AuditLogFilters = {}): Promise<AuditLogEntry[]> {
    console.warn('‚ö†Ô∏è getAuditLog not implemented in Supabase service yet');
    return [];
  }
};

export default legalDocumentsService;
export { getCurrentUser };