/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤–æ –≤–Ω–µ—à–Ω–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase
 */

import { User, UserStatus, CreateUserInput, UpdateUserInput } from '@/types/auth';

interface ExternalDatabaseConfig {
  url: string;
  apiKey: string;
}

class ExternalUsersService {
  private config: ExternalDatabaseConfig | null = null;
  private lastConfigUpdate: number = 0;

  private getConfig(): ExternalDatabaseConfig {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
    const fixedConfig: ExternalDatabaseConfig = {
      url: 'https://ssvazdgnmatbdynkhkqo.supabase.co',
      apiKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzdmF6ZGdubWF0YmR5bmtoa3FvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzM0MzgzNCwiZXhwIjoyMDcyOTE5ODM0fQ.Gen-PI-vDkKjskpIvJNcQw0Uj3d0zGXB98zIxNK6di0'
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    const now = Date.now();
    if (this.config && (now - this.lastConfigUpdate) < 1000) {
      return this.config;
    }

    console.log('üîß ExternalUsersService: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase');
    
    this.config = fixedConfig;
    this.lastConfigUpdate = now;
    
    console.log('‚úÖ ExternalUsersService: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', {
      url: fixedConfig.url,
      hasApiKey: !!fixedConfig.apiKey
    });
    
    return this.config;
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞
  public clearConfigCache(): void {
    console.log('üîÑ ExternalUsersService: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫—ç—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    this.config = null;
    this.lastConfigUpdate = 0;
  }

  private async makeRequest(endpoint: string, options: RequestInit = {}): Promise<any> {
    const config = this.getConfig();
    const fullUrl = `${config.url}/rest/v1/${endpoint}`;
    
    // Making request to external database

    try {
      const response = await fetch(fullUrl, {
        ...options,
        headers: {
          'apikey': config.apiKey,
          'Authorization': `Bearer ${config.apiKey}`,
          'Content-Type': 'application/json',
          'Prefer': 'return=representation',
          ...options.headers
        }
      });

      console.log(`üìä ExternalUsersService: –û—Ç–≤–µ—Ç ${response.status} –¥–ª—è ${endpoint}`);

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå ExternalUsersService: –û—à–∏–±–∫–∞ ${response.status}:`, errorText);
        
        // –ï—Å–ª–∏ 401/403 - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
        if (response.status === 401 || response.status === 403) {
          console.log('üîÑ ExternalUsersService: –°–±—Ä–æ—Å –∫—ç—à–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          this.clearConfigCache();
        }
        
        throw new Error(`Database error: ${response.status} - ${errorText}`);
      }

      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const data = await response.json();
        console.log(`‚úÖ ExternalUsersService: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${endpoint}:`, Array.isArray(data) ? `–º–∞—Å—Å–∏–≤ –∏–∑ ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤` : typeof data);
        return data;
      }
      
      const textData = await response.text();
      console.log(`‚úÖ ExternalUsersService: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è ${endpoint}:`, textData.length, '—Å–∏–º–≤–æ–ª–æ–≤');
      return textData;
      
    } catch (error) {
      console.error(`üí• ExternalUsersService: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${endpoint}:`, error);
      
      // –ü—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à - –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è URL
      if (error instanceof TypeError || error.message.includes('fetch')) {
        console.log('üîÑ ExternalUsersService: –°–±—Ä–æ—Å –∫—ç—à–∞ –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏');
        this.clearConfigCache();
      }
      
      throw error;
    }
  }

  private transformUserFromDB(dbUser: any): User {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–ª–∏ –∏–∑ preferences –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    const preferences = dbUser.preferences || {};
    const roles = [];

    // –ï—Å–ª–∏ –≤ preferences –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–ª–∏, —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–æ–ª–∏
    if (preferences.role && preferences.role_id) {
      roles.push({
        role_id: preferences.role_id,
        role_name: preferences.role,
        role_code: preferences.role,
        permissions: preferences.permissions || []
      });
    }

    return {
      id: dbUser.id,
      tenant_id: dbUser.tenant_id || '00000000-0000-0000-0000-000000000001',
      email: dbUser.email,
      name: dbUser.name,
      phone: dbUser.phone,
      status: dbUser.status as UserStatus,
      roles: roles,
      direct_permissions: preferences.permissions || [],
      preferences: preferences,
      pwd_salt: dbUser.pwd_salt,
      pwd_hash: dbUser.pwd_hash,
      last_login: dbUser.last_login ? new Date(dbUser.last_login) : undefined,
      created_at: new Date(dbUser.created_at),
      updated_at: new Date(dbUser.updated_at),
      deleted_at: dbUser.deleted_at ? new Date(dbUser.deleted_at) : undefined
    };
  }

  async getAllUsers(): Promise<User[]> {
    try {
      console.log('externalUsersService: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users...');
      const response = await this.makeRequest(
        'users?deleted_at=is.null&order=created_at.desc',
        { method: 'GET' }
      );

      console.log('externalUsersService: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Ç–∞–±–ª–∏—Ü—ã users:', response);
      const users = response.map((user: any) => this.transformUserFromDB(user));
      console.log('externalUsersService: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users);
      return users;
    } catch (error) {
      console.error('Error fetching users:', error);
      throw error;
    }
  }

  async getUserById(id: string): Promise<User | null> {
    try {
      const response = await this.makeRequest(
        `users?id=eq.${id}&deleted_at=is.null&limit=1`,
        { method: 'GET' }
      );

      if (response.length === 0) return null;
      
      return this.transformUserFromDB(response[0]);
    } catch (error) {
      console.error('Error fetching user by id:', error);
      throw error;
    }
  }

  async getUserByEmail(email: string): Promise<User | null> {
    try {
      const response = await this.makeRequest(
        `users?email=eq.${encodeURIComponent(email)}&deleted_at=is.null&limit=1`,
        { method: 'GET' }
      );

      if (response.length === 0) return null;

      return this.transformUserFromDB(response[0]);
    } catch (error) {
      console.error('Error fetching user by email:', error);
      throw error;
    }
  }

  async getUserByEmailWithRoles(email: string): Promise<User | null> {
    try {
      console.log('üîç ExternalUsersService: –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—è–º–∏ –ø–æ email:', email);

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = await this.makeRequest(
        `users?email=eq.${encodeURIComponent(email)}&deleted_at=is.null&limit=1`,
        { method: 'GET' }
      );

      if (response.length === 0) {
        console.log('‚ùå ExternalUsersService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', email);
        return null;
      }

      const user = this.transformUserFromDB(response[0]);
      console.log('‚úÖ ExternalUsersService: –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.email);

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRolesData = await this.makeRequest(
        `user_roles?user_id=eq.${user.id}&is_active=eq.true&deleted_at=is.null`,
        { method: 'GET' }
      );
      console.log('üìã ExternalUsersService: –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–æ–ª–µ–π:', userRolesData.length);

      if (userRolesData.length === 0) {
        console.log('‚ö†Ô∏è ExternalUsersService: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–π');
        return { ...user, roles: [] };
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–ª—è—Ö
      const roleIds = userRolesData.map((ur: any) => ur.role_id);
      const rolesResponse = await this.makeRequest(
        `roles?id=in.(${roleIds.join(',')})&deleted_at=is.null&is_active=eq.true`,
        { method: 'GET' }
      );
      console.log('üé≠ ExternalUsersService: –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–π:', rolesResponse.length);

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ä–æ–ª–µ–π
      const rolesMap = new Map();
      rolesResponse.forEach((role: any) => {
        rolesMap.set(role.id, role);
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRoles = userRolesData
        .map((ur: any) => {
          const roleData = rolesMap.get(ur.role_id);
          if (!roleData) return null;

          return {
            role_id: ur.role_id,
            role_code: roleData.code,
            role_name: roleData.name,
            scope: roleData.scope,
            scope_value: ur.scope_value,
            permissions: roleData.permissions || [],
            assigned_at: new Date(ur.assigned_at),
            expires_at: ur.expires_at ? new Date(ur.expires_at) : undefined
          };
        })
        .filter(role => role !== null);

      const userWithRoles = { ...user, roles: userRoles };
      console.log('‚úÖ ExternalUsersService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—è–º–∏ –≥–æ—Ç–æ–≤:', userWithRoles.email, '—Ä–æ–ª–µ–π:', userRoles.length);

      return userWithRoles;
    } catch (error) {
      console.error('‚ùå ExternalUsersService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—è–º–∏:', error);
      throw error;
    }
  }

  async getDeletedUserByEmail(email: string): Promise<User | null> {
    try {
      const response = await this.makeRequest(
        `users?email=eq.${encodeURIComponent(email)}&deleted_at=not.is.null&limit=1`,
        { method: 'GET' }
      );

      if (response.length === 0) return null;
      
      return this.transformUserFromDB(response[0]);
    } catch (error) {
      console.error('Error fetching deleted user by email:', error);
      throw error;
    }
  }

  async createUser(input: CreateUserInput): Promise<User> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      const deletedUser = await this.getDeletedUserByEmail(input.email);
      if (deletedUser) {
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${input.email} –±—ã–ª —É–¥–∞–ª–µ–Ω —Ä–∞–Ω–µ–µ. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ email –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.`);
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ª—å –∏ —Ö–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const salt = this.generateSalt();
      const passwordHash = await this.hashPassword(input.password, salt);

      const userData = {
        tenant_id: '00000000-0000-0000-0000-000000000001', // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–µ–Ω–∞–Ω—Ç
        email: input.email,
        name: input.name,
        phone: input.phone || null,
        status: input.status || 'active',
        pwd_salt: salt,
        pwd_hash: passwordHash,
        preferences: {}
      };

      const response = await this.makeRequest('users', {
        method: 'POST',
        body: JSON.stringify(userData)
      });

      const createdUser = this.transformUserFromDB(response[0]);

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ä–æ–ª–∏, –Ω–∞–∑–Ω–∞—á–∞–µ–º –∏—Ö
      if (input.roles && input.roles.length > 0) {
        await this.assignRolesToUser(createdUser.id, input.roles);
      }

      return createdUser;
    } catch (error) {
      console.error('Error creating user:', error);
      throw error;
    }
  }

  async updateUser(id: string, input: UpdateUserInput): Promise<User> {
    try {
      const updateData: any = {};
      
      if (input.email !== undefined) updateData.email = input.email;
      if (input.name !== undefined) updateData.name = input.name;
      if (input.phone !== undefined) updateData.phone = input.phone;
      if (input.status !== undefined) updateData.status = input.status;
      
      updateData.updated_at = new Date().toISOString();

      const response = await this.makeRequest(`users?id=eq.${id}`, {
        method: 'PATCH',
        body: JSON.stringify(updateData)
      });

      return this.transformUserFromDB(response[0]);
    } catch (error) {
      console.error('Error updating user:', error);
      throw error;
    }
  }

  async deleteUser(id: string): Promise<void> {
    try {
      // Soft delete
      await this.makeRequest(`users?id=eq.${id}`, {
        method: 'PATCH',
        body: JSON.stringify({
          deleted_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
      });
    } catch (error) {
      console.error('Error deleting user:', error);
      throw error;
    }
  }

  async restoreUser(id: string): Promise<User> {
    try {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–±–∏—Ä–∞–µ–º deleted_at)
      const response = await this.makeRequest(`users?id=eq.${id}`, {
        method: 'PATCH',
        body: JSON.stringify({
          deleted_at: null,
          updated_at: new Date().toISOString()
        })
      });

      return this.transformUserFromDB(response[0]);
    } catch (error) {
      console.error('Error restoring user:', error);
      throw error;
    }
  }

  async permanentlyDeleteAllSoftDeletedUsers(): Promise<{ deletedCount: number }> {
    try {
      console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const deletedUsers = await this.makeRequest(
        'users?deleted_at=not.is.null',
        { method: 'GET' }
      );

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${deletedUsers.length}`);

      if (deletedUsers.length === 0) {
        return { deletedCount: 0 };
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
      deletedUsers.forEach((user: any, index: number) => {
        console.log(`${index + 1}. ${user.email} (${user.name}) - —É–¥–∞–ª–µ–Ω ${user.deleted_at}`);
      });

      // –ü–æ–ª—É—á–∞–µ–º IDs —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const deletedUserIds = deletedUsers.map((user: any) => user.id);
      console.log(`üîó IDs —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, deletedUserIds);

      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      for (const userId of deletedUserIds) {
        console.log(`üßπ –£–¥–∞–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
        try {
          await this.makeRequest(`user_roles?user_id=eq.${userId}`, {
            method: 'DELETE'
          });
          console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        } catch (roleError) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, roleError);
        }
      }

      // –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      await this.makeRequest('users?deleted_at=not.is.null', {
        method: 'DELETE'
      });

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${deletedUsers.length}`);
      
      return { deletedCount: deletedUsers.length };
    } catch (error) {
      console.error('Error permanently deleting soft-deleted users:', error);
      throw error;
    }
  }

  async changePassword(userId: string, newPassword: string): Promise<void> {
    try {
      const salt = this.generateSalt();
      const passwordHash = await this.hashPassword(newPassword, salt);

      await this.makeRequest(`users?id=eq.${userId}`, {
        method: 'PATCH',
        body: JSON.stringify({
          pwd_salt: salt,
          pwd_hash: passwordHash,
          updated_at: new Date().toISOString()
        })
      });
    } catch (error) {
      console.error('Error changing password:', error);
      throw error;
    }
  }

  async getUsersWithRoles(): Promise<User[]> {
    try {
      console.log('externalUsersService: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await this.getAllUsers();
      console.log('externalUsersService: –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
      const userRolesData = await this.makeRequest(
        'user_roles?is_active=eq.true&deleted_at=is.null',
        { method: 'GET' }
      );
      console.log('externalUsersService: –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–æ–ª–µ–π:', userRolesData.length);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏
      const rolesData = await this.makeRequest(
        'roles?deleted_at=is.null&is_active=eq.true',
        { method: 'GET' }
      );
      console.log('externalUsersService: –ü–æ–ª—É—á–µ–Ω–æ —Ä–æ–ª–µ–π:', rolesData.length);

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ä–æ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const rolesMap = new Map();
      rolesData.forEach((role: any) => {
        rolesMap.set(role.id, role);
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const usersWithRoles = users.map(user => {
        const userRoles = userRolesData
          .filter((ur: any) => ur.user_id === user.id)
          .map((ur: any) => {
            const roleData = rolesMap.get(ur.role_id);
            if (!roleData) return null;
            
            return {
              role_id: ur.role_id,
              role_code: roleData.code,
              role_name: roleData.name,
              scope: roleData.scope,
              scope_value: ur.scope_value,
              permissions: roleData.permissions || [],
              assigned_at: new Date(ur.assigned_at),
              expires_at: ur.expires_at ? new Date(ur.expires_at) : undefined
            };
          })
          .filter(role => role !== null);

        return {
          ...user,
          roles: userRoles
        };
      });

      console.log('externalUsersService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏:', usersWithRoles);
      return usersWithRoles;
    } catch (error) {
      console.error('Error fetching users with roles:', error);
      // –§–æ–ª–ª–±–µ–∫ - –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π
      try {
        const users = await this.getAllUsers();
        return users.map(user => ({ ...user, roles: [] }));
      } catch (fallbackError) {
        console.error('Error in fallback getAllUsers:', fallbackError);
        return [];
      }
    }
  }

  private async assignRolesToUser(userId: string, roleIds: string[]): Promise<void> {
    try {
      const assignments = roleIds.map(roleId => ({
        user_id: userId,
        role_id: roleId,
        assigned_by: '00000000-0000-0000-0000-000000000001' // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      }));

      await this.makeRequest('user_roles', {
        method: 'POST',
        body: JSON.stringify(assignments)
      });
    } catch (error) {
      console.error('Error assigning roles to user:', error);
      throw error;
    }
  }

  private generateSalt(): string {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫—É—é —Å–æ–ª—å –∫–∞–∫ Base64 (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å CryptoUtils)
    const salt = new Uint8Array(16); // 16 –±–∞–π—Ç –∫–∞–∫ –≤ CryptoUtils
    crypto.getRandomValues(salt);
    return this.arrayBufferToBase64(salt);
  }

  private arrayBufferToBase64(buffer: ArrayBuffer): string {
    const bytes = new Uint8Array(buffer);
    let binary = '';
    for (let i = 0; i < bytes.byteLength; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  }

  private base64ToArrayBuffer(base64: string): ArrayBuffer {
    const binary = atob(base64);
    const bytes = new Uint8Array(binary.length);
    for (let i = 0; i < binary.length; i++) {
      bytes[i] = binary.charCodeAt(i);
    }
    return bytes.buffer;
  }

  private async hashPassword(password: string, salt: string): Promise<string> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º PBKDF2 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å authService
    const encoder = new TextEncoder();
    const passwordBytes = encoder.encode(password);
    const saltBytes = this.base64ToArrayBuffer(salt);

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∫–∞–∫ –∫–ª—é—á –¥–ª—è PBKDF2
    const keyMaterial = await crypto.subtle.importKey(
      'raw',
      passwordBytes,
      { name: 'PBKDF2' },
      false,
      ['deriveBits']
    );

    // –í—ã–ø–æ–ª–Ω—è–µ–º PBKDF2 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å CryptoUtils)
    const hashBuffer = await crypto.subtle.deriveBits(
      {
        name: 'PBKDF2',
        salt: saltBytes,
        iterations: 100000, // –¢–∞–∫–∏–µ –∂–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ –≤ CryptoUtils
        hash: 'SHA-256'
      },
      keyMaterial,
      32 * 8  // 32 –±–∞–π—Ç–∞ –≤ –±–∏—Ç–∞—Ö
    );

    return this.arrayBufferToBase64(hashBuffer);
  }

  async testConnection(): Promise<{ success: boolean; error?: string }> {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      const config = this.getConfig();
      const response = await fetch(`${config.url}/rest/v1/`, {
        method: 'GET',
        headers: {
          'apikey': config.apiKey,
          'Authorization': `Bearer ${config.apiKey}`
        }
      });

      if (response.ok) {
        return { success: true };
      } else {
        return { success: false, error: `HTTP ${response.status}: ${response.statusText}` };
      }
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getUserStats(): Promise<{
    total: number;
    active: number;
    inactive: number;
    blocked: number;
  }> {
    try {
      const users = await this.getAllUsers();
      
      return {
        total: users.length,
        active: users.filter(u => u.status === 'active').length,
        inactive: users.filter(u => u.status === 'inactive').length,
        blocked: users.filter(u => u.status === 'blocked').length
      };
    } catch (error) {
      console.error('Error fetching user stats:', error);
      return { total: 0, active: 0, inactive: 0, blocked: 0 };
    }
  }
}

export const externalUsersService = new ExternalUsersService();