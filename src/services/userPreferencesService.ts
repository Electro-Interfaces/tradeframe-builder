/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –≤ Supabase
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 */

import { supabaseClientBrowser as supabase } from './supabaseClientBrowser';
import { AuthService } from '@/services/authService';

export interface UserPreference {
  id: string;
  user_id: string;
  preference_key: string;
  preference_value: string;
  created_at: string;
  updated_at: string;
}

export interface UserPreferences {
  selected_network?: string;
  selected_trading_point?: string;
  dashboard_layout?: string;
  theme?: string;
  language?: string;
  [key: string]: string | undefined;
}

class UserPreferencesService {
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserPreferences(): Promise<UserPreferences> {
    try {
      const user = await AuthService.getCurrentUser();
      if (!user?.id) {
        console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è');
        return {};
      }

      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      try {
        const { data, error } = await supabase
          .from('user_preferences')
          .select('preference_key, preference_value')
          .eq('user_id', user.id);

        if (error) {
          throw error;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤ –æ–±—ä–µ–∫—Ç
        const preferences: UserPreferences = {};
        if (data) {
          data.forEach(pref => {
            preferences[pref.preference_key] = pref.preference_value;
          });
        }

        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', preferences);
        return preferences;

      } catch (dbError) {
        console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ user_preferences –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', dbError);
        throw new Error(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${dbError.message}`);
      }

    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:', error);
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
   */
  async getPreference(key: string): Promise<string | null> {
    const user = await AuthService.getCurrentUser();
    if (!user?.id) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    const { data, error } = await supabase
      .from('user_preferences')
      .select('preference_value')
      .eq('user_id', user.id)
      .eq('preference_key', key)
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
        // –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return null;
      }
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ${key}: ${error.message}`);
    }

    return data?.preference_value || null;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ
   */
  async setPreference(key: string, value: string): Promise<boolean> {
    const user = await AuthService.getCurrentUser();
    if (!user?.id) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    const { data, error } = await supabase
      .from('user_preferences')
      .upsert({
        user_id: user.id,
        preference_key: key,
        preference_value: value
      }, {
        onConflict: 'user_id,preference_key'
      });

    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ${key}: ${error.message}`);
    }

    console.log(`‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ ${key} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:`, value);
    return true;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
   */
  async setPreferences(preferences: Record<string, string>): Promise<boolean> {
    try {
      const user = await AuthService.getCurrentUser();
      if (!user?.id) {
        console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–µ –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è');
        return false;
      }

      const records = Object.entries(preferences).map(([key, value]) => ({
        user_id: user.id,
        preference_key: key,
        preference_value: value
      }));

      const { data, error } = await supabase
        .from('user_preferences')
        .upsert(records, {
          onConflict: 'user_id,preference_key'
        });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:', error);
        return false;
      }

      console.log('‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', preferences);
      return true;

    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:', error);
      return false;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ
   */
  async removePreference(key: string): Promise<boolean> {
    try {
      const user = await AuthService.getCurrentUser();
      if (!user?.id) {
        return false;
      }

      const { error } = await supabase
        .from('user_preferences')
        .delete()
        .eq('user_id', user.id)
        .eq('preference_key', key);

      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ${key}:`, error);
        return false;
      }

      console.log(`‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ ${key} —É–¥–∞–ª–µ–Ω–æ`);
      return true;

    } catch (error) {
      console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ${key}:`, error);
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async clearAllPreferences(): Promise<boolean> {
    try {
      const user = await AuthService.getCurrentUser();
      if (!user?.id) {
        return false;
      }

      const { error } = await supabase
        .from('user_preferences')
        .delete()
        .eq('user_id', user.id);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:', error);
        return false;
      }

      console.log('‚úÖ –í—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã');
      return true;

    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:', error);
      return false;
    }
  }

  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getSelectedNetwork(): Promise<string | null> {
    return await this.getPreference('selected_network');
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async setSelectedNetwork(networkId: string): Promise<boolean> {
    return await this.setPreference('selected_network', networkId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getSelectedTradingPoint(): Promise<string | null> {
    const value = await this.getPreference('selected_trading_point');
    return value || 'all'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "all"
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async setSelectedTradingPoint(tradingPointId: string): Promise<boolean> {
    return await this.setPreference('selected_trading_point', tradingPointId);
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä —Å–µ—Ç–∏ –∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
   */
  async setNetworkSelection(networkId: string, tradingPointId: string = 'all'): Promise<boolean> {
    return await this.setPreferences({
      selected_network: networkId,
      selected_trading_point: tradingPointId
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const userPreferencesService = new UserPreferencesService();