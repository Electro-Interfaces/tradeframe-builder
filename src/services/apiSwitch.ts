/**
 * üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ API - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É mock –∏ HTTP API
 * –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production
 */

import { 
  mockEquipmentAPI, 
  mockEquipmentTemplatesAPI 
} from './equipment';

import { 
  mockComponentsAPI
} from './components';

import { 
  httpEquipmentAPI,
  httpEquipmentTemplatesAPI,
  httpComponentsAPI,
  HttpApiError
} from './httpClients';

// üéõÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø
const API_CONFIG = {
  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å true –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ HTTP API
  USE_HTTP_API: import.meta.env.VITE_USE_HTTP_API === 'true' || false,
  
  // URL —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
  API_BASE_URL: import.meta.env.VITE_API_URL || 'http://localhost:3000/api/v1',
  
  // –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
  DEBUG_MODE: import.meta.env.DEV || false
};

// üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
const logApiUsage = (service: string, mode: 'MOCK' | 'HTTP') => {
  if (API_CONFIG.DEBUG_MODE) {
    console.log(`üîÑ ${service}: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${mode} API`);
  }
};

// ===== –ü–ï–†–ï–ö–õ–Æ–ß–ê–ï–ú–´–ï –°–ï–†–í–ò–°–´ =====

// üîß Equipment API
export const currentEquipmentAPI = (() => {
  if (API_CONFIG.USE_HTTP_API) {
    logApiUsage('Equipment', 'HTTP');
    return httpEquipmentAPI;
  } else {
    logApiUsage('Equipment', 'MOCK');
    return mockEquipmentAPI;
  }
})();

// üìã Equipment Templates API  
export const currentEquipmentTemplatesAPI = (() => {
  if (API_CONFIG.USE_HTTP_API) {
    logApiUsage('Equipment Templates', 'HTTP');
    return httpEquipmentTemplatesAPI;
  } else {
    logApiUsage('Equipment Templates', 'MOCK');
    return mockEquipmentTemplatesAPI;
  }
})();

// üß© Components API
export const currentComponentsAPI = (() => {
  if (API_CONFIG.USE_HTTP_API) {
    logApiUsage('Components', 'HTTP');
    return httpComponentsAPI;
  } else {
    logApiUsage('Components', 'MOCK');
    return mockComponentsAPI;
  }
})();

// üîç –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
 */
export const testApiConnection = async (): Promise<{
  success: boolean;
  service: string;
  error?: string;
}[]> => {
  const results = [];
  
  // –¢–µ—Å—Ç Equipment API
  try {
    await httpEquipmentAPI.list({ trading_point_id: 'test' });
    results.push({ success: true, service: 'Equipment API' });
  } catch (error) {
    results.push({ 
      success: false, 
      service: 'Equipment API',
      error: error instanceof HttpApiError ? error.message : 'Unknown error'
    });
  }
  
  // –¢–µ—Å—Ç Equipment Templates API
  try {
    await httpEquipmentTemplatesAPI.list();
    results.push({ success: true, service: 'Equipment Templates API' });
  } catch (error) {
    results.push({ 
      success: false, 
      service: 'Equipment Templates API',
      error: error instanceof HttpApiError ? error.message : 'Unknown error'
    });
  }
  
  // –¢–µ—Å—Ç Components API
  try {
    await httpComponentsAPI.list({ equipment_id: 'test' });
    results.push({ success: true, service: 'Components API' });
  } catch (error) {
    results.push({ 
      success: false, 
      service: 'Components API',
      error: error instanceof HttpApiError ? error.message : 'Unknown error'
    });
  }
  
  return results;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ API
 */
export const getApiStatus = () => ({
  mode: API_CONFIG.USE_HTTP_API ? 'HTTP' : 'MOCK',
  baseUrl: API_CONFIG.API_BASE_URL,
  debugMode: API_CONFIG.DEBUG_MODE,
  config: API_CONFIG
});

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ HTTP API (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
export const forceHttpMode = () => {
  // @ts-ignore
  window.__FORCE_HTTP_API = true;
  console.warn('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω HTTP API —Ä–µ–∂–∏–º');
  location.reload();
};

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Mock API (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
export const forceMockMode = () => {
  // @ts-ignore
  window.__FORCE_HTTP_API = false;
  console.warn('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω MOCK API —Ä–µ–∂–∏–º');
  location.reload();
};

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ window –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
if (API_CONFIG.DEBUG_MODE) {
  // @ts-ignore
  window.apiTest = {
    testConnection: testApiConnection,
    getStatus: getApiStatus,
    forceHttp: forceHttpMode,
    forceMock: forceMockMode
  };
  
  console.log('üß™ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ window.apiTest');
  console.log('üìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:', getApiStatus().mode);
}