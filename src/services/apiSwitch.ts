/**
 * üîÑ –ü–†–Ø–ú–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö SUPABASE
 * 
 * –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
 * –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞
 */

import { supabaseEquipmentAPI, supabaseEquipmentTemplatesAPI } from './equipmentSupabase';
import { componentsSupabaseAPI } from './componentsSupabase';
import { commandTemplatesSupabaseAPI } from './commandTemplatesSupabase';

// üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Supabase
const logSupabaseUsage = (service: string) => {
  if (import.meta.env.DEV) {
    console.log(`üîó ${service}: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase`);
  }
};

// ===== SUPABASE –°–ï–†–í–ò–°–´ =====

// üîß Equipment API
export const currentEquipmentAPI = (() => {
  logSupabaseUsage('Equipment');
  return supabaseEquipmentAPI;
})();

// üìã Equipment Templates API (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ equipmentSupabase)  
export const currentEquipmentTemplatesAPI = (() => {
  logSupabaseUsage('Equipment Templates');
  return supabaseEquipmentTemplatesAPI; // –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
})();

// üß© Components API
export const currentComponentsAPI = (() => {
  logSupabaseUsage('Components');
  return componentsSupabaseAPI;
})();

// üìù Command Templates API
export const currentCommandTemplatesAPI = (() => {
  logSupabaseUsage('Command Templates');
  return commandTemplatesSupabaseAPI;
})();

// üîç –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Supabase

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
 */
export const testSupabaseConnection = async (): Promise<{
  success: boolean;
  service: string;
  error?: string;
}[]> => {
  const results = [];
  
  // –¢–µ—Å—Ç Equipment Supabase
  try {
    await currentEquipmentAPI.list({ trading_point_id: 'test' });
    results.push({ success: true, service: 'Equipment Supabase' });
  } catch (error) {
    results.push({ 
      success: false, 
      service: 'Equipment Supabase',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
  
  // –¢–µ—Å—Ç Components Supabase
  try {
    await currentComponentsAPI.list({ equipment_id: 'test' });
    results.push({ success: true, service: 'Components Supabase' });
  } catch (error) {
    results.push({ 
      success: false, 
      service: 'Components Supabase',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
  
  // –¢–µ—Å—Ç Command Templates Supabase
  try {
    await currentCommandTemplatesAPI.list();
    results.push({ success: true, service: 'Command Templates Supabase' });
  } catch (error) {
    results.push({ 
      success: false, 
      service: 'Command Templates Supabase',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
  
  return results;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø: –¢–û–õ–¨–ö–û SUPABASE, MOCK –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù
 */
export const getConnectionStatus = () => ({
  mode: 'SUPABASE_PRODUCTION',
  database: 'Supabase',
  connection: 'Direct',
  mockDisabled: true,
  forceDatabaseMode: true,
  debugMode: import.meta.env.DEV
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ window –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
if (import.meta.env.DEV) {
  // @ts-ignore
  window.supabaseTest = {
    testConnection: testSupabaseConnection,
    getStatus: getConnectionStatus,
    services: {
      equipment: currentEquipmentAPI,
      components: currentComponentsAPI,
      commandTemplates: currentCommandTemplatesAPI
    }
  };
  
  console.log('üß™ Supabase —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ window.supabaseTest');
  console.log('üîó –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: –¢–æ–ª—å–∫–æ Supabase, Mock –æ—Ç–∫–ª—é—á–µ–Ω');
  console.log('üö´ Mock —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
}