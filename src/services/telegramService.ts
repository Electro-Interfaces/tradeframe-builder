import { getSystemConfig, isGlobalTelegramConfigured } from '@/config/system';
import { getUserTelegramChatId, isUserTelegramEnabled } from '@/config/userSettings';
import { apiConfigServiceDB } from './apiConfigServiceDB';
import { systemConfigService } from './systemConfigService';

export interface TelegramConfig {
  botToken: string;
  enabled: boolean;
  defaultChatId?: string;
  webhookUrl?: string;
}

export interface TelegramSendFileOptions {
  filename: string;
  caption?: string;
  chatId?: string;
}

const TELEGRAM_CONFIG_KEY = 'telegram_integration';

const defaultTelegramConfig: TelegramConfig = {
  botToken: import.meta.env.VITE_TELEGRAM_BOT_TOKEN || '',
  enabled: false,
  defaultChatId: '',
  webhookUrl: ''
};

class TelegramService {
  private readonly baseUrl = 'https://api.telegram.org';

  // ====== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======

  async initialize(): Promise<void> {
    try {
      await apiConfigServiceDB.initialize();
      console.log('‚úÖ TelegramService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramService:', error);
    }
  }

  async useSystemConfig(): Promise<boolean> {
    try {
      return !(await apiConfigServiceDB.isMockMode());
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∂–∏–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localStorage:', error);
      return false;
    }
  }

  async getTelegramConfig(): Promise<TelegramConfig> {
    try {
      const useSystem = await this.useSystemConfig();
      
      if (useSystem) {
        const config = await systemConfigService.getConfig(TELEGRAM_CONFIG_KEY);
        if (config?.value) {
          return { ...defaultTelegramConfig, ...config.value };
        }
      }
      
      // Fallback –Ω–∞ localStorage
      const saved = localStorage.getItem('telegram_config');
      return saved ? JSON.parse(saved) : defaultTelegramConfig;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram:', error);
      return defaultTelegramConfig;
    }
  }

  async saveTelegramConfig(config: TelegramConfig): Promise<void> {
    try {
      const useSystem = await this.useSystemConfig();
      
      if (useSystem) {
        await systemConfigService.setConfig(TELEGRAM_CONFIG_KEY, {
          key: TELEGRAM_CONFIG_KEY,
          value: config,
          description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
          is_active: true
        });
        console.log('‚úÖ Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ');
      } else {
        localStorage.setItem('telegram_config', JSON.stringify(config));
        console.log('‚úÖ Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram:', error);
      localStorage.setItem('telegram_config', JSON.stringify(config));
    }
  }

  // ====== –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ======

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage(text: string, chatId?: string): Promise<boolean> {
    const systemConfig = getSystemConfig();
    if (!isGlobalTelegramConfigured()) {
      throw new Error('–ì–ª–æ–±–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
    }

    const targetChatId = chatId || getUserTelegramChatId();
    if (!targetChatId) {
      throw new Error('Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }

    try {
      const response = await fetch(`${this.baseUrl}/bot${systemConfig.telegram.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: targetChatId,
          text: text,
          parse_mode: 'HTML'
        })
      });

      const result = await response.json();
      
      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', result);
        throw new Error(result.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
  async sendDocument(blob: Blob, options: TelegramSendFileOptions): Promise<boolean> {
    const systemConfig = getSystemConfig();
    if (!isGlobalTelegramConfigured()) {
      throw new Error('–ì–ª–æ–±–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
    }

    const targetChatId = options.chatId || getUserTelegramChatId();
    if (!targetChatId) {
      throw new Error('Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }

    try {
      const formData = new FormData();
      formData.append('chat_id', targetChatId);
      formData.append('document', blob, options.filename);
      
      if (options.caption) {
        formData.append('caption', options.caption);
        formData.append('parse_mode', 'HTML');
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram:', {
        filename: options.filename,
        size: blob.size,
        chatId: targetChatId
      });

      const response = await fetch(`${this.baseUrl}/bot${systemConfig.telegram.botToken}/sendDocument`, {
        method: 'POST',
        body: formData
      });

      const result = await response.json();
      
      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', result);
        throw new Error(result.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

      console.log('‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram:', result);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  async getBotInfo(): Promise<any> {
    const systemConfig = getSystemConfig();
    if (!isGlobalTelegramConfigured()) {
      throw new Error('–ì–ª–æ–±–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    try {
      const response = await fetch(`${this.baseUrl}/bot${systemConfig.telegram.botToken}/getMe`);
      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

      return result.result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
  async testChat(chatId?: string): Promise<boolean> {
    const systemConfig = getSystemConfig();
    if (!isGlobalTelegramConfigured()) {
      return false;
    }

    try {
      const targetChatId = chatId || getUserTelegramChatId();
      if (!targetChatId) return false;

      const response = await fetch(`${this.baseUrl}/bot${systemConfig.telegram.botToken}/getChat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: targetChatId
        })
      });

      return response.ok;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id (–¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
  async getUpdates(): Promise<any> {
    const systemConfig = getSystemConfig();
    if (!isGlobalTelegramConfigured()) {
      throw new Error('–ì–ª–æ–±–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    try {
      const response = await fetch(`${this.baseUrl}/bot${systemConfig.telegram.botToken}/getUpdates`);
      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

      return result.result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }
}

export const telegramService = new TelegramService();