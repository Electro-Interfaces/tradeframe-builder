/**
 * üåê EXTERNAL API CLIENT
 * 
 * –ö–ª–∏–µ–Ω—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–µ—Ç—è–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
 */

import { tradingNetworkConfigService } from './tradingNetworkConfigService';
import { tokenRefreshService } from './tokenRefreshService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –≤–Ω–µ—à–Ω–∏—Ö API
export interface ExternalApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  status?: number;
  headers?: Record<string, string>;
  responseTime?: number;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–∏–º API
export interface ExternalApiRequestConfig {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
  headers?: Record<string, string>;
  body?: any;
  timeout?: number;
  retryAttempts?: number;
  useAuth?: boolean;
  customBaseUrl?: string;
  queryParams?: Record<string, string | number | boolean>;
}

class ExternalApiClient {
  private requestInterceptors: ((config: ExternalApiRequestConfig) => ExternalApiRequestConfig)[] = [];
  private responseInterceptors: ((response: ExternalApiResponse) => ExternalApiResponse)[] = [];

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API
   */
  private async getBaseUrl(customUrl?: string): Promise<string> {
    if (customUrl) {
      return customUrl;
    }

    try {
      const tradingConfig = await tradingNetworkConfigService.getConfig();
      if (!tradingConfig.baseUrl) {
        const errorMsg = '–ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"';
        console.error('‚ùå [EXTERNAL API]', errorMsg);
        throw new Error(errorMsg);
      }
      console.log('üîß [EXTERNAL API] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π URL:', tradingConfig.baseUrl);
      return tradingConfig.baseUrl;
    } catch (error) {
      const errorMsg = `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–Ω–µ—à–Ω–µ–≥–æ API: ${error instanceof Error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
      console.error('‚ùå [EXTERNAL API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', errorMsg);
      console.error('üí° [EXTERNAL API] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏" –∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É system_config –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      throw new Error(errorMsg);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private async getAuthHeaders(): Promise<Record<string, string>> {
    try {
      const config = await tradingNetworkConfigService.getConfig();
      const headers: Record<string, string> = {};

      if (config.authType === 'bearer' && config.authToken) {
        headers['Authorization'] = `Bearer ${config.authToken}`;
      } else if (config.authType === 'basic' && config.username && config.password) {
        const credentials = btoa(`${config.username}:${config.password}`);
        headers['Authorization'] = `Basic ${credentials}`;
      } else if (config.authType === 'api-key' && config.apiKey) {
        headers['X-API-Key'] = config.apiKey;
      }

      return headers;
    } catch (error) {
      console.warn('‚ö†Ô∏è [EXTERNAL API] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return {};
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å URL —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  private buildUrl(baseUrl: string, endpoint: string, queryParams?: Record<string, string | number | boolean>): string {
    let url = `${baseUrl.replace(/\/$/, '')}${endpoint}`;
    
    if (queryParams && Object.keys(queryParams).length > 0) {
      const params = new URLSearchParams();
      Object.entries(queryParams).forEach(([key, value]) => {
        params.append(key, String(value));
      });
      url += `?${params.toString()}`;
    }
    
    return url;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private async request<T>(
    endpoint: string, 
    config: ExternalApiRequestConfig = {}
  ): Promise<ExternalApiResponse<T>> {
    const startTime = Date.now();
    const method = config.method || 'GET';
    
    try {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º interceptors
      let finalConfig = config;
      for (const interceptor of this.requestInterceptors) {
        finalConfig = interceptor(finalConfig);
      }

      const baseUrl = await this.getBaseUrl(finalConfig.customBaseUrl);
      const url = this.buildUrl(baseUrl, endpoint, finalConfig.queryParams);
      
      console.log(`üåê [EXTERNAL API] ${method} ${url}`);
      
      // –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      let headers: Record<string, string> = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        ...finalConfig.headers
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      if (finalConfig.useAuth !== false) {
        const authHeaders = await this.getAuthHeaders();
        headers = { ...headers, ...authHeaders };
      }

      const fetchOptions: RequestInit = {
        method,
        headers,
        ...(finalConfig.timeout && { signal: AbortSignal.timeout(finalConfig.timeout || 30000) })
      };

      if (finalConfig.body && method !== 'GET') {
        fetchOptions.body = typeof finalConfig.body === 'string' 
          ? finalConfig.body 
          : JSON.stringify(finalConfig.body);
      }

      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
      const maxRetries = finalConfig.retryAttempts || 1;
      let lastError: Error | null = null;

      for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
          console.log(`üì° [EXTERNAL API] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`);
          
          const response = await fetch(url, fetchOptions);
          const responseTime = Date.now() - startTime;
          
          let responseData: any = null;
          const contentType = response.headers.get('content-type');
          
          if (contentType?.includes('application/json')) {
            try {
              responseData = await response.json();
            } catch (jsonError) {
              console.warn('‚ö†Ô∏è [EXTERNAL API] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
              responseData = await response.text();
            }
          } else {
            responseData = await response.text();
          }

          let apiResponse: ExternalApiResponse<T>;

          if (response.ok) {
            console.log(`‚úÖ [EXTERNAL API] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status} (${responseTime}ms)`);
            if (Array.isArray(responseData)) {
              console.log(`üìä [EXTERNAL API] –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${responseData.length}`);
            }
            
            apiResponse = {
              success: true,
              data: responseData,
              status: response.status,
              responseTime,
              headers: Object.fromEntries(response.headers.entries())
            };
          } else {
            const errorMessage = `HTTP ${response.status}: ${response.statusText}`;
            console.error(`‚ùå [EXTERNAL API] –û—à–∏–±–∫–∞: ${errorMessage}`);
            console.error(`üìÑ [EXTERNAL API] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, responseData);
            
            // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            if (response.status === 401 || response.status === 403 || response.status === 404) {
              apiResponse = {
                success: false,
                error: errorMessage,
                status: response.status,
                responseTime,
                headers: Object.fromEntries(response.headers.entries())
              };
              break;
            }
            
            if (attempt === maxRetries) {
              apiResponse = {
                success: false,
                error: errorMessage,
                status: response.status,
                responseTime,
                headers: Object.fromEntries(response.headers.entries())
              };
            } else {
              console.log(`üîÑ [EXTERNAL API] –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...`);
              await new Promise(resolve => setTimeout(resolve, 1000));
              continue;
            }
          }

          // –ü—Ä–∏–º–µ–Ω—è–µ–º response interceptors
          for (const interceptor of this.responseInterceptors) {
            apiResponse = interceptor(apiResponse);
          }

          return apiResponse;
          
        } catch (error) {
          lastError = error instanceof Error ? error : new Error(String(error));
          console.error(`‚ùå [EXTERNAL API] –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, lastError.message);
          
          if (attempt < maxRetries) {
            console.log(`üîÑ [EXTERNAL API] –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`);
            await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
          }
        }
      }

      // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
      const responseTime = Date.now() - startTime;
      const errorMessage = lastError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      return {
        success: false,
        error: `–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã: ${errorMessage}`,
        responseTime
      };
      
    } catch (error) {
      const responseTime = Date.now() - startTime;
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      console.error(`‚ùå [EXTERNAL API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${errorMessage}`);
      
      return {
        success: false,
        error: errorMessage,
        responseTime
      };
    }
  }

  /**
   * GET –∑–∞–ø—Ä–æ—Å
   */
  async get<T>(endpoint: string, config: Omit<ExternalApiRequestConfig, 'method'> = {}): Promise<ExternalApiResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'GET' });
  }

  /**
   * POST –∑–∞–ø—Ä–æ—Å
   */
  async post<T>(endpoint: string, data: any, config: Omit<ExternalApiRequestConfig, 'method' | 'body'> = {}): Promise<ExternalApiResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'POST', body: data });
  }

  /**
   * PUT –∑–∞–ø—Ä–æ—Å
   */
  async put<T>(endpoint: string, data: any, config: Omit<ExternalApiRequestConfig, 'method' | 'body'> = {}): Promise<ExternalApiResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'PUT', body: data });
  }

  /**
   * DELETE –∑–∞–ø—Ä–æ—Å
   */
  async delete<T>(endpoint: string, config: Omit<ExternalApiRequestConfig, 'method'> = {}): Promise<ExternalApiResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'DELETE' });
  }

  /**
   * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–µ–π
   */
  
  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã (—Ç–∞–Ω–∫–∏)
  async getTanks(systemId: string, stationId: string): Promise<ExternalApiResponse<any[]>> {
    return this.get('/tanks', {
      queryParams: { system: systemId, station: stationId },
      timeout: 15000,
      retryAttempts: 2
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  async getTransactions(systemId: string, stationId: string, date?: string): Promise<ExternalApiResponse<any[]>> {
    const params: Record<string, string> = { 
      system: systemId, 
      station: stationId 
    };
    
    if (date) {
      params.date = date;
    }

    return this.get('/transactions', {
      queryParams: params,
      timeout: 20000,
      retryAttempts: 2
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
  async getSalesSummary(systemId: string, stationId: string, date?: string): Promise<ExternalApiResponse<any>> {
    const params: Record<string, string> = { 
      system: systemId, 
      station: stationId 
    };
    
    if (date) {
      params.date = date;
    }

    return this.get('/sales-summary', {
      queryParams: params,
      timeout: 15000,
      retryAttempts: 2
    });
  }

  /**
   * Interceptors
   */
  addRequestInterceptor(interceptor: (config: ExternalApiRequestConfig) => ExternalApiRequestConfig): void {
    this.requestInterceptors.push(interceptor);
  }

  addResponseInterceptor(interceptor: (response: ExternalApiResponse) => ExternalApiResponse): void {
    this.responseInterceptors.push(interceptor);
  }

  /**
   * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   */
  async getConnectionInfo(): Promise<Record<string, any>> {
    try {
      const config = await tradingNetworkConfigService.getConfig();
      return {
        baseUrl: config.baseUrl,
        authType: config.authType,
        hasCredentials: !!(config.username || config.apiKey || config.authToken),
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        timestamp: new Date().toISOString()
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const externalApiClient = new ExternalApiClient();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export default externalApiClient;