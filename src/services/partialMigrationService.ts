/**
 * üîÑ –°–ï–†–í–ò–° –ß–ê–°–¢–ò–ß–ù–û–ô –ú–ò–ì–†–ê–¶–ò–ò –ù–ê –ë–î
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ë–î,
 * –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å mock –¥–∞–Ω–Ω—ã–º–∏
 */

import { apiConfigService, DatabaseConnection } from '@/services/apiConfigService';
import { PersistentStorage } from '@/utils/persistentStorage';
import { httpClient } from './universalHttpClient';

export type ServiceModule = 
  | 'networks'
  | 'nomenclature' 
  | 'users'
  | 'equipment'
  | 'components'
  | 'commandTemplates'
  | 'connections'
  | 'prices'
  | 'messages'
  | 'auditLog'
  | 'workflows'
  | 'tanks'
  | 'tradingPoints'
  | 'operations'
  | 'shiftReports';

export interface ServiceMigrationConfig {
  moduleId: ServiceModule;
  moduleName: string;
  description: string;
  migrationStatus: 'mock' | 'database' | 'migrating' | 'error';
  connectionId?: string;
  lastMigrated?: Date;
  errorMessage?: string;
  apiEndpoints: string[];
  dependencies: ServiceModule[];
  priority: 'high' | 'medium' | 'low';
}

export interface PartialMigrationConfig {
  globalDefault: 'mock' | 'database';
  serviceOverrides: Record<ServiceModule, {
    status: 'mock' | 'database';
    connectionId?: string;
    lastUpdated: Date;
  }>;
  lastUpdated: Date;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
const serviceConfigs: Record<ServiceModule, ServiceMigrationConfig> = {
  networks: {
    moduleId: 'networks',
    moduleName: '–¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–µ—Ç—è–º–∏ –∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏',
    migrationStatus: 'mock',
    apiEndpoints: ['/networks', '/trading-points'],
    dependencies: [],
    priority: 'high'
  },
  nomenclature: {
    moduleId: 'nomenclature', 
    moduleName: '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ —Ç–æ–ø–ª–∏–≤–∞',
    description: '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–¥–æ–≤',
    migrationStatus: 'mock',
    apiEndpoints: ['/nomenclature', '/external-codes'],
    dependencies: ['networks'],
    priority: 'high'
  },
  users: {
    moduleId: 'users',
    moduleName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–æ–ª–∏',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞',
    migrationStatus: 'mock',
    apiEndpoints: ['/users', '/roles', '/permissions'],
    dependencies: [],
    priority: 'high'
  },
  equipment: {
    moduleId: 'equipment',
    moduleName: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –ê–ó–°',
    migrationStatus: 'mock', 
    apiEndpoints: ['/equipment', '/equipment-templates'],
    dependencies: ['networks', 'users'],
    priority: 'medium'
  },
  components: {
    moduleId: 'components',
    moduleName: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
    description: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö —à–∞–±–ª–æ–Ω—ã',
    migrationStatus: 'mock',
    apiEndpoints: ['/components', '/component-templates'],
    dependencies: ['equipment'],
    priority: 'medium'
  },
  commandTemplates: {
    moduleId: 'commandTemplates',
    moduleName: '–®–∞–±–ª–æ–Ω—ã –∫–æ–º–∞–Ω–¥',
    description: 'API —à–∞–±–ª–æ–Ω—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
    migrationStatus: 'mock',
    apiEndpoints: ['/command-templates'],
    dependencies: ['equipment', 'components'],
    priority: 'medium'
  },
  connections: {
    moduleId: 'connections',
    moduleName: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π',
    description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –≤–Ω–µ—à–Ω–∏–º —Å–∏—Å—Ç–µ–º–∞–º',
    migrationStatus: 'mock',
    apiEndpoints: ['/connections'],
    dependencies: [],
    priority: 'low'
  },
  prices: {
    moduleId: 'prices',
    moduleName: '–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ', 
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏',
    migrationStatus: 'mock',
    apiEndpoints: ['/prices', '/price-history'],
    dependencies: ['networks', 'nomenclature'],
    priority: 'low'
  },
  messages: {
    moduleId: 'messages',
    moduleName: '–°–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    description: '–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
    migrationStatus: 'mock',
    apiEndpoints: ['/messages', '/tickets', '/notifications'],
    dependencies: ['users'],
    priority: 'low'
  },
  auditLog: {
    moduleId: 'auditLog',
    moduleName: '–ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞',
    description: '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    migrationStatus: 'mock',
    apiEndpoints: ['/audit-log'],
    dependencies: ['users'],
    priority: 'low'
  },
  workflows: {
    moduleId: 'workflows',
    moduleName: '–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã',
    description: '–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –∏ workflow',
    migrationStatus: 'mock',
    apiEndpoints: ['/workflows'],
    dependencies: ['users', 'equipment'],
    priority: 'low'
  },
  tanks: {
    moduleId: 'tanks',
    moduleName: '–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º–∏ –ê–ó–°',
    migrationStatus: 'mock',
    apiEndpoints: ['/tanks'],
    dependencies: ['networks', 'nomenclature'],
    priority: 'medium'
  },
  tradingPoints: {
    moduleId: 'tradingPoints',
    moduleName: '–¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏',
    migrationStatus: 'mock',
    apiEndpoints: ['/trading-points'],
    dependencies: ['networks'],
    priority: 'high'
  },
  
  operations: {
    moduleId: 'operations',
    moduleName: '–û–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∑–∞–ø—Ä–∞–≤–∫–∏, –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
    migrationStatus: 'mock',
    apiEndpoints: ['/operations', '/operations/statistics', '/operations/search'],
    dependencies: ['tradingPoints'],
    priority: 'high'
  },
  
  shiftReports: {
    moduleId: 'shiftReports',
    moduleName: '–°–º–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã',
    description: '–°–º–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ —Ñ–æ—Ä–º–µ 25-–ù–ü —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–º–µ–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å –§–ù–°',
    migrationStatus: 'mock',
    apiEndpoints: ['/shift-reports', '/shift-reports/statistics', '/shift-reports/synchronize'],
    dependencies: ['tradingPoints', 'operations'],
    priority: 'high'
  }
};

// –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
const initialPartialConfig: PartialMigrationConfig = {
  globalDefault: 'mock',
  serviceOverrides: {} as any,
  lastUpdated: new Date()
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ localStorage
let partialConfig: PartialMigrationConfig = PersistentStorage.load<PartialMigrationConfig>('partial_migration_config', initialPartialConfig);

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
const savePartialConfig = () => {
  partialConfig.lastUpdated = new Date();
  PersistentStorage.save('partial_migration_config', partialConfig);
};

/**
 * –°–µ—Ä–≤–∏—Å —á–∞—Å—Ç–∏—á–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export const partialMigrationService = {
  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  getAllServiceConfigs(): ServiceMigrationConfig[] {
    return Object.values(serviceConfigs).map(config => ({
      ...config,
      migrationStatus: this.getServiceStatus(config.moduleId),
      connectionId: partialConfig.serviceOverrides[config.moduleId]?.connectionId,
      lastMigrated: partialConfig.serviceOverrides[config.moduleId]?.lastUpdated
    }));
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
   */
  getServiceConfig(moduleId: ServiceModule): ServiceMigrationConfig {
    const baseConfig = serviceConfigs[moduleId];
    if (!baseConfig) {
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–¥—É–ª—å: ${moduleId}`);
    }

    return {
      ...baseConfig,
      migrationStatus: this.getServiceStatus(moduleId),
      connectionId: partialConfig.serviceOverrides[moduleId]?.connectionId,
      lastMigrated: partialConfig.serviceOverrides[moduleId]?.lastUpdated
    };
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
   */
  getServiceStatus(moduleId: ServiceModule): 'mock' | 'database' {
    return partialConfig.serviceOverrides[moduleId]?.status || partialConfig.globalDefault;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
   */
  getServiceApiUrl(moduleId: ServiceModule): string {
    const override = partialConfig.serviceOverrides[moduleId];
    
    if (override && override.status === 'database' && override.connectionId) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      const connections = apiConfigService.getAllConnections();
      const connection = connections.find(c => c.id === override.connectionId);
      return connection?.url || apiConfigService.getCurrentApiUrl();
    }
    
    if (this.getServiceStatus(moduleId) === 'database') {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      return apiConfigService.getCurrentApiUrl();
    }
    
    // Mock —Ä–µ–∂–∏–º
    return 'mock';
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ —Å–µ—Ä–≤–∏—Å mock –¥–∞–Ω–Ω—ã–µ
   */
  isServiceMockMode(moduleId: ServiceModule): boolean {
    return this.getServiceApiUrl(moduleId) === 'mock';
  },

  // === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –°–ï–†–í–ò–°–û–í ===

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å –Ω–∞ –ë–î
   */
  async migrateServiceToDatabase(
    moduleId: ServiceModule, 
    connectionId?: string
  ): Promise<{ success: boolean; error?: string }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      const config = serviceConfigs[moduleId];
      const unmigratedDeps = config.dependencies.filter(depId => 
        this.getServiceStatus(depId) === 'mock'
      );

      if (unmigratedDeps.length > 0) {
        return {
          success: false,
          error: `–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${unmigratedDeps.map(id => serviceConfigs[id].moduleName).join(', ')}`
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (connectionId) {
        const testResult = await apiConfigService.testConnection(connectionId);
        if (!testResult.success) {
          return {
            success: false,
            error: `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${testResult.error}`
          };
        }
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
      partialConfig.serviceOverrides[moduleId] = {
        status: 'database',
        connectionId: connectionId || apiConfigService.getCurrentConfig().currentConnectionId,
        lastUpdated: new Date()
      };

      savePartialConfig();

      return { success: true };

    } catch (error: any) {
      return {
        success: false,
        error: error.message
      };
    }
  },

  /**
   * –í–µ—Ä–Ω—É—Ç—å —Å–µ—Ä–≤–∏—Å –∫ mock –¥–∞–Ω–Ω—ã–º
   */
  revertServiceToMock(moduleId: ServiceModule): { success: boolean; error?: string } {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–∏—Å–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
      const dependentServices = Object.values(serviceConfigs).filter(config =>
        config.dependencies.includes(moduleId) && 
        this.getServiceStatus(config.moduleId) === 'database'
      );

      if (dependentServices.length > 0) {
        return {
          success: false,
          error: `–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∑–∞–≤–∏—Å–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã: ${dependentServices.map(s => s.moduleName).join(', ')}`
        };
      }

      // –£–¥–∞–ª—è–µ–º override (–≤–æ–∑–≤—Ä–∞—Ç –∫ global default)
      delete partialConfig.serviceOverrides[moduleId];
      savePartialConfig();

      return { success: true };

    } catch (error: any) {
      return {
        success: false,
        error: error.message
      };
    }
  },

  /**
   * –ú–∞—Å—Å–æ–≤–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async migrateBatch(
    moduleIds: ServiceModule[], 
    connectionId?: string
  ): Promise<Record<ServiceModule, { success: boolean; error?: string }>> {
    const results: Record<string, any> = {};
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
    const sortedModules = this.getSortedMigrationOrder(moduleIds);
    
    for (const moduleId of sortedModules) {
      results[moduleId] = await this.migrateServiceToDatabase(moduleId, connectionId);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
      if (!results[moduleId].success) {
        break;
      }
    }

    return results;
  },

  // === –ê–ù–ê–õ–ò–ó –ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  getMigrationPlan(targetModules: ServiceModule[]): {
    order: ServiceModule[];
    conflicts: string[];
    recommendations: string[];
  } {
    const conflicts: string[] = [];
    const recommendations: string[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const allModules = new Set<ServiceModule>();
    const addDependencies = (moduleId: ServiceModule) => {
      if (allModules.has(moduleId)) return;
      
      allModules.add(moduleId);
      const config = serviceConfigs[moduleId];
      config.dependencies.forEach(depId => addDependencies(depId));
    };

    targetModules.forEach(addDependencies);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    for (const moduleId of allModules) {
      const config = serviceConfigs[moduleId];
      const unmigratedDeps = config.dependencies.filter(depId => 
        !allModules.has(depId) && this.getServiceStatus(depId) === 'mock'
      );
      
      if (unmigratedDeps.length > 0) {
        conflicts.push(`${config.moduleName} —Ç—Ä–µ–±—É–µ—Ç: ${unmigratedDeps.map(id => serviceConfigs[id].moduleName).join(', ')}`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (allModules.size > targetModules.length) {
      recommendations.push(`–ë—É–¥—É—Ç —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Array.from(allModules).filter(id => !targetModules.includes(id)).map(id => serviceConfigs[id].moduleName).join(', ')}`);
    }

    return {
      order: this.getSortedMigrationOrder(Array.from(allModules)),
      conflicts,
      recommendations
    };
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  getMigrationStats() {
    const allServices = Object.keys(serviceConfigs);
    const migratedServices = allServices.filter(id => 
      this.getServiceStatus(id as ServiceModule) === 'database'
    );

    return {
      total: allServices.length,
      migrated: migratedServices.length,
      remaining: allServices.length - migratedServices.length,
      percentage: Math.round((migratedServices.length / allServices.length) * 100),
      migratedServices: migratedServices.map(id => serviceConfigs[id as ServiceModule].moduleName),
      remainingServices: allServices.filter(id => 
        this.getServiceStatus(id as ServiceModule) === 'mock'
      ).map(id => serviceConfigs[id as ServiceModule].moduleName)
    };
  },

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  getSortedMigrationOrder(moduleIds: ServiceModule[]): ServiceModule[] {
    const visited = new Set<ServiceModule>();
    const result: ServiceModule[] = [];

    const visit = (moduleId: ServiceModule) => {
      if (visited.has(moduleId)) return;
      
      visited.add(moduleId);
      const config = serviceConfigs[moduleId];
      
      // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      config.dependencies
        .filter(depId => moduleIds.includes(depId))
        .forEach(visit);
      
      result.push(moduleId);
    };

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const priorityOrder = { high: 0, medium: 1, low: 2 };
    const sortedModules = moduleIds.sort((a, b) => {
      const priorityA = priorityOrder[serviceConfigs[a].priority];
      const priorityB = priorityOrder[serviceConfigs[b].priority];
      return priorityA - priorityB;
    });

    sortedModules.forEach(visit);
    return result;
  },

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async testServiceConnection(moduleId: ServiceModule): Promise<{
    success: boolean;
    error?: string;
    endpoints: Record<string, boolean>;
  }> {
    const config = serviceConfigs[moduleId];
    const baseUrl = this.getServiceApiUrl(moduleId);
    
    if (baseUrl === 'mock') {
      return {
        success: true,
        endpoints: config.apiEndpoints.reduce((acc, endpoint) => {
          acc[endpoint] = true; // Mock –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
          return acc;
        }, {} as Record<string, boolean>)
      };
    }

    const results: Record<string, boolean> = {};
    let overallSuccess = true;

    for (const endpoint of config.apiEndpoints) {
      try {
        const response = await httpClient.get(`${endpoint}/health`, {
          destination: 'supabase',
          timeout: 5000
        });
        results[endpoint] = response.success;
        if (!response.success) overallSuccess = false;
      } catch (error) {
        results[endpoint] = false;
        overallSuccess = false;
      }
    }

    return {
      success: overallSuccess,
      error: overallSuccess ? undefined : '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      endpoints: results
    };
  },

  // === –£–¢–ò–õ–ò–¢–´ ===

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  exportPartialConfig(): string {
    return JSON.stringify({
      partialConfig,
      serviceConfigs,
      exportedAt: new Date().toISOString()
    }, null, 2);
  },

  /**
   * –°–±—Ä–æ—Å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  resetPartialConfig(): void {
    partialConfig = { ...initialPartialConfig };
    savePartialConfig();
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è window (–≤ dev —Ä–µ–∂–∏–º–µ)
if (import.meta.env.DEV) {
  // @ts-ignore
  window.partialMigrationService = partialMigrationService;
  console.log('üîÑ Partial Migration Service –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ window.partialMigrationService');
}