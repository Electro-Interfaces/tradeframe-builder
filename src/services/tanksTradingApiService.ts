/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –º–∞–ø–ø–∏—Ä—É–µ—Ç –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º–æ–¥–µ–ª—å Tank
 */

import { tradingNetworkConfigService } from './tradingNetworkConfigService';
import { Tank } from './tanksService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
interface TradingApiTank {
  number: number;
  fuel: number;
  fuel_name: string;
  state: number;
  volume_begin?: string | null;
  volume_end: string;
  volume_max: string;
  volume_free: string;
  volume: string;
  amount_begin?: string | null;
  amount_end: string;
  level: string;
  water: {
    volume: string;
    amount: string;
    level: string;
  };
  temperature: string;
  density: string;
  release: {
    volume: string;
    amount: string;
  };
  dt: string; // timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
}

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ API –≤ –Ω–∞–∑–≤–∞–Ω–∏—è
const fuelTypeMapping: Record<number, string> = {
  1: '–ê–ò-80',
  2: '–ê–ò-92', 
  3: '–ê–ò-95',
  4: '–ê–ò-98',
  5: '–î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ',
  6: '–ì–∞–∑',
  7: '–ö–µ—Ä–æ—Å–∏–Ω'
};

// –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
const tankStateMapping: Record<number, 'active' | 'maintenance' | 'offline'> = {
  1: 'active',
  2: 'maintenance', 
  0: 'offline'
};

class TanksTradingApiService {
  
  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
   */
  async loadTanksFromApi(stationId?: string): Promise<TradingApiTank[]> {
    try {
      console.log('üè≠ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API...');
      
      const data = await tradingNetworkConfigService.getTanksData(stationId);
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ API:`, data);
      
      return data as TradingApiTank[];
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ API:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ API –≤ –º–æ–¥–µ–ª—å Tank
   */
  mapApiDataToTank(apiTank: TradingApiTank, existingTank?: Tank): Tank {
    const fuelTypeName = fuelTypeMapping[apiTank.fuel] || `–¢–æ–ø–ª–∏–≤–æ #${apiTank.fuel}`;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —á–∏—Å–ª–∞ –≤ —á–∏—Å–ª–∞ - –ü–†–ò–û–†–ò–¢–ï–¢: volume, –∑–∞—Ç–µ–º volume_end
    const volume = parseFloat(apiTank.volume || apiTank.volume_end) || 0;
    const volumeMax = parseFloat(apiTank.volume_max) || 0;
    const temperature = parseFloat(apiTank.temperature) || 0;
    const density = parseFloat(apiTank.density) || 0;
    const waterLevel = parseFloat(apiTank.water?.level || '0') || 0;
    
    console.log(`üîß –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ ${apiTank.number}:
      - volume="${apiTank.volume}" (–æ—Å–Ω–æ–≤–Ω–æ–π), volume_end="${apiTank.volume_end}" (–∫–æ–Ω–µ—á–Ω—ã–π)
      - –í–´–ë–†–ê–ù –æ–±—ä–µ–º: ${volume}–ª (${apiTank.volume ? '–∏–∑ volume' : '–∏–∑ volume_end'})
      - volume_max="${apiTank.volume_max}" ‚Üí –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –µ–º–∫–æ—Å—Ç—å: ${volumeMax}–ª
      - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: ${volumeMax > 0 ? ((volume / volumeMax) * 100).toFixed(1) : 0}%`);
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞
    const mappedTank: Tank = {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞
      id: existingTank?.id || `tank-${apiTank.number}`,
      name: existingTank?.name || `–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ${apiTank.number}`,
      fuelType: fuelTypeName,
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—ä–µ–º—ã –∏ —É—Ä–æ–≤–Ω–∏ (–∏–∑ API)
      currentLevelLiters: volume,
      bookBalance: parseFloat(apiTank.amount_end) || 0,
      capacityLiters: volumeMax,
      temperature,
      density,
      waterLevelMm: waterLevel,
      
      // –°—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞
      status: tankStateMapping[apiTank.state] || 'offline',
      
      // –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      minLevelPercent: existingTank?.minLevelPercent || 20,
      criticalLevelPercent: existingTank?.criticalLevelPercent || 10,
      
      // –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      location: existingTank?.location || `–°—Ç–∞–Ω—Ü–∏—è ${apiTank.number}`,
      installationDate: existingTank?.installationDate || '2020-01-01',
      lastCalibration: existingTank?.lastCalibration,
      supplier: existingTank?.supplier,
      
      // –î–∞—Ç—á–∏–∫–∏ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö API
      sensors: [
        { 
          name: '–£—Ä–æ–≤–µ–Ω—å', 
          status: apiTank.state === 1 ? 'ok' : 'error' 
        },
        { 
          name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 
          status: (temperature > -20 && temperature < 50) ? 'ok' : 'error' 
        }
      ],
      
      // –°–≤—è–∑–∞–Ω–Ω—ã–µ –¢–†–ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ –ø—É—Å—Ç—ã–µ
      linkedPumps: existingTank?.linkedPumps || [],
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      notifications: existingTank?.notifications || {
        enabled: true,
        drainAlerts: true,
        levelAlerts: true
      },
      
      // –ü–æ—Ä–æ–≥–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      thresholds: existingTank?.thresholds || {
        criticalTemp: { min: -10, max: 40 },
        maxWaterLevel: 10,
        notifications: {
          critical: true,
          warning: true,
          info: false
        }
      }
    };
    
    console.log(`üîÑ –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ ‚Ññ${apiTank.number}:`, {
      fuel: fuelTypeName,
      volume: `${volume}–ª / ${volumeMax}–ª`,
      temperature: `${temperature}¬∞C`,
      status: mappedTank.status
    });
    
    return mappedTank;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã
   */
  async loadAndMapTanks(existingTanks: Tank[] = [], stationId?: string): Promise<Tank[]> {
    try {
      const apiTanks = await this.loadTanksFromApi(stationId);
      
      console.log(`üîç RAW –¥–∞–Ω–Ω—ã–µ –∏–∑ API (${apiTanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤):`);
      apiTanks.forEach((tank, index) => {
        console.log(`  –†–µ–∑–µ—Ä–≤—É–∞—Ä ${tank.number}: ${tank.fuel_name}, –æ–±—ä–µ–º: ${tank.volume_end || tank.volume}–ª, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${tank.temperature}¬∞C`);
      });
      
      const mappedTanks = apiTanks.map((apiTank, index) => {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const existingTank = existingTanks.find(tank => 
          tank.id === `tank-${apiTank.number}` || 
          tank.name === `–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ${apiTank.number}`
        );
        
        const mappedTank = this.mapApiDataToTank(apiTank, existingTank);
        console.log(`üîÑ –ú–∞–ø–ø–ª–µ–Ω —Ä–µ–∑–µ—Ä–≤—É–∞—Ä [${index}]: ${mappedTank.name} ‚Üí ${mappedTank.fuelType}, ${mappedTank.currentLevelLiters}–ª`);
        return mappedTank;
      });
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –∑–∞–º–∞–ø–ª–µ–Ω–æ ${mappedTanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤`);
      
      return mappedTanks;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –º–∞–ø–ø–∏–Ω–≥–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º
   */
  getTanksStatistics(tanks: Tank[]) {
    const total = tanks.length;
    const active = tanks.filter(t => t.status === 'active').length;
    const maintenance = tanks.filter(t => t.status === 'maintenance').length;
    const offline = tanks.filter(t => t.status === 'offline').length;
    
    const totalCapacity = tanks.reduce((sum, tank) => sum + tank.capacityLiters, 0);
    const totalVolume = tanks.reduce((sum, tank) => sum + tank.currentLevelLiters, 0);
    const utilizationPercent = totalCapacity > 0 ? (totalVolume / totalCapacity * 100) : 0;
    
    // –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–º —É—Ä–æ–≤–Ω–µ–º
    const criticalLevel = tanks.filter(tank => {
      const currentPercent = (tank.currentLevelLiters / tank.capacityLiters) * 100;
      return currentPercent <= tank.criticalLevelPercent;
    });
    
    return {
      total,
      active,
      maintenance, 
      offline,
      totalCapacity,
      totalVolume,
      utilizationPercent: Math.round(utilizationPercent * 100) / 100,
      criticalLevel: criticalLevel.length,
      lastUpdate: new Date().toISOString()
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const tanksTradingApiService = new TanksTradingApiService();