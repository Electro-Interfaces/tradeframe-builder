/**
 * Coupons Service - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–ø–æ–Ω–∞–º–∏ (—Å–¥–∞—á–∞ —Ç–æ–ø–ª–∏–≤–æ–º)
 * API: /v1/coupons
 */

import {
  Coupon,
  CouponSystemResponse,
  CouponsApiResponse,
  CouponsApiParams,
  CouponsApiError,
  CouponsLoadingState
} from '@/types/coupons';

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∫—É–ø–æ–Ω–æ–≤
class CouponsApiService {
  private baseUrl: string;

  constructor() {
    // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ STS API (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–∞–º)
    this.baseUrl = this.getApiBaseUrl();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL API –∏–∑ localStorage –Ω–∞—Å—Ç—Ä–æ–µ–∫ STS
   */
  private getApiBaseUrl(): string {
    try {
      const stsConfig = localStorage.getItem('sts-api-config');
      if (stsConfig) {
        const config = JSON.parse(stsConfig);
        return config.url || 'https://pos.autooplata.ru/tms';
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL API:', error);
    }

    // Fallback URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return 'https://pos.autooplata.ru/tms';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ STS API
   */
  private getAuthToken(): string | null {
    try {
      const stsConfig = localStorage.getItem('sts-api-config');
      if (stsConfig) {
        const config = JSON.parse(stsConfig);
        return config.token || null;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    }

    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ (–Ω–µ –∏—Å—Ç–µ–∫ –ª–∏)
   */
  private isTokenValid(): boolean {
    try {
      const stsConfig = localStorage.getItem('sts-api-config');
      if (stsConfig) {
        const config = JSON.parse(stsConfig);
        const tokenExpiry = config.tokenExpiry;

        if (tokenExpiry && Date.now() < tokenExpiry) {
          return true;
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    }

    return false;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  private async refreshTokenIfNeeded(forceRefresh = false): Promise<boolean> {
    try {
      const stsConfig = localStorage.getItem('sts-api-config');
      if (!stsConfig) {
        console.error('üé´ Coupons API: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è STS API –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return false;
      }

      const config = JSON.parse(stsConfig);
      const now = Date.now();
      const tokenExists = !!config.token;
      const tokenExpired = config.tokenExpiry ? config.tokenExpiry < now : true;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
      if (!tokenExists || tokenExpired || forceRefresh) {
        console.log('üé´ Coupons API: –û–±–Ω–æ–≤–ª—è–µ–º JWT —Ç–æ–∫–µ–Ω...');

        const response = await fetch(`${config.url || this.baseUrl}/v1/login`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            username: config.username || 'UserApi',
            password: config.password || 'lHQfLZHzB3tn'
          }),
          signal: AbortSignal.timeout(30000),
        });

        if (response.ok) {
          const tokenResponse = await response.text();
          const cleanToken = tokenResponse.replace(/"/g, '');
          const newExpiry = Date.now() + (20 * 60 * 1000); // 20 –º–∏–Ω—É—Ç

          config.token = cleanToken;
          config.tokenExpiry = newExpiry;

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          localStorage.setItem('sts-api-config', JSON.stringify(config));

          console.log('üé´ Coupons API: JWT —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
          return true;
        } else {
          const errorText = await response.text();
          console.error(`üé´ Coupons API: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ HTTP ${response.status}:`, errorText);
          return false;
        }
      }

      return true; // –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
    } catch (error) {
      console.error('üé´ Coupons API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ API
   */
  private async makeRequest<T>(
    endpoint: string,
    params: Record<string, any> = {},
    options: RequestInit = {}
  ): Promise<T> {
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const tokenRefreshed = await this.refreshTokenIfNeeded();
    if (!tokenRefreshed) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å JWT —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API CTC.');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π —Ç–æ–∫–µ–Ω
    const token = this.getAuthToken();
    if (!token) {
      throw new Error('JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const url = new URL(`${this.baseUrl}${endpoint}`);
    Object.entries(params).forEach(([key, value]) => {
      if (value !== undefined && value !== null) {
        url.searchParams.set(key, String(value));
      }
    });

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    const headers: Record<string, string> = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      ...options.headers as Record<string, string>
    };

    try {
      console.log('üé´ Coupons API Request:', {
        url: url.toString(),
        method: options.method || 'GET',
        headers: { ...headers, Authorization: 'Bearer ***' }
      });

      const response = await fetch(url.toString(), {
        method: 'GET',
        headers,
        ...options
      });

      if (!response.ok) {
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        if (response.status === 401) {
          console.log('üé´ Coupons API: –ü–æ–ª—É—á–µ–Ω 401, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å...');

          const tokenRefreshed = await this.refreshTokenIfNeeded(true);
          if (tokenRefreshed) {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            const newToken = this.getAuthToken();
            if (newToken) {
              const retryHeaders = {
                ...headers,
                'Authorization': `Bearer ${newToken}`
              };

              const retryResponse = await fetch(url.toString(), {
                method: 'GET',
                headers: retryHeaders,
                ...options
              });

              if (retryResponse.ok) {
                const data = await retryResponse.json();
                console.log('üé´ Coupons API: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
                return data;
              }
            }
          }
        }

        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${response.statusText}. ${errorText}`);
      }

      const data = await response.json();

      console.log('üé´ Coupons API Response:', {
        status: response.status,
        dataType: Array.isArray(data) ? `array[${data.length}]` : typeof data,
        sample: Array.isArray(data) && data.length > 0 ? data[0] : data
      });

      return data;
    } catch (error) {
      console.error('üé´ Coupons API Error:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É–ø–æ–Ω–æ–≤
   * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
   * @returns –ú–∞—Å—Å–∏–≤ —Å–∏—Å—Ç–µ–º —Å –∫—É–ø–æ–Ω–∞–º–∏
   */
  async getCoupons(params: CouponsApiParams): Promise<CouponsApiResponse> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!params.system) {
      throw new Error('–ü–∞—Ä–∞–º–µ—Ç—Ä system —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º');
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–∞–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const apiParams = {
      system: params.system,
      ...(params.station && { station: params.station })
    };

    // TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–∞–º –∫–æ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤—è—Ç SQL –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    // if (apiParams.dt_beg) {
    //   apiParams.dt_beg = `${apiParams.dt_beg} 00:00:00`;
    // }
    // if (apiParams.dt_end) {
    //   apiParams.dt_end = `${apiParams.dt_end} 23:59:59`;
    // }

    console.log('üé´ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É–ø–æ–Ω–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', apiParams);

    const data = await this.makeRequest<CouponsApiResponse>('/v1/coupons', apiParams);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
    if (!Array.isArray(data)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: –æ–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    data.forEach((systemData, index) => {
      if (typeof systemData.system !== 'number' || typeof systemData.number !== 'number') {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç system –∏–ª–∏ number`);
      }

      if (!Array.isArray(systemData.coupons)) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${index}: coupons –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º`);
      }
    });

    console.log('üé´ –ü–æ–ª—É—á–µ–Ω–æ –∫—É–ø–æ–Ω–æ–≤:', {
      —Å–∏—Å—Ç–µ–º: data.length,
      –æ–±—â–∏–π_–∫—É–ø–æ–Ω–æ–≤: data.reduce((sum, sys) => sum + sys.coupons.length, 0)
    });

    return data;
  }

  /**
   * –ü–æ–∏—Å–∫ –∫—É–ø–æ–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä—É
   * @param couponNumber –ù–æ–º–µ—Ä –∫—É–ø–æ–Ω–∞
   * @param systemId ID —Å–∏—Å—Ç–µ–º—ã
   * @returns –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫—É–ø–æ–Ω –∏–ª–∏ null
   */
  async findCouponByNumber(couponNumber: string, systemId: number): Promise<Coupon | null> {
    const params: CouponsApiParams = { system: systemId };
    const data = await this.getCoupons(params);

    // –ò—â–µ–º –∫—É–ø–æ–Ω –≤–æ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∏ —Å—Ç–∞–Ω—Ü–∏—è—Ö
    for (const systemData of data) {
      for (const coupon of systemData.coupons) {
        if (coupon.number === couponNumber) {
          return coupon;
        }
      }
    }

    return null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫—É–ø–æ–Ω—ã –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏
   * @param systemId ID —Å–∏—Å—Ç–µ–º—ã
   * @param stationId ID —Å—Ç–∞–Ω—Ü–∏–∏
   * @param dateFrom –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param dateTo –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –ö—É–ø–æ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
   */
  async getCouponsByStation(
    systemId: number,
    stationId: number,
    dateFrom?: string,
    dateTo?: string
  ): Promise<Coupon[]> {
    const params: CouponsApiParams = {
      system: systemId,
      station: stationId,
      ...(dateFrom && { dt_beg: dateFrom }),
      ...(dateTo && { dt_end: dateTo })
    };

    const data = await this.getCoupons(params);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫—É–ø–æ–Ω—ã –∏–∑ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
    return data.reduce((allCoupons: Coupon[], systemData) => {
      return allCoupons.concat(systemData.coupons);
    }, []);
  }

  /**
   * –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
   * @param systemId ID —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async testApiConnection(systemId: number = 15): Promise<{
    success: boolean;
    message: string;
    data?: any;
    error?: string;
  }> {
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫—É–ø–æ–Ω–æ–≤...');

      const startTime = Date.now();
      const data = await this.getCoupons({ system: systemId });
      const responseTime = Date.now() - startTime;

      const totalCoupons = data.reduce((sum, sys) => sum + sys.coupons.length, 0);

      return {
        success: true,
        message: `API —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ª—É—á–µ–Ω–æ ${totalCoupons} –∫—É–ø–æ–Ω–æ–≤ –∑–∞ ${responseTime}–º—Å`,
        data: {
          systems: data.length,
          totalCoupons,
          responseTime,
          sample: data[0] || null
        }
      };
    } catch (error: any) {
      console.error('üß™ –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error);

      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API',
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const couponsApiService = new CouponsApiService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
export { CouponsApiService };