/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * –û–ë–ù–û–í–õ–ï–ù: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É localStorage –∏ Supabase
 */

import { ComponentStatus } from '@/types/component';
import { PersistentStorage } from '@/utils/persistentStorage';
import { apiConfigServiceDB } from './apiConfigServiceDB';
import { ComponentStatusSupabaseService } from './componentStatusSupabaseService';

export interface ComponentStatusRecord {
  id: string;
  componentId: string;
  equipmentId?: string;
  status: ComponentStatus;
  statusMessage?: string;
  lastOnline: string;
  lastOffline?: string;
  uptime: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  downtime: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  errorCount: number;
  lastError?: string;
  lastErrorTime?: string;
  responseTime?: number; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  signalStrength?: number; // 0-100%
  temperature?: number; // –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è
  voltage?: number; // –≤ –≤–æ–ª—å—Ç–∞—Ö
  metadata: Record<string, any>;
  createdAt: Date;
  updatedAt: Date;
}

export interface ComponentStatusInput {
  componentId: string;
  equipmentId?: string;
  status: ComponentStatus;
  statusMessage?: string;
  responseTime?: number;
  signalStrength?: number;
  temperature?: number;
  voltage?: number;
  metadata?: Record<string, any>;
}

export interface ComponentHealthMetrics {
  availability: number; // % –≤—Ä–µ–º–µ–Ω–∏ online
  reliability: number; // % –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑ –æ—à–∏–±–æ–∫
  performance: number; // —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  avgResponseTime: number;
  avgUptime: number;
}

// ‚ùå MOCK –î–ê–ù–ù–´–ï –£–î–ê–õ–ï–ù–´ –ò–ó –°–û–û–ë–†–ê–ñ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
// ‚ùå MOCK –î–ê–ù–ù–´–ï –£–î–ê–õ–ï–ù–´ –ò–ó –°–û–û–ë–†–ê–ñ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
const mockComponentStatuses: ComponentStatusRecord[] = [];

// ‚ùå –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Supabase
const componentStatusesData: ComponentStatusRecord[] = [];
let nextId = Math.max(...componentStatusesData.map(cs => parseInt(cs.id.replace('CS-', '')) || 0)) + 1;

// –≠–∫–∑–µ–º–ø–ª—è—Ä Supabase —Å–µ—Ä–≤–∏—Å–∞
const componentStatusSupabaseService = new ComponentStatusSupabaseService();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
const saveComponentStatuses = () => {
  PersistentStorage.save('componentStatuses', componentStatusesData);
};

// API —Å–µ—Ä–≤–∏—Å —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
export const componentStatusService = {
  async initialize(): Promise<void> {
    try {
      await apiConfigServiceDB.initialize();
      console.log('‚úÖ ComponentStatusService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ComponentStatusService:', error);
    }
  },

  // ‚ùå MOCK –†–ï–ñ–ò–ú –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù
  async isMockMode(): Promise<boolean> {
    return false; // Mock —Ä–µ–∂–∏–º –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  async getAll(): Promise<ComponentStatusRecord[]> {
    try {
      console.log('üîÑ ComponentStatusService.getAll: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Supabase');
      return await componentStatusSupabaseService.getAll();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ ID
  async getById(id: string): Promise<ComponentStatusRecord | null> {
    try {
      console.log(`üîÑ ComponentStatusService.getById(${id}): –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Supabase`);
      return await componentStatusSupabaseService.getById(id);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${id}:`, error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${id}. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".`);
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  async getByComponentId(componentId: string): Promise<ComponentStatusRecord | null> {
    await new Promise(resolve => setTimeout(resolve, 100));
    return componentStatusesData.find(cs => cs.componentId === componentId) || null;
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ ID –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  async getByEquipmentId(equipmentId: string): Promise<ComponentStatusRecord[]> {
    await new Promise(resolve => setTimeout(resolve, 120));
    return componentStatusesData.filter(cs => cs.equipmentId === equipmentId);
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
  async getByStatus(status: ComponentStatus): Promise<ComponentStatusRecord[]> {
    await new Promise(resolve => setTimeout(resolve, 100));
    return componentStatusesData.filter(cs => cs.status === status);
  },

  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  async upsert(input: ComponentStatusInput): Promise<ComponentStatusRecord> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const existingIndex = componentStatusesData.findIndex(cs => cs.componentId === input.componentId);
    const now = new Date();
    const nowISO = now.toISOString();
    
    if (existingIndex !== -1) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
      const existing = componentStatusesData[existingIndex];
      const wasOnline = existing.status === 'online';
      const isOnline = input.status === 'online';
      
      // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã/–ø—Ä–æ—Å—Ç–æ—è
      const timeSinceLastUpdate = now.getTime() - new Date(existing.updatedAt).getTime();
      const timeInSeconds = Math.floor(timeSinceLastUpdate / 1000);
      
      let uptime = existing.uptime;
      let downtime = existing.downtime;
      
      if (wasOnline) {
        uptime += timeInSeconds;
      } else {
        downtime += timeInSeconds;
      }
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ error
      let errorCount = existing.errorCount;
      let lastError = existing.lastError;
      let lastErrorTime = existing.lastErrorTime;
      
      if (input.status === 'error' && existing.status !== 'error') {
        errorCount++;
        lastError = input.statusMessage || 'Unknown error';
        lastErrorTime = nowISO;
      }
      
      const updated: ComponentStatusRecord = {
        ...existing,
        status: input.status,
        statusMessage: input.statusMessage,
        lastOnline: isOnline ? nowISO : existing.lastOnline,
        lastOffline: !isOnline && wasOnline ? nowISO : existing.lastOffline,
        uptime,
        downtime,
        errorCount,
        lastError,
        lastErrorTime,
        responseTime: input.responseTime ?? existing.responseTime,
        signalStrength: input.signalStrength ?? existing.signalStrength,
        temperature: input.temperature ?? existing.temperature,
        voltage: input.voltage ?? existing.voltage,
        metadata: { ...existing.metadata, ...(input.metadata || {}) },
        updatedAt: now
      };
      
      componentStatusesData[existingIndex] = updated;
      saveComponentStatuses();
      
      return updated;
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
      const newStatus: ComponentStatusRecord = {
        id: `CS-${String(nextId++).padStart(3, '0')}`,
        componentId: input.componentId,
        equipmentId: input.equipmentId,
        status: input.status,
        statusMessage: input.statusMessage,
        lastOnline: input.status === 'online' ? nowISO : nowISO,
        uptime: 0,
        downtime: 0,
        errorCount: input.status === 'error' ? 1 : 0,
        lastError: input.status === 'error' ? input.statusMessage : undefined,
        lastErrorTime: input.status === 'error' ? nowISO : undefined,
        responseTime: input.responseTime,
        signalStrength: input.signalStrength,
        temperature: input.temperature,
        voltage: input.voltage,
        metadata: input.metadata || {},
        createdAt: now,
        updatedAt: now
      };
      
      componentStatusesData.push(newStatus);
      saveComponentStatuses();
      
      return newStatus;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  async updateStatus(componentId: string, status: ComponentStatus, message?: string): Promise<ComponentStatusRecord | null> {
    await new Promise(resolve => setTimeout(resolve, 150));
    
    return await this.upsert({
      componentId,
      status,
      statusMessage: message
    });
  },

  // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  async remove(id: string): Promise<boolean> {
    await new Promise(resolve => setTimeout(resolve, 120));
    
    const index = componentStatusesData.findIndex(cs => cs.id === id);
    if (index === -1) return false;
    
    componentStatusesData.splice(index, 1);
    saveComponentStatuses();
    
    return true;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  async getHealthMetrics(componentId: string): Promise<ComponentHealthMetrics | null> {
    await new Promise(resolve => setTimeout(resolve, 100));
    
    const status = componentStatusesData.find(cs => cs.componentId === componentId);
    if (!status) return null;
    
    const totalTime = status.uptime + status.downtime;
    const availability = totalTime > 0 ? (status.uptime / totalTime) * 100 : 0;
    
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
    const hoursRunning = status.uptime / 3600;
    const errorsPerHour = hoursRunning > 0 ? status.errorCount / hoursRunning : 0;
    const reliability = Math.max(0, 100 - (errorsPerHour * 10));
    
    // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
    let performance = 100;
    if (status.responseTime) {
      if (status.responseTime > 1000) performance = 50;
      else if (status.responseTime > 500) performance = 70;
      else if (status.responseTime > 200) performance = 85;
    }
    
    return {
      availability,
      reliability,
      performance,
      avgResponseTime: status.responseTime || 0,
      avgUptime: status.uptime
    };
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
  async getOverallStatistics(): Promise<{
    totalComponents: number;
    componentsByStatus: Record<ComponentStatus, number>;
    avgAvailability: number;
    avgResponseTime: number;
    totalErrors: number;
    componentsByEquipment: Record<string, number>;
  }> {
    await new Promise(resolve => setTimeout(resolve, 150));
    
    const totalComponents = componentStatusesData.length;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const componentsByStatus = componentStatusesData.reduce((acc, cs) => {
      acc[cs.status] = (acc[cs.status] || 0) + 1;
      return acc;
    }, {} as Record<ComponentStatus, number>);
    
    // –°—Ä–µ–¥–Ω—è—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    const availabilities = componentStatusesData.map(cs => {
      const totalTime = cs.uptime + cs.downtime;
      return totalTime > 0 ? (cs.uptime / totalTime) * 100 : 0;
    });
    const avgAvailability = availabilities.length > 0 
      ? availabilities.reduce((sum, av) => sum + av, 0) / availabilities.length 
      : 0;
    
    // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
    const responseTimes = componentStatusesData.filter(cs => cs.responseTime).map(cs => cs.responseTime!);
    const avgResponseTime = responseTimes.length > 0
      ? responseTimes.reduce((sum, rt) => sum + rt, 0) / responseTimes.length
      : 0;
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
    const totalErrors = componentStatusesData.reduce((sum, cs) => sum + cs.errorCount, 0);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
    const componentsByEquipment = componentStatusesData.reduce((acc, cs) => {
      if (cs.equipmentId) {
        acc[cs.equipmentId] = (acc[cs.equipmentId] || 0) + 1;
      }
      return acc;
    }, {} as Record<string, number>);
    
    return {
      totalComponents,
      componentsByStatus,
      avgAvailability,
      avgResponseTime,
      totalErrors,
      componentsByEquipment
    };
  },

  // –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  async search(query: string, filters?: {
    status?: ComponentStatus;
    equipmentId?: string;
    hasErrors?: boolean;
  }): Promise<ComponentStatusRecord[]> {
    await new Promise(resolve => setTimeout(resolve, 180));
    
    let filteredStatuses = componentStatusesData;
    
    // –§–∏–ª—å—Ç—Ä—ã
    if (filters) {
      if (filters.status) {
        filteredStatuses = filteredStatuses.filter(cs => cs.status === filters.status);
      }
      if (filters.equipmentId) {
        filteredStatuses = filteredStatuses.filter(cs => cs.equipmentId === filters.equipmentId);
      }
      if (filters.hasErrors) {
        filteredStatuses = filteredStatuses.filter(cs => cs.errorCount > 0);
      }
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    if (query.trim()) {
      const searchLower = query.toLowerCase();
      filteredStatuses = filteredStatuses.filter(cs => 
        cs.id.toLowerCase().includes(searchLower) ||
        cs.componentId.toLowerCase().includes(searchLower) ||
        cs.equipmentId?.toLowerCase().includes(searchLower) ||
        cs.statusMessage?.toLowerCase().includes(searchLower) ||
        cs.lastError?.toLowerCase().includes(searchLower)
      );
    }
    
    return filteredStatuses.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç store –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const componentStatusStore = {
  getAll: (): ComponentStatusRecord[] => [...componentStatusesData],
  
  getById: (id: string): ComponentStatusRecord | undefined => 
    componentStatusesData.find(cs => cs.id === id),
    
  getByComponentId: (componentId: string): ComponentStatusRecord | undefined =>
    componentStatusesData.find(cs => cs.componentId === componentId),
    
  getByStatus: (status: ComponentStatus): ComponentStatusRecord[] =>
    componentStatusesData.filter(cs => cs.status === status),
    
  update: (id: string, updates: Partial<ComponentStatusRecord>): ComponentStatusRecord | null => {
    const index = componentStatusesData.findIndex(cs => cs.id === id);
    if (index === -1) return null;
    
    componentStatusesData[index] = {
      ...componentStatusesData[index],
      ...updates,
      updatedAt: new Date()
    };
    
    saveComponentStatuses();
    return componentStatusesData[index];
  },
  
  remove: (id: string): boolean => {
    const index = componentStatusesData.findIndex(cs => cs.id === id);
    if (index === -1) return false;
    
    componentStatusesData.splice(index, 1);
    saveComponentStatuses();
    return true;
  }
};