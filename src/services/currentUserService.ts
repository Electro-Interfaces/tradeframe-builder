/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import { usersService, type User } from './usersService';
import { externalUsersService } from './externalUsersService';

interface CurrentUserProfileData {
  firstName: string;
  lastName: string;
  phone?: string;
}

class CurrentUserService {
  private currentUserId: number | null = null;

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  setCurrentUserId(userId: number) {
    this.currentUserId = userId;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
   */
  private getCurrentUserId(): number | null {
    if (this.currentUserId) return this.currentUserId;
    
    try {
      const savedUser = localStorage.getItem('currentUser');
      if (savedUser) {
        const parsed = JSON.parse(savedUser);
        return parsed.id || null;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
    
    return null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getCurrentUserProfile(): Promise<User | null> {
    const userId = this.getCurrentUserId();
    if (!userId) {
      throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    try {
      return await usersService.getUserById(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateCurrentUserProfile(profileData: CurrentUserProfileData): Promise<User | null> {
    const userId = this.getCurrentUserId();
    if (!userId) {
      throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    try {
      const updatedUser = await usersService.updateUser(userId, {
        firstName: profileData.firstName,
        lastName: profileData.lastName,
        phone: profileData.phone
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      if (updatedUser) {
        localStorage.setItem('currentUser', JSON.stringify(updatedUser));
      }

      return updatedUser;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email (–¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
   */
  async getUserByEmail(email: string): Promise<User | null> {
    try {
      console.log('üîç Searching for user by email in database:', email);

      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤ —Ç–∞–±–ª–∏—Ü–µ users
      const user = await externalUsersService.getUserByEmail(email);
      if (user) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user);
        return user;
      }

      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', email);
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º email –∏ –ø–∞—Ä–æ–ª–µ–º
   * –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
   */
  async authenticateUser(email: string, password: string): Promise<User | null> {
    try {
      const user = await this.getUserByEmail(email);

      if (!user) {
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ö–µ—à–µ–π –∏–∑ –ë–î
      if (await this.isValidPassword(user, password)) {
        console.log('‚úÖ Authentication successful for:', email);
        return user;
      }

      console.log('‚ùå Authentication failed for:', email);
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ö–µ—à–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π - –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
   */
  private async isValidPassword(user: User, password: string): Promise<boolean> {
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
    if (!password || password.length < 3) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (!user.pwd_salt || !user.pwd_hash) {
      console.log('‚ùå User password data missing - cannot authenticate');
      return false;
    }

    // –î–µ—Ç–µ–∫—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    const isOldBrowser = !window.crypto || !window.crypto.subtle;

    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–ª–∏ —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    if (isMobile || isOldBrowser) {
      console.log('üîß Using simplified password verification for mobile/legacy browser');
      return await this.simplePasswordCheck(user, password);
    }

    try {
      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (5 —Å–µ–∫—É–Ω–¥)
      const timeoutPromise = new Promise<boolean>((_, reject) =>
        setTimeout(() => reject(new Error('Password verification timeout')), 5000)
      );

      const verificationPromise = this.cryptoPasswordCheck(user, password);

      // –ì–æ–Ω–∫–∞ –º–µ–∂–¥—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
      return await Promise.race([verificationPromise, timeoutPromise]);
    } catch (error) {
      console.warn('‚ö†Ô∏è Crypto verification failed, falling back to simple check:', error.message);
      return await this.simplePasswordCheck(user, password);
    }
  }

  // –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
  private async cryptoPasswordCheck(user: User, password: string): Promise<boolean> {
    const encoder = new TextEncoder();
    const passwordBytes = encoder.encode(password);
    const saltBytes = this.base64ToArrayBuffer(user.pwd_salt);

    const keyMaterial = await crypto.subtle.importKey(
      'raw',
      passwordBytes,
      { name: 'PBKDF2' },
      false,
      ['deriveBits']
    );

    const hashBuffer = await crypto.subtle.deriveBits(
      {
        name: 'PBKDF2',
        salt: saltBytes,
        iterations: 100000,
        hash: 'SHA-256'
      },
      keyMaterial,
      32 * 8
    );

    const computedHash = this.arrayBufferToBase64(hashBuffer);
    return computedHash === user.pwd_hash;
  }

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ö–µ—à–∞–º–∏!)
  private async simplePasswordCheck(user: User, password: string): Promise<boolean> {
    try {
      if (!crypto.subtle) {
        console.error('‚ùå Crypto API not available - cannot verify password securely');
        return false; // –ù–ï –ü–†–û–ü–£–°–ö–ê–ï–ú –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ - —ç—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ
      }

      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π PBKDF2 —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
      const encoder = new TextEncoder();
      const passwordBytes = encoder.encode(password);
      const saltBytes = this.base64ToArrayBuffer(user.pwd_salt);

      const keyMaterial = await crypto.subtle.importKey(
        'raw',
        passwordBytes,
        { name: 'PBKDF2' },
        false,
        ['deriveBits']
      );

      // –£–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–Ω–æ –≤—Å—ë –µ—â—ë –±–µ–∑–æ–ø–∞—Å–Ω–æ)
      const hashBuffer = await crypto.subtle.deriveBits(
        {
          name: 'PBKDF2',
          salt: saltBytes,
          iterations: 10000, // –í–º–µ—Å—Ç–æ 100000 - –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
          hash: 'SHA-256'
        },
        keyMaterial,
        32 * 8
      );

      const computedHash = this.arrayBufferToBase64(hashBuffer);
      // –í–ê–ñ–ù–û: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –†–ï–ê–õ–¨–ù–´–ú —Ö–µ—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return computedHash === user.pwd_hash;
    } catch (error) {
      console.error('‚ùå Mobile password check failed:', error);
      return false;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Base64 (–∫–æ–ø–∏—è –∏–∑ externalUsersService)
  private arrayBufferToBase64(buffer: ArrayBuffer): string {
    const bytes = new Uint8Array(buffer);
    let binary = '';
    for (let i = 0; i < bytes.byteLength; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  }

  private base64ToArrayBuffer(base64: string): ArrayBuffer {
    const binary = atob(base64);
    const bytes = new Uint8Array(binary.length);
    for (let i = 0; i < binary.length; i++) {
      bytes[i] = binary.charCodeAt(i);
    }
    return bytes.buffer;
  }
}

export const currentUserService = new CurrentUserService();