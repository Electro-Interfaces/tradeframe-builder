/**
 * üîÑ –°–ï–†–í–ò–° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–û–í
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç Bearer —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Basic Auth –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å universalHttpClient –∏ tradingNetworkConfigService
 */

import { tradingNetworkConfigService, TradingNetworkConfig } from './tradingNetworkConfigService';
import { httpClient } from './universalHttpClient';

export interface TokenInfo {
  token: string;
  expiresAt: number;
  isValid: boolean;
  timeUntilExpiry: number;
}

export interface TokenRefreshResult {
  success: boolean;
  newToken?: string;
  expiresAt?: number;
  error?: string;
}

class TokenRefreshService {
  private refreshPromise: Promise<TokenRefreshResult> | null = null;
  private readonly REFRESH_BUFFER_MINUTES = 5; // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è

  /**
   * üìù –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
   */
  private decodeJWT(token: string): any {
    try {
      const base64Url = token.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      const jsonPayload = decodeURIComponent(
        atob(base64)
          .split('')
          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
          .join('')
      );
      return JSON.parse(jsonPayload);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT:', error);
      return null;
    }
  }

  /**
   * üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
   */
  public analyzeToken(token: string): TokenInfo {
    const decoded = this.decodeJWT(token);
    
    if (!decoded || !decoded.exp) {
      return {
        token,
        expiresAt: 0,
        isValid: false,
        timeUntilExpiry: 0
      };
    }

    const expiresAt = decoded.exp * 1000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    const now = Date.now();
    const timeUntilExpiry = expiresAt - now;
    const isValid = timeUntilExpiry > 0;

    return {
      token,
      expiresAt,
      isValid,
      timeUntilExpiry
    };
  }

  /**
   * üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Basic Auth
   */
  private async refreshTokenWithBasicAuth(config: TradingNetworkConfig): Promise<TokenRefreshResult> {
    if (!config.username || !config.password) {
      return {
        success: false,
        error: '–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Basic Auth'
      };
    }

    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Basic Auth...');
      
      const credentials = btoa(`${config.username}:${config.password}`);
      const response = await httpClient.post('/v1/auth', null, {
        destination: 'external-api',
        useAuth: false,
        headers: {
          'Authorization': `Basic ${credentials}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.success) {
        throw new Error(`HTTP ${response.status}: ${response.error}`);
      }

      const newToken = typeof response.data === 'string' ? response.data : JSON.stringify(response.data);
      const cleanToken = newToken.replace(/^"|"$/g, ''); // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const tokenInfo = this.analyzeToken(cleanToken);
      
      if (!tokenInfo.isValid) {
        throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
      }

      console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
        expiresAt: new Date(tokenInfo.expiresAt).toLocaleString(),
        timeUntilExpiry: Math.round(tokenInfo.timeUntilExpiry / 1000 / 60) + ' –º–∏–Ω—É—Ç'
      });

      return {
        success: true,
        newToken: cleanToken,
        expiresAt: tokenInfo.expiresAt
      };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      return {
        success: false,
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞'
      };
    }
  }

  /**
   * üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
   */
  public async ensureValidToken(): Promise<TokenRefreshResult> {
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (this.refreshPromise) {
      return await this.refreshPromise;
    }

    try {
      const config = await tradingNetworkConfigService.getConfig();
      
      if (!config.apiKey) {
        return {
          success: false,
          error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        };
      }

      const tokenInfo = this.analyzeToken(config.apiKey);
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const bufferTime = this.REFRESH_BUFFER_MINUTES * 60 * 1000;
      if (tokenInfo.isValid && tokenInfo.timeUntilExpiry > bufferTime) {
        return {
          success: true,
          newToken: config.apiKey,
          expiresAt: tokenInfo.expiresAt
        };
      }

      console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
        isValid: tokenInfo.isValid,
        timeUntilExpiry: Math.round(tokenInfo.timeUntilExpiry / 1000 / 60) + ' –º–∏–Ω—É—Ç'
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      this.refreshPromise = this.refreshTokenWithBasicAuth(config);
      const result = await this.refreshPromise;

      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      if (result.success && result.newToken) {
        const updatedConfig: TradingNetworkConfig = {
          ...config,
          apiKey: result.newToken
        };
        
        await tradingNetworkConfigService.saveConfig(updatedConfig);
        console.log('üíæ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      }

      this.refreshPromise = null;
      return result;

    } catch (error: any) {
      this.refreshPromise = null;
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞'
      };
    }
  }

  /**
   * üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω
   */
  public async shouldRefreshToken(): Promise<boolean> {
    try {
      const config = await tradingNetworkConfigService.getConfig();
      
      if (!config.apiKey) {
        return false;
      }

      const tokenInfo = this.analyzeToken(config.apiKey);
      const bufferTime = this.REFRESH_BUFFER_MINUTES * 60 * 1000;
      
      return !tokenInfo.isValid || tokenInfo.timeUntilExpiry <= bufferTime;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ
   */
  public async getTokenInfo(): Promise<TokenInfo | null> {
    try {
      const config = await tradingNetworkConfigService.getConfig();
      
      if (!config.apiKey) {
        return null;
      }

      return this.analyzeToken(config.apiKey);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ:', error);
      return null;
    }
  }

  /**
   * ‚è∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞
   */
  public startTokenMonitoring(intervalMinutes: number = 10): void {
    const interval = setInterval(async () => {
      try {
        if (await this.shouldRefreshToken()) {
          console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...');
          const result = await this.ensureValidToken();
          
          if (result.success) {
            console.log('‚úÖ –ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
          } else {
            console.warn('‚ö†Ô∏è –ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å:', result.error);
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ç–æ–∫–µ–Ω–∞:', error);
      }
    }, intervalMinutes * 60 * 1000);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    (window as any).__tokenMonitoringInterval = interval;
  }

  /**
   * üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞
   */
  public stopTokenMonitoring(): void {
    const interval = (window as any).__tokenMonitoringInterval;
    if (interval) {
      clearInterval(interval);
      delete (window as any).__tokenMonitoringInterval;
      console.log('üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const tokenRefreshService = new TokenRefreshService();

export default tokenRefreshService;