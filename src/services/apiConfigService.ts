/**
 * üõ†Ô∏è –°–ï–†–í–ò–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô API
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —á–µ—Ä–µ–∑ UI
 */

import { PersistentStorage } from '@/utils/persistentStorage';
import { supabaseService } from '@/services/supabaseServiceClient';
import { createClient } from '@supabase/supabase-js';
import { errorLogService } from './errorLogService';

export interface DatabaseConnection {
  id: string;
  name: string;
  url: string;
  type: 'postgresql' | 'mysql' | 'sqlite' | 'supabase' | 'external-api'; // ‚ùå MOCK –£–î–ê–õ–ï–ù
  description?: string;
  isActive: boolean;
  isDefault: boolean;
  createdAt: Date;
  updatedAt: Date;
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  settings?: {
    timeout?: number;
    retryAttempts?: number;
    poolSize?: number;
    ssl?: boolean;
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Supabase
    apiKey?: string;
    serviceRoleKey?: string;
    schema?: string;
    autoApiKey?: boolean;
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API
    username?: string;
    password?: string;
    authType?: 'basic' | 'bearer' | 'none';
    loginEndpoint?: string;
    swaggerUrl?: string;
  };
}

export interface ApiConfig {
  currentConnectionId: string;
  availableConnections: DatabaseConnection[];
  debugMode: boolean;
  lastUpdated: Date;
}

// –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ UI)
const initialConfig: ApiConfig = {
  currentConnectionId: 'supabase-db',
  debugMode: import.meta.env.DEV || false,
  lastUpdated: new Date(),
  availableConnections: [
    // ‚ùå MOCK –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–î–ê–õ–ï–ù–û –ò–ó –°–û–û–ë–†–ê–ñ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
    {
      id: 'local-db',
      name: '–õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î',
      url: '', // URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ UI
      type: 'postgresql',
      description: '–õ–æ–∫–∞–ª—å–Ω–∞—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
      isActive: false,
      isDefault: true,
      createdAt: new Date(),
      updatedAt: new Date(),
      settings: {
        timeout: 5000,
        retryAttempts: 3,
        poolSize: 10,
        ssl: false
      }
    },
    {
      id: 'prod-db',
      name: '–ü—Ä–æ–¥–∞–∫—à–Ω –ë–î',
      url: '', // URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ UI
      type: 'postgresql',
      description: '–ü—Ä–æ–¥–∞–∫—à–Ω PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
      isActive: false,
      isDefault: false,
      createdAt: new Date(),
      updatedAt: new Date(),
      settings: {
        timeout: 10000,
        retryAttempts: 5,
        poolSize: 20,
        ssl: true
      }
    },
    {
      id: 'supabase-db',
      name: 'Supabase –ë–î',
      url: '', // URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ UI
      type: 'supabase',
      description: 'Supabase PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å REST API (–ü–†–ê–í–ò–õ–¨–ù–´–ô –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)',
      isActive: true,
      isDefault: false,
      createdAt: new Date(),
      updatedAt: new Date(),
      settings: {
        timeout: 8000,
        retryAttempts: 3,
        ssl: true,
        // API –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
        apiKey: '',
        serviceRoleKey: '',
        schema: 'public',
        autoApiKey: true
      }
    },
    {
      id: 'trading-network-api',
      name: 'API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏',
      url: '', // URL –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
      type: 'external-api',
      description: '–í–Ω–µ—à–Ω–∏–π API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏" (localStorage: trading_network_config)',
      isActive: false,
      isDefault: false,
      createdAt: new Date(),
      updatedAt: new Date(),
      settings: {
        timeout: 30000,
        retryAttempts: 3,
        ssl: true,
        authType: 'basic',
        // –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
        username: '',
        password: '',
        swaggerUrl: ''
      }
    }
  ]
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ localStorage
let currentConfig: ApiConfig = PersistentStorage.load<ApiConfig>('api_config', initialConfig);

/**
 * –°–æ–∑–¥–∞–µ—Ç Supabase –∫–ª–∏–µ–Ω—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
function createSupabaseFromSettings(url: string, apiKey: string, schema: string = 'public') {
  const client = createClient(url, apiKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    },
    db: {
      schema
    }
  });

  return {
    client,
    async testConnection() {
      try {
        const { data, error, count } = await client
          .from('operations')
          .select('*', { count: 'exact', head: true });
        
        if (error) {
          return {
            success: false,
            error: error.message,
            info: { error }
          };
        }
        
        return {
          success: true,
          info: { count, schema }
        };
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error',
          info: { error }
        };
      }
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
const saveConfig = () => {
  currentConfig.lastUpdated = new Date();
  PersistentStorage.save('api_config', currentConfig);
};

/**
 * –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 */
export const apiConfigService = {
  // === –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  getCurrentConfig(): ApiConfig {
    return { ...currentConfig };
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
   */
  getCurrentConnection(): DatabaseConnection | null {
    const connection = currentConfig.availableConnections.find(
      conn => conn.id === currentConfig.currentConnectionId
    );
    
    if (!connection) return null;
    
    // –î–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ - –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ localStorage
    if (connection.id === 'trading-network-api') {
      try {
        const tradingNetworkConfig = localStorage.getItem('trading_network_config');
        if (tradingNetworkConfig) {
          const config = JSON.parse(tradingNetworkConfig);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
          return {
            ...connection,
            url: config.baseUrl || connection.url,
            settings: {
              ...connection.settings,
              username: config.username || connection.settings?.username,
              password: config.password || connection.settings?.password,
              authType: config.authType || connection.settings?.authType,
              timeout: config.timeout || connection.settings?.timeout
            }
          };
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏:', error);
      }
    }
    
    return connection;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  getCurrentApiUrl(): string {
    const connection = this.getCurrentConnection();
    if (!connection) {
      // ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.');
    }
    return connection.url;
  },

  /**
   * ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: MOCK –†–ï–ñ–ò–ú –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù
   */
  isMockMode(): boolean {
    // ‚úÖ FAIL-SECURE: Mock —Ä–µ–∂–∏–º –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    console.log('üîí Mock —Ä–µ–∂–∏–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–∏—Ç–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    return false;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º API
   */
  getApiMode(): 'http' | 'supabase' { // ‚ùå MOCK –£–î–ê–õ–ï–ù –ò–ó –í–û–ó–ú–û–ñ–ù–´–• –†–ï–ñ–ò–ú–û–í
    const connection = this.getCurrentConnection();
    if (!connection) {
      // ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.');
    }
    if (connection.type === 'supabase') {
      return 'supabase';
    }
    return 'http';
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  getCurrentConnectionType(): string {
    const connection = this.getCurrentConnection();
    if (!connection) {
      // ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.');
    }
    return connection.type;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  getAllConnections(): DatabaseConnection[] {
    return [...currentConfig.availableConnections];
  },

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò ===

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async switchConnection(connectionId: string): Promise<{
    success: boolean;
    error?: string;
    connection?: DatabaseConnection;
  }> {
    const connection = currentConfig.availableConnections.find(
      conn => conn.id === connectionId
    );

    if (!connection) {
      return {
        success: false,
        error: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    {
      const testResult = await this.testConnection(connectionId);
      if (!testResult.success) {
        return {
          success: false,
          error: testResult.error || '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
        };
      }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
    currentConfig.currentConnectionId = connectionId;
    saveConfig();

    return {
      success: true,
      connection
    };
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async addConnection(connection: Omit<DatabaseConnection, 'id' | 'createdAt' | 'updatedAt'>): Promise<DatabaseConnection> {
    const newConnection: DatabaseConnection = {
      ...connection,
      id: `conn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    currentConfig.availableConnections.push(newConnection);
    saveConfig();

    return newConnection;
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async updateConnection(
    id: string, 
    updates: Partial<Omit<DatabaseConnection, 'id' | 'createdAt'>>
  ): Promise<DatabaseConnection | null> {
    const index = currentConfig.availableConnections.findIndex(conn => conn.id === id);
    if (index === -1) return null;

    const connection = currentConfig.availableConnections[index];
    currentConfig.availableConnections[index] = {
      ...connection,
      ...updates,
      id: connection.id,
      createdAt: connection.createdAt,
      updatedAt: new Date()
    };

    saveConfig();
    return currentConfig.availableConnections[index];
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async deleteConnection(id: string): Promise<boolean> {
    // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (currentConfig.currentConnectionId === id) {
      throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }

    // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const connection = currentConfig.availableConnections.find(conn => conn.id === id);
    if (connection?.isDefault) {
      throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }

    const initialLength = currentConfig.availableConnections.length;
    currentConfig.availableConnections = currentConfig.availableConnections.filter(
      conn => conn.id !== id
    );

    if (currentConfig.availableConnections.length < initialLength) {
      saveConfig();
      return true;
    }

    return false;
  },

  // === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô ===

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
   */
  async testConnection(connectionId: string): Promise<{
    success: boolean;
    error?: string;
    responseTime?: number;
    details?: any;
  }> {
    const connection = currentConfig.availableConnections.find(
      conn => conn.id === connectionId
    );

    if (!connection) {
      return {
        success: false,
        error: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      };
    }

    // ‚ùå MOCK –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –£–î–ê–õ–ï–ù–´ –ò–ó –°–û–û–ë–†–ê–ñ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò

    // Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (connection.type === 'supabase') {
      const startTime = Date.now();
      try {
        const apiKey = connection.settings?.apiKey;
        if (!apiKey) {
          return {
            success: false,
            error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
          };
        }

        const supabaseClient = createSupabaseFromSettings(
          connection.url, 
          apiKey, 
          connection.settings?.schema || 'public'
        );
        
        const testResult = await supabaseClient.testConnection();
        const responseTime = Date.now() - startTime;
        
        if (testResult.success) {
          return {
            success: true,
            responseTime,
            details: {
              type: 'supabase',
              url: connection.url,
              schema: connection.settings?.schema || 'public',
              ...testResult.info
            }
          };
        } else {
          return {
            success: false,
            error: testResult.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase',
            responseTime
          };
        }
      } catch (error) {
        const responseTime = Date.now() - startTime;
        return {
          success: false,
          error: error instanceof Error ? error.message : String(error),
          responseTime
        };
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π API —Å –±–∞–∑–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    if (connection.type === 'external-api') {
      const startTime = Date.now();
      try {
        const headers: Record<string, string> = {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if (connection.settings?.authType === 'basic' && connection.settings?.username && connection.settings?.password) {
          const credentials = btoa(`${connection.settings.username}:${connection.settings.password}`);
          headers['Authorization'] = `Basic ${credentials}`;
        }

        const response = await fetch(connection.url, {
          method: 'GET',
          headers,
          signal: AbortSignal.timeout(connection.settings?.timeout || 10000)
        });

        const responseTime = Date.now() - startTime;

        if (response.ok) {
          let responseData = null;
          try {
            responseData = await response.json();
          } catch {
            responseData = await response.text();
          }

          return {
            success: true,
            responseTime,
            details: {
              type: 'external-api',
              url: connection.url,
              status: response.status,
              statusText: response.statusText,
              authType: connection.settings?.authType || 'none',
              response: responseData
            }
          };
        } else {
          const errorText = await response.text();
          return {
            success: false,
            error: `HTTP ${response.status}: ${response.statusText}${errorText ? ' - ' + errorText : ''}`,
            responseTime
          };
        }
      } catch (error: any) {
        const responseTime = Date.now() - startTime;
        return {
          success: false,
          error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–º—É API',
          responseTime
        };
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const startTime = Date.now();
    try {
      const response = await fetch(`${connection.url}/health`, {
        method: 'GET',
        headers: { 'Accept': 'application/json' },
        signal: AbortSignal.timeout(connection.settings?.timeout || 5000)
      });

      const responseTime = Date.now() - startTime;

      if (!response.ok) {
        return {
          success: false,
          error: `HTTP ${response.status}: ${response.statusText}`,
          responseTime
        };
      }

      const data = await response.json();
      return {
        success: true,
        responseTime,
        details: data
      };

    } catch (error: any) {
      const responseTime = Date.now() - startTime;
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
        responseTime
      };
    }
  },

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async testAllConnections(): Promise<Record<string, {
    success: boolean;
    error?: string;
    responseTime?: number;
  }>> {
    const results: Record<string, any> = {};
    
    for (const connection of currentConfig.availableConnections) {
      results[connection.id] = await this.testConnection(connection.id);
    }

    return results;
  },

  // === –ù–ê–°–¢–†–û–ô–ö–ò ===

  /**
   * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
   */
  setDebugMode(enabled: boolean): void {
    currentConfig.debugMode = enabled;
    saveConfig();
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  getUsageStats() {
    const connection = this.getCurrentConnection();
    return {
      currentConnection: connection?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      connectionType: connection?.type || 'unknown',
      totalConnections: currentConfig.availableConnections.length,
      secureMode: true, // ‚ùå MOCK –†–ï–ñ–ò–ú –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù
      debugMode: currentConfig.debugMode,
      lastUpdated: currentConfig.lastUpdated
    };
  },

  // === –ú–ò–ì–†–ê–¶–ò–Ø ===

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  exportConfig(): string {
    return JSON.stringify(currentConfig, null, 2);
  },

  /**
   * –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  importConfig(configJson: string): boolean {
    try {
      const newConfig = JSON.parse(configJson) as ApiConfig;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      if (!newConfig.availableConnections || !Array.isArray(newConfig.availableConnections)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      }

      currentConfig = newConfig;
      saveConfig();
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      return false;
    }
  },

  /**
   * –°–±—Ä–æ—Å –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  resetToDefault(): void {
    currentConfig = { ...initialConfig };
    saveConfig();
  }
};

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ URL API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö HTTP –∫–ª–∏–µ–Ω—Ç–∞—Ö
 */
export const getApiBaseUrl = (): string => {
  return apiConfigService.getCurrentApiUrl();
};

/**
 * ‚ùå MOCK –†–ï–ñ–ò–ú –ù–ê–í–°–ï–ì–î–ê –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù - –ü–û–õ–ò–¢–ò–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
 */
export const isApiMockMode = (): boolean => {
  // ‚úÖ FAIL-SECURE: Mock —Ä–µ–∂–∏–º –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
  console.warn('üîí Mock —Ä–µ–∂–∏–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–∏—Ç–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã');
  return false;
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è window (–≤ dev —Ä–µ–∂–∏–º–µ)
if (import.meta.env.DEV) {
  // @ts-ignore
  window.apiConfigService = apiConfigService;
  console.log('üõ†Ô∏è API Config Service –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ window.apiConfigService');
}