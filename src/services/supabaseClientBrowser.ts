/**
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π Supabase Client –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ systemConfigService –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 */

import { createClient, SupabaseClient } from '@supabase/supabase-js';
import { apiConfigServiceDB } from './apiConfigServiceDB';

let dynamicClient: SupabaseClient | null = null;
let lastConnectionId: string | null = null;

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π Supabase –∫–ª–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
async function getDynamicSupabaseClient(): Promise<SupabaseClient | null> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const connection = await apiConfigServiceDB.getCurrentConnection();
    
    if (!connection) {
      console.error('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return null;
    }
    
    if (connection.type !== 'supabase') {
      console.error(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${connection.type}`);
      return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
    if (dynamicClient && lastConnectionId === connection.id) {
      return dynamicClient;
    }
    
    const url = connection.url;
    const key = connection.settings?.serviceRoleKey || connection.settings?.apiKey;
    
    if (!url || !key) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç URL –∏–ª–∏ –∫–ª—é—á–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      return null;
    }
    
    console.log('üîß –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π Supabase –∫–ª–∏–µ–Ω—Ç:', {
      connectionId: connection.id,
      name: connection.name,
      url: url,
      keyType: key.includes('service_role') ? 'service_role' : key.includes('anon') ? 'anon' : 'unknown',
      keyPreview: key.substring(0, 50) + '...'
    });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
    dynamicClient = createClient(url, key, {
      auth: {
        autoRefreshToken: true,
        persistSession: true,
        detectSessionInUrl: true
      },
      db: {
        schema: connection.settings?.schema || 'public'
      }
    });
    
    lastConnectionId = connection.id;
    return dynamicClient;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ Supabase –∫–ª–∏–µ–Ω—Ç–∞:', error);
    return null;
  }
}

/**
 * Proxy –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
 */
export const supabaseClientBrowser = new Proxy({} as SupabaseClient, {
  get: function(target, prop: keyof SupabaseClient) {
    // –î–ª—è chainable –º–µ—Ç–æ–¥–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if (prop === 'from') {
      return (tableName: string) => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º promise-based query builder
        return {
          async insert(data: any) {
            const client = await getDynamicSupabaseClient();
            if (!client) {
              throw new Error('Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
            }
            return client.from(tableName).insert(data);
          },
          async select(columns?: string) {
            const client = await getDynamicSupabaseClient();
            if (!client) {
              throw new Error('Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
            }
            const queryBuilder = client.from(tableName).select(columns);
            // –î–æ–±–∞–≤–ª—è–µ–º chainable –º–µ—Ç–æ–¥—ã –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            return {
              ...queryBuilder,
              async eq(column: string, value: any) {
                return queryBuilder.eq(column, value);
              },
              async single() {
                return queryBuilder.single();
              }
            };
          },
          async update(data: any) {
            const client = await getDynamicSupabaseClient();
            if (!client) {
              throw new Error('Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
            }
            return client.from(tableName).update(data);
          },
          async delete() {
            const client = await getDynamicSupabaseClient();
            if (!client) {
              throw new Error('Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
            }
            return client.from(tableName).delete();
          }
        };
      };
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    return async (...args: any[]) => {
      const client = await getDynamicSupabaseClient();
      if (!client) {
        throw new Error('Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
      }
      
      const method = client[prop];
      if (typeof method === 'function') {
        return method.apply(client, args);
      }
      return method;
    };
  }
});

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export const supabase = supabaseClientBrowser;

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π Supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
 */
export async function getSupabaseClient() {
  const client = await getDynamicSupabaseClient();
  if (!client) {
    throw new Error('Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
  }
  return client;
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
 */
export async function refreshSupabaseClient(): Promise<void> {
  dynamicClient = null;
  lastConnectionId = null;
  console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase –∫–ª–∏–µ–Ω—Ç–∞');
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
 */
export async function testDynamicConnection(): Promise<boolean> {
  try {
    const client = await getDynamicSupabaseClient();
    if (!client) return false;
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const { error } = await client
      .from('system_config')
      .select('config_key')
      .limit(1);
      
    if (error) {
      console.error('‚ùå –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω:', error.message);
      return false;
    }
    
    console.log('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç');
    return true;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    return false;
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (import.meta.env.DEV) {
  console.log('üîß –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Proxy –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
  // —Ç–∞–∫ –∫–∞–∫ Proxy –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
}