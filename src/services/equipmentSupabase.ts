/**
 * Equipment Service - Supabase Integration
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Service Role Key –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ö–µ–º–∞: is_active –≤–º–µ—Å—Ç–æ status, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ UUID
 */

import { 
  Equipment, 
  EquipmentTemplate,
  CreateEquipmentRequest, 
  UpdateEquipmentRequest,
  ListEquipmentParams,
  ListEquipmentResponse,
  EquipmentStatusAction,
  EquipmentEvent
} from '@/types/equipment';

import { supabaseService as supabase } from './supabaseServiceClient';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID
function generateUUID(): string {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0;
    var v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

/**
 * Equipment Templates API - Supabase
 */
export const supabaseEquipmentTemplatesAPI = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async list(): Promise<EquipmentTemplate[]> {
    const { data, error } = await supabase
      .from('equipment_templates')
      .select('*');

    if (error) {
      console.error('‚ùå Equipment templates list error:', error);
      throw new Error(`Failed to fetch equipment templates: ${error.message}`);
    }

    // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const templates = (data || []).map(item => ({
      id: item.id,
      name: item.name,
      system_type: item.system_type,
      technical_code: item.technical_code,
      status: item.is_active ?? true, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: is_active -> status
      description: item.description || '',
      default_params: item.default_params || {},
      created_at: item.created_at,
      updated_at: item.updated_at,
      allow_component_template_ids: item.allow_component_template_ids || []
    })) as EquipmentTemplate[];

    return templates;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ ID
   */
  async get(id: string): Promise<EquipmentTemplate> {
    const { data, error } = await supabase
      .from('equipment_templates')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      console.error(`‚ùå Equipment template get error (${id}):`, error);
      throw new Error(`Failed to fetch equipment template: ${error.message}`);
    }

    const item = data;
    if (!item) {
      throw new Error(`Equipment template not found: ${id}`);
    }

    // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const template: EquipmentTemplate = {
      id: item.id,
      name: item.name,
      system_type: item.system_type,
      technical_code: item.technical_code,
      status: item.is_active ?? true, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: is_active -> status
      description: item.description || '',
      default_params: item.default_params || {},
      created_at: item.created_at,
      updated_at: item.updated_at,
      allow_component_template_ids: item.allow_component_template_ids || []
    };

    console.log(`‚úÖ Loaded equipment template: ${template.name}`);
    return template;
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async create(data: Omit<EquipmentTemplate, 'id' | 'created_at' | 'updated_at'>): Promise<EquipmentTemplate> {
    const id = generateUUID();
    const now = new Date().toISOString();

    const payload = {
      id,
      name: data.name,
      system_type: data.system_type,
      technical_code: data.technical_code,
      is_active: data.status ?? true, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: status -> is_active
      description: data.description || '',
      default_params: data.default_params || {},
      allow_component_template_ids: data.allow_component_template_ids || null,
      created_at: now,
      updated_at: now
    };

    console.log('üîß Creating equipment template:', payload);

    const result = await supabase.insert('equipment_templates', payload);

    if (result.error) {
      console.error('‚ùå Equipment template create error:', result.error);
      throw new Error(`Failed to create equipment template: ${result.error}`);
    }

    const created = result.data?.[0];
    if (!created) {
      throw new Error('Equipment template creation failed - no data returned');
    }

    console.log('‚úÖ Equipment template created:', created.name);
    return this.get(id);
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async update(id: string, data: Partial<Omit<EquipmentTemplate, 'id' | 'created_at'>>): Promise<EquipmentTemplate> {
    const payload: any = {
      updated_at: new Date().toISOString()
    };

    // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π
    if (data.name) payload.name = data.name;
    if (data.system_type) payload.system_type = data.system_type;
    if (data.technical_code) payload.technical_code = data.technical_code;
    if (data.status !== undefined) payload.is_active = data.status; // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    if (data.description !== undefined) payload.description = data.description;
    if (data.default_params) payload.default_params = data.default_params;
    if (data.allow_component_template_ids !== undefined) {
      payload.allow_component_template_ids = data.allow_component_template_ids;
    }

    console.log('üîß Updating equipment template:', id, payload);

    const result = await supabase.update('equipment_templates', payload, { id });

    if (result.error) {
      console.error(`‚ùå Equipment template update error (${id}):`, result.error);
      throw new Error(`Failed to update equipment template: ${result.error}`);
    }

    console.log('‚úÖ Equipment template updated:', id);
    return this.get(id);
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async delete(id: string): Promise<void> {
    console.log('üóëÔ∏è Deleting equipment template:', id);

    const result = await supabase.delete('equipment_templates', { id });

    if (result.error) {
      console.error(`‚ùå Equipment template delete error (${id}):`, result.error);
      throw new Error(`Failed to delete equipment template: ${result.error}`);
    }

    console.log('‚úÖ Equipment template deleted:', id);
  }
};

/**
 * Equipment API - Supabase 
 */
export const supabaseEquipmentAPI = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async list(params: ListEquipmentParams): Promise<ListEquipmentResponse> {
    console.log('üîç Fetching equipment list with params:', params);

    const options: any = {
      select: '*'
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (params.trading_point_id) {
      options.eq = { ...options.eq, trading_point_id: params.trading_point_id };
    }

    // –õ–∏–º–∏—Ç—ã –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    if (params.limit) {
      options.limit = params.limit;
    }
    if (params.offset) {
      options.offset = params.offset;
    }

    let query = supabase.from('equipment').select('*');
    
    if (options.where) {
      Object.entries(options.where).forEach(([key, value]) => {
        query = query.eq(key, value);
      });
    }
    
    if (options.limit) {
      query = query.limit(options.limit);
    }
    
    if (options.offset) {
      query = query.range(options.offset, options.offset + (options.limit || 100) - 1);
    }
    
    const { data, error } = await query;

    if (error) {
      console.error('‚ùå Equipment list error:', error);
      throw new Error(`Failed to fetch equipment: ${error.message}`);
    }

    // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    const items = (data || []).map(item => ({
      id: item.id,
      name: item.name,
      template_id: item.template_id,
      trading_point_id: item.trading_point_id,
      status: item.is_active ? 'active' : 'inactive', // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
      config: item.config || {},
      created_at: item.created_at,
      updated_at: item.updated_at,
      description: item.description || ''
    })) as Equipment[];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    let filteredItems = items;
    if (params.status) {
      filteredItems = items.filter(item => item.status === params.status);
    }

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (params.search) {
      const searchLower = params.search.toLowerCase();
      filteredItems = filteredItems.filter(item => 
        item.name.toLowerCase().includes(searchLower) ||
        (item.description && item.description.toLowerCase().includes(searchLower))
      );
    }

    console.log(`‚úÖ Loaded ${filteredItems.length} equipment items`);

    return {
      items: filteredItems,
      total: filteredItems.length,
      hasMore: false // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    };
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ ID
   */
  async get(id: string): Promise<Equipment> {
    const { data, error } = await supabase
      .from('equipment')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      console.error(`‚ùå Equipment get error (${id}):`, error);
      throw new Error(`Failed to fetch equipment: ${error.message}`);
    }

    const item = data;
    if (!item) {
      throw new Error(`Equipment not found: ${id}`);
    }

    const equipment: Equipment = {
      id: item.id,
      name: item.name,
      template_id: item.template_id,
      trading_point_id: item.trading_point_id,
      status: item.is_active ? 'active' : 'inactive', // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
      config: item.config || {},
      created_at: item.created_at,
      updated_at: item.updated_at,
      description: item.description || ''
    };

    console.log(`‚úÖ Loaded equipment: ${equipment.name}`);
    return equipment;
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
   */
  async create(data: CreateEquipmentRequest): Promise<Equipment> {
    const id = generateUUID();
    const now = new Date().toISOString();

    const payload = {
      id,
      name: data.name,
      template_id: data.template_id,
      trading_point_id: data.trading_point_id,
      is_active: true, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      config: data.config || {},
      description: data.description || '',
      created_at: now,
      updated_at: now
    };

    console.log('üîß Creating equipment:', payload);

    const result = await supabase.insert('equipment', payload);

    if (result.error) {
      console.error('‚ùå Equipment create error:', result.error);
      throw new Error(`Failed to create equipment: ${result.error}`);
    }

    console.log('‚úÖ Equipment created:', data.name);
    return this.get(id);
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
   */
  async update(id: string, data: UpdateEquipmentRequest): Promise<Equipment> {
    const payload: any = {
      updated_at: new Date().toISOString()
    };

    // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π
    if (data.name) payload.name = data.name;
    if (data.config) payload.config = data.config;
    if (data.description !== undefined) payload.description = data.description;

    console.log('üîß Updating equipment:', id, payload);

    const result = await supabase.update('equipment', payload, { id });

    if (result.error) {
      console.error(`‚ùå Equipment update error (${id}):`, result.error);
      throw new Error(`Failed to update equipment: ${result.error}`);
    }

    console.log('‚úÖ Equipment updated:', id);
    return this.get(id);
  },

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async setStatus(id: string, action: EquipmentStatusAction): Promise<void> {
    const is_active = action === 'enable';

    console.log(`üîß Setting equipment status: ${id} -> ${action}`);

    const result = await supabase.update('equipment', 
      { 
        is_active, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        updated_at: new Date().toISOString()
      }, 
      { id }
    );

    if (result.error) {
      console.error(`‚ùå Equipment status update error (${id}):`, result.error);
      throw new Error(`Failed to update equipment status: ${result.error}`);
    }

    console.log(`‚úÖ Equipment status updated: ${id} -> ${action}`);
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
   */
  async getEvents(id: string): Promise<EquipmentEvent[]> {
    console.log(`üìã Getting events for equipment: ${id}`);
    
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const currentSupabaseEquipmentAPI = supabaseEquipmentAPI;
export const currentSupabaseEquipmentTemplatesAPI = supabaseEquipmentTemplatesAPI;