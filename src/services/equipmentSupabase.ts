/**
 * Equipment Service - Supabase Integration
 * –û–ë–ù–û–í–õ–ï–ù: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SupabaseConnectionHelper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ö–µ–º–∞: is_active –≤–º–µ—Å—Ç–æ status, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ UUID
 */

import { 
  Equipment, 
  EquipmentTemplate,
  CreateEquipmentRequest, 
  UpdateEquipmentRequest,
  ListEquipmentParams,
  ListEquipmentResponse,
  EquipmentStatusAction,
  EquipmentEvent
} from '@/types/equipment';

// –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
import { supabaseDatabaseClient } from './supabaseDatabaseClient';
import { SupabaseConnectionHelper, executeSupabaseOperation } from './supabaseConnectionHelper';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID
function generateUUID(): string {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0;
    var v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

/**
 * Equipment Templates API - Supabase —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 */
export const supabaseEquipmentTemplatesAPI = {
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize(): Promise<void> {
    await SupabaseConnectionHelper.initialize();
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async list(): Promise<EquipmentTemplate[]> {
    const response = await supabaseDatabaseClient.get('/rest/v1/equipment_templates', {
      queryParams: { select: '*' }
    });

    if (!response.success) {
      const error = new Error(response.error || 'Failed to fetch equipment templates');
      console.error('‚ùå Equipment templates list error:', error);
      throw error;
    }

    const data = response.data || [];
    
    // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const templates = data.map(item => ({
      id: item.id,
      name: item.name,
      system_type: item.system_type,
      technical_code: item.technical_code,
      status: item.is_active ?? true, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: is_active -> status
      description: item.description || '',
      default_params: item.default_params || {},
      created_at: item.created_at,
      updated_at: item.updated_at,
      allow_component_template_ids: item.allow_component_template_ids || []
    })) as EquipmentTemplate[];

    console.log(`‚úÖ Loaded ${templates.length} equipment templates from Supabase`);
    return templates;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ ID
   */
  async get(id: string): Promise<EquipmentTemplate> {
    const response = await supabaseDatabaseClient.get('/rest/v1/equipment_templates', {
      queryParams: { 
        select: '*',
        id: `eq.${id}`
      }
    });

    if (!response.success) {
      const error = new Error(response.error || `Failed to fetch equipment template: ${id}`);
      console.error(`‚ùå Equipment template get error (${id}):`, error);
      throw error;
    }

    const data = response.data;
    if (!data || !Array.isArray(data) || data.length === 0) {
      throw new Error(`Equipment template not found: ${id}`);
    }

    const item = data[0];
    if (!item) {
      throw new Error(`Equipment template not found: ${id}`);
    }

    // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const template: EquipmentTemplate = {
      id: item.id,
      name: item.name,
      system_type: item.system_type,
      technical_code: item.technical_code,
      status: item.is_active ?? true, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: is_active -> status
      description: item.description || '',
      default_params: item.default_params || {},
      created_at: item.created_at,
      updated_at: item.updated_at,
      allow_component_template_ids: item.allow_component_template_ids || []
    };

    console.log(`‚úÖ Loaded equipment template: ${template.name}`);
    return template;
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async create(data: Omit<EquipmentTemplate, 'id' | 'created_at' | 'updated_at'>): Promise<EquipmentTemplate> {
    const id = generateUUID();
    const now = new Date().toISOString();

    const payload = {
      id,
      name: data.name,
      system_type: data.system_type,
      technical_code: data.technical_code,
      is_active: data.status ?? true, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: status -> is_active
      description: data.description || '',
      default_params: data.default_params || {},
      allow_component_template_ids: data.allow_component_template_ids || null,
      created_at: now,
      updated_at: now
    };

    console.log('üîß Creating equipment template:', payload);

    const response = await supabaseDatabaseClient.post('/rest/v1/equipment_templates', payload);

    if (!response.success) {
      console.error('‚ùå Equipment template create error:', response.error);
      throw new Error(`Failed to create equipment template: ${response.error}`);
    }

    if (!response.data) {
      throw new Error('Equipment template creation failed - no data returned');
    }

    console.log('‚úÖ Equipment template created:', payload.name);
    return this.get(id);
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async update(id: string, data: Partial<Omit<EquipmentTemplate, 'id' | 'created_at'>>): Promise<EquipmentTemplate> {
    const payload: any = {
      updated_at: new Date().toISOString()
    };

    // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π
    if (data.name) payload.name = data.name;
    if (data.system_type) payload.system_type = data.system_type;
    if (data.technical_code) payload.technical_code = data.technical_code;
    if (data.status !== undefined) payload.is_active = data.status; // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    if (data.description !== undefined) payload.description = data.description;
    if (data.default_params) payload.default_params = data.default_params;
    if (data.allow_component_template_ids !== undefined) {
      payload.allow_component_template_ids = data.allow_component_template_ids;
    }

    console.log('üîß Updating equipment template:', id, payload);

    const response = await supabaseDatabaseClient.patch(`/rest/v1/equipment_templates?id=eq.${id}`, payload);

    if (!response.success) {
      console.error(`‚ùå Equipment template update error (${id}):`, response.error);
      throw new Error(`Failed to update equipment template: ${response.error}`);
    }

    console.log('‚úÖ Equipment template updated:', id);
    return this.get(id);
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async delete(id: string): Promise<void> {
    console.log('üóëÔ∏è Deleting equipment template:', id);

    const response = await supabaseDatabaseClient.delete(`/rest/v1/equipment_templates?id=eq.${id}`);

    if (!response.success) {
      console.error(`‚ùå Equipment template delete error (${id}):`, response.error);
      throw new Error(`Failed to delete equipment template: ${response.error}`);
    }

    console.log('‚úÖ Equipment template deleted:', id);
  }
};

/**
 * Equipment API - Supabase 
 */
export const supabaseEquipmentAPI = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async list(params: ListEquipmentParams): Promise<ListEquipmentResponse> {
    console.log('üîç Fetching equipment list with params:', params);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const dbFilters: Record<string, any> = {};
    if (params.trading_point_id) {
      dbFilters.trading_point_id = params.trading_point_id;
    }
    if (params.system_type) {
      dbFilters.system_type = params.system_type;
    }
    if (params.template_id) {
      dbFilters.template_id = params.template_id;
    }
    
    const response = await supabaseDatabaseClient.getEquipment(dbFilters);

    if (!response.success) {
      const error = new Error(response.error || 'Failed to fetch equipment');
      console.error('‚ùå Equipment list error:', error);
      throw error;
    }

    const data = response.data;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ü–µ–Ω
    console.log(`üîç [EQUIPMENT API] Raw query result:`, {
      count: data?.length || 0,
      params: params
    });
    
    if (data && data.length > 0) {
      console.log(`üìã [EQUIPMENT API] –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏:`, data.slice(0, 3));
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
      const tanks = data.filter(item => item.system_type === 'fuel_tank');
      console.log(`üõ¢Ô∏è [EQUIPMENT API] –ù–∞–π–¥–µ–Ω–æ ${tanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –¥–ª—è –¢–ü ${params.trading_point_id}`);
      tanks.forEach((tank, i) => {
        console.log(`  –†–µ–∑–µ—Ä–≤—É–∞—Ä ${i + 1}: ${tank.name} | status=${tank.status} | fuel_type=${tank.params?.['–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞'] || '–ù–ï–¢'}`);
      });
    } else {
      console.warn(`‚ö†Ô∏è [EQUIPMENT API] –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:`, params);
    }

    // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const items = (data || []).map(item => ({
      id: item.id,
      name: item.name,
      system_type: item.system_type,
      template_id: item.template_id,
      trading_point_id: item.trading_point_id,
      display_name: item.display_name,
      serial_number: item.serial_number,
      external_id: item.external_id,
      status: item.status, // –ò—Å–ø–æ–ª—å–∑—É–µ–º status –Ω–∞–ø—Ä—è–º—É—é
      installation_date: item.installation_date,
      params: item.params || {},
      bindings: item.bindings || {},
      created_at: item.created_at,
      updated_at: item.updated_at,
      deleted_at: item.deleted_at,
      created_from_template: item.created_from_template
    })) as Equipment[];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    let filteredItems = items;
    if (params.status) {
      filteredItems = items.filter(item => item.status === params.status);
    }

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (params.search) {
      const searchLower = params.search.toLowerCase();
      filteredItems = filteredItems.filter(item => 
        (item.name && item.name.toLowerCase().includes(searchLower)) ||
        (item.display_name && item.display_name.toLowerCase().includes(searchLower)) ||
        (item.serial_number && item.serial_number.toLowerCase().includes(searchLower))
      );
    }

    console.log(`‚úÖ Loaded ${filteredItems.length} equipment items from Supabase`);

    return {
      data: filteredItems,
      total: filteredItems.length,
      page: params.page || 1,
      limit: params.limit || 50,
      has_more: false
    };
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ ID
   */
  async get(id: string): Promise<Equipment> {
    const response = await supabaseDatabaseClient.get('/rest/v1/equipment', {
      queryParams: { 
        select: '*',
        id: `eq.${id}`
      }
    });

    if (!response.success) {
      console.error(`‚ùå Equipment get error (${id}):`, response.error);
      throw new Error(`Failed to fetch equipment: ${response.error}`);
    }

    const data = response.data;
    if (!data || !Array.isArray(data) || data.length === 0) {
      throw new Error(`Equipment not found: ${id}`);
    }

    const item = data[0];
    if (!item) {
      throw new Error(`Equipment not found: ${id}`);
    }

    const equipment: Equipment = {
      id: item.id,
      name: item.name,
      system_type: item.system_type,
      template_id: item.template_id,
      trading_point_id: item.trading_point_id,
      display_name: item.display_name,
      serial_number: item.serial_number,
      external_id: item.external_id,
      status: item.status, // –ò—Å–ø–æ–ª—å–∑—É–µ–º status –Ω–∞–ø—Ä—è–º—É—é
      installation_date: item.installation_date,
      params: item.params || {},
      bindings: item.bindings || {},
      created_at: item.created_at,
      updated_at: item.updated_at,
      deleted_at: item.deleted_at,
      created_from_template: item.created_from_template
    };

    console.log(`‚úÖ Loaded equipment: ${equipment.display_name || equipment.name}`);
    return equipment;
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
   */
  async create(data: CreateEquipmentRequest): Promise<Equipment> {
    const id = generateUUID();
    const now = new Date().toISOString();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
    let template: EquipmentTemplate | null = null;
    try {
      template = await supabaseEquipmentTemplatesAPI.get(data.template_id);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Template not found: ${data.template_id}, creating equipment without template`);
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const combinedParams = {
      ...(template?.default_params || {}),
      ...(data.custom_params || {})
    };

    const payload = {
      id,
      name: template?.name || data.display_name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ display_name
      system_type: template?.system_type || 'fuel_tank', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ fallback
      template_id: data.template_id,
      trading_point_id: data.trading_point_id,
      display_name: data.display_name,
      serial_number: data.serial_number,
      external_id: data.external_id,
      status: 'offline', // –ù–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ offline
      installation_date: data.installation_date || now,
      params: combinedParams,
      bindings: data.bindings || {},
      created_at: now,
      updated_at: now
    };

    console.log('üîß Creating equipment:', payload);

    const response = await supabaseDatabaseClient.post('/rest/v1/equipment', payload);

    if (!response.success) {
      console.error('‚ùå Equipment create error:', response.error);
      throw new Error(`Failed to create equipment: ${response.error}`);
    }

    console.log('‚úÖ Equipment created:', payload.display_name);
    return this.get(id);
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
   */
  async update(id: string, data: UpdateEquipmentRequest): Promise<Equipment> {
    const payload: any = {
      updated_at: new Date().toISOString()
    };

    // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π
    if (data.name) payload.name = data.name;
    if (data.display_name) payload.display_name = data.display_name;
    if (data.serial_number !== undefined) payload.serial_number = data.serial_number;
    if (data.external_id !== undefined) payload.external_id = data.external_id;
    if (data.params) payload.params = data.params;
    if (data.bindings) payload.bindings = data.bindings;
    if (data.installation_date) payload.installation_date = data.installation_date;

    console.log('üîß Updating equipment:', id, payload);

    const response = await supabaseDatabaseClient.patch(`/rest/v1/equipment?id=eq.${id}`, payload);

    if (!response.success) {
      console.error(`‚ùå Equipment update error (${id}):`, response.error);
      throw new Error(`Failed to update equipment: ${response.error}`);
    }

    console.log('‚úÖ Equipment updated:', id);
    return this.get(id);
  },

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async setStatus(id: string, action: EquipmentStatusAction): Promise<void> {
    let status: string;
    let deleted_at: string | null = null;

    switch (action) {
      case 'enable':
        status = 'online';
        break;
      case 'disable':
        status = 'disabled';
        break;
      case 'archive':
        status = 'archived';
        deleted_at = new Date().toISOString();
        break;
      default:
        throw new Error(`Unknown action: ${action}`);
    }

    console.log(`üîß Setting equipment status: ${id} -> ${action} (status: ${status})`);

    const response = await supabaseDatabaseClient.patch(`/rest/v1/equipment?id=eq.${id}`, {
      status,
      deleted_at,
      updated_at: new Date().toISOString()
    });

    if (!response.success) {
      console.error(`‚ùå Equipment status update error (${id}):`, response.error);
      throw new Error(`Failed to update equipment status: ${response.error}`);
    }

    console.log(`‚úÖ Equipment status updated: ${id} -> ${action}`);
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
   */
  async delete(id: string): Promise<void> {
    console.log('üóëÔ∏è Deleting equipment:', id);

    const response = await supabaseDatabaseClient.delete(`/rest/v1/equipment?id=eq.${id}`);

    if (!response.success) {
      console.error(`‚ùå Equipment delete error (${id}):`, response.error);
      throw new Error(`Failed to delete equipment: ${response.error}`);
    }

    console.log('‚úÖ Equipment deleted:', id);
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
   */
  async getEvents(id: string): Promise<EquipmentEvent[]> {
    console.log(`üìã Getting events for equipment: ${id}`);
    
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const currentSupabaseEquipmentAPI = supabaseEquipmentAPI;
export const equipmentSupabaseService = supabaseEquipmentAPI;
export const currentSupabaseEquipmentTemplatesAPI = supabaseEquipmentTemplatesAPI;