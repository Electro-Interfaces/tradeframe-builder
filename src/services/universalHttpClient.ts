/**
 * üåê –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô HTTP –ö–õ–ò–ï–ù–¢
 * 
 * –ï–¥–∏–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */

import { tradingNetworkConfigService } from './tradingNetworkConfigService';
import { apiConfigServiceDB } from './apiConfigServiceDB';
import { tokenRefreshService } from './tokenRefreshService';

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤
export type RequestDestination = 'external-api' | 'supabase' | 'internal';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ API
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  status?: number;
  headers?: Record<string, string>;
  responseTime?: number;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
export interface RequestConfig {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
  headers?: Record<string, string>;
  body?: any;
  timeout?: number;
  retryAttempts?: number;
  destination?: RequestDestination;
  useAuth?: boolean;
  customBaseUrl?: string;
  queryParams?: Record<string, string | number | boolean>;
}

class UniversalHttpClient {
  private requestInterceptors: ((config: RequestConfig) => RequestConfig)[] = [];
  private responseInterceptors: ((response: ApiResponse) => ApiResponse)[] = [];

  /**
   * üîß –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   */
  private async getBaseUrl(destination: RequestDestination): Promise<string> {
    switch (destination) {
      case 'external-api':
        try {
          const tradingConfig = await tradingNetworkConfigService.getConfig();
          if (!tradingConfig.baseUrl) {
            const errorMsg = '–ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"';
            console.error('‚ùå [HTTP CLIENT]', errorMsg);
            throw new Error(errorMsg);
          }
          console.log('üîß [HTTP CLIENT] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π URL:', tradingConfig.baseUrl);
          return tradingConfig.baseUrl;
        } catch (error) {
          const errorMsg = `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–Ω–µ—à–Ω–µ–≥–æ API: ${error instanceof Error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
          console.error('‚ùå [HTTP CLIENT] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', errorMsg);
          console.error('üí° [HTTP CLIENT] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏" –∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É system_config –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
          throw new Error(errorMsg);
        }
      
      case 'supabase':
        // –ü–†–Ø–ú–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö SUPABASE –ë–ï–ó –†–ê–ó–î–ï–õ–ê "–û–ë–ú–ï–ù –î–ê–ù–ù–´–ú–ò"
        const SUPABASE_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
        
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º proxy –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
        if (import.meta.env.DEV) {
          const port = window.location.port || '3000';
          return `http://localhost:${port}/supabase-proxy`;
        }
        
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL
        console.log('üîß [HTTP CLIENT] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase:', SUPABASE_URL);
        return SUPABASE_URL;
        
        // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fallback –Ω–∞ —Ä–∞–∑–¥–µ–ª "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
        /*
        try {
          const supabaseConnection = await apiConfigServiceDB.getCurrentConnection();
          if (!supabaseConnection?.url) {
            throw new Error('URL Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');
          }
          return supabaseConnection.url;
        } catch (error) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏": ' + (error instanceof Error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
        */
      
      case 'internal':
      default:
        throw new Error('–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ external-api –∏–ª–∏ supabase.');
    }
  }

  /**
   * üîê –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private async getAuthHeaders(destination: RequestDestination): Promise<Record<string, string>> {
    const headers: Record<string, string> = {};

    try {
      switch (destination) {
        case 'external-api':
          const tradingConfig = await tradingNetworkConfigService.getConfig();
          console.log('üîê [HTTP CLIENT] –¢–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', tradingConfig.authType);
        
        if (tradingConfig.authType === 'bearer') {
          // üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–û–ö–ï–ù–ê
          const tokenResult = await tokenRefreshService.ensureValidToken();
          
          if (!tokenResult.success) {
            const errorMsg = `–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Bearer: ${tokenResult.error}`;
            console.error('‚ùå [HTTP CLIENT]', errorMsg);
            throw new Error(errorMsg);
          }
          
          if (!tokenResult.newToken) {
            const errorMsg = 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"';
            console.error('‚ùå [HTTP CLIENT]', errorMsg);
            throw new Error(errorMsg);
          }
          
          headers['Authorization'] = `Bearer ${tokenResult.newToken}`;
          console.log('üîê [HTTP CLIENT] –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Bearer —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞');
          
        } else if (tradingConfig.authType === 'basic') {
          if (!tradingConfig.username || !tradingConfig.password) {
            const errorMsg = `–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. Username: "${tradingConfig.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}", Password: ${tradingConfig.password ? '—É–∫–∞–∑–∞–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`;
            console.error('‚ùå [HTTP CLIENT]', errorMsg);
            throw new Error(errorMsg);
          }
          const credentials = btoa(`${tradingConfig.username}:${tradingConfig.password}`);
          headers['Authorization'] = `Basic ${credentials}`;
          console.log('üîê [HTTP CLIENT] –ò—Å–ø–æ–ª—å–∑—É–µ–º Basic Auth:', tradingConfig.username);
        }
          break;
        
        case 'supabase':
          // –ü–†–Ø–ú–û–ô API –ö–õ–Æ–ß SUPABASE –ë–ï–ó –†–ê–ó–î–ï–õ–ê "–û–ë–ú–ï–ù –î–ê–ù–ù–´–ú–ò"
          const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';
          
          console.log('üîë [HTTP CLIENT] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–π API –∫–ª—é—á Supabase');
          headers['apikey'] = SUPABASE_SERVICE_ROLE_KEY;
          headers['Authorization'] = `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`;
          
          // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fallback –Ω–∞ —Ä–∞–∑–¥–µ–ª "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
          /*
          const supabaseConnection = await apiConfigServiceDB.getCurrentConnection();
          if (!supabaseConnection?.settings?.apiKey) {
            throw new Error('API –∫–ª—é—á Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
          }
          console.log('üîë DEBUG: Supabase connection settings:', {
            name: supabaseConnection.name,
            url: supabaseConnection.url,
            hasApiKey: !!supabaseConnection.settings.apiKey,
            apiKeyPreview: supabaseConnection.settings.apiKey ? supabaseConnection.settings.apiKey.substring(0, 50) + '...' : '–ù–ï–¢',
            fullKeyLength: supabaseConnection.settings.apiKey?.length || 0,
            keyEndsWithCorrect: supabaseConnection.settings.apiKey?.endsWith('kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY') || false
          });
          headers['apikey'] = supabaseConnection.settings.apiKey;
          headers['Authorization'] = `Bearer ${supabaseConnection.settings.apiKey}`;
          */
          break;
        
        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${destination}`);
      }
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + (error instanceof Error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }

    return headers;
  }

  /**
   * üìù –ü–æ—Å—Ç—Ä–æ–∏—Ç—å URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞
   */
  private buildUrl(baseUrl: string, endpoint: string, queryParams?: Record<string, string | number | boolean>): string {
    const url = new URL(endpoint.startsWith('http') ? endpoint : `${baseUrl}${endpoint.startsWith('/') ? '' : '/'}${endpoint}`);
    
    if (queryParams) {
      Object.entries(queryParams).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          url.searchParams.append(key, String(value));
        }
      });
    }

    return url.toString();
  }

  /**
   * üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  public async request<T = any>(
    endpoint: string,
    config: RequestConfig = {}
  ): Promise<ApiResponse<T>> {
    const startTime = Date.now();
    const {
      method = 'GET',
      headers: customHeaders = {},
      body,
      timeout = 30000,
      retryAttempts = 3,
      destination = 'external-api',
      useAuth = true,
      customBaseUrl,
      queryParams
    } = config;

    try {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      let finalConfig = { ...config };
      for (const interceptor of this.requestInterceptors) {
        finalConfig = interceptor(finalConfig);
      }

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL
      const baseUrl = customBaseUrl || await this.getBaseUrl(destination);
      
      // –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π URL
      const fullUrl = this.buildUrl(baseUrl, endpoint, queryParams);

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const authHeaders = useAuth ? await this.getAuthHeaders(destination) : {};

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const finalHeaders = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        ...authHeaders,
        ...customHeaders,
      };

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);

      console.log(`üåê [HTTP CLIENT] –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å:`, {
        method,
        url: fullUrl,
        destination,
        useAuth,
        hasAuthHeaders: Object.keys(authHeaders).length > 0,
        queryParams: queryParams || '–Ω–µ—Ç',
        bodySize: body ? JSON.stringify(body).length : 0
      });
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å API
      if (destination === 'external-api') {
        console.log(`üîç [HTTP CLIENT] –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É API:`, {
          endpoint,
          baseUrl,
          queryParams,
          authType: authHeaders['Authorization'] ? authHeaders['Authorization'].split(' ')[0] : '–Ω–µ—Ç',
          hasAuth: !!authHeaders['Authorization']
        });
      }

      const response = await fetch(fullUrl, {
        method,
        headers: finalHeaders,
        body: body ? JSON.stringify(body) : undefined,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
      let responseData: any;
      const contentType = response.headers.get('content-type');
      
      if (contentType?.includes('application/json')) {
        responseData = await response.json();
      } else {
        responseData = await response.text();
      }

      const responseTime = Date.now() - startTime;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      let apiResponse: ApiResponse<T> = {
        success: response.ok,
        data: responseData,
        status: response.status,
        responseTime,
        headers: Object.fromEntries(response.headers.entries()),
      };

      if (!response.ok) {
        apiResponse.error = `HTTP ${response.status}: ${response.statusText}`;
        if (responseData && typeof responseData === 'object' && responseData.message) {
          apiResponse.error = responseData.message;
        }
        
        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        console.error(`‚ùå [HTTP CLIENT] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:`, {
          status: response.status,
          statusText: response.statusText,
          url: fullUrl,
          responseData: responseData,
          headers: Object.fromEntries(response.headers.entries())
        });
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è 404
        if (response.status === 404) {
          console.error(`üí° [HTTP CLIENT] 404 Not Found - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏ endpoint:`, fullUrl);
        }
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –æ—Ç–≤–µ—Ç–∞
      for (const interceptor of this.responseInterceptors) {
        apiResponse = interceptor(apiResponse);
      }

      if (response.ok) {
        console.log(`‚úÖ [HTTP CLIENT] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:`, {
          status: response.status,
          responseTime: `${responseTime}ms`,
          dataType: Array.isArray(responseData) ? `–º–∞—Å—Å–∏–≤ (${responseData.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)` : typeof responseData,
          endpoint: endpoint
        });
      }
      
      return apiResponse;

    } catch (error: any) {
      const responseTime = Date.now() - startTime;
      
      console.error(`‚ùå [HTTP CLIENT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, {
        message: error.message,
        name: error.name,
        endpoint: endpoint,
        destination: destination,
        responseTime: `${responseTime}ms`,
        stack: error.stack
      });

      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (retryAttempts > 0 && !error.name?.includes('AbortError')) {
        console.log(`üîÑ Retrying request (${retryAttempts} attempts left)`);
        return this.request(endpoint, { ...config, retryAttempts: retryAttempts - 1 });
      }

      const errorResponse: ApiResponse<T> = {
        success: false,
        error: error.message || 'Network error',
        responseTime,
      };

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—à–∏–±–æ–∫
      let finalErrorResponse = errorResponse;
      for (const interceptor of this.responseInterceptors) {
        finalErrorResponse = interceptor(finalErrorResponse);
      }

      return finalErrorResponse;
    }
  }

  /**
   * üì• GET –∑–∞–ø—Ä–æ—Å
   */
  public async get<T = any>(endpoint: string, config: Omit<RequestConfig, 'method'> = {}): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'GET' });
  }

  /**
   * üì§ POST –∑–∞–ø—Ä–æ—Å
   */
  public async post<T = any>(endpoint: string, body?: any, config: Omit<RequestConfig, 'method' | 'body'> = {}): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'POST', body });
  }

  /**
   * üîÑ PUT –∑–∞–ø—Ä–æ—Å
   */
  public async put<T = any>(endpoint: string, body?: any, config: Omit<RequestConfig, 'method' | 'body'> = {}): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'PUT', body });
  }

  /**
   * ‚ùå DELETE –∑–∞–ø—Ä–æ—Å
   */
  public async delete<T = any>(endpoint: string, config: Omit<RequestConfig, 'method'> = {}): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'DELETE' });
  }

  /**
   * üîß PATCH –∑–∞–ø—Ä–æ—Å
   */
  public async patch<T = any>(endpoint: string, body?: any, config: Omit<RequestConfig, 'method' | 'body'> = {}): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'PATCH', body });
  }

  /**
   * üõ°Ô∏è –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
   */
  public addRequestInterceptor(interceptor: (config: RequestConfig) => RequestConfig): void {
    this.requestInterceptors.push(interceptor);
  }

  /**
   * üì® –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞
   */
  public addResponseInterceptor(interceptor: (response: ApiResponse) => ApiResponse): void {
    this.responseInterceptors.push(interceptor);
  }

  /**
   * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–µ–º—É API
   */
  public async testExternalApiConnection(): Promise<ApiResponse> {
    try {
      const tradingConfig = await tradingNetworkConfigService.getConfig();
      
      if (!tradingConfig.enabled) {
        return {
          success: false,
          error: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–∞.'
        };
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
      return await this.get(tradingConfig.endpoints.tanks, {
        destination: 'external-api',
        queryParams: {
          systemId: '1', // –¢–µ—Å—Ç–æ–≤—ã–π system ID
          stationId: '1' // –¢–µ—Å—Ç–æ–≤—ã–π station ID
        }
      });
    } catch (error: any) {
      return {
        success: false,
        error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`
      };
    }
  }

  /**
   * üîç –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  public async getConfigurationInfo(): Promise<{
    externalApi: any;
    supabase: any;
  }> {
    try {
      const [tradingConfig, supabaseConnection] = await Promise.all([
        tradingNetworkConfigService.getConfig(),
        apiConfigServiceDB.getCurrentConnection()
      ]);
      
      return {
        externalApi: {
          enabled: tradingConfig.enabled,
          baseUrl: tradingConfig.baseUrl,
          authType: tradingConfig.authType,
          hasCredentials: !!(tradingConfig.apiKey || (tradingConfig.username && tradingConfig.password)),
          endpoints: tradingConfig.endpoints
        },
        supabase: {
          url: supabaseConnection?.url,
          type: supabaseConnection?.type,
          hasApiKey: !!supabaseConnection?.settings?.apiKey
        }
      };
    } catch (error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ' + (error instanceof Error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  }

  /**
   * üåê –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Ç–∏
   */
  public async getNetworks(config?: { limit?: number; order?: string }): Promise<ApiResponse<any[]>> {
    const queryParams: Record<string, string> = {
      select: 'id,name,external_id,code'
    };
    
    if (config?.limit) {
      queryParams.limit = config.limit.toString();
    }
    
    if (config?.order) {
      queryParams.order = config.order;
    } else {
      queryParams.order = 'name';
    }

    return this.get('/rest/v1/networks', {
      destination: 'supabase',
      queryParams,
      timeout: 10000
    });
  }

  /**
   * üìç –ü–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –ø–æ network_id
   */
  public async getTradingPointsByNetworkId(networkId: string): Promise<ApiResponse<any[]>> {
    return this.get('/rest/v1/trading_points', {
      destination: 'supabase',
      queryParams: {
        select: 'id,name,external_id,network_id',
        network_id: `eq.${networkId}`,
        order: 'name'
      },
      timeout: 10000
    });
  }

  /**
   * üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –ø–æ ID
   */
  public async getTradingPointById(tradingPointId: string): Promise<ApiResponse<any>> {
    const response = await this.get('/rest/v1/trading_points', {
      destination: 'supabase',
      queryParams: {
        select: 'id,name,external_id,network_id',
        id: `eq.${tradingPointId}`
      },
      timeout: 10000
    });

    if (response.success && response.data && response.data.length > 0) {
      return {
        ...response,
        data: response.data[0]  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–∏–≤–∞
      };
    }

    return {
      success: false,
      error: '–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      status: 404
    };
  }

  /**
   * üîç –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ç—è—Ö
   */
  public async getAllTradingPointsWithNetworks(): Promise<ApiResponse<any[]>> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ç–∏
      const networksResponse = await this.getNetworks();
      if (!networksResponse.success || !networksResponse.data) {
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π'
        };
      }

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–µ—Ç–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const networksMap = new Map();
      networksResponse.data.forEach(network => {
        networksMap.set(network.id, network);
      });

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏
      const allTradingPoints: any[] = [];
      
      for (const network of networksResponse.data) {
        const tpResponse = await this.getTradingPointsByNetworkId(network.id);
        if (tpResponse.success && tpResponse.data) {
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏ –∫ –∫–∞–∂–¥–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ
          tpResponse.data.forEach(tp => {
            allTradingPoints.push({
              ...tp,
              networkInfo: network,
              systemId: network.external_id || network.code || '',
              stationId: tp.external_id || '',
              apiReady: !!(network.external_id || network.code) && !!tp.external_id
            });
          });
        }
      }

      return {
        success: true,
        data: allTradingPoints,
        status: 200
      };
    } catch (error: any) {
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —Å —Å–µ—Ç—è–º–∏'
      };
    }
  }

  /**
   * üéØ –ü–æ–ª—É—á–∏—Ç—å API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
   */
  public async getApiParamsForTradingPoint(tradingPointId: string): Promise<{
    success: boolean;
    systemId?: string;
    stationId?: string;
    networkInfo?: any;
    tradingPointInfo?: any;
    apiReady?: boolean;
    error?: string;
  }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É
      const tpResponse = await this.getTradingPointById(tradingPointId);
      if (!tpResponse.success || !tpResponse.data) {
        return {
          success: false,
          error: '–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        };
      }

      const tradingPoint = tpResponse.data;

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏
      const networkResponse = await this.get('/rest/v1/networks', {
        destination: 'supabase',
        queryParams: {
          select: 'id,name,external_id,code',
          id: `eq.${tradingPoint.network_id}`
        }
      });

      if (!networkResponse.success || !networkResponse.data || networkResponse.data.length === 0) {
        return {
          success: false,
          error: '–°–≤—è–∑–∞–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        };
      }

      const network = networkResponse.data[0];
      const systemId = network.external_id || network.code || '';
      const stationId = tradingPoint.external_id || '';

      return {
        success: true,
        systemId,
        stationId,
        networkInfo: network,
        tradingPointInfo: tradingPoint,
        apiReady: !!(systemId && stationId)
      };
    } catch (error: any) {
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const httpClient = new UniversalHttpClient();

// –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã
httpClient.addResponseInterceptor((response) => {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
  if (!response.success) {
    console.warn('üö® API Error:', response.error, response.status);
  }
  return response;
});

httpClient.addRequestInterceptor((config) => {
  // –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (config.headers) {
    config.headers['X-Request-Time'] = new Date().toISOString();
  }
  return config;
});

export default httpClient;