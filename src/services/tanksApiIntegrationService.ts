/**
 * üåê –¢–ê–ù–ö–ò API –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ï–†–í–ò–°
 * –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –≤–Ω–µ—à–Ω–∏–º API —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ universalHttpClient
 * 
 * –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
 * 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API —á–µ—Ä–µ–∑ universalHttpClient
 * 2. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–∫–∞ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
 * 3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ API –¥–∞–Ω–Ω—ã—Ö –≤ Tank –æ–±—ä–µ–∫—Ç—ã
 */

import { httpClient } from './universalHttpClient';
import { tradingNetworkConfigService } from './tradingNetworkConfigService';
import { Tank } from './tanksServiceSupabase';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API (–æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ)
interface TradingApiTank {
  number: number;
  fuel: number;
  fuel_name: string;
  state: number;
  volume_end: string;    // –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º
  volume_max: string;    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º  
  temperature: string;   // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
  density: string;       // –ü–ª–æ—Ç–Ω–æ—Å—Ç—å
  water: {
    level: string;       // –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥—Ç–æ–≤–∞—Ä–Ω–æ–π –≤–æ–¥—ã
  };
  release?: {           // –î–∞–Ω–Ω—ã–µ –æ –≤—ã–¥–∞—á–µ —Ç–æ–ø–ª–∏–≤–∞
    volume: string;     // –û–±—ä–µ–º –≤—ã–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞
    amount: string;     // –°—É–º–º–∞ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞
  };
  dt: string;           // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ API - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –≤ –ø–æ–ª–µ tanks
type TanksApiResponse = TradingApiTank[];

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ API
const fuelTypeMapping: Record<number, string> = {
  1: '–ê–ò-80',
  2: '–ê–ò-92', 
  3: '–ê–ò-95',
  4: '–ê–ò-98',
  5: '–î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ',
  6: '–ì–∞–∑',
  7: '–ö–µ—Ä–æ—Å–∏–Ω'
};

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
const tankStatusMapping: Record<number, string> = {
  0: 'offline',
  1: 'active', 
  2: 'maintenance',
  3: 'error',
  4: 'critical'
};

class TanksApiIntegrationService {
  
  /**
   * üöÄ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API —á–µ—Ä–µ–∑ universalHttpClient
   * –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï API –î–ê–ù–ù–´–ï - –ë–ï–ó –î–ï–ú–û!
   */
  async getTanksFromApi(tradingPointId: string): Promise<Tank[]> {
    console.log(`üåê [TANKS API] –†–ï–ê–õ–¨–ù–´–ô –∑–∞–ø—Ä–æ—Å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¢–ü: ${tradingPointId}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
      const config = await tradingNetworkConfigService.getConfig();
      
      if (!config.enabled) {
        throw new Error('–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –í–∫–ª—é—á–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"');
      }

      if (!config.endpoints.tanks) {
        throw new Error('–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"');
      }

      // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤–Ω–µ—à–Ω–∏—Ö ID (–æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —Å–µ—Ç–∏ –∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏)
      const apiParams = await this.getApiParams(tradingPointId);
      if (!apiParams.systemId || !apiParams.stationId) {
        throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω—ã API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ ${tradingPointId}. System ID: ${apiParams.systemId}, Station ID: ${apiParams.stationId}`);
      }

      console.log(`üîó [TANKS API] –ò—Å–ø–æ–ª—å–∑—É–µ–º API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: system=${apiParams.systemId}, station=${apiParams.stationId}`);
      console.log(`üåê [TANKS API] –ü–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞: ${config.baseUrl}${config.endpoints.tanks}`);
      console.log(`üìã [TANKS API] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:`, { system: apiParams.systemId, station: apiParams.stationId });

      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ universalHttpClient —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const response = await httpClient.get<TanksApiResponse>(config.endpoints.tanks, {
        destination: 'external-api',
        queryParams: {
          system: apiParams.systemId,   // external_id —Å–µ—Ç–∏
          station: apiParams.stationId  // external_id —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
        }
      });

      if (!response.success) {
        console.error(`‚ùå [TANKS API] –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:`);
        console.error(`üìç URL: ${config.baseUrl}${config.endpoints.tanks}`);
        console.error(`üìã Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, { system: externalId, station: externalId });
        console.error(`üî¢ HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        console.error(`üí¨ –û—à–∏–±–∫–∞: ${response.error}`);
        console.error(`üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, response.data);
        
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞
        if (response.data && typeof response.data === 'object') {
          console.error(`üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));
        }
        
        throw new Error(`–û—à–∏–±–∫–∞ API: HTTP ${response.status}: ${response.error}`);
      }

      // –û—Ç–ª–∞–¥–∫–∞: –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–µ—Ä–Ω—É–ª API
      console.log(`üì¶ [TANKS API] –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, response.data);
      console.log(`üîç [TANKS API] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));

      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –≤ –ø–æ–ª–µ tanks
      if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {
        console.warn(`‚ö†Ô∏è [TANKS API] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ API:`);
        console.warn(`- response.data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`, !!response.data);
        console.warn(`- response.data —ç—Ç–æ –º–∞—Å—Å–∏–≤:`, Array.isArray(response.data));
        console.warn(`- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:`, response.data ? response.data.length : 0);
        
        throw new Error('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤');
      }

      console.log(`‚úÖ [TANKS API] –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ API`);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ API –≤ Tank –æ–±—ä–µ–∫—Ç—ã –ë–ï–ó –ü–†–û–í–ï–†–ö–ò –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
      const tanks = this.convertApiDataToTanksDynamic(response.data, tradingPointId);
      
      console.log(`‚úÖ [TANKS API] –ü–æ–ª—É—á–µ–Ω–æ ${tanks.length} –†–ï–ê–õ–¨–ù–´–• —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ API`);
      return tanks;

    } catch (error) {
      console.error('‚ùå [TANKS API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * üì° –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ó–ï–†–í–£–ê–†–û–í –ò–ó API
   * –ë–ï–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –†–ê–ó–î–ï–õ–ê –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø
   */
  async getTanksFromApiDynamic(tradingPointId: string): Promise<Tank[]> {
    console.log(`üöÄ [TANKS API DYNAMIC] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –¢–ü: ${tradingPointId}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
      const config = await tradingNetworkConfigService.getConfig();
      
      if (!config.enabled) {
        throw new Error('–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –í–∫–ª—é—á–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"');
      }

      if (!config.endpoints.tanks) {
        throw new Error('–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"');
      }

      // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤–Ω–µ—à–Ω–∏—Ö ID
      const apiParams = await this.getApiParams(tradingPointId);
      if (!apiParams.systemId || !apiParams.stationId) {
        throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω—ã API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ ${tradingPointId}. System ID: ${apiParams.systemId}, Station ID: ${apiParams.stationId}`);
      }

      console.log(`üîó [TANKS API DYNAMIC] –ò—Å–ø–æ–ª—å–∑—É–µ–º API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: system=${apiParams.systemId}, station=${apiParams.stationId}`);

      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ universalHttpClient
      const response = await httpClient.get<TanksApiResponse>(config.endpoints.tanks, {
        destination: 'external-api',
        queryParams: {
          system: apiParams.systemId,
          station: apiParams.stationId
        }
      });

      if (!response.success) {
        console.error(`‚ùå [TANKS API DYNAMIC] –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:`, response.error);
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API: ${response.error}`);
      }

      if (!response.data || !Array.isArray(response.data)) {
        console.log('‚ö†Ô∏è [TANKS API DYNAMIC] API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        return [];
      }

      console.log(`üì¶ [TANKS API DYNAMIC] –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ API`);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ API –≤ Tank –æ–±—ä–µ–∫—Ç—ã –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      const tanks = this.convertApiDataToTanksDynamic(response.data, tradingPointId);
      
      console.log(`‚úÖ [TANKS API DYNAMIC] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ ${tanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤`);
      return tanks;

    } catch (error) {
      console.error('‚ùå [TANKS API DYNAMIC] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * üîÑ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö API –≤ Tank –æ–±—ä–µ–∫—Ç—ã
   * –ë–ï–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–• –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø
   */
  private convertApiDataToTanksDynamic(apiTanks: TradingApiTank[], tradingPointId: string): Tank[] {
    return apiTanks.map((apiTank) => {
      const currentVolume = parseFloat(apiTank.volume_end) || 0;
      const maxVolume = parseFloat(apiTank.volume_max) || 10000;
      const levelPercent = maxVolume > 0 ? (currentVolume / maxVolume) * 100 : 0;
      
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é)
      const defaultMinLevelPercent = 20;
      const defaultCriticalLevelPercent = 10;
      
      const tank: Tank = {
        id: `tank_${tradingPointId}_${apiTank.number}`,
        name: `–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ${apiTank.number}`,
        fuelType: apiTank.fuel_name || `–¢–æ–ø–ª–∏–≤–æ ${apiTank.fuel}`,
        currentLevelLiters: currentVolume,
        bookBalance: parseFloat(apiTank.amount_end) || 0,
        capacityLiters: maxVolume,
        minLevelPercent: defaultMinLevelPercent,
        criticalLevelPercent: defaultCriticalLevelPercent,
        temperature: parseFloat(apiTank.temperature) || 20,
        waterLevelMm: parseFloat(apiTank.water?.level) || 0,
        density: parseFloat(apiTank.density) || 0.832,
        status: apiTank.state === 1 ? 'active' : 'offline',
        location: `–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ ${tradingPointId}`,
        installationDate: new Date().toISOString(),
        lastCalibration: apiTank.dt || new Date().toISOString(),
        supplier: null,
        
        // –°–µ–Ω—Å–æ—Ä—ã
        sensors: [
          {
            name: '–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞',
            status: apiTank.state === 1 ? 'ok' : 'error'
          },
          {
            name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 
            status: apiTank.state === 1 ? 'ok' : 'error'
          }
        ],
        
        // –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
        linkedPumps: [],
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications: {
          enabled: true,
          drainAlerts: true,
          levelAlerts: true
        },
        
        // –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        thresholds: {
          criticalTemp: {
            min: -10,
            max: 50
          },
          maxWaterLevel: 10,
          notifications: {
            critical: true,
            warning: true,
            info: false
          }
        }
      };
      
      console.log(`üõ¢Ô∏è [TANKS API DYNAMIC] –†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ${apiTank.number}: ${apiTank.fuel_name} | ${currentVolume.toFixed(2)}/${maxVolume.toFixed(2)}–ª (${Math.round(levelPercent)}%) | ${apiTank.temperature}¬∞C | ${apiTank.density}–∫–≥/–º¬≥ | –º–∏–Ω=${defaultMinLevelPercent}% –∫—Ä–∏—Ç=${defaultCriticalLevelPercent}%`);
      
      return tank;
    });
  }

  /**
   * üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö API –≤ Tank –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  private async convertApiDataToTanks(apiTanks: TradingApiTank[], tradingPointId: string): Promise<Tank[]> {
    const tanks = await Promise.all(apiTanks.map(async (apiTank) => {
      const currentVolume = parseFloat(apiTank.volume_end) || 0;
      const maxVolume = parseFloat(apiTank.volume_max) || 10000;
      const levelPercent = maxVolume > 0 ? (currentVolume / maxVolume) * 100 : 0;
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ –∏–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      let equipmentSettings = { minLevelPercent: 20, criticalLevelPercent: 10 };
      try {
        const { equipmentSupabaseService } = await import('./equipmentSupabase');
        const equipmentList = await equipmentSupabaseService.list({
          trading_point_id: tradingPointId,
          system_type: 'fuel_tank'
        });
        
        // –ò—â–µ–º —Ä–µ–∑–µ—Ä–≤—É–∞—Ä –ø–æ –Ω–æ–º–µ—Ä—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        const matchingEquipment = equipmentList.data?.find(eq => 
          eq.name.includes(`${apiTank.number}`) || 
          eq.display_name?.includes(`${apiTank.number}`)
        );
        
        if (matchingEquipment) {
          console.log(`üîß –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ ${apiTank.number}:`, {
            id: matchingEquipment.id,
            name: matchingEquipment.name,
            displayName: matchingEquipment.display_name,
            params: matchingEquipment.params,
            defaultParams: matchingEquipment.default_params
          });
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
          const params = matchingEquipment.params || {};
          const defaultParams = matchingEquipment.default_params || {};
          
          // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –≥–¥–µ –º–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø–æ—Ä–æ–≥–∏
          const minLevel = params.minLevelPercent ?? params.min_level_percent ?? 
                          defaultParams.minLevelPercent ?? defaultParams.min_level_percent ?? 
                          params.minLevel ?? defaultParams.minLevel ?? 0;
                          
          const critLevel = params.criticalLevelPercent ?? params.critical_level_percent ?? 
                           defaultParams.criticalLevelPercent ?? defaultParams.critical_level_percent ??
                           params.criticalLevel ?? defaultParams.criticalLevel ?? 0;
          
          equipmentSettings = {
            minLevelPercent: typeof minLevel === 'number' ? minLevel : 0,
            criticalLevelPercent: typeof critLevel === 'number' ? critLevel : 0
          };
          
          console.log(`üìä –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ ${apiTank.number}:`, equipmentSettings);
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π params:`, Object.keys(params));
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π defaultParams:`, Object.keys(defaultParams));
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è [TANKS API] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ ‚Ññ${apiTank.number}:`, error);
      }
      
      const tank: Tank = {
        id: `tank_${tradingPointId}_${apiTank.number}`,
        name: `–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ${apiTank.number}`,
        fuelType: fuelTypeMapping[apiTank.fuel] || apiTank.fuel_name || `–¢–∏–ø ${apiTank.fuel}`,
        currentLevelLiters: currentVolume,
        capacityLiters: maxVolume,
        bookBalance: currentVolume, // –ö–Ω–∏–∂–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Ä–∞–≤–µ–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É
        minLevelPercent: equipmentSettings.minLevelPercent,
        criticalLevelPercent: equipmentSettings.criticalLevelPercent,
        temperature: parseFloat(apiTank.temperature) || 20,
        waterLevelMm: parseFloat(apiTank.water?.level) || 0,
        density: parseFloat(apiTank.density) || 832,
        status: tankStatusMapping[apiTank.state] || 'active',
        location: `–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ ${tradingPointId}`,
        installationDate: new Date().toISOString(),
        lastUpdateTime: apiTank.dt,
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å API
        apiData: {
          levelPercent: Math.round(levelPercent * 10) / 10, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
          releaseVolume: apiTank.release ? parseFloat(apiTank.release.volume) : 0,
          releaseAmount: apiTank.release ? parseFloat(apiTank.release.amount) : 0,
          fuelCode: apiTank.fuel,
          stateCode: apiTank.state,
          lastSync: apiTank.dt
        },
        
        // –°—Ç–∞—Ç—É—Å –¥–∞—Ç—á–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        sensors: [
          {
            name: '–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞',
            status: apiTank.state === 1 ? 'ok' : (apiTank.state === 0 ? 'offline' : 'error'),
            value: `${Math.round(levelPercent)}%`,
            lastUpdate: apiTank.dt
          },
          {
            name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 
            status: apiTank.temperature ? 'ok' : 'error',
            value: `${parseFloat(apiTank.temperature) || 0}¬∞C`,
            lastUpdate: apiTank.dt
          },
          {
            name: '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å',
            status: apiTank.density ? 'ok' : 'warning',
            value: `${parseFloat(apiTank.density) || 0} –∫–≥/–º¬≥`,
            lastUpdate: apiTank.dt
          },
          {
            name: '–ü–æ–¥—Ç–æ–≤–∞—Ä–Ω–∞—è –≤–æ–¥–∞',
            status: parseFloat(apiTank.water?.level) > 5 ? 'warning' : 'ok',
            value: `${parseFloat(apiTank.water?.level) || 0} –º–º`,
            lastUpdate: apiTank.dt
          }
        ],
        
        linkedPumps: [],
        
        notifications: {
          enabled: true,
          drainAlerts: true,
          levelAlerts: true
        },
        
        thresholds: {
          criticalTemp: {
            min: -10,
            max: 50
          },
          maxWaterLevel: 10,
          notifications: {
            critical: true,
            warning: true,
            info: false
          }
        }
      };

      console.log(`üõ¢Ô∏è [TANKS API] –†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ${apiTank.number}: ${tank.fuelType} | ${currentVolume}/${maxVolume}–ª (${Math.round(levelPercent)}%) | ${apiTank.temperature}¬∞C | ${apiTank.density}–∫–≥/–º¬≥ | –º–∏–Ω=${equipmentSettings.minLevelPercent}% –∫—Ä–∏—Ç=${equipmentSettings.criticalLevelPercent}%`);
      
      return tank;
    }));
    
    return tanks;
  }

  /**
   * üÜî –ü–æ–ª—É—á–µ–Ω–∏–µ API –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (system –∏ station) –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
   */
  private async getApiParams(tradingPointId: string): Promise<{ systemId: string; stationId: string }> {
    try {
      console.log(`üîç [TANKS API] –ü–æ–ª—É—á–µ–Ω–∏–µ API –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏: ${tradingPointId}`);
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º tradingPointsService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ
      const { tradingPointsService } = await import('./tradingPointsService');
      
      const tradingPoint = await tradingPointsService.getById(tradingPointId);
      if (!tradingPoint) {
        console.error(`‚ùå [TANKS API] –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ ${tradingPointId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return { systemId: '', stationId: '' };
      }

      console.log(`‚úÖ [TANKS API] –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:`, {
        id: tradingPoint.id,
        name: tradingPoint.name,
        external_id: tradingPoint.external_id,
        networkId: tradingPoint.networkId,
        code: tradingPoint.code
      });

      // Station ID = external_id —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
      const stationId = tradingPoint.external_id || tradingPoint.code || '';
      
      if (!stationId) {
        console.error(`‚ùå [TANKS API] –£ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ ${tradingPoint.name} –ù–ï–¢ external_id –∏–ª–∏ code!`);
        return { systemId: '', stationId: '' };
      }

      console.log(`‚úÖ [TANKS API] Station ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: "${stationId}"`);

      // System ID = external_id —Å–µ—Ç–∏ (–ø–æ–ª—É—á–∞–µ–º –∏–∑ network_id)
      let systemId = '';
      
      if (!tradingPoint.networkId) {
        console.error(`‚ùå [TANKS API] –£ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ ${tradingPoint.name} –ù–ï–¢ networkId!`);
        return { systemId: '', stationId };
      }

      console.log(`üîç [TANKS API] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–∏ –ø–æ ID: ${tradingPoint.networkId}`);
      
      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º networksService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ç–∏
        const { networksService } = await import('./networksService');
        
        const network = await networksService.getById(tradingPoint.networkId);
        
        if (!network) {
          console.error(`‚ùå [TANKS API] –°–µ—Ç—å ${tradingPoint.networkId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
          return { systemId: '', stationId };
        }

        console.log(`‚úÖ [TANKS API] –°–µ—Ç—å –Ω–∞–π–¥–µ–Ω–∞:`, {
          id: network.id,
          name: network.name,
          external_id: network.external_id,
          code: network.code,
          status: network.status
        });

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å system ID –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
        systemId = network.external_id || network.code || network.name || '';
        
        console.log(`üîç [TANKS API] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å System ID:`, {
          external_id: network.external_id,
          code: network.code,
          name: network.name,
          result: systemId
        });
        
        if (!systemId) {
          console.error(`‚ùå [TANKS API] –£ —Å–µ—Ç–∏ ${network.name} –ù–ï–¢ external_id, code –∏–ª–∏ name! –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞!`);
          console.log(`üí° [TANKS API] –†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å external_id –≤ —Å–µ—Ç—å "${network.name}" –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
          return { systemId: '', stationId };
        }

        console.log(`‚úÖ [TANKS API] System ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: "${systemId}"`);
        
      } catch (networkError) {
        console.error(`‚ùå [TANKS API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–∏ ${tradingPoint.networkId}:`, networkError);
        return { systemId: '', stationId };
      }

      console.log(`üìã [TANKS API] –ò–¢–û–ì–û–í–´–ï API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ${tradingPoint.name}:`);
      console.log(`   System ID: "${systemId}"`);
      console.log(`   Station ID: "${stationId}"`);
      console.log(`   –û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: ${systemId && stationId ? '‚úÖ' : '‚ùå'}`);
      
      return {
        systemId: systemId || '',
        stationId: stationId || ''
      };
      
    } catch (error) {
      console.error(`‚ùå [TANKS API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è ${tradingPointId}:`, error);
      return { systemId: '', stationId: '' };
    }
  }

  /**
   * ‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –î–ê–ù–ù–´–ï - –£–î–ê–õ–ï–ù–´!
   * –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏–ª–∏ –±–∞–∑—ã
   */
  private generateDemoTanks(tradingPointId: string): Tank[] {
    console.log(`üé≠ [TANKS DEMO] –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –¥–ª—è ${tradingPointId}`);
    
    const demoTanks: Tank[] = [
      {
        id: `demo_tank_${tradingPointId}_1`,
        name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ1',
        fuelType: '–ê–ò-92',
        currentLevelLiters: 8500,
        capacityLiters: 10000,
        bookBalance: 8500,
        minLevelPercent: 20,
        criticalLevelPercent: 10,
        temperature: 22,
        waterLevelMm: 2,
        density: 0.745,
        status: 'active',
        location: `–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ ${tradingPointId}`,
        installationDate: '2024-01-15T08:00:00.000Z',
        lastUpdateTime: new Date().toISOString(),
        sensors: [
          { name: '–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞', status: 'ok' },
          { name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', status: 'ok' },
          { name: '–ü–æ–¥—Ç–æ–≤–∞—Ä–Ω–∞—è –≤–æ–¥–∞', status: 'ok' }
        ],
        linkedPumps: [],
        notifications: { enabled: true, drainAlerts: true, levelAlerts: true },
        thresholds: {
          criticalTemp: { min: -10, max: 50 },
          maxWaterLevel: 10,
          notifications: { critical: true, warning: true, info: false }
        }
      },
      {
        id: `demo_tank_${tradingPointId}_2`,
        name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ2', 
        fuelType: '–ê–ò-95',
        currentLevelLiters: 6200,
        capacityLiters: 8000,
        bookBalance: 6200,
        minLevelPercent: 20,
        criticalLevelPercent: 10,
        temperature: 24,
        waterLevelMm: 1,
        density: 0.750,
        status: 'active',
        location: `–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ ${tradingPointId}`,
        installationDate: '2024-01-15T08:00:00.000Z',
        lastUpdateTime: new Date().toISOString(),
        sensors: [
          { name: '–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞', status: 'ok' },
          { name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', status: 'ok' },
          { name: '–ü–æ–¥—Ç–æ–≤–∞—Ä–Ω–∞—è –≤–æ–¥–∞', status: 'warning' }
        ],
        linkedPumps: [],
        notifications: { enabled: true, drainAlerts: true, levelAlerts: true },
        thresholds: {
          criticalTemp: { min: -10, max: 50 },
          maxWaterLevel: 10,
          notifications: { critical: true, warning: true, info: false }
        }
      },
      {
        id: `demo_tank_${tradingPointId}_3`,
        name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ3',
        fuelType: '–î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ',
        currentLevelLiters: 1200,
        capacityLiters: 12000,
        bookBalance: 1200,
        minLevelPercent: 20,
        criticalLevelPercent: 10,
        temperature: 18,
        waterLevelMm: 5,
        density: 0.832,
        status: 'warning', // –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
        location: `–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ ${tradingPointId}`,
        installationDate: '2024-01-15T08:00:00.000Z',
        lastUpdateTime: new Date().toISOString(),
        sensors: [
          { name: '–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞', status: 'error' },
          { name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', status: 'ok' },
          { name: '–ü–æ–¥—Ç–æ–≤–∞—Ä–Ω–∞—è –≤–æ–¥–∞', status: 'warning' }
        ],
        linkedPumps: [],
        notifications: { enabled: true, drainAlerts: true, levelAlerts: true },
        thresholds: {
          criticalTemp: { min: -10, max: 50 },
          maxWaterLevel: 10,
          notifications: { critical: true, warning: true, info: false }
        }
      }
    ];

    demoTanks.forEach(tank => {
      console.log(`üé≠ [DEMO] –°–æ–∑–¥–∞–Ω –¥–µ–º–æ-—Ä–µ–∑–µ—Ä–≤—É–∞—Ä: ${tank.name} | ${tank.fuelType} | ${tank.currentLevelLiters}/${tank.capacityLiters}–ª | ${tank.status}`);
    });
    
    return demoTanks;
  }

  /**
   * üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ï–ó–ï–†–í–£–ê–†–û–í –ò–ó API –í –ë–ê–ó–£ –î–ê–ù–ù–´–•
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É Supabase
   */
  async syncTanksFromApi(tradingPointId: string): Promise<{
    created: Tank[];
    updated: Tank[];
    errors: string[];
  }> {
    console.log(`üîÑ [TANKS SYNC] –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ API –¥–ª—è –¢–ü: ${tradingPointId}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
      const apiTanks = await this.getTanksFromApi(tradingPointId);
      
      if (apiTanks.length === 0) {
        console.log('‚ö†Ô∏è [TANKS SYNC] API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö');
        return {
          created: [],
          updated: [],
          errors: ['API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö']
        };
      }

      console.log(`üì° [TANKS SYNC] –ü–æ–ª—É—á–µ–Ω–æ ${apiTanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ API, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –±–∞–∑–æ–π...`);

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      const { tanksService } = await import('./tanksServiceSupabase');
      
      const created: Tank[] = [];
      const updated: Tank[] = [];
      const errors: string[] = [];

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä
      for (const tank of apiTanks) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä –≤ –±–∞–∑–µ
          const existingTanks = await tanksService.getTanks(tradingPointId);
          const existingTank = existingTanks.find(t => 
            t.name === tank.name || 
            t.id === tank.id ||
            (t.name.includes(tank.name.match(/‚Ññ(\d+)/)?.[1] || '') && tank.name.includes(t.name.match(/‚Ññ(\d+)/)?.[1] || ''))
          );

          if (existingTank) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä
            console.log(`üîÑ [TANKS SYNC] –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä: ${tank.name}`);
            
            const updatedTank = {
              ...existingTank,
              ...tank,
              id: existingTank.id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID –∏–∑ –±–∞–∑—ã
              lastUpdateTime: new Date().toISOString()
            };
            
            const updateResult = await tanksService.updateTank(existingTank.id, updatedTank);
            if (updateResult) {
              updated.push(updatedTank);
              console.log(`‚úÖ [TANKS SYNC] –†–µ–∑–µ—Ä–≤—É–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: ${tank.name}`);
            } else {
              errors.push(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä: ${tank.name}`);
            }
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä
            console.log(`‚ûï [TANKS SYNC] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä: ${tank.name}`);
            
            const newTank = {
              ...tank,
              trading_point_id: tradingPointId,
              created_at: new Date().toISOString(),
              lastUpdateTime: new Date().toISOString()
            };
            
            const createResult = await tanksService.createTank(newTank);
            if (createResult) {
              created.push(newTank);
              console.log(`‚úÖ [TANKS SYNC] –†–µ–∑–µ—Ä–≤—É–∞—Ä —Å–æ–∑–¥–∞–Ω: ${tank.name}`);
            } else {
              errors.push(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä: ${tank.name}`);
            }
          }
        } catch (tankError) {
          const errorMsg = `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ ${tank.name}: ${tankError instanceof Error ? tankError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
          console.error(`‚ùå [TANKS SYNC] ${errorMsg}`);
          errors.push(errorMsg);
        }
      }

      console.log(`üèÅ [TANKS SYNC] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–æ–∑–¥–∞–Ω–æ ${created.length}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updated.length}, –æ—à–∏–±–æ–∫ ${errors.length}`);
      
      return {
        created,
        updated,
        errors
      };

    } catch (error) {
      const errorMsg = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
      console.error(`‚ùå [TANKS SYNC] ${errorMsg}`);
      
      return {
        created: [],
        updated: [],
        errors: [errorMsg]
      };
    }
  }

  /**
   * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
   */
  async testApiConnection(): Promise<{ success: boolean; message: string; data?: any }> {
    try {
      console.log('üß™ [TANKS API] –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤...');
      
      const config = await tradingNetworkConfigService.getConfig();
      
      if (!config.enabled) {
        return {
          success: false,
          message: '–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'
        };
      }

      if (!config.endpoints.tanks) {
        return {
          success: false,
          message: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        };
      }

      // –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const response = await httpClient.get<TanksApiResponse>(config.endpoints.tanks, {
        destination: 'external-api',
        queryParams: {
          system: '1', // –¢–µ—Å—Ç–æ–≤—ã–π ID - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
          station: '1'
        }
      });

      if (response.success) {
        return {
          success: true,
          message: `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ. –°—Ç–∞—Ç—É—Å: ${response.status}. –†–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤: ${Array.isArray(response.data) ? response.data.length : 0}`,
          data: response.data
        };
      } else {
        return {
          success: false,
          message: `–û—à–∏–±–∫–∞ API: ${response.error}`
        };
      }
      
    } catch (error: any) {
      console.error('‚ùå [TANKS API] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const tanksApiIntegrationService = new TanksApiIntegrationService();