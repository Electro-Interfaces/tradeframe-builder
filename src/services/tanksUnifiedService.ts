/**
 * –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –°–ï–†–í–ò–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ó–ï–†–í–£–ê–†–ê–ú–ò
 * 
 * –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
 * 1. –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * 2. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å –≤–Ω–µ—à–Ω–∏–º API
 * 3. –í—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã - –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
 * 4. –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å API –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É
 */

import { tanksService, Tank } from './tanksServiceSupabase';
import { Equipment } from '@/types/equipment';
import { tanksApiIntegrationService } from './tanksApiIntegrationService';

export interface TanksLoadResult {
  tanks: Tank[];
  source: 'database' | 'api' | 'mock';
  synchronized: boolean;
  error?: string;
}

class TanksUnifiedService {
  
  /**
   * üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –†–ï–ó–ï–†–í–£–ê–†–û–í
   * –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï –ò–ó API –ë–ï–ó –ü–†–ò–í–Ø–ó–ö–ò –ö –†–ê–ó–î–ï–õ–£ –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø
   */
  async getTanksForTradingPoint(tradingPointId: string): Promise<TanksLoadResult> {
    console.log(`üîç [TANKS UNIFIED] ===== –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£ –†–ï–ó–ï–†–í–£–ê–†–û–í =====`);
    console.log(`üîç [TANKS UNIFIED] ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏: "${tradingPointId}"`);
    
    if (!tradingPointId || tradingPointId === "all") {
      console.log(`‚ùå [TANKS UNIFIED] –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "all"`);
      return {
        tanks: [],
        source: 'api',
        synchronized: false,
        error: '–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞'
      };
    }

    try {
      console.log(`üè™ [TANKS UNIFIED] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏: ${tradingPointId}`);
      
      // –ó–ê–ì–†–£–ñ–ê–ï–ú –¢–û–õ–¨–ö–û –ò–ó API - –ë–ï–ó –ü–†–û–í–ï–†–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
      console.log(`üì° [TANKS UNIFIED] –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API...`);
      const apiTanks = await tanksApiIntegrationService.getTanksFromApi(tradingPointId);
      
      if (apiTanks.length > 0) {
        console.log(`‚úÖ [TANKS UNIFIED] –ü–æ–ª—É—á–µ–Ω–æ ${apiTanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ API (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)`);
        return {
          tanks: apiTanks,
          source: 'api',
          synchronized: true
        };
      }
      
      // –ï–°–õ–ò API –ù–ï –í–ï–†–ù–£–õ –î–ê–ù–ù–´–• - –û–®–ò–ë–ö–ê
      console.error('‚ùå [TANKS UNIFIED] API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö');
      
      return {
        tanks: [],
        source: 'api',
        synchronized: false,
        error: '–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"'
      };
      
    } catch (error) {
      console.error('‚ùå [TANKS UNIFIED] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      return {
        tanks: [],
        source: 'api',
        synchronized: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ API'
      };
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async getTanksFromDatabase(tradingPointId: string): Promise<Tank[]> {
    try {
      console.log(`üîç [getTanksFromDatabase] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É tanks –¥–ª—è —Ç–æ—á–∫–∏: ${tradingPointId}`);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tanks
      const dbTanks = await tanksService.getTanks(tradingPointId);
      console.log(`üîç [getTanksFromDatabase] –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ tanksService.getTanks():`, dbTanks);
      
      if (dbTanks && dbTanks.length > 0) {
        console.log(`üìä [getTanksFromDatabase] –ù–ê–ô–î–ï–ù–û! –ü–æ–ª—É—á–µ–Ω–æ ${dbTanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tanks`);
        console.log(`üìä [getTanksFromDatabase] –ü–µ—Ä–≤—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä:`, dbTanks[0]);
        return dbTanks;
      }
      
      // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º equipment –∫–∞–∫ fallback
      console.log(`‚ö†Ô∏è [getTanksFromDatabase] Fallback –Ω–∞ equipment –û–¢–ö–õ–Æ–ß–ï–ù - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ API`);
      
      // –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ tanks –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É equipment
      // const equipmentTanks = await this.getTanksFromEquipment(tradingPointId);
      
      // if (equipmentTanks.length > 0) {
      //   console.log(`üè≠ –ü–æ–ª—É—á–µ–Ω–æ ${equipmentTanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã equipment`);
      //   return equipmentTanks;
      // }
      
      return [];
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã:', error);
      return [];
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã equipment (–∫–∞–∫ fallback)
   */
  private async getTanksFromEquipment(tradingPointId: string): Promise<Tank[]> {
    try {
      const { equipmentSupabaseService } = await import('./equipmentSupabase');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ fuel_tank –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
      const equipmentList = await equipmentSupabaseService.list({
        trading_point_id: tradingPointId,
        system_type: 'fuel_tank'
      });
      
      if (!equipmentList.data || equipmentList.data.length === 0) {
        console.log(`üì≠ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ fuel_tank –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ ${tradingPointId}`);
        return [];
      }
      
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${equipmentList.data.length} –µ–¥–∏–Ω–∏—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ fuel_tank`);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Equipment –≤ Tank
      const tanks: Tank[] = equipmentList.data.map((equipment, index) => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ default_params –µ—Å–ª–∏ –µ—Å—Ç—å
        const params = equipment.params || {};
        const defaultParams = equipment.default_params || {};
        
        // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        const getFuelTypeFromName = (name: string): string => {
          const lowerName = name.toLowerCase();
          if (lowerName.includes('–¥—Ç') || lowerName.includes('–¥–∏–∑–µ–ª—å')) return '–î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ';
          if (lowerName.includes('–∞–∏-95') || lowerName.includes('95')) return '–ê–ò-95';
          if (lowerName.includes('–∞–∏-92') || lowerName.includes('92')) return '–ê–ò-92';
          if (lowerName.includes('–∞–∏-98') || lowerName.includes('98')) return '–ê–ò-98';
          if (lowerName.includes('–≥–∞–∑')) return '–ì–∞–∑';
          return '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø';
        };
        
        const tank: Tank = {
          id: equipment.id,
          name: equipment.display_name || equipment.name,
          fuelType: getFuelTypeFromName(equipment.display_name || equipment.name),
          currentLevelLiters: params.currentLevelLiters || 0,
          bookBalance: params.bookBalance || 0,
          capacityLiters: params.capacityLiters || defaultParams.capacityLiters || 5000,
          minLevelPercent: params.minLevelPercent ?? params.min_level_percent ?? 
                          defaultParams.minLevelPercent ?? defaultParams.min_level_percent ?? 
                          params.minLevel ?? defaultParams.minLevel ?? 0,
          criticalLevelPercent: params.criticalLevelPercent ?? params.critical_level_percent ?? 
                               defaultParams.criticalLevelPercent ?? defaultParams.critical_level_percent ??
                               params.criticalLevel ?? defaultParams.criticalLevel ?? 0,
          temperature: params.temperature || 20,
          waterLevelMm: params.waterLevelMm || 0,
          density: params.density || 0.832,
          status: equipment.status === 'online' ? 'active' : 
                  equipment.status === 'offline' ? 'offline' : 'maintenance',
          location: `–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ ${tradingPointId}`,
          installationDate: equipment.installation_date || equipment.created_at,
          lastCalibration: params.lastCalibration,
          supplier: params.supplier,
          
          // –ú–æ–∫–æ–≤—ã–µ –¥–∞—Ç—á–∏–∫–∏ (–±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
          sensors: [
            {
              name: '–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞',
              status: equipment.status === 'online' ? 'ok' : 'error'
            },
            {
              name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
              status: equipment.status === 'online' ? 'ok' : 'error'
            }
          ],
          
          // –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
          linkedPumps: [],
          
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          notifications: {
            enabled: params.notifications?.enabled || true,
            drainAlerts: params.notifications?.drainAlerts || true,
            levelAlerts: params.notifications?.levelAlerts || true
          },
          
          // –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          thresholds: {
            criticalTemp: {
              min: params.thresholds?.criticalTemp?.min || -10,
              max: params.thresholds?.criticalTemp?.max || 50
            },
            maxWaterLevel: params.thresholds?.maxWaterLevel || 10,
            notifications: {
              critical: params.thresholds?.notifications?.critical || true,
              warning: params.thresholds?.notifications?.warning || true,
              info: params.thresholds?.notifications?.info || false
            }
          }
        };
        
        return tank;
      });
      
      console.log(`üè≠ –£—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ ${tanks.length} –µ–¥–∏–Ω–∏—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã`);
      return tanks;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ equipment:', error);
      return [];
    }
  }
  
  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º API
   */
  private async autoSyncFromApi(tradingPointId: string): Promise<{success: boolean, error?: string}> {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –≤–Ω–µ—à–Ω–∏–º API...');
      
      const syncResult = await tanksApiIntegrationService.syncTanksFromApi(tradingPointId);
      
      const totalProcessed = syncResult.created.length + syncResult.updated.length;
      
      if (totalProcessed > 0) {
        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: —Å–æ–∑–¥–∞–Ω–æ ${syncResult.created.length}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${syncResult.updated.length}`);
        return { success: true };
      }
      
      if (syncResult.errors.length > 0) {
        const errorMsg = syncResult.errors.join(', ');
        console.error('‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', errorMsg);
        return { success: false, error: errorMsg };
      }
      
      return { success: false, error: 'API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö' };
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' 
      };
    }
  }
  
  /**
   * –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –†–ï–ó–ï–†–í–£–ê–†–û–í –í –ë–ê–ó–ï
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∑–µ—Ä–≤—É–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
   */
  async hasTanksInDatabase(tradingPointId: string): Promise<boolean> {
    if (!tradingPointId || tradingPointId === "all") return false;
    
    try {
      const tanks = await this.getTanksFromDatabase(tradingPointId);
      return tanks.length > 0;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', error);
      return false;
    }
  }

  /**
   * –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ï–ó–ï–†–í–£–ê–†–û–í –ò–ó API (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ)
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ
   */
  async syncIfEmpty(tradingPointId: string): Promise<TanksLoadResult> {
    if (!tradingPointId || tradingPointId === "all") {
      return {
        tanks: [],
        source: 'mock',
        synchronized: false,
        error: '–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞'
      };
    }

    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏: ${tradingPointId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –≤ –±–∞–∑–µ
      const hasExistingTanks = await this.hasTanksInDatabase(tradingPointId);
      
      if (hasExistingTanks) {
        console.log('‚ö†Ô∏è –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –¥–ª—è —ç—Ç–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã
        const existingTanks = await this.getTanksFromDatabase(tradingPointId);
        return {
          tanks: existingTanks,
          source: 'database',
          synchronized: false,
          error: '–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å".'
        };
      }
      
      // –ï—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –Ω–µ—Ç - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å API
      console.log('üì° –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å API...');
      const syncResult = await this.autoSyncFromApi(tradingPointId);
      
      if (syncResult.success) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const syncedTanks = await this.getTanksFromDatabase(tradingPointId);
        return {
          tanks: syncedTanks,
          source: 'api',
          synchronized: true
        };
      }
      
      return {
        tanks: [],
        source: 'database',
        synchronized: false,
        error: syncResult.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API'
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      return {
        tanks: [],
        source: 'database',
        synchronized: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'
      };
    }
  }

  /**
   * –†–£–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ï–ó–ï–†–í–£–ê–†–û–í
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π "–û–±–Ω–æ–≤–∏—Ç—å" - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å API
   */
  async forceUpdateFromApi(tradingPointId: string): Promise<TanksLoadResult> {
    if (!tradingPointId || tradingPointId === "all") {
      return {
        tanks: [],
        source: 'mock',
        synchronized: false,
        error: '–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞'
      };
    }

    try {
      console.log(`üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏: ${tradingPointId}`);
      
      const syncResult = await tanksApiIntegrationService.syncTanksFromApi(tradingPointId);
      
      const totalProcessed = syncResult.created.length + syncResult.updated.length;
      
      if (totalProcessed > 0 || syncResult.errors.length === 0) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        const updatedTanks = await this.getTanksFromDatabase(tradingPointId);
        
        return {
          tanks: updatedTanks,
          source: 'api',
          synchronized: true
        };
      }
      
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
      const currentTanks = await this.getTanksFromDatabase(tradingPointId);
      
      return {
        tanks: currentTanks,
        source: 'database',
        synchronized: false,
        error: syncResult.errors.length > 0 ? syncResult.errors.join(', ') : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const currentTanks = await this.getTanksFromDatabase(tradingPointId);
      
      return {
        tanks: currentTanks,
        source: 'database',
        synchronized: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
      };
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º
   */
  getStatistics(tanks: Tank[]) {
    if (tanks.length === 0) {
      return {
        total: 0,
        totalCapacity: 0,
        totalCurrent: 0,
        utilizationPercent: 0,
        lowLevelCount: 0,
        criticalLevelCount: 0
      };
    }
    
    const totalCapacity = tanks.reduce((sum, tank) => sum + (tank.capacityLiters || 0), 0);
    const totalCurrent = tanks.reduce((sum, tank) => sum + (tank.currentLevelLiters || 0), 0);
    const utilizationPercent = totalCapacity > 0 ? (totalCurrent / totalCapacity) * 100 : 0;
    
    const lowLevelCount = tanks.filter(tank => {
      const percent = tank.capacityLiters > 0 ? (tank.currentLevelLiters / tank.capacityLiters) * 100 : 0;
      return percent <= (tank.minLevelPercent || 20);
    }).length;
    
    const criticalLevelCount = tanks.filter(tank => {
      const percent = tank.capacityLiters > 0 ? (tank.currentLevelLiters / tank.capacityLiters) * 100 : 0;
      return percent <= (tank.criticalLevelPercent || 10);
    }).length;
    
    return {
      total: tanks.length,
      totalCapacity,
      totalCurrent,
      utilizationPercent,
      lowLevelCount,
      criticalLevelCount
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const tanksUnifiedService = new TanksUnifiedService();