/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
 */

import { supabaseService } from './supabaseServiceClient';

export interface VerificationCode {
  id: string;
  userId: string;
  verificationCode: string;
  expiresAt: string;
  isUsed: boolean;
  createdAt: string;
  usedAt?: string;
  userAgent?: string;
  ipAddress?: string;
}

export interface VerificationResult {
  success: boolean;
  verificationCode?: string;
  expiresAt?: string;
  error?: string;
  errorCode?: string;
}

export interface TelegramUser {
  telegramChatId?: string;
  telegramVerifiedAt?: string;
  telegramNotificationsEnabled: boolean;
}

class TelegramVerificationService {
  private readonly EXPIRATION_MINUTES = 15;
  private readonly CODE_LENGTH = 6;
  private readonly CODE_PREFIX = 'TF';

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async generateVerificationCode(userId: string): Promise<VerificationResult> {
    try {
      console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: user, error: userError } = await supabaseService
        .from('users')
        .select('id, name, email')
        .eq('id', userId)
        .single();

      if (userError || !user) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError);
        return {
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          errorCode: 'USER_NOT_FOUND'
        };
      }

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: deleteError } = await supabaseService
        .from('telegram_verification_codes')
        .delete()
        .eq('user_id', userId)
        .eq('is_used', false);

      if (deleteError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤:', deleteError);
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
      const verificationCode = await this.generateUniqueCode();
      const expiresAt = new Date(Date.now() + this.EXPIRATION_MINUTES * 60 * 1000);

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const userAgent = typeof window !== 'undefined' ? navigator.userAgent : null;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const { data: codeRecord, error: insertError } = await supabaseService
        .from('telegram_verification_codes')
        .insert({
          user_id: userId,
          verification_code: verificationCode,
          expires_at: expiresAt.toISOString(),
          user_agent: userAgent
        })
        .select('*')
        .single();

      if (insertError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞:', insertError);
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
          errorCode: 'DATABASE_ERROR'
        };
      }

      console.log('‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω:', {
        code: verificationCode,
        expires: expiresAt.toISOString(),
        userId: userId
      });

      return {
        success: true,
        verificationCode,
        expiresAt: expiresAt.toISOString()
      };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
      return {
        success: false,
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        errorCode: 'GENERATION_ERROR'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getVerificationStatus(userId: string): Promise<{
    isConnected: boolean;
    telegramChatId?: string;
    verifiedAt?: string;
    notificationsEnabled: boolean;
    hasActiveCode: boolean;
    activeCode?: string;
    expiresAt?: string;
  }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const { data: user, error: userError } = await supabaseService
        .from('users')
        .select('telegram_chat_id, telegram_verified_at, telegram_notifications_enabled')
        .eq('id', userId)
        .single();

      if (userError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
        return {
          isConnected: false,
          notificationsEnabled: false,
          hasActiveCode: false
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–¥–∞
      const { data: activeCode } = await supabaseService
        .from('telegram_verification_codes')
        .select('verification_code, expires_at')
        .eq('user_id', userId)
        .eq('is_used', false)
        .gte('expires_at', new Date().toISOString())
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      return {
        isConnected: !!user.telegram_chat_id,
        telegramChatId: user.telegram_chat_id || undefined,
        verifiedAt: user.telegram_verified_at || undefined,
        notificationsEnabled: user.telegram_notifications_enabled || false,
        hasActiveCode: !!activeCode,
        activeCode: activeCode?.verification_code,
        expiresAt: activeCode?.expires_at
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      return {
        isConnected: false,
        notificationsEnabled: false,
        hasActiveCode: false
      };
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  async disconnectTelegram(userId: string): Promise<{ success: boolean; error?: string }> {
    try {
      console.log('üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      // –û—á–∏—â–∞–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: updateError } = await supabaseService
        .from('users')
        .update({
          telegram_chat_id: null,
          telegram_verified_at: null,
          telegram_notifications_enabled: false
        })
        .eq('id', userId);

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Telegram:', updateError);
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Telegram'
        };
      }

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabaseService
        .from('telegram_verification_codes')
        .delete()
        .eq('user_id', userId);

      console.log('‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      return { success: true };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Telegram:', error);
      return {
        success: false,
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendTestNotification(userId: string): Promise<{ success: boolean; error?: string }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: user, error: userError } = await supabaseService
        .from('users')
        .select('telegram_chat_id, name, email')
        .eq('id', userId)
        .single();

      if (userError || !user?.telegram_chat_id) {
        return {
          success: false,
          error: 'Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
        };
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telegramService –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const { telegramService } = await import('./telegramService');
      
      const testMessage = 
        `üîß <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ TradeFrame</b>\n\n` +
        `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user.name}\n` +
        `üìß <b>Email:</b> ${user.email}\n` +
        `üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}\n\n` +
        `‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`;

      const result = await telegramService.sendMessage(testMessage, user.telegram_chat_id);

      if (result) {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        return { success: true };
      } else {
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
        };
      }

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async updateNotificationSettings(
    userId: string, 
    notificationsEnabled: boolean
  ): Promise<{ success: boolean; error?: string }> {
    try {
      const { error } = await supabaseService
        .from('users')
        .update({
          telegram_notifications_enabled: notificationsEnabled
        })
        .eq('id', userId);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫'
        };
      }

      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', { userId, notificationsEnabled });
      return { success: true };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return {
        success: false,
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async getActiveCodes(): Promise<VerificationCode[]> {
    try {
      const { data, error } = await supabaseService
        .from('telegram_verification_codes')
        .select(`
          *,
          users (name, email)
        `)
        .eq('is_used', false)
        .gte('expires_at', new Date().toISOString())
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤:', error);
        return [];
      }

      return data || [];

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤:', error);
      return [];
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
   */
  async cleanupExpiredCodes(): Promise<{ cleaned: number; error?: string }> {
    try {
      const { error, count } = await supabaseService
        .from('telegram_verification_codes')
        .delete()
        .lt('expires_at', new Date().toISOString())
        .eq('is_used', false);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤:', error);
        return {
          cleaned: 0,
          error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏'
        };
      }

      console.log(`üßπ –û—á–∏—â–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤: ${count || 0}`);
      return { cleaned: count || 0 };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
      return {
        cleaned: 0,
        error: error.message
      };
    }
  }

  // ========== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ==========

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private async generateUniqueCode(): Promise<string> {
    const charset = 'ABCDEFGHIJKLMNPQRSTUVWXYZ123456789'; // –ò—Å–∫–ª—é—á–∏–ª–∏ O, 0 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    let attempts = 0;
    const maxAttempts = 10;

    while (attempts < maxAttempts) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
      let code = this.CODE_PREFIX;
      
      for (let i = 0; i < (this.CODE_LENGTH - this.CODE_PREFIX.length); i++) {
        const randomIndex = Math.floor(Math.random() * charset.length);
        code += charset[randomIndex];
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
      const { data: existingCode } = await supabaseService
        .from('telegram_verification_codes')
        .select('id')
        .eq('verification_code', code)
        .eq('is_used', false)
        .single();

      if (!existingCode) {
        return code;
      }

      attempts++;
    }

    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–∞
   */
  static isValidCodeFormat(code: string): boolean {
    const codeRegex = /^TF[A-Z0-9]{4,8}$/;
    return codeRegex.test(code);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
   */
  static formatTimeRemaining(expiresAt: string): string {
    const now = new Date();
    const expires = new Date(expiresAt);
    const diffMs = expires.getTime() - now.getTime();

    if (diffMs <= 0) {
      return '–ò—Å—Ç–µ–∫';
    }

    const diffMinutes = Math.floor(diffMs / 60000);
    const diffSeconds = Math.floor((diffMs % 60000) / 1000);

    if (diffMinutes > 0) {
      return `${diffMinutes}:${diffSeconds.toString().padStart(2, '0')}`;
    } else {
      return `${diffSeconds} —Å–µ–∫`;
    }
  }
}

export const telegramVerificationService = new TelegramVerificationService();
export default telegramVerificationService;