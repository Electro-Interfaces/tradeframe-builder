/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–º –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π
 * –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: —Ç–æ–ø–ª–∏–≤–æ, —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã, –¢–†–ö, —Ç–µ—Ä–º–∏–Ω–∞–ª—ã, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —É—Å–ª—É–≥–∏
 */

import { 
  EntityMapping, 
  MappingSyncResult, 
  UniversalMappingConfig, 
  TradingNetworkConfig,
  MappingTypeConfig,
  FuelCodeMapping,
  PaymentMethodMapping,
  DispenserMapping,
  TerminalMapping,
  EquipmentMapping,
  ServiceMapping
} from './tradingNetworkConfigService';
import { nomenclatureService } from './nomenclatureService';
import { tradingNetworkAPI } from './tradingNetworkAPI';
import { FuelNomenclature } from '../types/nomenclature';

// –¢–∏–ø—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞–ø–ø–∏–Ω–≥–æ–≤
interface MappingValidationResult {
  valid: boolean;
  errors: string[];
  warnings: string[];
  mappingType: string;
}

// –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–∞–ø–ø–∏–Ω–≥–æ–≤
interface MappingConflict {
  type: 'duplicate_api_code' | 'duplicate_internal_code' | 'inconsistent_data' | 'missing_required_field';
  mappingType: string;
  mappingId: string;
  conflictWith?: string;
  description: string;
  suggestedResolution: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–ø–ø–∏–Ω–≥–æ–≤
interface MappingStats {
  totalMappings: number;
  byType: Record<string, number>;
  activeMappings: number;
  inactiveMappings: number;
  conflictCount: number;
  lastSyncDate?: Date;
  syncSuccessRate: number;
}

class UniversalMappingService {
  private cachedMappings: Map<string, EntityMapping> = new Map();
  private mappingsByType: Map<string, Map<string, EntityMapping>> = new Map();
  private lastCacheUpdate: Date | null = null;
  private readonly CACHE_TTL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

  constructor() {
    this.initializeMappingsByType();
  }

  private initializeMappingsByType(): void {
    const mappingTypes = ['fuel', 'payment', 'dispenser', 'terminal', 'equipment', 'service'];
    mappingTypes.forEach(type => {
      this.mappingsByType.set(type, new Map());
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∫–æ–¥—É –∏ —Ç–∏–ø—É
   */
  getMappingByInternalCode<T extends EntityMapping>(
    internalCode: string, 
    mappingType: T['mappingType'], 
    networkId?: string
  ): T | null {
    console.log(`üîç –ü–æ–∏—Å–∫ –º–∞–ø–ø–∏–Ω–≥–∞ ${mappingType}: ${internalCode}`);
    
    const typeMap = this.mappingsByType.get(mappingType);
    if (!typeMap) {
      console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–∞–ø–ø–∏–Ω–≥–∞: ${mappingType}`);
      return null;
    }

    const key = networkId ? `${internalCode}_${networkId}` : internalCode;
    const mapping = typeMap.get(key);
    
    if (mapping && mapping.isActive) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥ ${mappingType}: ${internalCode} ‚Üí ${mapping.apiCode}`);
      return mapping as T;
    }

    console.log(`‚ö†Ô∏è –ú–∞–ø–ø–∏–Ω–≥ ${mappingType} –¥–ª—è "${internalCode}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –ø–æ API –∫–æ–¥—É –∏ —Ç–∏–ø—É
   */
  getMappingByApiCode<T extends EntityMapping>(
    apiCode: string | number, 
    mappingType: T['mappingType'], 
    networkId?: string
  ): T | null {
    console.log(`üîç –ü–æ–∏—Å–∫ –º–∞–ø–ø–∏–Ω–≥–∞ ${mappingType} –ø–æ API –∫–æ–¥—É: ${apiCode}`);
    
    const typeMap = this.mappingsByType.get(mappingType);
    if (!typeMap) return null;

    for (const mapping of typeMap.values()) {
      if (mapping.apiCode === apiCode && 
          mapping.isActive && 
          (!networkId || mapping.networkId === networkId)) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥ ${mappingType}: API ${apiCode} ‚Üí ${mapping.internalCode}`);
        return mapping as T;
      }
    }

    console.log(`‚ö†Ô∏è –ú–∞–ø–ø–∏–Ω–≥ ${mappingType} –¥–ª—è API –∫–æ–¥–∞ ${apiCode} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞–ø–ø–∏–Ω–≥–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   */
  getMappingsByType<T extends EntityMapping>(
    mappingType: T['mappingType'], 
    networkId?: string, 
    activeOnly: boolean = false
  ): T[] {
    const typeMap = this.mappingsByType.get(mappingType);
    if (!typeMap) return [];

    const mappings = Array.from(typeMap.values()).filter(mapping => {
      if (networkId && mapping.networkId !== networkId) return false;
      if (activeOnly && !mapping.isActive) return false;
      return mapping.mappingType === mappingType;
    });

    return mappings as T[];
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   */
  async syncMappingsByType(
    config: TradingNetworkConfig,
    mappingType: EntityMapping['mappingType'],
    networkId: string
  ): Promise<MappingSyncResult> {
    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ —Ç–∏–ø–∞ ${mappingType} –¥–ª—è —Å–µ—Ç–∏ ${networkId}`);
    const startTime = Date.now();

    const result: MappingSyncResult = {
      success: false,
      mappingType,
      networkId,
      results: {
        created: 0,
        updated: 0,
        deleted: 0,
        conflicts: 0,
        warnings: 0
      },
      errors: [],
      warnings: [],
      mappings: [],
      syncDuration: 0,
      timestamp: new Date()
    };

    try {
      switch (mappingType) {
        case 'fuel':
          return await this.syncFuelMappings(config, networkId, result);
        case 'payment':
          return await this.syncPaymentMappings(config, networkId, result);
        case 'dispenser':
          return await this.syncDispenserMappings(config, networkId, result);
        case 'terminal':
          return await this.syncTerminalMappings(config, networkId, result);
        case 'equipment':
          return await this.syncEquipmentMappings(config, networkId, result);
        case 'service':
          return await this.syncServiceMappings(config, networkId, result);
        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–∞–ø–ø–∏–Ω–≥–∞: ${mappingType}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${mappingType}:`, error);
      result.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      result.syncDuration = Date.now() - startTime;
      result.success = result.errors.length === 0;
    }

    return result;
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–∞–ø–ø–∏–Ω–≥–æ–≤
   */
  async syncAllMappings(config: TradingNetworkConfig, networkId: string): Promise<MappingSyncResult[]> {
    console.log(`üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤ –¥–ª—è —Å–µ—Ç–∏ ${networkId}`);
    
    const mappingTypes: EntityMapping['mappingType'][] = ['fuel', 'payment', 'dispenser', 'terminal', 'equipment', 'service'];
    const results: MappingSyncResult[] = [];

    for (const mappingType of mappingTypes) {
      const typeConfig = config.universalMapping?.typeConfigs[mappingType];
      if (typeConfig?.enabled) {
        console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${mappingType}...`);
        const result = await this.syncMappingsByType(config, mappingType, networkId);
        results.push(result);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        this.updateCacheForType(mappingType, result.mappings);
      } else {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${mappingType} - –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
      }
    }

    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${results.length} —Ç–∏–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
    return results;
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞
   */
  private async syncFuelMappings(
    config: TradingNetworkConfig, 
    networkId: string, 
    result: MappingSyncResult
  ): Promise<MappingSyncResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É —Ç–æ–ø–ª–∏–≤–∞
      const nomenclature = await nomenclatureService.getNomenclature({ 
        networkId, 
        status: 'active' 
      });

      // –ü–æ–ª—É—á–∞–µ–º API —É—Å–ª—É–≥–∏
      const apiServices = await tradingNetworkAPI.getServices();
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
      for (const item of nomenclature) {
        const matchingService = this.findMatchingFuelService(item, apiServices);
        
        if (matchingService) {
          const mapping: FuelCodeMapping = {
            id: `fuel_${item.id}_${matchingService.service_code}`,
            mappingType: 'fuel',
            internalCode: item.internalCode,
            internalName: item.name,
            apiCode: matchingService.service_code,
            apiName: matchingService.service_name,
            networkId,
            nomenclatureId: item.id,
            isActive: true,
            priority: 1,
            lastSync: new Date(),
            createdAt: new Date(),
            updatedAt: new Date()
          };

          result.mappings.push(mapping);
          result.results.created++;
        } else {
          result.warnings.push(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞ "${item.name}"`);
          result.results.warnings++;
        }
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–ø–ª–∏–≤–∞: —Å–æ–∑–¥–∞–Ω–æ ${result.results.created} –º–∞–ø–ø–∏–Ω–≥–æ–≤`);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–ø–ª–∏–≤–∞:', error);
      result.errors.push(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–ø–ª–∏–≤–∞: ${error.message}`);
      return result;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
   */
  private async syncPaymentMappings(
    config: TradingNetworkConfig, 
    networkId: string, 
    result: MappingSyncResult
  ): Promise<MappingSyncResult> {
    try {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const internalPaymentMethods = [
        { code: 'CARD', name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', type: 'card' as const },
        { code: 'CASH', name: '–ù–∞–ª–∏—á–Ω—ã–µ', type: 'cash' as const },
        { code: 'FUEL_CARD', name: '–¢–æ–ø–ª–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞', type: 'fuel_card' as const },
        { code: 'MOBILE', name: '–ú–æ–±–∏–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂', type: 'mobile' as const }
      ];

      // API –∫–æ–¥—ã —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ)
      const apiPaymentMethods = [
        { code: 'BANK_CARD', name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' },
        { code: 'CASH', name: '–ù–∞–ª–∏—á–Ω—ã–µ –¥–µ–Ω—å–≥–∏' },
        { code: 'CORPORATE_CARD', name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞' },
        { code: 'MOBILE_PAY', name: '–ú–æ–±–∏–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂' }
      ];

      for (const internal of internalPaymentMethods) {
        const apiMethod = this.findMatchingPaymentMethod(internal, apiPaymentMethods);
        
        if (apiMethod) {
          const mapping: PaymentMethodMapping = {
            id: `payment_${internal.code}_${apiMethod.code}`,
            mappingType: 'payment',
            internalCode: internal.code,
            internalName: internal.name,
            apiCode: apiMethod.code,
            apiName: apiMethod.name,
            networkId,
            paymentType: internal.type,
            isActive: true,
            priority: 1,
            isOnline: internal.type !== 'cash',
            lastSync: new Date(),
            createdAt: new Date(),
            updatedAt: new Date()
          };

          result.mappings.push(mapping);
          result.results.created++;
        }
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: —Å–æ–∑–¥–∞–Ω–æ ${result.results.created} –º–∞–ø–ø–∏–Ω–≥–æ–≤`);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã:', error);
      result.errors.push(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: ${error.message}`);
      return result;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ –¢–†–ö
   */
  private async syncDispenserMappings(
    config: TradingNetworkConfig, 
    networkId: string, 
    result: MappingSyncResult
  ): Promise<MappingSyncResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ "dispenser" –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¢–†–ö
      const dispensers = [
        { number: 1, nozzles: 4, code: 'TRK-001' },
        { number: 2, nozzles: 4, code: 'TRK-002' },
        { number: 3, nozzles: 2, code: 'TRK-003' }
      ];

      for (const dispenser of dispensers) {
        const mapping: DispenserMapping = {
          id: `dispenser_${dispenser.code}`,
          mappingType: 'dispenser',
          internalCode: dispenser.code,
          internalName: `–¢–†–ö ‚Ññ${dispenser.number}`,
          apiCode: dispenser.number,
          apiName: `Dispenser ${dispenser.number}`,
          networkId,
          dispenserNumber: dispenser.number,
          nozzleCount: dispenser.nozzles,
          isActive: true,
          priority: 1,
          lastSync: new Date(),
          createdAt: new Date(),
          updatedAt: new Date()
        };

        result.mappings.push(mapping);
        result.results.created++;
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¢–†–ö: —Å–æ–∑–¥–∞–Ω–æ ${result.results.created} –º–∞–ø–ø–∏–Ω–≥–æ–≤`);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¢–†–ö:', error);
      result.errors.push(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¢–†–ö: ${error.message}`);
      return result;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
   */
  private async syncTerminalMappings(
    config: TradingNetworkConfig, 
    networkId: string, 
    result: MappingSyncResult
  ): Promise<MappingSyncResult> {
    try {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—ã
      const terminals = [
        { code: 'POS-001', type: 'pos' as const, name: '–ö–∞—Å—Å–∞ ‚Ññ1' },
        { code: 'POS-002', type: 'pos' as const, name: '–ö–∞—Å—Å–∞ ‚Ññ2' },
        { code: 'KIOSK-001', type: 'kiosk' as const, name: '–ö–∏–æ—Å–∫ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è' }
      ];

      for (const terminal of terminals) {
        const mapping: TerminalMapping = {
          id: `terminal_${terminal.code}`,
          mappingType: 'terminal',
          internalCode: terminal.code,
          internalName: terminal.name,
          apiCode: terminal.code,
          apiName: terminal.name,
          networkId,
          terminalType: terminal.type,
          isActive: true,
          priority: 1,
          lastSync: new Date(),
          createdAt: new Date(),
          updatedAt: new Date()
        };

        result.mappings.push(mapping);
        result.results.created++;
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤: —Å–æ–∑–¥–∞–Ω–æ ${result.results.created} –º–∞–ø–ø–∏–Ω–≥–æ–≤`);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤:', error);
      result.errors.push(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤: ${error.message}`);
      return result;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  private async syncEquipmentMappings(
    config: TradingNetworkConfig, 
    networkId: string, 
    result: MappingSyncResult
  ): Promise<MappingSyncResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      // –ó–¥–µ—Å—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º—Å—è —Å equipmentService
      
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
      const equipment = [
        { code: 'TANK-001', type: 'tank' as const, name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ1 –ê–ò-92', capacity: 50000 },
        { code: 'TANK-002', type: 'tank' as const, name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ2 –ê–ò-95', capacity: 50000 },
        { code: 'PUMP-001', type: 'pump' as const, name: '–ù–∞—Å–æ—Å ‚Ññ1', capacity: 1000 },
        { code: 'SENSOR-001', type: 'sensor' as const, name: '–î–∞—Ç—á–∏–∫ —É—Ä–æ–≤–Ω—è ‚Ññ1', capacity: 0 }
      ];

      for (const item of equipment) {
        const mapping: EquipmentMapping = {
          id: `equipment_${item.code}`,
          mappingType: 'equipment',
          internalCode: item.code,
          internalName: item.name,
          apiCode: item.code,
          apiName: item.name,
          networkId,
          equipmentType: item.type,
          capacity: item.capacity,
          isActive: true,
          priority: 1,
          lastSync: new Date(),
          createdAt: new Date(),
          updatedAt: new Date()
        };

        result.mappings.push(mapping);
        result.results.created++;
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: —Å–æ–∑–¥–∞–Ω–æ ${result.results.created} –º–∞–ø–ø–∏–Ω–≥–æ–≤`);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error);
      result.errors.push(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${error.message}`);
      return result;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ —É—Å–ª—É–≥
   */
  private async syncServiceMappings(
    config: TradingNetworkConfig, 
    networkId: string, 
    result: MappingSyncResult
  ): Promise<MappingSyncResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
      const apiServices = await tradingNetworkAPI.getServices();
      
      for (const service of apiServices) {
        const mapping: ServiceMapping = {
          id: `service_${service.service_code}`,
          mappingType: 'service',
          internalCode: `SERVICE_${service.service_code}`,
          internalName: service.service_name,
          apiCode: service.service_code,
          apiName: service.service_name,
          networkId,
          serviceType: 'fuel_sale', // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —É—Å–ª—É–≥–∏ - –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–ø–ª–∏–≤–∞
          isActive: true,
          priority: 1,
          lastSync: new Date(),
          createdAt: new Date(),
          updatedAt: new Date()
        };

        result.mappings.push(mapping);
        result.results.created++;
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ª—É–≥: —Å–æ–∑–¥–∞–Ω–æ ${result.results.created} –º–∞–ø–ø–∏–Ω–≥–æ–≤`);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ª—É–≥:', error);
      result.errors.push(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ª—É–≥: ${error.message}`);
      return result;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤
   */
  validateAllMappings(mappings: EntityMapping[]): MappingValidationResult[] {
    const results: MappingValidationResult[] = [];
    const mappingsByType = this.groupMappingsByType(mappings);

    for (const [type, typeMappings] of mappingsByType) {
      results.push(this.validateMappingsByType(type, typeMappings));
    }

    return results;
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –º–∞–ø–ø–∏–Ω–≥–∞—Ö
   */
  findAllConflicts(mappings: EntityMapping[]): MappingConflict[] {
    const conflicts: MappingConflict[] = [];
    const mappingsByType = this.groupMappingsByType(mappings);

    for (const [type, typeMappings] of mappingsByType) {
      conflicts.push(...this.findConflictsByType(type, typeMappings));
    }

    return conflicts;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–ø–ø–∏–Ω–≥–æ–≤
   */
  getMappingStatistics(mappings: EntityMapping[]): MappingStats {
    const byType: Record<string, number> = {};
    let activeMappings = 0;
    let conflictCount = 0;
    let lastSyncDate: Date | undefined;

    mappings.forEach(mapping => {
      byType[mapping.mappingType] = (byType[mapping.mappingType] || 0) + 1;
      if (mapping.isActive) activeMappings++;
      if (mapping.lastSync && (!lastSyncDate || mapping.lastSync > lastSyncDate)) {
        lastSyncDate = mapping.lastSync;
      }
    });

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    const conflicts = this.findAllConflicts(mappings);
    conflictCount = conflicts.filter(c => c.severity === 'high' || c.severity === 'critical').length;

    return {
      totalMappings: mappings.length,
      byType,
      activeMappings,
      inactiveMappings: mappings.length - activeMappings,
      conflictCount,
      lastSyncDate,
      syncSuccessRate: mappings.length > 0 ? (activeMappings / mappings.length) * 100 : 0
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–∞–ø–ø–∏–Ω–≥–æ–≤
   */
  private updateCacheForType(mappingType: string, mappings: EntityMapping[]): void {
    const typeMap = this.mappingsByType.get(mappingType);
    if (!typeMap) return;

    typeMap.clear();
    
    mappings.forEach(mapping => {
      if (mapping.mappingType === mappingType) {
        typeMap.set(mapping.internalCode, mapping);
        if (mapping.networkId) {
          typeMap.set(`${mapping.internalCode}_${mapping.networkId}`, mapping);
        }
        this.cachedMappings.set(mapping.id, mapping);
      }
    });

    this.lastCacheUpdate = new Date();
    console.log(`üóÇÔ∏è –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ç–∏–ø–∞ ${mappingType}: ${mappings.length} –∑–∞–ø–∏—Å–µ–π`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  async initializeCache(config: TradingNetworkConfig): Promise<void> {
    if (config.universalMapping?.mappings) {
      const mappingsByType = this.groupMappingsByType(config.universalMapping.mappings);
      
      for (const [type, mappings] of mappingsByType) {
        this.updateCacheForType(type, mappings);
      }
      
      console.log(`üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫—ç—à –º–∞–ø–ø–∏–Ω–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private findMatchingFuelService(nomenclature: FuelNomenclature, apiServices: any[]): any | null {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–æ–≥–∏–∫–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    return apiServices.find(service => 
      service.service_name.toLowerCase().includes(nomenclature.internalCode.toLowerCase())
    ) || null;
  }

  private findMatchingPaymentMethod(internal: any, apiMethods: any[]): any | null {
    const mapping: Record<string, string> = {
      'CARD': 'BANK_CARD',
      'CASH': 'CASH',
      'FUEL_CARD': 'CORPORATE_CARD',
      'MOBILE': 'MOBILE_PAY'
    };

    return apiMethods.find(method => method.code === mapping[internal.code]) || null;
  }

  private groupMappingsByType(mappings: EntityMapping[]): Map<string, EntityMapping[]> {
    const grouped = new Map<string, EntityMapping[]>();
    
    mappings.forEach(mapping => {
      if (!grouped.has(mapping.mappingType)) {
        grouped.set(mapping.mappingType, []);
      }
      grouped.get(mapping.mappingType)!.push(mapping);
    });

    return grouped;
  }

  private validateMappingsByType(type: string, mappings: EntityMapping[]): MappingValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    mappings.forEach(mapping => {
      if (!mapping.internalCode || mapping.internalCode.trim().length === 0) {
        errors.push(`–ü—É—Å—Ç–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ –≤ –º–∞–ø–ø–∏–Ω–≥–µ ${mapping.id}`);
      }
      if (!mapping.apiCode) {
        errors.push(`–ü—É—Å—Ç–æ–π API –∫–æ–¥ –≤ –º–∞–ø–ø–∏–Ω–≥–µ ${mapping.id}`);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const internalCodes = new Set<string>();
    const apiCodes = new Set<string | number>();

    mappings.forEach(mapping => {
      if (internalCodes.has(mapping.internalCode)) {
        errors.push(`–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥: ${mapping.internalCode}`);
      }
      internalCodes.add(mapping.internalCode);

      if (apiCodes.has(mapping.apiCode)) {
        warnings.push(`–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è API –∫–æ–¥: ${mapping.apiCode}`);
      }
      apiCodes.add(mapping.apiCode);
    });

    return {
      valid: errors.length === 0,
      errors,
      warnings,
      mappingType: type
    };
  }

  private findConflictsByType(type: string, mappings: EntityMapping[]): MappingConflict[] {
    const conflicts: MappingConflict[] = [];

    // –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ API –∫–æ–¥–æ–≤
    const apiCodeGroups = new Map<string | number, EntityMapping[]>();
    mappings.forEach(mapping => {
      if (!apiCodeGroups.has(mapping.apiCode)) {
        apiCodeGroups.set(mapping.apiCode, []);
      }
      apiCodeGroups.get(mapping.apiCode)!.push(mapping);
    });

    apiCodeGroups.forEach((group, apiCode) => {
      if (group.length > 1) {
        for (let i = 0; i < group.length - 1; i++) {
          conflicts.push({
            type: 'duplicate_api_code',
            mappingType: type,
            mappingId: group[i].id,
            conflictWith: group[i + 1].id,
            description: `API –∫–æ–¥ ${apiCode} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞–ø–ø–∏–Ω–≥–∞—Ö`,
            suggestedResolution: '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å API –∫–æ–¥',
            severity: 'high'
          });
        }
      }
    });

    return conflicts;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const universalMappingService = new UniversalMappingService();
export { UniversalMappingService };