/**
 * –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ô –°–ï–†–í–ò–° –ñ–£–†–ù–ê–õ–ê –û–®–ò–ë–û–ö
 * 
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Supabase
 * –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–±–æ–µ–≤
 */

import { supabase } from './supabaseClientBrowser';

export interface ErrorLogEntry {
  id: string;
  timestamp: string;
  level: 'critical' | 'error' | 'warning';
  service: string;
  operation: string;
  error_message: string;
  error_stack?: string;
  user_id?: string;
  trading_point_id?: string;
  metadata?: Record<string, any>;
  resolved: boolean;
  resolved_at?: string;
  resolved_by?: string;
  created_at: string;
}

export interface ErrorLogFilters {
  level?: 'critical' | 'error' | 'warning';
  service?: string;
  trading_point_id?: string;
  resolved?: boolean;
  date_from?: string;
  date_to?: string;
}

class ErrorLogService {
  
  /**
   * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è
   */
  async logCriticalError(
    service: string,
    operation: string,
    error: Error | string,
    context?: {
      user_id?: string;
      trading_point_id?: string;
      metadata?: Record<string, any>;
    }
  ): Promise<void> {
    try {
      const errorMessage = error instanceof Error ? error.message : error;
      const errorStack = error instanceof Error ? error.stack : undefined;

      const logEntry = {
        timestamp: new Date().toISOString(),
        level: 'critical' as const,
        service,
        operation,
        error_message: errorMessage,
        error_stack: errorStack,
        user_id: context?.user_id,
        trading_point_id: context?.trading_point_id,
        metadata: context?.metadata,
        resolved: false
      };

      const { error: dbError } = await supabase
        .from('error_logs')
        .insert(logEntry);

      if (dbError) {
        // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î - —Ö–æ—Ç—è –±—ã –≤ –∫–æ–Ω—Å–æ–ª—å
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ –∂—É—Ä–Ω–∞–ª:', dbError);
        console.error('‚ùå –ò–°–•–û–î–ù–ê–Ø –û–®–ò–ë–ö–ê:', logEntry);
      } else {
        console.log('üìù –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª:', { service, operation, error_message: errorMessage });
      }
    } catch (logError) {
      console.error('‚ùå –ö–ê–¢–ê–°–¢–†–û–§–ê: –°–±–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫:', logError);
      console.error('‚ùå –ò–°–•–û–î–ù–ê–Ø –û–®–ò–ë–ö–ê:', { service, operation, error: error.toString() });
    }
  }

  /**
   * –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞
   */
  async logError(
    service: string,
    operation: string,
    error: Error | string,
    context?: {
      user_id?: string;
      trading_point_id?: string;
      metadata?: Record<string, any>;
    }
  ): Promise<void> {
    try {
      const errorMessage = error instanceof Error ? error.message : error;
      const errorStack = error instanceof Error ? error.stack : undefined;

      const logEntry = {
        timestamp: new Date().toISOString(),
        level: 'error' as const,
        service,
        operation,
        error_message: errorMessage,
        error_stack: errorStack,
        user_id: context?.user_id,
        trading_point_id: context?.trading_point_id,
        metadata: context?.metadata,
        resolved: false
      };

      const { error: dbError } = await supabase
        .from('error_logs')
        .insert(logEntry);

      if (dbError) {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ –∂—É—Ä–Ω–∞–ª:', dbError);
      }
    } catch (logError) {
      console.error('‚ùå –°–±–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏:', logError);
    }
  }

  /**
   * –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
   */
  async logWarning(
    service: string,
    operation: string,
    message: string,
    context?: {
      user_id?: string;
      trading_point_id?: string;
      metadata?: Record<string, any>;
    }
  ): Promise<void> {
    try {
      const logEntry = {
        timestamp: new Date().toISOString(),
        level: 'warning' as const,
        service,
        operation,
        error_message: message,
        user_id: context?.user_id,
        trading_point_id: context?.trading_point_id,
        metadata: context?.metadata,
        resolved: false
      };

      await supabase.from('error_logs').insert(logEntry);
    } catch (logError) {
      console.error('‚ùå –°–±–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', logError);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫
   */
  async getErrorLogs(
    filters?: ErrorLogFilters,
    limit: number = 100
  ): Promise<ErrorLogEntry[]> {
    try {
      let query = supabase
        .from('error_logs')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(limit);

      if (filters?.level) {
        query = query.eq('level', filters.level);
      }

      if (filters?.service) {
        query = query.eq('service', filters.service);
      }

      if (filters?.trading_point_id) {
        query = query.eq('trading_point_id', filters.trading_point_id);
      }

      if (filters?.resolved !== undefined) {
        query = query.eq('resolved', filters.resolved);
      }

      if (filters?.date_from) {
        query = query.gte('created_at', filters.date_from);
      }

      if (filters?.date_to) {
        query = query.lte('created_at', filters.date_to);
      }

      const { data, error } = await query;

      if (error) {
        throw error;
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é
   */
  async resolveError(
    errorId: string,
    resolvedBy: string
  ): Promise<void> {
    try {
      const { error } = await supabase
        .from('error_logs')
        .update({
          resolved: true,
          resolved_at: new Date().toISOString(),
          resolved_by: resolvedBy
        })
        .eq('id', errorId);

      if (error) {
        throw error;
      }
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
   */
  async getErrorStats(): Promise<{
    total: number;
    critical: number;
    errors: number;
    warnings: number;
    unresolved: number;
    today: number;
  }> {
    try {
      const { data, error } = await supabase
        .from('error_logs')
        .select('level, resolved, created_at');

      if (error) {
        throw error;
      }

      const today = new Date().toISOString().split('T')[0];
      
      const stats = {
        total: data?.length || 0,
        critical: data?.filter(e => e.level === 'critical').length || 0,
        errors: data?.filter(e => e.level === 'error').length || 0,
        warnings: data?.filter(e => e.level === 'warning').length || 0,
        unresolved: data?.filter(e => !e.resolved).length || 0,
        today: data?.filter(e => e.created_at.startsWith(today)).length || 0,
      };

      return stats;
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫:', error);
      return { total: 0, critical: 0, errors: 0, warnings: 0, unresolved: 0, today: 0 };
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
   */
  async createTableIfNotExists(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
      const { error } = await supabase
        .from('error_logs')
        .select('id')
        .limit(1);

      if (error && error.code === '42P01') {
        // –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
        console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ error_logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –µ—ë –≤ Supabase.');
        console.log(`
üìù SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã error_logs:

CREATE TABLE error_logs (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
  level TEXT NOT NULL CHECK (level IN ('critical', 'error', 'warning')),
  service TEXT NOT NULL,
  operation TEXT NOT NULL,
  error_message TEXT NOT NULL,
  error_stack TEXT,
  user_id UUID,
  trading_point_id UUID,
  metadata JSONB,
  resolved BOOLEAN DEFAULT FALSE,
  resolved_at TIMESTAMP WITH TIME ZONE,
  resolved_by TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX idx_error_logs_level ON error_logs(level);
CREATE INDEX idx_error_logs_service ON error_logs(service);
CREATE INDEX idx_error_logs_resolved ON error_logs(resolved);
CREATE INDEX idx_error_logs_created_at ON error_logs(created_at);
        `);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫:', error);
    }
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const errorLogService = new ErrorLogService();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
errorLogService.createTableIfNotExists();