/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –°–¢–° (pos.autooplata.ru/tms)
 */

interface STSApiConfig {
  url: string;
  username: string;
  password: string;
  enabled: boolean;
  timeout: number;
  retryAttempts: number;
  token?: string;
  tokenExpiry?: number;
  refreshInterval: number;
  // networkId –∏ tradingPointId —Ç–µ–ø–µ—Ä—å –±–µ—Ä—É—Ç—Å—è –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
}

interface Tank {
  id: number;
  name: string;
  fuelType: string;
  currentLevelLiters: number;
  capacityLiters: number;
  minLevelPercent: number;
  criticalLevelPercent: number;
  temperature: number;
  waterLevelMm: number;
  sensors: Array<{ name: string; status: string; }>;
  lastCalibration: string;
  linkedPumps: Array<{ id: number; name: string; }>;
  notifications: {
    enabled: boolean;
    drainAlerts: boolean;
    levelAlerts: boolean;
  };
  thresholds: {
    criticalTemp: { min: number; max: number; };
    maxWaterLevel: number;
    notifications: {
      critical: boolean;
      minimum: boolean;
      temperature: boolean;
      water: boolean;
    };
  };
  apiData?: {
    number: number;
    fuel: number;
    fuel_name: string;
    state: number;
    volume_begin: number;
    volume_end: number;
    volume_max: number;
    volume_free: number;
    volume: number;
    amount_begin: number;
    amount_end: number;
    level: number;
    water: {
      volume: number;
      amount: number;
      level: number;
    };
    temperature: number;
    density: number;
    release: {
      volume: number;
      amount: number;
    };
    dt: string;
  };
}

interface Pump {
  id: number;
  name: string;
  status: string;
  fuelType: string;
  currentPrice: number;
  totalSales: number;
  dailySales: number;
  lastTransaction: string;
  nozzles: Array<{ id: number; name: string; status: string; }>;
}

interface Sale {
  id: number;
  date: string;
  pumpId: number;
  pumpName: string;
  fuelType: string;
  volume: number;
  price: number;
  total: number;
  cardNumber?: string;
  receiptNumber: string;
}

interface TerminalInfo {
  terminal: {
    id: string;
    name: string;
    version: string;
    status: 'online' | 'offline' | 'maintenance';
    uptime: number;
    lastHeartbeat: string;
    cpu: {
      usage: number;
      temperature: number;
    };
    memory: {
      total: number;
      used: number;
      free: number;
    };
    disk: {
      total: number;
      used: number;
      free: number;
    };
    network: {
      ip: string;
      connected: boolean;
      speed: number;
    };
  };
  pumps: Array<{
    id: number;
    name: string;
    status: 'active' | 'offline' | 'error' | 'maintenance';
    fuelType: string;
    nozzles: Array<{
      id: number;
      status: 'ready' | 'dispensing' | 'error' | 'maintenance';
    }>;
  }>;
  tanks: Array<{
    id: number;
    name: string;
    fuelType: string;
    level: number;
    capacity: number;
    temperature: number;
    status: 'normal' | 'low' | 'critical' | 'error';
  }>;
  pos: {
    status: 'online' | 'offline' | 'error';
    version: string;
    lastTransaction: string;
    cashierConnected: boolean;
  };
  fiscal: {
    status: 'ready' | 'error' | 'maintenance';
    model: string;
    serialNumber: string;
    documentNumber: number;
  };
  shift?: {
    number: number;
    state: string;
    openedAt?: string;
  };
  devices?: {
    billAcceptor?: {
      status: 'online' | 'error';
      name: string;
      billCount?: number;
      billAmount?: number;
    };
    cardReader?: {
      status: 'online' | 'error';
      name: string;
    };
    mpsReader?: {
      status: 'online' | 'error';
      name: string;
    };
  };
}

interface Price {
  id: number;
  fuelType: string;
  price: number;
  effectiveDate: string;
  createdBy: string;
  status: string;
}

interface Transaction {
  id: number;
  transactionId: string;
  date: string;
  pumpId?: number;
  pumpName?: string;
  fuelType: string;
  volume: number;
  price: number;
  total: number;
  cardNumber?: string;
  receiptNumber?: string;
  status: string;
  operationType: string;
  paymentMethod?: string;
  networkId?: string;
  tradingPointId?: string;
  operatorName?: string;
  startTime: string;
  endTime?: string;
  duration?: number;
  apiData?: {
    // –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API –°–¢–°
    [key: string]: any;
  };
}

class STSApiService {
  private config: STSApiConfig | null = null;

  constructor() {
    this.loadConfig();
  }

  private loadConfig(): void {
    try {
      const savedConfig = localStorage.getItem('sts-api-config');
      if (savedConfig) {
        const parsedConfig = JSON.parse(savedConfig);
        // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ localStorage
        this.config = parsedConfig;
        console.log('üîç STS API: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ localStorage', {
          hasToken: !!parsedConfig.token,
          tokenExpiry: parsedConfig.tokenExpiry ? new Date(parsedConfig.tokenExpiry).toISOString() : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –°–¢–° API:', error);
    }
  }

  private async refreshTokenIfNeeded(forceRefresh = false): Promise<boolean> {
    if (!this.config?.enabled) {
      console.log('üîç STS API: API –æ—Ç–∫–ª—é—á–µ–Ω, —Ç–æ–∫–µ–Ω –Ω–µ –Ω—É–∂–µ–Ω');
      return false;
    }
    
    const now = Date.now();
    const tokenExists = !!this.config.token;
    const tokenExpired = this.config.tokenExpiry ? this.config.tokenExpiry < now : true;
    
    console.log('üîç STS API: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:', {
      tokenExists,
      tokenExpired,
      forceRefresh,
      tokenExpiry: this.config.tokenExpiry ? new Date(this.config.tokenExpiry).toISOString() : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      now: new Date(now).toISOString()
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    if (!tokenExists || tokenExpired || forceRefresh) {
      console.log('üîç STS API: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω', { forceRefresh });
      
      try {
        console.log('üîç STS API: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        const response = await fetch(`${this.config.url}/v1/login`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            username: this.config.username,
            password: this.config.password
          }),
          signal: AbortSignal.timeout(this.config.timeout || 30000),
        });

        console.log(`üîç STS API: –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${response.status} ${response.statusText}`);

        if (response.ok) {
          const tokenResponse = await response.text();
          const cleanToken = tokenResponse.replace(/"/g, '');
          // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –¥–æ 20 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const newExpiry = Date.now() + (20 * 60 * 1000); // 20 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 24 —á–∞—Å–æ–≤
          
          console.log('üîç STS API: –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω:', cleanToken.substring(0, 20) + '...');
          
          this.config.token = cleanToken;
          this.config.tokenExpiry = newExpiry;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          localStorage.setItem('sts-api-config', JSON.stringify(this.config));
          
          console.log('üîç STS API: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
          console.log('üîç STS API: –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è:', new Date(newExpiry).toISOString());
          return true;
        } else {
          const errorText = await response.text();
          console.error(`üîç STS API: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ HTTP ${response.status}:`, errorText);
          return false;
        }
      } catch (error) {
        console.error('üîç STS API: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        return false;
      }
    }
    
    console.log('üîç STS API: –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    return !!this.config.token;
  }

  private async apiRequest<T>(endpoint: string, options: RequestInit = {}, contextParams?: {networkId?: string; tradingPointId?: string}): Promise<T> {
    console.log(`üîç STS API: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ${endpoint}`);
    
    this.loadConfig(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    
    if (!this.config?.enabled) {
      console.error('üîç STS API: API –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
      throw new Error('API –°–¢–° –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    const networkId = contextParams?.networkId?.trim();
    const tradingPointId = contextParams?.tradingPointId?.trim();

    console.log('üîç STS API: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', {
      url: this.config.url,
      networkId: networkId || '–Ω–µ –∑–∞–¥–∞–Ω',
      tradingPointId: tradingPointId || '–Ω–µ –∑–∞–¥–∞–Ω',
      hasToken: !!this.config.token,
      source: contextParams ? '–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' : '–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API'
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º, –¢–†–ö, –ø—Ä–æ–¥–∞–∂–∞–º –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
    // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: /v1/pos/prices/{station} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç system –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–∞–∫ –∫–∞–∫ station —É–∂–µ –≤ URL
    if ((endpoint.includes('/v1/tanks') || endpoint.includes('/v1/pumps') || endpoint.includes('/v1/sales') || endpoint.includes('/v1/transactions') || (endpoint.includes('/v1/prices') && !endpoint.includes('/v1/pos/prices')))) {
      if (!networkId) {
        console.error('üîç STS API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Å–µ—Ç–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞', endpoint);
        throw new Error(`–û—à–∏–±–∫–∞ 422: –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${endpoint} —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "external_id" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ç–µ–π.`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ network ID —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º
      if (isNaN(Number(networkId))) {
        console.error('üîç STS API: –ù–æ–º–µ—Ä —Å–µ—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º:', networkId);
        throw new Error(`–û—à–∏–±–∫–∞ 422: –ù–æ–º–µ—Ä —Å–µ—Ç–∏ "${networkId}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–µ "external_id" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏.`);
      }
      
      // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞
      if (endpoint.includes('/v1/transactions')) {
        if (!tradingPointId) {
          console.error('üîç STS API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
          throw new Error(`–û—à–∏–±–∫–∞ 422: –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ (station). –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ.`);
        }
        if (isNaN(Number(tradingPointId))) {
          console.error('üîç STS API: –ù–æ–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º:', tradingPointId);
          throw new Error(`–û—à–∏–±–∫–∞ 422: –ù–æ–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ "${tradingPointId}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–µ "external_id" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏.`);
        }
      }
      
      // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∞–∫–∂–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞
      if (endpoint.includes('/v1/tanks') && tradingPointId) {
        if (isNaN(Number(tradingPointId))) {
          console.warn('üîç STS API: –ù–æ–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º:', tradingPointId);
          console.warn('üîç STS API: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Ç–æ—á–µ–∫');
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const tokenValid = await this.refreshTokenIfNeeded();
    if (!tokenValid) {
      console.error('üîç STS API: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
    }

    const url = new URL(`${this.config.url}${endpoint}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏ –∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
    if (networkId) {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ –¥–ª—è system
      const systemParam = String(Number(networkId));
      url.searchParams.set('system', systemParam);
      console.log(`üîç STS API: –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä system = ${systemParam} (–∏—Å—Ö–æ–¥–Ω–æ–µ: ${networkId})`);
    }
    if (tradingPointId && !isNaN(Number(tradingPointId))) {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ –¥–ª—è station
      const stationParam = String(Number(tradingPointId));
      url.searchParams.set('station', stationParam);
      console.log(`üîç STS API: –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä station = ${stationParam} (–∏—Å—Ö–æ–¥–Ω–æ–µ: ${tradingPointId})`);
    }

    console.log(`üîç STS API: –ò—Ç–æ–≥–æ–≤—ã–π URL: ${url.toString()}`);

    const headers = {
      'Authorization': `Bearer ${this.config.token}`,
      ...options.headers,
    };

    console.log('üîç STS API: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', headers);

    const response = await fetch(url.toString(), {
      ...options,
      headers,
      signal: AbortSignal.timeout(this.config.timeout || 30000),
    });

    console.log(`üîç STS API: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`üîç STS API: –û—à–∏–±–∫–∞ HTTP ${response.status}:`, errorText);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      if (response.status === 422) {
        console.error('üîç STS API: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (422)');
        console.error('üîç STS API: URL –∑–∞–ø—Ä–æ—Å–∞:', url.toString());
        console.error('üîç STS API: –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', errorText);
        
        try {
          const errorData = JSON.parse(errorText);
          console.error('üîç STS API: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ 422:', errorData);
          
          if (errorData.detail && Array.isArray(errorData.detail)) {
            const missingFields = errorData.detail
              .filter((err: any) => err.msg === "field required")
              .map((err: any) => err.loc[err.loc.length - 1]);
            
            const invalidFields = errorData.detail
              .filter((err: any) => err.type === "type_error.integer")
              .map((err: any) => err.loc[err.loc.length - 1]);
            
            if (missingFields.includes('system')) {
              throw new Error(`–û—à–∏–±–∫–∞ API –°–¢–°: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä "system" (–Ω–æ–º–µ—Ä —Å–µ—Ç–∏).\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. –í—ã–±—Ä–∞–Ω–∞ –ª–∏ —Å–µ—Ç—å –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ\n2. –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "external_id"\n3. –ó–Ω–∞—á–µ–Ω–∏–µ external_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º`);
            }
            
            if (missingFields.includes('station')) {
              throw new Error(`–û—à–∏–±–∫–∞ API –°–¢–°: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä "station" (–Ω–æ–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏).\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. –í—ã–±—Ä–∞–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ\n2. –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º`);
            }
            
            if (invalidFields.includes('system')) {
              throw new Error(`–û—à–∏–±–∫–∞ API –°–¢–°: –ü–∞—Ä–∞–º–µ—Ç—Ä "system" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${networkId}"\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–µ "external_id" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ - –æ–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.`);
            }
            
            if (invalidFields.includes('station')) {
              throw new Error(`–û—à–∏–±–∫–∞ API –°–¢–°: –ü–∞—Ä–∞–º–µ—Ç—Ä "station" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${tradingPointId}"\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ - –æ–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.`);
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            const otherErrors = errorData.detail
              .filter((err: any) => !missingFields.includes(err.loc[err.loc.length - 1]) && !invalidFields.includes(err.loc[err.loc.length - 1]))
              .map((err: any) => `${err.loc.join('.')}: ${err.msg}`);
            
            if (otherErrors.length > 0) {
              throw new Error(`–û—à–∏–±–∫–∞ API –°–¢–°: –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n${otherErrors.join('\n')}`);
            }
          }
          
          // –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
          throw new Error(`–û—à–∏–±–∫–∞ API –°–¢–° (422): –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.\n\nURL: ${url.toString()}\n\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${errorText}`);
          
        } catch (parseError) {
          console.error('üîç STS API: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É 422:', parseError);
          throw new Error(`–û—à–∏–±–∫–∞ API –°–¢–° (422): –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.\n\nURL: ${url.toString()}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã system –∏ station –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`);
        }
      }
      
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401 - —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
      if (response.status === 401) {
        console.log('üîç STS API: –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ 401, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
        if (this.config) {
          this.config.token = undefined;
          this.config.tokenExpiry = undefined;
          localStorage.setItem('sts-api-config', JSON.stringify(this.config));
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        const tokenRefreshed = await this.refreshTokenIfNeeded(true);
        
        if (tokenRefreshed) {
          console.log('üîç STS API: –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å...');
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          const retryHeaders = {
            'Authorization': `Bearer ${this.config?.token}`,
            ...options.headers,
          };
          
          const retryResponse = await fetch(url.toString(), {
            ...options,
            headers: retryHeaders,
            signal: AbortSignal.timeout(this.config?.timeout || 30000),
          });
          
          console.log(`üîç STS API: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${retryResponse.status} ${retryResponse.statusText}`);
          
          if (retryResponse.ok) {
            const retryContentType = retryResponse.headers.get('content-type');
            if (retryContentType?.includes('application/json')) {
              const retryJsonData = await retryResponse.json();
              console.log('üîç STS API: –î–∞–Ω–Ω—ã–µ JSON (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å):', retryJsonData);
              return retryJsonData;
            } else {
              const retryTextData = await retryResponse.text();
              console.log('üîç STS API: –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å):', retryTextData);
              return retryTextData as T;
            }
          } else {
            const retryErrorText = await retryResponse.text();
            console.error(`üîç STS API: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–∞–∫–∂–µ –Ω–µ—É—Å–ø–µ—à–µ–Ω ${retryResponse.status}:`, retryErrorText);
            throw new Error(`HTTP ${retryResponse.status}: ${retryResponse.statusText}`);
          }
        }
      }
      
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const contentType = response.headers.get('content-type');
    console.log('üîç STS API: Content-Type –æ—Ç–≤–µ—Ç–∞:', contentType);
    
    if (contentType?.includes('application/json')) {
      const jsonData = await response.json();
      console.log('üîç STS API: –î–∞–Ω–Ω—ã–µ JSON:', jsonData);
      return jsonData;
    } else {
      const textData = await response.text();
      console.log('üîç STS API: –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', textData);
      return textData as T;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
   */
  async getTanks(contextParams?: {networkId?: string; tradingPointId?: string}): Promise<Tank[]> {
    console.log('üîç STS API: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤...');
    
    try {
      console.log('üîç STS API: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ /v1/tanks');
      const data = await this.apiRequest<any>('/v1/tanks', {}, contextParams);
      
      console.log('üîç STS API: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', data);
      console.log('üîç STS API: –¢–∏–ø –æ—Ç–≤–µ—Ç–∞:', typeof data);
      console.log('üîç STS API: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Å—Å–∏–≤–æ–º:', Array.isArray(data));
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      if (Array.isArray(data)) {
        console.log(`üîç STS API: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${data.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∫–∞–∫ –º–∞—Å—Å–∏–≤`);
        const mappedTanks = data.map(this.mapApiTankToTank);
        console.log('üîç STS API: –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã:', mappedTanks);
        return mappedTanks;
      } else if (data && typeof data === 'object' && data.tanks) {
        console.log(`üîç STS API: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${data.tanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ –æ–±—ä–µ–∫—Ç–∞`);
        const mappedTanks = data.tanks.map(this.mapApiTankToTank);
        console.log('üîç STS API: –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã:', mappedTanks);
        return mappedTanks;
      } else {
        console.warn('üîç STS API: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', data);
        console.warn('üîç STS API: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
        return [];
      }
    } catch (error) {
      console.error('üîç STS API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ API –°–¢–°:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞
   */
  async getTank(tankId: number, contextParams?: {networkId?: string; tradingPointId?: string}): Promise<Tank | null> {
    try {
      const data = await this.apiRequest<any>(`/v1/tanks/${tankId}`, {}, contextParams);
      return this.mapApiTankToTank(data);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ ${tankId} –∏–∑ API –°–¢–°:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private mapApiTankToTank(apiTank: any): Tank {
    console.log('üîç STS API: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤—É–∞—Ä:', apiTank);
    
    // ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
    const id = parseInt(apiTank.number || apiTank.id || Math.floor(Math.random() * 1000));
    const name = `–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ${apiTank.number || id}`;
    
    // –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
    const fuelType = apiTank.fuel_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    // –û–±—ä–µ–º—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API (–≤ –ª–∏—Ç—Ä–∞—Ö)
    const currentLevelLiters = parseFloat(apiTank.volume || '0');
    const capacityLiters = parseFloat(apiTank.volume_max || '50000');
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    const currentPercent = capacityLiters > 0 ? (currentLevelLiters / capacityLiters) * 100 : 0;
    const minLevelPercent = 20; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    const criticalLevelPercent = 10;
    
    // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
    const temperature = parseFloat(apiTank.temperature || '15');
    
    // –£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–º)
    const waterLevelMm = parseFloat(apiTank.water?.level || '0');
    
    // –°—Ç–∞—Ç—É—Å –¥–∞—Ç—á–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞
    const sensors = [
      {
        name: '–£—Ä–æ–≤–µ–Ω—å',
        status: apiTank.state === 1 ? 'ok' : 'error'
      },
      {
        name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 
        status: apiTank.state === 1 ? 'ok' : 'error'
      }
    ];
    
    // –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –¢–†–ö (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–∏—Ö endpoints)
    const linkedPumps: Array<{ id: number; name: string; }> = [];
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º dt –∏–∑ API)
    const lastCalibration = apiTank.dt ? 
      new Date(apiTank.dt).toLocaleString('ru-RU') : 
      new Date().toLocaleDateString('ru-RU');

    const result = {
      id,
      name,
      fuelType,
      currentLevelLiters,
      capacityLiters,
      minLevelPercent,
      criticalLevelPercent,
      temperature,
      waterLevelMm,
      sensors,
      lastCalibration,
      linkedPumps,
      notifications: {
        enabled: true,
        drainAlerts: true,
        levelAlerts: true
      },
      thresholds: {
        criticalTemp: {
          min: -10,
          max: 40
        },
        maxWaterLevel: 10,
        notifications: {
          critical: true,
          minimum: true,
          temperature: true,
          water: true
        }
      },
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å API
      apiData: {
        number: apiTank.number,
        fuel: apiTank.fuel,
        fuel_name: apiTank.fuel_name,
        state: apiTank.state,
        volume_begin: parseFloat(apiTank.volume_begin || '0'),
        volume_end: parseFloat(apiTank.volume_end || '0'),
        volume_max: parseFloat(apiTank.volume_max || '0'),
        volume_free: parseFloat(apiTank.volume_free || '0'),
        volume: parseFloat(apiTank.volume || '0'),
        amount_begin: parseFloat(apiTank.amount_begin || '0'),
        amount_end: parseFloat(apiTank.amount_end || '0'),
        level: parseFloat(apiTank.level || '0'),
        water: {
          volume: parseFloat(apiTank.water?.volume || '0'),
          amount: parseFloat(apiTank.water?.amount || '0'),
          level: parseFloat(apiTank.water?.level || '0')
        },
        temperature: parseFloat(apiTank.temperature || '0'),
        density: parseFloat(apiTank.density || '0'),
        release: {
          volume: parseFloat(apiTank.release?.volume || '0'),
          amount: parseFloat(apiTank.release?.amount || '0')
        },
        dt: apiTank.dt
      }
    };

    console.log('üîç STS API: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä:', result);
    return result;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–∞—Ç—á–∏–∫–∞ –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private mapSensorStatus(apiStatus: any): string {
    if (typeof apiStatus === 'boolean') {
      return apiStatus ? 'ok' : 'error';
    }
    
    const status = String(apiStatus).toLowerCase();
    if (status === 'ok' || status === 'online' || status === 'active' || status === 'working') {
      return 'ok';
    }
    
    return 'error';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –∏ –≤–∫–ª—é—á–µ–Ω –ª–∏ API –°–¢–°
   */
  isConfigured(): boolean {
    return !!(this.config?.enabled && this.config?.url && this.config?.username && this.config?.password);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  getConfig(): STSApiConfig | null {
    return this.config;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
   */
  async forceRefreshToken(): Promise<boolean> {
    console.log('üîç STS API: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
    this.loadConfig(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    
    if (this.config) {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω
      this.config.token = undefined;
      this.config.tokenExpiry = undefined;
      localStorage.setItem('sts-api-config', JSON.stringify(this.config));
    }
    
    return this.refreshTokenIfNeeded(true);
  }

  // ===========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –î–†–£–ì–ò–• –†–ê–ó–î–ï–õ–û–í
  // ===========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¢–†–ö (—Ç–æ–ø–ª–∏–≤–æ—Ä–∞–∑–¥–∞—Ç–æ—á–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫)
   */
  async getPumps(contextParams?: {networkId?: string; tradingPointId?: string}): Promise<Pump[]> {
    console.log('üîç STS API: –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–†–ö...');
    
    try {
      const data = await this.apiRequest<any>('/v1/pumps', {}, contextParams);
      console.log('üîç STS API: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¢–†–ö:', data);
      
      if (Array.isArray(data)) {
        return data.map(this.mapApiPumpToPump);
      } else if (data && typeof data === 'object' && data.pumps) {
        return data.pumps.map(this.mapApiPumpToPump);
      }
      
      console.warn('üîç STS API: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¢–†–ö');
      return [];
    } catch (error) {
      console.error('üîç STS API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¢–†–ö:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂
   */
  async getSales(contextParams?: {networkId?: string; tradingPointId?: string}, dateFrom?: string, dateTo?: string): Promise<Sale[]> {
    console.log('üîç STS API: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏...');
    
    try {
      const endpoint = '/v1/sales';
      const data = await this.apiRequest<any>(endpoint, {}, contextParams);
      console.log('üîç STS API: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂:', data);
      
      if (Array.isArray(data)) {
        return data.map(this.mapApiSaleToSale);
      } else if (data && typeof data === 'object' && data.sales) {
        return data.sales.map(this.mapApiSaleToSale);
      }
      
      console.warn('üîç STS API: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂');
      return [];
    } catch (error) {
      console.error('üîç STS API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –ê–ó–° –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async getTerminalInfo(contextParams?: {networkId?: string; tradingPointId?: string}): Promise<TerminalInfo> {
    console.log('üîç STS API: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ...');
    
    if (!contextParams?.tradingPointId) {
      throw new Error('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏');
    }
    
    try {
      const endpoint = `/v2/info`;
      console.log('üîç STS API: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –ø–æ endpoint:', endpoint);
      
      const data = await this.apiRequest<any>(endpoint, {}, contextParams);
      console.log('üîç STS API: –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:', data);
      
      return this.mapApiTerminalInfo(data);
    } catch (error) {
      console.error('üîç STS API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return this.createMockTerminalInfo();
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private mapApiTerminalInfo(apiData: any): TerminalInfo {
    // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const data = Array.isArray(apiData) ? apiData[0] : apiData;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ POS —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
    const posData = data?.pos?.[0] || {};
    const shiftData = data?.shift || posData?.shift || {};
    const devices = posData?.devices || [];
    
    // –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∏–º–µ–Ω–∏
    const fiscalDevice = devices.find(d => d.name === '–§–∏—Å–∫–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
    const billAcceptor = devices.find(d => d.name === '–ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫');
    const cardReader = devices.find(d => d.name === '–ö–∞—Ä—Ç—Ä–∏–¥–µ—Ä');
    const mpsReader = devices.find(d => d.name === '–ú–ü–°-—Ä–∏–¥–µ—Ä');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const getDeviceStatus = (device: any) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–∞ –≤ API
      const stateParam = device?.params?.find(p => p.name === '–°–æ—Å—Ç–æ—è–Ω–∏–µ');
      const directValue = device?.value;
      const directStatus = device?.status;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const statusValue = stateParam?.value || directValue || directStatus;
      
      console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', {
        deviceName: device?.name,
        stateParam: stateParam,
        directValue: directValue,
        directStatus: directStatus,
        finalStatusValue: statusValue
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      if (statusValue === 'OK' || statusValue === 'ok' || 
          statusValue === 'online' || statusValue === 'active' ||
          statusValue === 'ready' || statusValue === 'working' ||
          statusValue === 'normal' || statusValue === 1 || statusValue === '1') {
        return 'online';
      }
      
      return 'error';
    };
    
    return {
      terminal: {
        id: `${data?.system || 0}-${data?.station || 0}`,
        name: `–ê–ó–° ${data?.station || 0}`,
        version: '2.1.4',
        status: posData?.dt_info ? 'online' : 'offline',
        uptime: posData?.uptime ? new Date(posData.uptime).getTime() : 0,
        lastHeartbeat: posData?.dt_info || new Date().toISOString(),
        cpu: {
          usage: 25, // –ó–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ –≤ API –Ω–µ—Ç —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö
          temperature: 42
        },
        memory: {
          total: 8192,
          used: 3456,
          free: 4736
        },
        disk: {
          total: 250000,
          used: 125000, 
          free: 125000
        },
        network: {
          ip: '192.168.1.100',
          connected: true,
          speed: 1000
        }
      },
      pumps: [], // –¢–†–ö –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ getTanks
      tanks: [], // –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ getTanks
      pos: {
        status: posData?.number ? 'online' : 'offline',
        version: `POS ${posData?.number || 1}`,
        lastTransaction: posData?.dt_info ? new Date(posData.dt_info).toLocaleTimeString('ru-RU') : '',
        cashierConnected: shiftData?.state === '–û—Ç–∫—Ä—ã—Ç–∞—è'
      },
      fiscal: {
        status: getDeviceStatus(fiscalDevice) === 'online' ? 'ready' : 'error',
        model: fiscalDevice ? '–§–∏—Å–∫–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 'Unknown',
        serialNumber: `ID: ${fiscalDevice?.id || 0}`,
        documentNumber: shiftData?.number || 0
      },
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ
      shift: {
        number: shiftData?.number || 0,
        state: shiftData?.state || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        openedAt: shiftData?.dt_open || posData?.shift?.dt_open
      },
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
      devices: {
        billAcceptor: {
          status: getDeviceStatus(billAcceptor),
          name: billAcceptor?.name || '–ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫',
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞ –∏–∑ V2 API
          billCount: billAcceptor?.params?.find(p => p.name === '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø—é—Ä')?.value ? 
            parseInt(billAcceptor.params.find(p => p.name === '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø—é—Ä').value) : undefined,
          billAmount: billAcceptor?.params?.find(p => p.name === '–°—É–º–º–∞ –∫—É–ø—é—Ä')?.value ?
            parseFloat(billAcceptor.params.find(p => p.name === '–°—É–º–º–∞ –∫—É–ø—é—Ä').value) : undefined
        },
        cardReader: {
          status: getDeviceStatus(cardReader),
          name: cardReader?.name || '–ö–∞—Ä—Ç—Ä–∏–¥–µ—Ä'
        },
        mpsReader: {
          status: getDeviceStatus(mpsReader),
          name: mpsReader?.name || '–ú–ü–°-—Ä–∏–¥–µ—Ä'
        }
      }
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
   */
  private createMockTerminalInfo(): TerminalInfo {
    return {
      terminal: {
        id: 'demo-terminal',
        name: '–î–µ–º–æ —Ç–µ—Ä–º–∏–Ω–∞–ª',
        version: '2.1.4',
        status: 'online',
        uptime: 156789,
        lastHeartbeat: new Date().toISOString(),
        cpu: { usage: 25, temperature: 42 },
        memory: { total: 8192, used: 3456, free: 4736 },
        disk: { total: 250000, used: 125000, free: 125000 },
        network: { ip: '192.168.1.100', connected: true, speed: 1000 }
      },
      pumps: [
        { id: 1, name: '–¢–†–ö-01', status: 'active', fuelType: '–ê–ò-92', nozzles: [{ id: 1, status: 'ready' }, { id: 2, status: 'ready' }] },
        { id: 2, name: '–¢–†–ö-02', status: 'active', fuelType: '–ê–ò-95', nozzles: [{ id: 3, status: 'ready' }, { id: 4, status: 'maintenance' }] }
      ],
      tanks: [
        { id: 1, name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ1', fuelType: '–ê–ò-92', level: 15000, capacity: 25000, temperature: 18, status: 'normal' },
        { id: 2, name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ2', fuelType: '–ê–ò-95', level: 8500, capacity: 25000, temperature: 17, status: 'low' }
      ],
      pos: { status: 'online', version: '3.2.1', lastTransaction: new Date().toISOString(), cashierConnected: true },
      fiscal: { status: 'ready', model: '–ê–¢–û–õ 91–§', serialNumber: 'FP123456789', documentNumber: 45123 }
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
   */
  async getPrices(contextParams?: {networkId?: string; tradingPointId?: string}): Promise<Price[]> {
    console.log('üîç STS API: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã...');
    
    if (!contextParams?.tradingPointId) {
      throw new Error('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ (station)');
    }
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint: /v1/pos/prices/{station_number}
      const endpoint = `/v1/pos/prices/${contextParams.tradingPointId}`;
      console.log('üîç STS API: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—ã –ø–æ endpoint:', endpoint);
      
      const data = await this.apiRequest<any>(endpoint, {}, contextParams);
      console.log('üîç STS API: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω:', data);
      
      if (Array.isArray(data)) {
        return data.map(this.mapApiPriceToPrice);
      } else if (data && typeof data === 'object' && data.prices) {
        return data.prices.map(this.mapApiPriceToPrice);
      }
      
      console.warn('üîç STS API: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω');
      return [];
    } catch (error) {
      console.error('üîç STS API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  async getTransactions(dateFrom?: string, dateTo?: string, limit?: number, contextParams?: {networkId?: string; tradingPointId?: string}): Promise<Transaction[]> {
    console.log('üîç STS API: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    
    try {
      const url = new URL('/v1/transactions', this.config?.url || '');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
      if (dateFrom) {
        url.searchParams.set('date_from', dateFrom);
        console.log(`üîç STS API: –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä date_from = ${dateFrom}`);
      }
      if (dateTo) {
        url.searchParams.set('date_to', dateTo);
        console.log(`üîç STS API: –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä date_to = ${dateTo}`);
      }
      if (limit && limit > 0) {
        url.searchParams.set('limit', limit.toString());
        console.log(`üîç STS API: –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä limit = ${limit}`);
      }

      const endpoint = url.pathname + url.search;
      console.log('üîç STS API: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', endpoint);
      
      const data = await this.apiRequest<any>(endpoint, {}, contextParams);
      console.log('üîç STS API: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', data);
      
      if (Array.isArray(data)) {
        const mappedTransactions = data.map(tx => this.mapApiTransactionToTransaction(tx));
        console.log('üîç STS API: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', mappedTransactions.length);
        return mappedTransactions;
      } else if (data && typeof data === 'object' && data.transactions) {
        const mappedTransactions = data.transactions.map(tx => this.mapApiTransactionToTransaction(tx));
        console.log('üîç STS API: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞:', mappedTransactions.length);
        return mappedTransactions;
      }
      
      console.warn('üîç STS API: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', data);
      return [];
    } catch (error) {
      console.error('üîç STS API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–ø–ª–∏–≤–∞
   */
  async updatePrice(fuelType: string, price: number): Promise<boolean> {
    console.log(`üîç STS API: –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É ${fuelType} –Ω–∞ ${price}...`);
    
    try {
      const data = await this.apiRequest<any>('/v1/prices', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ fuelType, price })
      });
      
      console.log('üîç STS API: –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data);
      return true;
    } catch (error) {
      console.error('üîç STS API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
      throw error;
    }
  }

  // ===========================================
  // MAPPER –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø –î–ê–ù–ù–´–•
  // ===========================================

  private mapApiPumpToPump(apiPump: any): Pump {
    return {
      id: parseInt(apiPump.id || apiPump.pumpId || Math.random() * 1000),
      name: apiPump.name || apiPump.pumpName || `–¢–†–ö-${apiPump.id}`,
      status: this.mapSensorStatus(apiPump.status || apiPump.online),
      fuelType: apiPump.fuelType || apiPump.fuel_type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      currentPrice: parseFloat(apiPump.currentPrice || apiPump.price || '0'),
      totalSales: parseFloat(apiPump.totalSales || apiPump.total_sales || '0'),
      dailySales: parseFloat(apiPump.dailySales || apiPump.daily_sales || '0'),
      lastTransaction: apiPump.lastTransaction || apiPump.last_transaction || new Date().toISOString(),
      nozzles: Array.isArray(apiPump.nozzles) ? apiPump.nozzles.map((n: any, i: number) => ({
        id: n.id || i + 1,
        name: n.name || `–ü–∏—Å—Ç–æ–ª–µ—Ç ${i + 1}`,
        status: this.mapSensorStatus(n.status || n.online)
      })) : []
    };
  }

  private mapApiSaleToSale(apiSale: any): Sale {
    return {
      id: parseInt(apiSale.id || apiSale.saleId || Math.random() * 1000),
      date: apiSale.date || apiSale.timestamp || new Date().toISOString(),
      pumpId: parseInt(apiSale.pumpId || apiSale.pump_id || '0'),
      pumpName: apiSale.pumpName || apiSale.pump_name || `–¢–†–ö-${apiSale.pumpId}`,
      fuelType: apiSale.fuelType || apiSale.fuel_type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      volume: parseFloat(apiSale.volume || apiSale.liters || '0'),
      price: parseFloat(apiSale.price || apiSale.pricePerLiter || '0'),
      total: parseFloat(apiSale.total || apiSale.amount || '0'),
      cardNumber: apiSale.cardNumber || apiSale.card_number,
      receiptNumber: apiSale.receiptNumber || apiSale.receipt_number || `${Date.now()}`
    };
  }

  private mapApiPriceToPrice(apiPrice: any): Price {
    console.log('üîç –ú–∞–ø–ø–∏–Ω–≥ —Ü–µ–Ω—ã API -> Price:', apiPrice);
    
    // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–¥–æ–≤/–Ω–æ–º–µ—Ä–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –≤ —á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    // –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–∞–ø–ø–∏–Ω–≥–µ service_code -> service_name
    const fuelTypeMap: Record<string, string> = {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ service_code –∏–∑ API
      '1': '–ê–ò-100',
      '2': '–ê–ò-92',
      '3': '–ê–ò-95',
      '4': '–ê–ò-98',
      '5': '–î–¢',
      '6': '–î–¢ –∑–∏–º.',
      '7': '–°–£–ì',
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      'AI92': '–ê–ò-92',
      'AI95': '–ê–ò-95',
      'AI98': '–ê–ò-98',
      'AI100': '–ê–ò-100',
      'DT': '–î–¢',
      'SUG': '–°–£–ì',
      'diesel': '–î–¢',
      'petrol': '–ê–ò-95',
      'gas': '–°–£–ì',
      'lpg': '–°–£–ì'
    };
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–∏–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
    let rawFuelType = apiPrice.service_name ||      // –ø—Ä—è–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
                     apiPrice.service_code ||       // –∫–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞  
                     apiPrice.fuelType || 
                     apiPrice.fuel_type || 
                     apiPrice.type || 
                     apiPrice.fuel || 
                     apiPrice.name ||
                     apiPrice.product ||
                     apiPrice.fuel_name ||
                     apiPrice.fuel_id ||
                     apiPrice.id;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
    rawFuelType = String(rawFuelType || '').trim();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    const fuelType = fuelTypeMap[rawFuelType] || 
                    fuelTypeMap[rawFuelType.toLowerCase()] || 
                    fuelTypeMap[rawFuelType.toUpperCase()] || 
                    (rawFuelType !== '' && rawFuelType !== 'undefined' ? rawFuelType : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    
    console.log('üîç –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤–∏–¥ —Ç–æ–ø–ª–∏–≤–∞:', fuelType, '–∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', {
      rawFuelType: rawFuelType,
      service_name: apiPrice.service_name,      // –ù–û–í–û–ï: –ø—Ä—è–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
      service_code: apiPrice.service_code,      // –ù–û–í–û–ï: –∫–æ–¥ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
      fuelType: apiPrice.fuelType,
      fuel_type: apiPrice.fuel_type,
      type: apiPrice.type,
      fuel: apiPrice.fuel,
      name: apiPrice.name,
      product: apiPrice.product,
      fuel_name: apiPrice.fuel_name,
      fuel_id: apiPrice.fuel_id,
      id: apiPrice.id
    });
                    
    const mapped = {
      id: parseInt(apiPrice.id || Math.random() * 1000),
      fuelType: fuelType,
      price: parseFloat(apiPrice.price || apiPrice.amount || '0'),
      effectiveDate: apiPrice.effectiveDate || apiPrice.effective_date || new Date().toISOString(),
      createdBy: apiPrice.createdBy || apiPrice.created_by || '–°–∏—Å—Ç–µ–º–∞',
      status: apiPrice.status || 'active'
    };
    
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–ø–ø–∏–Ω–≥–∞:', mapped);
    return mapped;
  }

  private mapApiTransactionToTransaction(apiTransaction: any): Transaction {
    console.log('üîç STS API: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:', apiTransaction);
    
    // ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const id = parseInt(apiTransaction.id || apiTransaction.transaction_id || Math.floor(Math.random() * 1000000));
    const transactionId = apiTransaction.transaction_id || apiTransaction.id?.toString() || `TR-${id}`;
    
    // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã STS API
    const startTime = apiTransaction.dt || apiTransaction.start_time || apiTransaction.timestamp || new Date().toISOString();
    const endTime = apiTransaction.end_time || apiTransaction.completed_at || null;
    const date = startTime;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¢–†–ö –∏ —Ç–æ–ø–ª–∏–≤–µ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const pumpId = apiTransaction.pos ? parseInt(apiTransaction.pos) : undefined;
    const pumpName = pumpId ? `–¢–†–ö-${pumpId}` : undefined;
    const fuelType = apiTransaction.fuel_name || apiTransaction.fuel_type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    // –û–±—ä–µ–º—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const volume = parseFloat(apiTransaction.quantity || '0');
    const price = parseFloat(apiTransaction.price || '0'); 
    const total = parseFloat(apiTransaction.cost || '0');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const cardNumber = apiTransaction.card || apiTransaction.card_number || apiTransaction.cardNumber;
    const receiptNumber = apiTransaction.receipt_number || apiTransaction.receiptNumber || `R-${id}`;
    
    // –°—Ç–∞—Ç—É—Å –∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    const status = this.mapTransactionStatus(apiTransaction.status || apiTransaction.state || 'completed');
    const operationType = this.mapOperationType(apiTransaction.operation_type || apiTransaction.type || 'sale');
    
    // –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (pay_type.name)
    const paymentMethod = this.mapPaymentMethod(
      apiTransaction.pay_type?.name || 
      apiTransaction.payment_method || 
      apiTransaction.payment_type
    );
    
    // –õ–æ–∫–∞—Ü–∏—è
    const networkId = apiTransaction.network_id || apiTransaction.system_id;
    const tradingPointId = apiTransaction.station_id || apiTransaction.trading_point_id;
    
    // –û–ø–µ—Ä–∞—Ç–æ—Ä
    const operatorName = apiTransaction.operator_name || apiTransaction.operator || apiTransaction.cashier;
    
    // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    let duration: number | undefined;
    if (endTime && startTime) {
      const startMs = new Date(startTime).getTime();
      const endMs = new Date(endTime).getTime();
      duration = (endMs - startMs) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
    } else if (apiTransaction.duration) {
      duration = parseFloat(apiTransaction.duration);
    }

    const result: Transaction = {
      id,
      transactionId,
      date,
      startTime,
      endTime: endTime || undefined,
      pumpId,
      pumpName,
      fuelType,
      volume,
      price,
      total,
      cardNumber,
      receiptNumber,
      status,
      operationType,
      paymentMethod,
      networkId: networkId?.toString(),
      tradingPointId: tradingPointId?.toString(),
      operatorName,
      duration,
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API
      apiData: apiTransaction
    };

    console.log('üîç STS API: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', result);
    return result;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private mapTransactionStatus(apiStatus: any): string {
    if (!apiStatus) return 'pending';
    
    const status = String(apiStatus).toLowerCase();
    switch (status) {
      case 'completed':
      case 'success':
      case 'finished':
      case 'done':
        return 'completed';
      case 'in_progress':
      case 'processing':
      case 'active':
      case 'running':
        return 'in_progress';
      case 'failed':
      case 'error':
      case 'cancelled':
      case 'aborted':
        return 'failed';
      case 'pending':
      case 'waiting':
      case 'queued':
        return 'pending';
      default:
        return 'pending';
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private mapOperationType(apiType: any): string {
    if (!apiType) return 'sale';
    
    const type = String(apiType).toLowerCase();
    switch (type) {
      case 'sale':
      case 'fuel_sale':
      case 'transaction':
        return 'sale';
      case 'refund':
      case 'return':
        return 'refund';
      case 'correction':
      case 'adjustment':
        return 'correction';
      case 'maintenance':
      case 'service':
        return 'maintenance';
      case 'tank_loading':
      case 'delivery':
        return 'tank_loading';
      case 'diagnostics':
      case 'test':
        return 'diagnostics';
      case 'calibration':
        return 'sensor_calibration';
      default:
        return 'sale';
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏–∑ API
   */
  private mapTerminalStatus(status: any): 'online' | 'offline' | 'maintenance' {
    if (!status) return 'offline';
    const s = String(status).toLowerCase();
    if (s.includes('online') || s.includes('active') || s === '1') return 'online';
    if (s.includes('maintenance') || s.includes('service')) return 'maintenance';
    return 'offline';
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å POS –∏–∑ API
   */
  private mapPosStatus(status: any): 'online' | 'offline' | 'error' {
    if (!status) return 'offline';
    const s = String(status).toLowerCase();
    if (s.includes('online') || s.includes('active') || s === '1') return 'online';
    if (s.includes('error') || s.includes('fault')) return 'error';
    return 'offline';
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ API
   */
  private mapFiscalStatus(status: any): 'ready' | 'error' | 'maintenance' {
    if (!status) return 'error';
    const s = String(status).toLowerCase();
    if (s.includes('ready') || s.includes('ok') || s === '1') return 'ready';
    if (s.includes('maintenance') || s.includes('service')) return 'maintenance';
    return 'error';
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¢–†–ö –∏–∑ API –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
   */
  private mapApiPumpInfo = (apiPump: any) => {
    return {
      id: parseInt(apiPump.id || apiPump.number || 0),
      name: apiPump.name || `–¢–†–ö-${String(apiPump.id || apiPump.number || '00').padStart(2, '0')}`,
      status: this.mapPumpStatus(apiPump.status),
      fuelType: apiPump.fuelType || apiPump.fuel_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      nozzles: Array.isArray(apiPump.nozzles) ? apiPump.nozzles.map((nozzle: any) => ({
        id: parseInt(nozzle.id || nozzle.number || 0),
        status: this.mapNozzleStatus(nozzle.status)
      })) : []
    };
  };

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–µ –∏–∑ API –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
   */
  private mapApiTankInfo = (apiTank: any) => {
    return {
      id: parseInt(apiTank.id || apiTank.number || 0),
      name: apiTank.name || `–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ${apiTank.id || apiTank.number || '?'}`,
      fuelType: apiTank.fuelType || apiTank.fuel_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      level: parseFloat(apiTank.level || apiTank.volume || 0),
      capacity: parseFloat(apiTank.capacity || apiTank.volume_max || 50000),
      temperature: parseFloat(apiTank.temperature || 15),
      status: this.mapTankStatus(apiTank.status, parseFloat(apiTank.level || 0), parseFloat(apiTank.capacity || 50000))
    };
  };

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å –¢–†–ö –∏–∑ API
   */
  private mapPumpStatus(status: any): 'active' | 'offline' | 'error' | 'maintenance' {
    if (!status) return 'offline';
    const s = String(status).toLowerCase();
    if (s.includes('active') || s.includes('online') || s === '1') return 'active';
    if (s.includes('error') || s.includes('fault') || s.includes('alarm')) return 'error';
    if (s.includes('maintenance') || s.includes('service')) return 'maintenance';
    return 'offline';
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∏—Å—Ç–æ–ª–µ—Ç–∞ –∏–∑ API
   */
  private mapNozzleStatus(status: any): 'ready' | 'dispensing' | 'error' | 'maintenance' {
    if (!status) return 'ready';
    const s = String(status).toLowerCase();
    if (s.includes('dispensing') || s.includes('fueling')) return 'dispensing';
    if (s.includes('error') || s.includes('fault')) return 'error';
    if (s.includes('maintenance') || s.includes('service')) return 'maintenance';
    return 'ready';
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ –∏–∑ API
   */
  private mapTankStatus(status: any, level: number, capacity: number): 'normal' | 'low' | 'critical' | 'error' {
    if (status && String(status).toLowerCase().includes('error')) return 'error';
    
    const percentage = capacity > 0 ? (level / capacity) * 100 : 0;
    if (percentage < 10) return 'critical';
    if (percentage < 20) return 'low';
    return 'normal';
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private mapPaymentMethod(apiMethod: any): string | undefined {
    if (!apiMethod) return undefined;
    
    const method = String(apiMethod).toLowerCase();
    switch (method) {
      case 'cash':
      case '–Ω–∞–ª–∏—á–Ω—ã–µ':
        return 'cash';
      case 'card':
      case 'bank_card':
      case 'credit_card':
      case 'debit_card':
      case '–∫–∞—Ä—Ç–∞':
      case '—Å–±–µ—Ä–±–∞–Ω–∫':  // –î–æ–±–∞–≤–ª—è–µ–º –°–±–µ—Ä–±–∞–Ω–∫ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return 'bank_card';
      case 'fuel_card':
      case '—Ç–æ–ø–ª–∏–≤–Ω–∞—è_–∫–∞—Ä—Ç–∞':
      case 'fleet_card':
        return 'fuel_card';
      case 'online':
      case 'online_order':
      case 'digital':
      case '–º–æ–±–∏–ª.–ø':      // –î–æ–±–∞–≤–ª—è–µ–º "–ú–æ–±–∏–ª.–ü" –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö STS API
      case '–º–æ–±–∏–ª—å–Ω–∞—è':
      case '–º–æ–±–∏–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞':
      case 'mobile':
      case 'mobile_payment':
        return 'online_order';
      default:
        return 'cash'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ª–∏—á–Ω—ã–µ
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
export type { Transaction, Tank, Pump, Sale, Price, TerminalInfo };

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const stsApiService = new STSApiService();
export default stsApiService;

