/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * –û–ë–ù–û–í–õ–ï–ù: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É localStorage –∏ Supabase
 */

import { apiConfigServiceDB } from './apiConfigServiceDB';
import { systemTypesSupabaseService } from './systemTypesSupabaseService';

export interface SystemType {
  id: string;
  value: string; // —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–¥ (fuel_tank, control_system, etc.)
  label: string; // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  description?: string;
  isActive: boolean;
  createdAt: string;
  updatedAt?: string;
}

export interface SystemTypeInput {
  value: string;
  label: string;
  description?: string;
  isActive?: boolean;
}

export interface SystemTypeUpdateInput extends SystemTypeInput {
  isActive?: boolean;
}

// ‚ùå MOCK –ò LOCALSTORAGE –£–î–ê–õ–ï–ù–´ –ò–ó –°–û–û–ë–†–ê–ñ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ systemTypesSupabaseService

function getSystemTypesFromStorage(): SystemType[] {
  throw new Error('–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ systemTypesSupabaseService');
}

function saveSystemTypesToStorage(types: SystemType[]): void {
  throw new Error('–õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ systemTypesSupabaseService');
  try {
    localStorage.setItem(SYSTEM_TYPES_KEY, JSON.stringify(types));
  } catch (error) {
    console.error('Error saving system types to storage:', error);
  }
}

// –ù–æ–≤—ã–π API –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
export const systemTypesService = {
  async initialize(): Promise<void> {
    try {
      await apiConfigServiceDB.initialize();
      console.log('‚úÖ SystemTypesService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SystemTypesService:', error);
    }
  },

  async isMockMode(): Promise<boolean> {
    try {
      return await apiConfigServiceDB.isMockMode();
    } catch (error) {
      return true;
    }
  },

  async getAllSystemTypes(): Promise<SystemType[]> {
    try {
      const isMock = await this.isMockMode();
      
      if (isMock) {
        console.log('üîÑ SystemTypesService: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localStorage —Ä–µ–∂–∏–º');
        return getSystemTypesFromStorage().filter(type => type.isActive);
      } else {
        console.log('üîÑ SystemTypesService: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase —Ä–µ–∂–∏–º');
        try {
          return await systemTypesSupabaseService.list();
        } catch (error) {
          console.warn('‚ö†Ô∏è Fallback –Ω–∞ localStorage:', error);
          return getSystemTypesFromStorage().filter(type => type.isActive);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤:', error);
      return getSystemTypesFromStorage().filter(type => type.isActive);
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
  async list(): Promise<SystemType[]> {
    return this.getAllSystemTypes();
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
  async listAll(): Promise<SystemType[]> {
    try {
      const isMock = await this.isMockMode();
      
      if (isMock) {
        console.log('üîÑ SystemTypesService.listAll: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localStorage —Ä–µ–∂–∏–º');
        return getSystemTypesFromStorage();
      } else {
        console.log('üîÑ SystemTypesService.listAll: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase —Ä–µ–∂–∏–º');
        try {
          return await systemTypesSupabaseService.listAll();
        } catch (error) {
          console.warn('‚ö†Ô∏è Fallback –Ω–∞ localStorage:', error);
          return getSystemTypesFromStorage();
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤:', error);
      return getSystemTypesFromStorage();
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –ø–æ ID
  async get(id: string): Promise<SystemType | null> {
    try {
      const isMock = await this.isMockMode();
      
      if (isMock) {
        await new Promise(resolve => setTimeout(resolve, 50));
        return getSystemTypesFromStorage().find(type => type.id === id) || null;
      } else {
        try {
          return await systemTypesSupabaseService.get(id);
        } catch (error) {
          console.warn('‚ö†Ô∏è Fallback –Ω–∞ localStorage:', error);
          return getSystemTypesFromStorage().find(type => type.id === id) || null;
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–∏–ø–∞ ${id}:`, error);
      return getSystemTypesFromStorage().find(type => type.id === id) || null;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –ø–æ value
  async getByValue(value: string): Promise<SystemType | null> {
    try {
      const isMock = await this.isMockMode();
      
      if (isMock) {
        await new Promise(resolve => setTimeout(resolve, 50));
        return getSystemTypesFromStorage().find(type => type.value === value) || null;
      } else {
        try {
          return await systemTypesSupabaseService.getByValue(value);
        } catch (error) {
          console.warn('‚ö†Ô∏è Fallback –Ω–∞ localStorage:', error);
          return getSystemTypesFromStorage().find(type => type.value === value) || null;
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–∏–ø–∞ ${value}:`, error);
      return getSystemTypesFromStorage().find(type => type.value === value) || null;
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø
  async create(input: SystemTypeInput): Promise<SystemType> {
    try {
      const isMock = await this.isMockMode();
      
      if (isMock) {
        console.log('üîÑ SystemTypesService.create: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localStorage —Ä–µ–∂–∏–º');
        await new Promise(resolve => setTimeout(resolve, 100));
        
        const types = getSystemTypesFromStorage();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ value
        if (types.some(type => type.value === input.value)) {
          throw new Error(`–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø —Å –∫–æ–¥–æ–º "${input.value}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }

        const newType: SystemType = {
          ...input,
          id: Date.now().toString(),
          isActive: input.isActive ?? true,
          createdAt: new Date().toISOString()
        };

        const updatedTypes = [...types, newType];
        saveSystemTypesToStorage(updatedTypes);
        
        return newType;
      } else {
        console.log('üîÑ SystemTypesService.create: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase —Ä–µ–∂–∏–º');
        try {
          return await systemTypesSupabaseService.create(input);
        } catch (error) {
          console.warn('‚ö†Ô∏è Fallback –Ω–∞ localStorage:', error);
          // Fallback –Ω–∞ localStorage
          const types = getSystemTypesFromStorage();
          
          if (types.some(type => type.value === input.value)) {
            throw new Error(`–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø —Å –∫–æ–¥–æ–º "${input.value}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }

          const newType: SystemType = {
            ...input,
            id: Date.now().toString(),
            isActive: input.isActive ?? true,
            createdAt: new Date().toISOString()
          };

          const updatedTypes = [...types, newType];
          saveSystemTypesToStorage(updatedTypes);
          
          return newType;
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–∏–ø–∞:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø
  async update(id: string, input: SystemTypeUpdateInput): Promise<SystemType | null> {
    try {
      const isMock = await this.isMockMode();
      
      if (isMock) {
        console.log('üîÑ SystemTypesService.update: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localStorage —Ä–µ–∂–∏–º');
        await new Promise(resolve => setTimeout(resolve, 100));
        
        const types = getSystemTypesFromStorage();
        const index = types.findIndex(type => type.id === id);
        
        if (index === -1) return null;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ value (–∏—Å–∫–ª—é—á–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç)
        if (input.value && types.some(type => type.value === input.value && type.id !== id)) {
          throw new Error(`–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø —Å –∫–æ–¥–æ–º "${input.value}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }

        const updatedType: SystemType = {
          ...types[index],
          ...input,
          updatedAt: new Date().toISOString()
        };

        types[index] = updatedType;
        saveSystemTypesToStorage(types);
        
        return updatedType;
      } else {
        console.log('üîÑ SystemTypesService.update: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase —Ä–µ–∂–∏–º');
        try {
          return await systemTypesSupabaseService.update(id, input);
        } catch (error) {
          console.warn('‚ö†Ô∏è Fallback –Ω–∞ localStorage:', error);
          // Fallback –Ω–∞ localStorage
          const types = getSystemTypesFromStorage();
          const index = types.findIndex(type => type.id === id);
          
          if (index === -1) return null;
          
          if (input.value && types.some(type => type.value === input.value && type.id !== id)) {
            throw new Error(`–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø —Å –∫–æ–¥–æ–º "${input.value}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }

          const updatedType: SystemType = {
            ...types[index],
            ...input,
            updatedAt: new Date().toISOString()
          };

          types[index] = updatedType;
          saveSystemTypesToStorage(types);
          
          return updatedType;
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–∏–ø–∞ ${id}:`, error);
      throw error;
    }
  },

  // –£–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø
  async delete(id: string): Promise<boolean> {
    try {
      const isMock = await this.isMockMode();
      
      if (isMock) {
        console.log('üîÑ SystemTypesService.delete: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localStorage —Ä–µ–∂–∏–º');
        await new Promise(resolve => setTimeout(resolve, 100));
        
        const types = getSystemTypesFromStorage();
        const typeToDelete = types.find(type => type.id === id);
        
        if (!typeToDelete) return false;

        typeToDelete.isActive = false;
        typeToDelete.updatedAt = new Date().toISOString();
        
        saveSystemTypesToStorage(types);
        return true;
      } else {
        console.log('üîÑ SystemTypesService.delete: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase —Ä–µ–∂–∏–º');
        try {
          return await systemTypesSupabaseService.delete(id);
        } catch (error) {
          console.warn('‚ö†Ô∏è Fallback –Ω–∞ localStorage:', error);
          // Fallback –Ω–∞ localStorage
          const types = getSystemTypesFromStorage();
          const typeToDelete = types.find(type => type.id === id);
          
          if (!typeToDelete) return false;

          typeToDelete.isActive = false;
          typeToDelete.updatedAt = new Date().toISOString();
          
          saveSystemTypesToStorage(types);
          return true;
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–∏–ø–∞ ${id}:`, error);
      return false;
    }
  },

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø (—Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º)
  async restore(id: string): Promise<boolean> {
    try {
      const isMock = await this.isMockMode();
      
      if (isMock) {
        console.log('üîÑ SystemTypesService.restore: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localStorage —Ä–µ–∂–∏–º');
        await new Promise(resolve => setTimeout(resolve, 100));
        
        const types = getSystemTypesFromStorage();
        const typeToRestore = types.find(type => type.id === id);
        
        if (!typeToRestore) return false;

        typeToRestore.isActive = true;
        typeToRestore.updatedAt = new Date().toISOString();
        
        saveSystemTypesToStorage(types);
        return true;
      } else {
        console.log('üîÑ SystemTypesService.restore: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase —Ä–µ–∂–∏–º');
        try {
          return await systemTypesSupabaseService.restore(id);
        } catch (error) {
          console.warn('‚ö†Ô∏è Fallback –Ω–∞ localStorage:', error);
          // Fallback –Ω–∞ localStorage
          const types = getSystemTypesFromStorage();
          const typeToRestore = types.find(type => type.id === id);
          
          if (!typeToRestore) return false;

          typeToRestore.isActive = true;
          typeToRestore.updatedAt = new Date().toISOString();
          
          saveSystemTypesToStorage(types);
          return true;
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–∏–ø–∞ ${id}:`, error);
      return false;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è dropdown (–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã)
  async getOptions(): Promise<Array<{value: string, label: string}>> {
    try {
      const isMock = await this.isMockMode();
      
      if (isMock) {
        const activeTypes = await this.list();
        return activeTypes.map(type => ({
          value: type.value,
          label: type.label
        }));
      } else {
        try {
          return await systemTypesSupabaseService.getOptions();
        } catch (error) {
          console.warn('‚ö†Ô∏è Fallback –Ω–∞ localStorage:', error);
          const activeTypes = await this.list();
          return activeTypes.map(type => ({
            value: type.value,
            label: type.label
          }));
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤:', error);
      return [];
    }
  }
};

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
export const systemTypesAPI = systemTypesService;