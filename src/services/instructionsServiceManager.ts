/**
 * Service Manager –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É mock –∏ real database –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
 */

import { instructionsService } from './instructionsService';
import { externalInstructionsService } from './externalInstructionsService';
import type {
  InstructionTopic,
  InstructionVersion,
  InstructionStats,
  CreateInstructionTopicRequest,
  CreateInstructionVersionRequest,
  UpdateInstructionVersionRequest,
  InstructionForUser
} from '@/types/instructions';

interface InstructionsServiceInterface {
  getTopics(): Promise<InstructionTopic[]>;
  getTopicByKey(key: string): Promise<InstructionTopic | null>;
  createTopic(request: CreateInstructionTopicRequest): Promise<InstructionTopic>;
  getVersions(topicId: string): Promise<InstructionVersion[]>;
  createVersion(request: CreateInstructionVersionRequest): Promise<InstructionVersion>;
  updateVersion(versionId: string, request: UpdateInstructionVersionRequest): Promise<InstructionVersion>;
  publishVersion(versionId: string): Promise<InstructionVersion>;
  getInstructionForUser(routeOrKey: string): Promise<InstructionForUser | null>;
  getStats(): Promise<InstructionStats>;
  logView(topicId: string, versionId: string, userId?: string): Promise<void>;
}

class InstructionsServiceManager implements InstructionsServiceInterface {
  private useExternalDatabase: boolean = false;
  
  constructor() {
    this.initializeServiceChoice();
  }

  private initializeServiceChoice(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –Ω–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–µ—Ä–≤–∏—Å
    const preference = localStorage.getItem('instructions_service_preference');
    const hasExternalDb = !!localStorage.getItem('externalDatabase');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω—é—é –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ò –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    this.useExternalDatabase = hasExternalDb && preference === 'external';
    
    console.log(`üìö InstructionsServiceManager: Using ${this.useExternalDatabase ? 'EXTERNAL DATABASE' : 'MOCK (localStorage)'} service`);
  }

  private getCurrentService(): InstructionsServiceInterface {
    return this.useExternalDatabase ? externalInstructionsService : instructionsService;
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
  public switchToMockService(): void {
    console.log('üîÑ Switching to Mock Service (localStorage)');
    this.useExternalDatabase = false;
    localStorage.setItem('instructions_service_preference', 'mock');
  }

  public switchToExternalDatabase(): void {
    console.log('üîÑ Switching to External Database Service');
    this.useExternalDatabase = true;
    localStorage.setItem('instructions_service_preference', 'external');
  }

  public isUsingExternalDatabase(): boolean {
    return this.useExternalDatabase;
  }

  public getCurrentServiceInfo(): { type: 'mock' | 'external'; available: boolean } {
    const hasExternalDb = !!localStorage.getItem('externalDatabase');
    return {
      type: this.useExternalDatabase ? 'external' : 'mock',
      available: this.useExternalDatabase ? hasExternalDb : true
    };
  }

  // –ü—Ä–æ–±—Ä–æ—Å –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É
  async getTopics(): Promise<InstructionTopic[]> {
    return this.getCurrentService().getTopics();
  }

  async getTopicByKey(key: string): Promise<InstructionTopic | null> {
    return this.getCurrentService().getTopicByKey(key);
  }

  async createTopic(request: CreateInstructionTopicRequest): Promise<InstructionTopic> {
    return this.getCurrentService().createTopic(request);
  }

  async getVersions(topicId: string): Promise<InstructionVersion[]> {
    return this.getCurrentService().getVersions(topicId);
  }

  async createVersion(request: CreateInstructionVersionRequest): Promise<InstructionVersion> {
    return this.getCurrentService().createVersion(request);
  }

  async updateVersion(versionId: string, request: UpdateInstructionVersionRequest): Promise<InstructionVersion> {
    return this.getCurrentService().updateVersion(versionId, request);
  }

  async publishVersion(versionId: string): Promise<InstructionVersion> {
    return this.getCurrentService().publishVersion(versionId);
  }

  async getInstructionForUser(routeOrKey: string): Promise<InstructionForUser | null> {
    return this.getCurrentService().getInstructionForUser(routeOrKey);
  }

  async getStats(): Promise<InstructionStats> {
    return this.getCurrentService().getStats();
  }

  async logView(topicId: string, versionId: string, userId: string = 'anonymous'): Promise<void> {
    return this.getCurrentService().logView(topicId, versionId, userId);
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  public async testCurrentService(): Promise<{ success: boolean; error?: string; service: string }> {
    const serviceInfo = this.getCurrentServiceInfo();
    
    try {
      if (serviceInfo.type === 'external') {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω—é—é –ë–î —á–µ—Ä–µ–∑ externalInstructionsService
        const result = await externalInstructionsService.testConnection();
        return {
          success: result.success,
          error: result.error,
          service: 'External Database'
        };
      } else {
        // –î–ª—è mock-—Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å localStorage
        const testKey = `instructions_test_${Date.now()}`;
        localStorage.setItem(testKey, 'test');
        localStorage.removeItem(testKey);
        
        return {
          success: true,
          service: 'Mock (localStorage)'
        };
      }
    } catch (error: any) {
      return {
        success: false,
        error: error.message,
        service: serviceInfo.type === 'external' ? 'External Database' : 'Mock (localStorage)'
      };
    }
  }

  public getAvailableServices(): Array<{
    type: 'mock' | 'external';
    name: string;
    available: boolean;
    current: boolean;
  }> {
    const hasExternalDb = !!localStorage.getItem('externalDatabase');
    
    return [
      {
        type: 'mock',
        name: 'Mock Service (localStorage)',
        available: true,
        current: !this.useExternalDatabase
      },
      {
        type: 'external',
        name: 'External Database (Supabase)',
        available: hasExternalDb,
        current: this.useExternalDatabase
      }
    ];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
export const instructionsServiceManager = new InstructionsServiceManager();

// –¢–∞–∫–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
export const activeInstructionsService = instructionsServiceManager;