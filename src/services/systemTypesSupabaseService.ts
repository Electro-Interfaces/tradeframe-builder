/**
 * System Types Supabase Service - –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * –£–ü–†–û–©–ï–ù: –£–±—Ä–∞–Ω—ã checkConnection –∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * –ü—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã Supabase —Å —á–µ—Ç–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
 */

import { supabaseClientBrowser } from './supabaseClientBrowser';
import { SystemType, SystemTypeInput, SystemTypeUpdateInput } from './systemTypesService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
interface SupabaseSystemType {
  id: string;
  value: string;
  label: string;
  description?: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

class SystemTypesSupabaseService {

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã
   */
  async list(): Promise<SystemType[]> {
    console.log('üîç SystemTypesSupabaseService.list() called');
    
    const { data, error } = await supabaseClientBrowser
      .from('system_types')
      .select('*')
      .eq('is_active', true)
      .order('label', { ascending: true });

    if (error) {
      console.error('‚ùå Database error loading system types:', error);
      throw new Error(`Database unavailable: ${error.message}`);
    }

    console.log('‚úÖ Loaded active system types from Supabase:', data?.length || 0);
    return (data || []).map(this.transformSupabaseToSystemType);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
   */
  async listAll(): Promise<SystemType[]> {
    console.log('üîç SystemTypesSupabaseService.listAll() called');
    try {
      const { data, error } = await supabaseClientBrowser
        .from('system_types')
        .select('*')
        .order('label', { ascending: true });

      if (error) {
        console.error('‚ùå Supabase query error:', error);
        throw error;
      }

      console.log('‚úÖ Loaded all system types from Supabase:', data?.length || 0);
      return (data || []).map(this.transformSupabaseToSystemType);
    } catch (error) {
      console.error('‚ùå SystemTypesSupabaseService.listAll error:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –ø–æ ID
   */
  async get(id: string): Promise<SystemType | null> {
    try {
      const { data, error } = await supabaseClientBrowser
        .from('system_types')
        .select('*')
        .eq('id', id)
        .single();

      if (error) {
        if (error.code === 'PGRST116') return null;
        throw error;
      }

      return this.transformSupabaseToSystemType(data);
    } catch (error) {
      console.error(`‚ùå SystemTypesSupabaseService.get(${id}) error:`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –ø–æ value
   */
  async getByValue(value: string): Promise<SystemType | null> {
    try {
      const { data, error } = await supabaseClientBrowser
        .from('system_types')
        .select('*')
        .eq('value', value)
        .single();

      if (error) {
        if (error.code === 'PGRST116') return null;
        throw error;
      }

      return this.transformSupabaseToSystemType(data);
    } catch (error) {
      console.error(`‚ùå SystemTypesSupabaseService.getByValue(${value}) error:`, error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø
   */
  async create(input: SystemTypeInput): Promise<SystemType> {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–∏–ø–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å value
    const existing = await this.getByValue(input.value);
    if (existing) {
      throw new Error(`–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø —Å –∫–æ–¥–æ–º "${input.value}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    const supabaseData: Partial<SupabaseSystemType> = {
      value: input.value,
      label: input.label,
      description: input.description,
      is_active: input.isActive ?? true
    };

    const { data, error } = await supabaseClientBrowser
      .from('system_types')
      .insert(supabaseData)
      .select()
      .single();

    if (error) {
      console.error('‚ùå Database error creating system type:', error);
      throw new Error(`Database unavailable: ${error.message}`);
    }

    console.log('‚úÖ Created system type:', data.value);
    return this.transformSupabaseToSystemType(data);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø
   */
  async update(id: string, input: SystemTypeUpdateInput): Promise<SystemType | null> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å value (–∏—Å–∫–ª—é—á–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç)
      if (input.value) {
        const { data: existingData } = await supabaseClientBrowser
          .from('system_types')
          .select('id')
          .eq('value', input.value)
          .neq('id', id);

        if (existingData && existingData.length > 0) {
          throw new Error(`–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø —Å –∫–æ–¥–æ–º "${input.value}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      }

      const updateData: Partial<SupabaseSystemType> = {
        updated_at: new Date().toISOString()
      };

      if (input.value) updateData.value = input.value;
      if (input.label) updateData.label = input.label;
      if (input.description !== undefined) updateData.description = input.description;
      if (input.isActive !== undefined) updateData.is_active = input.isActive;

      const { data, error } = await supabaseClientBrowser
        .from('system_types')
        .update(updateData)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        if (error.code === 'PGRST116') return null;
        throw error;
      }

      console.log('‚úÖ Updated system type:', data.value);
      return this.transformSupabaseToSystemType(data);
    } catch (error) {
      console.error(`‚ùå SystemTypesSupabaseService.update(${id}) error:`, error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø (–ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)
   */
  async delete(id: string): Promise<boolean> {
    try {
      const { data, error } = await supabaseClientBrowser
        .from('system_types')
        .update({
          is_active: false,
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .select('value')
        .single();

      if (error) {
        if (error.code === 'PGRST116') return false;
        throw error;
      }

      console.log('‚úÖ Deactivated system type:', data.value);
      return true;
    } catch (error) {
      console.error(`‚ùå SystemTypesSupabaseService.delete(${id}) error:`, error);
      return false;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø (—Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º)
   */
  async restore(id: string): Promise<boolean> {
    try {
      const { data, error } = await supabaseClientBrowser
        .from('system_types')
        .update({
          is_active: true,
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .select('value')
        .single();

      if (error) {
        if (error.code === 'PGRST116') return false;
        throw error;
      }

      console.log('‚úÖ Restored system type:', data.value);
      return true;
    } catch (error) {
      console.error(`‚ùå SystemTypesSupabaseService.restore(${id}) error:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è dropdown (–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã)
   */
  async getOptions(): Promise<Array<{value: string, label: string}>> {
    try {
      const activeTypes = await this.list();
      return activeTypes.map(type => ({
        value: type.value,
        label: type.label
      }));
    } catch (error) {
      console.error('‚ùå SystemTypesSupabaseService.getOptions error:', error);
      return [];
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

  private transformSupabaseToSystemType(data: SupabaseSystemType): SystemType {
    return {
      id: data.id,
      value: data.value,
      label: data.label,
      description: data.description,
      isActive: data.is_active,
      createdAt: data.created_at,
      updatedAt: data.updated_at
    };
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const systemTypesSupabaseService = new SystemTypesSupabaseService();

// –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API
export const systemTypesAPI = {
  async list() {
    return await systemTypesSupabaseService.list();
  },

  async listAll() {
    return await systemTypesSupabaseService.listAll();
  },

  async get(id: string) {
    return await systemTypesSupabaseService.get(id);
  },

  async getByValue(value: string) {
    return await systemTypesSupabaseService.getByValue(value);
  },

  async create(input: SystemTypeInput) {
    return await systemTypesSupabaseService.create(input);
  },

  async update(id: string, input: SystemTypeUpdateInput) {
    return await systemTypesSupabaseService.update(id, input);
  },

  async delete(id: string) {
    return await systemTypesSupabaseService.delete(id);
  },

  async restore(id: string) {
    return await systemTypesSupabaseService.restore(id);
  },

  async getOptions() {
    return await systemTypesSupabaseService.getOptions();
  }
};