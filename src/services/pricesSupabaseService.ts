/**
 * Prices Supabase Service - –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ü–µ–Ω–∞–º–∏
 * –£–ü–†–û–©–ï–ù: –£–±—Ä–∞–Ω—ã –≤—Å–µ fallback —Ä–µ–∂–∏–º—ã –∏ checkConnection
 * –ü—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã Supabase —Å —á–µ—Ç–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º–∏
 * - –ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Supabase
 * - –ñ—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
 * - –ù–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤ UUID
 */

// üî• –ù–û–í–´–ô –ü–û–î–•–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∏ –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞
import { supabase } from './supabaseClientBrowser';
import { tradingNetworkAPI } from './tradingNetworkAPI';
import { httpClient } from './universalHttpClient';
import { nomenclatureService } from './nomenclatureService';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ü–µ–Ω
export interface FuelPrice {
  id: string;
  trading_point_id: string;
  fuel_type: string;
  fuel_code: string;
  price_net: number; // —Ü–µ–Ω–∞ –±–µ–∑ –ù–î–° –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  vat_rate: number; // —Å—Ç–∞–≤–∫–∞ –ù–î–° –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  price_gross: number; // —Ü–µ–Ω–∞ —Å –ù–î–° –≤ –∫–æ–ø–µ–π–∫–∞—Ö  
  unit: string; // –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–õ, –∫–≥)
  currency: string; // –≤–∞–ª—é—Ç–∞ (RUB)
  applied_from: string; // –¥–∞—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è ISO
  status: 'active' | 'scheduled' | 'expired';
  source: 'manual' | 'api_sync' | 'import';
  created_at: string;
  updated_at: string;
  created_by?: string; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

export interface PriceHistoryEntry {
  id: string;
  trading_point_id: string;
  fuel_type: string;
  old_price?: number;
  new_price: number;
  action: 'create' | 'update' | 'sync' | 'import';
  source: 'manual' | 'api_sync' | 'import';
  created_at: string;
  created_by?: string;
  notes?: string;
}

export interface FuelTypeInfo {
  fuel_type: string;
  fuel_code: string;
  tanks_count: number;
  total_volume: number;
  current_level: number;
  has_price: boolean;
  current_price?: FuelPrice;
}

class PricesSupabaseService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è —Å–µ—Ç–∏
   */
  private async getNomenclatureMapping(networkId: string): Promise<Map<string, { name: string, code: string }>> {
    console.log(`üìö [PRICES SERVICE] –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è —Å–µ—Ç–∏ ${networkId}`);
    
    try {
      const nomenclature = await nomenclatureService.getNomenclature({ networkId, status: 'active' });
      const mapping = new Map<string, { name: string, code: string }>();
      
      nomenclature.forEach(item => {
        // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ network_api_code
        if (item.networkApiCode) {
          mapping.set(item.networkApiCode, { name: item.name, code: item.internalCode });
          console.log(`üìö [NOMENCLATURE] API –∫–æ–¥ "${item.networkApiCode}" -> –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ "${item.name}"`);
        }
        
        // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ –≤–Ω–µ—à–Ω–∏–º –∫–æ–¥–∞–º
        item.externalCodes.forEach(extCode => {
          mapping.set(extCode.externalCode, { name: item.name, code: item.internalCode });
          console.log(`üìö [NOMENCLATURE] –í–Ω–µ—à–Ω–∏–π –∫–æ–¥ "${extCode.externalCode}" (${extCode.systemType}) -> –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ "${item.name}"`);
        });
      });
      
      console.log(`‚úÖ [NOMENCLATURE] –ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è ${mapping.size} –∫–æ–¥–æ–≤`);
      return mapping;
    } catch (error) {
      console.error('‚ùå [NOMENCLATURE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', error);
      return new Map();
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–∞—Ö —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
   * üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ API —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π
   */
  async getFuelTypesInfo(tradingPointId: string): Promise<FuelTypeInfo[]> {
    console.log(`üî• [PRICES SERVICE] –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ –¥–ª—è ${tradingPointId}`);
    
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º—É –∏ —Å—Ç–∞–Ω—Ü–∏—é API
      const { data: tradingPoint, error: tpError } = await supabase
        .from('trading_points')
        .select('id, name, external_id, network_id')
        .eq('id', tradingPointId)
        .single();

      if (tpError || !tradingPoint) {
        console.error('‚ùå [PRICES SERVICE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', tpError);
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä
        return this.getStandardFuelTypes(tradingPointId);
      }

      console.log(`üìç [PRICES SERVICE] –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞: ${tradingPoint.name}, external_id: ${tradingPoint.external_id}`);

      // 2. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è system ID
      const { data: network, error: netError } = await supabase
        .from('networks')
        .select('external_id')
        .eq('id', tradingPoint.network_id)
        .single();

      if (netError || !network) {
        console.error('‚ùå [PRICES SERVICE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏:', netError);
        return this.getStandardFuelTypes(tradingPointId);
      }

      const systemId = network.external_id || '15'; 
      const stationId = tradingPoint.external_id || '4';

      console.log(`üåê [PRICES SERVICE] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—ã –∏–∑ API: system=${systemId}, station=${stationId}`);

      // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è —Å–µ—Ç–∏  
      const nomenclatureMapping = await this.getNomenclatureMapping(tradingPoint.network_id);

      // 4. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—ã –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
        const pricesResponse = await httpClient.get<any>('/v1/prices', {
          destination: 'external-api',
          queryParams: {
            system: systemId,
            station: stationId
          }
        });

        console.log(`üìä [PRICES SERVICE] –û—Ç–≤–µ—Ç API:`, pricesResponse);
        console.log(`üìä [PRICES SERVICE] –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:`, typeof pricesResponse.data);
        console.log(`üìä [PRICES SERVICE] –Ø–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:`, Array.isArray(pricesResponse.data));
        console.log(`üìä [PRICES SERVICE] –ö–ª—é—á–∏ –¥–∞–Ω–Ω—ã—Ö:`, pricesResponse.data ? Object.keys(pricesResponse.data) : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');

        if (pricesResponse.success && pricesResponse.data) {
          return this.parseFuelTypesFromAPI(pricesResponse.data, tradingPointId, nomenclatureMapping);
        } else {
          throw new Error(`API –≤–µ—Ä–Ω—É–ª –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ: ${pricesResponse.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      } catch (apiError) {
        console.error(`‚ùå [PRICES SERVICE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–µ–π —Å–∏—Å—Ç–µ–º—ã:`, apiError);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ –≤–Ω–µ—à–Ω–µ–π —Å–∏—Å—Ç–µ–º—ã: ${apiError instanceof Error ? apiError.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }

    } catch (error) {
      console.error('‚ùå [PRICES SERVICE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω:', error);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º –µ—ë
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø–ª–∏–≤–µ –∏–∑ API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
   */
  private parseFuelTypesFromAPI(apiData: any, tradingPointId: string, nomenclatureMapping: Map<string, { name: string, code: string }>): FuelTypeInfo[] {
    console.log(`üîç [PRICES SERVICE PARSER] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö:`, apiData);
    console.log(`üîç [PRICES SERVICE PARSER] –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${typeof apiData}`);
    console.log(`üîç [PRICES SERVICE PARSER] –Ø–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º: ${Array.isArray(apiData)}`);
    
    const fuelTypesInfo: FuelTypeInfo[] = [];

    // API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    if (Array.isArray(apiData)) {
      console.log(`üîç [PRICES SERVICE PARSER] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤, –¥–ª–∏–Ω–∞: ${apiData.length}`);
      // –§–æ—Ä–º–∞—Ç –º–∞—Å—Å–∏–≤–∞ —Ü–µ–Ω
      apiData.forEach((item: any, index: number) => {
        console.log(`üîç [PRICES SERVICE PARSER] –≠–ª–µ–º–µ–Ω—Ç ${index}:`, item);
        console.log(`üîç [PRICES SERVICE PARSER] –ö–ª—é—á–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: ${Object.keys(item)}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ services
        if (item.services && Array.isArray(item.services)) {
          console.log(`üîç [PRICES SERVICE PARSER] –ù–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ services —Å ${item.services.length} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏`);
          
          item.services.forEach((service: any, serviceIndex: number) => {
            console.log(`üîç [PRICES SERVICE PARSER] –°–µ—Ä–≤–∏—Å ${serviceIndex}:`, service);
            console.log(`üîç [PRICES SERVICE PARSER] –ö–ª—é—á–∏ —Å–µ—Ä–≤–∏—Å–∞: ${Object.keys(service)}`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ API
            const apiName = service.fuel_name || 
                           service.fuel_type || 
                           service.name || 
                           service.type ||
                           service.product_name ||
                           service.product ||
                           service.fuel ||
                           service.title ||
                           service.description ||
                           service.label ||
                           service.service_name ||
                           service.service_type ||
                           service.good_name ||
                           service.good_type;
            
            console.log(`üîç [PRICES SERVICE PARSER] –°—ã—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ API: "${apiName}"`);
            console.log(`üîç [PRICES SERVICE PARSER] –í—Å–µ –ø–æ–ª—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:`, service);
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - –Ω–µ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
            if (!apiName) {
              const errorMsg = `‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í–Ω–µ—à–Ω—è—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ ${serviceIndex}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: ${Object.keys(service).join(', ')}`;
              console.error(errorMsg);
              throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–π —Å–∏—Å—Ç–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.`);
            }
            
            // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ
            let mappedFuel = null;
            if (apiName) {
              mappedFuel = nomenclatureMapping.get(apiName);
              if (!mappedFuel) {
                // –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                for (const [key, value] of nomenclatureMapping) {
                  if (key.toLowerCase() === apiName.toLowerCase()) {
                    mappedFuel = value;
                    break;
                  }
                }
              }
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
            const finalFuelName = mappedFuel?.name || apiName;
            const finalFuelCode = mappedFuel?.code || 
                                  service.fuel_code || 
                                  service.fuel_id?.toString() || 
                                  service.id?.toString() ||
                                  service.service_code?.toString() ||
                                  service.product_code?.toString();
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - –∫–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            if (!finalFuelCode) {
              throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è "${finalFuelName}". –í–Ω–µ—à–Ω—è—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π: fuel_code, fuel_id, id, service_code, product_code. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: ${Object.keys(service).join(', ')}`);
            }
            
            console.log(`üîç [PRICES SERVICE PARSER] –§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${finalFuelName}" ${mappedFuel ? '(–∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã)' : '(–∏–∑ API)'}`);
            console.log(`üîç [PRICES SERVICE PARSER] –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥: "${finalFuelCode}"`);
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π
            const priceValue = service.price;
            if (!priceValue || priceValue <= 0) {
              throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞ "${finalFuelName}": ${priceValue}. –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.`);
            }
            
            console.log(`üí∞ [PRICES SERVICE PARSER] –¶–µ–Ω–∞ –∏–∑ API: ${priceValue} —Ä—É–±/–ª`);
            
            const fuelInfo: FuelTypeInfo = {
              fuel_type: finalFuelName,
              fuel_code: finalFuelCode,
              tanks_count: 1,
              total_volume: 0,
              current_level: 0,
              has_price: true,
              current_price: {
                id: `api_${finalFuelCode}_${Date.now()}`,
                trading_point_id: tradingPointId,
                fuel_type: finalFuelName,
                fuel_code: finalFuelCode,
                price_net: Math.round(priceValue * 100),
                vat_rate: 20,
                price_gross: Math.round(priceValue * 100 * 1.2),
                unit: '–õ',
                currency: 'RUB',
                applied_from: new Date().toISOString(),
                status: 'active',
                source: 'api_sync',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              }
            };
            fuelTypesInfo.push(fuelInfo);
          });
        } else {
          // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä—è–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          const fuelName = item.fuel_name || item.fuel_type || `–¢–æ–ø–ª–∏–≤–æ ${item.fuel_id || item.id}`;
          console.log(`üîç [PRICES SERVICE PARSER] –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –∫–æ—Ä–Ω—è: ${fuelName}`);
          
          const fuelInfo: FuelTypeInfo = {
            fuel_type: fuelName,
            fuel_code: item.fuel_code || item.fuel_id?.toString() || item.id?.toString() || '',
            tanks_count: 1,
            total_volume: 0,
            current_level: 0,
            has_price: true,
            current_price: {
              id: `api_${item.fuel_id || item.id}_${Date.now()}`,
              trading_point_id: tradingPointId,
              fuel_type: fuelName,
              fuel_code: item.fuel_code || item.fuel_id?.toString() || '',
              price_net: Math.round((item.price || 0) * 100),
              vat_rate: 20,
              price_gross: Math.round((item.price || 0) * 100 * 1.2),
              unit: '–õ',
              currency: 'RUB',
              applied_from: new Date().toISOString(),
              status: 'active',
              source: 'api_sync',
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            }
          };
          fuelTypesInfo.push(fuelInfo);
        }
      });
    } else if (typeof apiData === 'object' && apiData.fuels) {
      console.log(`üîç [PRICES SERVICE PARSER] –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç —Å fuels`);
      console.log(`üîç [PRICES SERVICE PARSER] apiData.fuels:`, apiData.fuels);
      // –§–æ—Ä–º–∞—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º fuels
      if (Array.isArray(apiData.fuels)) {
        console.log(`üîç [PRICES SERVICE PARSER] apiData.fuels —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –¥–ª–∏–Ω–∞: ${apiData.fuels.length}`);
        apiData.fuels.forEach((fuel: any) => {
          const fuelInfo: FuelTypeInfo = {
            fuel_type: fuel.name || fuel.fuel_name || fuel.type,
            fuel_code: fuel.code || fuel.id?.toString() || '',
            tanks_count: fuel.tanks_count || 1,
            total_volume: fuel.volume || 0,
            current_level: fuel.level || 0,
            has_price: !!fuel.price,
            current_price: fuel.price ? {
              id: `api_${fuel.id}_${Date.now()}`,
              trading_point_id: tradingPointId,
              fuel_type: fuel.name || fuel.fuel_name,
              fuel_code: fuel.code || fuel.id?.toString() || '',
              price_net: Math.round((fuel.price || 0) * 100),
              vat_rate: 20,
              price_gross: Math.round((fuel.price || 0) * 100 * 1.2),
              unit: '–õ',
              currency: 'RUB',
              applied_from: new Date().toISOString(),
              status: 'active',
              source: 'api_sync',
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            } : undefined
          };
          fuelTypesInfo.push(fuelInfo);
        });
      }
    } else if (typeof apiData === 'object') {
      console.log(`üîç [PRICES SERVICE PARSER] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏`);
      console.log(`üîç [PRICES SERVICE PARSER] –ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞: ${Object.keys(apiData)}`);
      // –§–æ—Ä–º–∞—Ç –æ–±—ä–µ–∫—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏ –ø–æ –∫–ª—é—á–∞–º
      Object.entries(apiData).forEach(([fuelType, priceData]: [string, any]) => {
        console.log(`üîç [PRICES SERVICE PARSER] –ö–ª—é—á: ${fuelType}, –ó–Ω–∞—á–µ–Ω–∏–µ:`, priceData);
        if (typeof priceData === 'number' || (priceData && typeof priceData.price === 'number')) {
          const price = typeof priceData === 'number' ? priceData : priceData.price;
          const fuelInfo: FuelTypeInfo = {
            fuel_type: fuelType,
            fuel_code: fuelType,
            tanks_count: 1,
            total_volume: 0,
            current_level: 0,
            has_price: true,
            current_price: {
              id: `api_${fuelType}_${Date.now()}`,
              trading_point_id: tradingPointId,
              fuel_type: fuelType,
              fuel_code: fuelType,
              price_net: Math.round(price * 100),
              vat_rate: 20,
              price_gross: Math.round(price * 100 * 1.2),
              unit: '–õ',
              currency: 'RUB',
              applied_from: new Date().toISOString(),
              status: 'active',
              source: 'api_sync',
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            }
          };
          fuelTypesInfo.push(fuelInfo);
        }
      });
    }

    console.log(`‚úÖ [PRICES SERVICE] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ${fuelTypesInfo.length} –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ API`);
    return fuelTypesInfo;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞
   */
  private getStandardFuelTypes(tradingPointId: string): FuelTypeInfo[] {
    console.log(`üìã [PRICES SERVICE] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ (3 –≤–∏–¥–∞ –¥–ª—è –ê–ó–°)`);
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –ê–ó–° - —Ç–æ–ª—å–∫–æ 3 –≤–∏–¥–∞ —Ç–æ–ø–ª–∏–≤–∞
    const standardFuels = [
      { type: '–ê–ò-92', code: 'AI92' },
      { type: '–ê–ò-95', code: 'AI95' },
      { type: '–î–¢', code: 'DT' }
    ];

    return standardFuels.map(fuel => ({
      fuel_type: fuel.type,
      fuel_code: fuel.code,
      tanks_count: 0,
      total_volume: 0,
      current_level: 0,
      has_price: false,
      current_price: undefined
    }));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
   */
  async getCurrentPrices(tradingPointId: string): Promise<FuelPrice[]> {
    console.log(`üí∞ [PRICES SERVICE] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –¥–ª—è ${tradingPointId}`);

    try {
      const { data, error } = await supabase
        .from('prices')
        .select('*')
        .eq('trading_point_id', tradingPointId)
        .eq('status', 'active')  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ status –≤–º–µ—Å—Ç–æ is_active
        .order('applied_from', { ascending: false });  // –ò applied_from –≤–º–µ—Å—Ç–æ valid_from

      if (error) {
        if (error.code === 'PGRST205') {
          console.warn('‚ö†Ô∏è [PRICES SERVICE] –¢–∞–±–ª–∏—Ü–∞ prices –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
          return [];
        }
        console.error('‚ùå [PRICES SERVICE] Database error getting current prices:', error);
        throw new Error(`Database unavailable: ${error.message}`);
      }

      console.log(`‚úÖ [PRICES SERVICE] –ü–æ–ª—É—á–µ–Ω–æ ${data?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω`);
      return data || [];
    } catch (error) {
      console.warn('‚ö†Ô∏è [PRICES SERVICE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤:', error);
      return [];
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω —Å —Ç–æ—Ä–≥–æ–≤—ã–º API
   */
  async syncPricesWithTradingAPI(tradingPointId: string): Promise<{
    success: boolean;
    syncedCount: number;
    errors?: string[];
  }> {
    console.log(`üîÑ [PRICES SERVICE] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω —Å —Ç–æ—Ä–≥–æ–≤—ã–º API –¥–ª—è ${tradingPointId}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
      const fuelTypes = await this.getFuelTypesInfo(tradingPointId);
      
      let syncedCount = 0;
      const errors: string[] = [];

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—ã –≤ –ë–î
      for (const fuel of fuelTypes) {
        if (fuel.has_price && fuel.current_price) {
          try {
            await this.updatePrice(tradingPointId, fuel.fuel_type, fuel.current_price.price_gross / 100);
            syncedCount++;
          } catch (err) {
            errors.push(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${fuel.fuel_type}: ${err}`);
          }
        }
      }

      console.log(`‚úÖ [PRICES SERVICE] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${syncedCount} —Ü–µ–Ω`);
      
      return {
        success: syncedCount > 0,
        syncedCount,
        errors: errors.length > 0 ? errors : undefined
      };
    } catch (error) {
      console.error('‚ùå [PRICES SERVICE] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      return {
        success: false,
        syncedCount: 0,
        errors: [`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`]
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ
   */
  async updatePrice(tradingPointId: string, fuelType: string, priceRubles: number): Promise<FuelPrice> {
    console.log(`üí∞ [PRICES SERVICE] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${fuelType} = ${priceRubles}‚ÇΩ`);

    const priceData = {
      trading_point_id: tradingPointId,
      fuel_type: fuelType,
      fuel_code: fuelType,
      price_net: Math.round(priceRubles * 100 / 1.2), // –ë–µ–∑ –ù–î–°
      vat_rate: 20,
      price_gross: Math.round(priceRubles * 100), // –° –ù–î–°
      unit: '–õ',
      currency: 'RUB',
      applied_from: new Date().toISOString(),
      status: 'active',
      source: 'manual' as const,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–µ–Ω—ã
    await supabase
      .from('prices')
      .update({ status: 'expired' })
      .eq('trading_point_id', tradingPointId)
      .eq('fuel_type', fuelType)
      .eq('status', 'active');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
    const { data, error } = await supabase
      .from('prices')
      .insert(priceData)
      .select()
      .single();

    if (error) {
      console.error('‚ùå [PRICES SERVICE] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—É: ${error.message}`);
    }

    console.log(`‚úÖ [PRICES SERVICE] –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
    return data;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
   */
  async getPriceHistory(tradingPointId: string, limit: number = 100): Promise<PriceHistoryEntry[]> {
    console.log(`üìú [PRICES SERVICE] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –¥–ª—è ${tradingPointId}`);

    try {
      const { data, error } = await supabase
        .from('price_history')
        .select('*')
        .eq('trading_point_id', tradingPointId)
        .order('created_at', { ascending: false })
        .limit(limit);

      if (error) {
        if (error.code === 'PGRST205') {
          console.warn('‚ö†Ô∏è [PRICES SERVICE] –¢–∞–±–ª–∏—Ü–∞ price_history –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          return [];
        }
        throw error;
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå [PRICES SERVICE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
      return [];
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const pricesSupabaseService = new PricesSupabaseService();

export default pricesSupabaseService;