import { 
  Component, 
  ComponentTemplate,
  CreateComponentRequest, 
  UpdateComponentRequest,
  ComponentFilters,
  ListComponentsParams,
  ListComponentsResponse,
  ComponentStatusAction,
  ComponentEvent
} from '@/types/component';
import { componentTemplatesStore } from '@/mock/componentTemplatesStore';
import { PersistentStorage } from '@/utils/persistentStorage';

// Базовый URL для API
const API_BASE_URL = import.meta.env.VITE_API_URL || '/api/v1';

// Утилита для HTTP запросов с трейсингом
class ApiClient {
  private async request<T>(
    endpoint: string, 
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${API_BASE_URL}${endpoint}`;
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/problem+json',
      'X-Trace-Id': this.generateTraceId(),
      ...options.headers,
    };

    // Добавляем Idempotency-Key для мутирующих операций
    if (['POST', 'PUT', 'PATCH'].includes(options.method || 'GET')) {
      headers['Idempotency-Key'] = this.generateIdempotencyKey();
    }

    const response = await fetch(url, {
      ...options,
      headers,
    });

    if (!response.ok) {
      throw new ApiError(response.status, await response.text());
    }

    return response.json();
  }

  private generateTraceId(): string {
    return Math.random().toString(36).substring(2, 15) + 
           Math.random().toString(36).substring(2, 15);
  }

  private generateIdempotencyKey(): string {
    return `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;
  }

  async get<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'GET' });
  }

  async post<T>(endpoint: string, data: any): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async patch<T>(endpoint: string, data: any): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'PATCH',
      body: JSON.stringify(data),
    });
  }

  async delete<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'DELETE' });
  }
}

class ApiError extends Error {
  constructor(public status: number, public body: string) {
    super(`API Error ${status}: ${body}`);
    this.name = 'ApiError';
  }
}

const apiClient = new ApiClient();

// Mock данные компонентов для демо (в production заменить на API)
// Расширенные начальные данные компонентов для реалистичной АЗС
const initialComponents: Component[] = [
  // Компоненты АЗС №001 - Центральная (point1)
  // === Компоненты резервуара №1 (АИ-95) - eq_1 ===
  {
    id: "comp_001",
    trading_point_id: "point1",
    equipment_id: "eq_1",
    template_id: "comp_sensor_level_1",
    display_name: "Датчик уровня топлива ПМП-201",
    serial_number: "DUT2024001",
    params: {
      accuracy: 2.0,
      range_min: 0,
      range_max: 50000,
      calibration_factor: 1.0,
      current_level: 32500
    },
    status: 'online',
    created_at: new Date('2024-01-15').toISOString(),
    updated_at: new Date('2024-08-30').toISOString()
  },
  {
    id: "comp_002",
    trading_point_id: "point1",
    equipment_id: "eq_1",
    template_id: "comp_sensor_temp_1",
    display_name: "Датчик температуры резервуара",
    serial_number: "TEMP2024001",
    params: {
      accuracy: 0.5,
      range_min: -40,
      range_max: 80,
      alarm_threshold: 45,
      current_temp: 18.5
    },
    status: 'online',
    created_at: new Date('2024-01-15').toISOString(),
    updated_at: new Date('2024-08-30').toISOString()
  },
  {
    id: "comp_003",
    trading_point_id: "point1",
    equipment_id: "eq_1",
    template_id: "comp_sensor_water_1",
    display_name: "Датчик товарной воды",
    serial_number: "WATER2024001",
    params: {
      threshold_mm: 15,
      current_level_mm: 0,
      alarm_enabled: true
    },
    status: 'online',
    created_at: new Date('2024-01-15').toISOString(),
    updated_at: new Date('2024-08-30').toISOString()
  },
  
  // === Компоненты резервуара №2 (АИ-92) - eq_2 ===
  {
    id: "comp_004",
    trading_point_id: "point1",
    equipment_id: "eq_2",
    template_id: "comp_sensor_level_1",
    display_name: "Датчик уровня топлива ПМП-201",
    serial_number: "DUT2024002",
    params: {
      accuracy: 2.0,
      range_min: 0,
      range_max: 50000,
      calibration_factor: 1.0,
      current_level: 41200
    },
    status: 'online',
    created_at: new Date('2024-02-20').toISOString(),
    updated_at: new Date('2024-08-30').toISOString()
  },
  {
    id: "comp_005",
    trading_point_id: "point1",
    equipment_id: "eq_2",
    template_id: "comp_sensor_temp_1",
    display_name: "Датчик температуры резервуара",
    serial_number: "TEMP2024002",
    params: {
      accuracy: 0.5,
      range_min: -40,
      range_max: 80,
      alarm_threshold: 45,
      current_temp: 19.2
    },
    status: 'online',
    created_at: new Date('2024-02-20').toISOString(),
    updated_at: new Date('2024-08-30').toISOString()
  },
  
  // === Компоненты резервуара №3 (ДТ) - eq_3 ===
  {
    id: "comp_006",
    trading_point_id: "point1",
    equipment_id: "eq_3",
    template_id: "comp_sensor_level_1",
    display_name: "Датчик уровня топлива ПМП-201",
    serial_number: "DUT2024003",
    params: {
      accuracy: 2.0,
      range_min: 0,
      range_max: 25000,
      calibration_factor: 1.0,
      current_level: 18750
    },
    status: 'online',
    created_at: new Date('2024-01-20').toISOString(),
    updated_at: new Date('2024-08-30').toISOString()
  },
  {
    id: "comp_007",
    trading_point_id: "point1",
    equipment_id: "eq_3",
    template_id: "comp_sensor_temp_1",
    display_name: "Датчик температуры резервуара",
    serial_number: "TEMP2024003",
    params: {
      accuracy: 0.5,
      range_min: -40,
      range_max: 80,
      alarm_threshold: 45,
      current_temp: 17.8
    },
    status: 'online',
    created_at: new Date('2024-01-20').toISOString(),
    updated_at: new Date('2024-08-30').toISOString()
  },
  
  // === Компоненты ТРК №1 - eq_4 ===
  {
    id: "comp_008",
    trading_point_id: "point1",
    equipment_id: "eq_4",
    template_id: "comp_tso_display_1",
    display_name: "Дисплей терминала самообслуживания",
    serial_number: "DISP001234",
    params: {
      resolution: "1920x1080",
      brightness: 75,
      touchscreen: true,
      size_inch: 21.5
    },
    status: 'online',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-08-30').toISOString()
  },
  {
    id: "comp_009",
    trading_point_id: "point1",
    equipment_id: "eq_4",
    template_id: "comp_printer_1",
    display_name: "Принтер чеков",
    serial_number: "PR58001234",
    params: {
      paper_width: 58,
      print_speed: 150,
      auto_cut: true,
      encoding: "UTF-8"
    },
    status: 'online',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-08-30').toISOString()
  },
  {
    id: "comp_010",
    trading_point_id: "point1",
    equipment_id: "eq_4",
    template_id: "comp_pinpad_1",
    display_name: "Пинпад банковских карт",
    serial_number: "VF2001567",
    params: {
      connection_type: "USB",
      encryption_level: "AES256",
      timeout_seconds: 60
    },
    status: 'online',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-08-30').toISOString()
  },
  {
    id: "comp_011",
    trading_point_id: "point1",
    equipment_id: "eq_4",
    template_id: "comp_fuel_cardreader_1",
    display_name: "Считыватель топливных карт",
    serial_number: "FCR001234",
    params: {
      card_types: ["fuel_card", "fleet_card"],
      read_distance_cm: 5,
      encryption: true
    },
    status: 'online',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-08-30').toISOString()
  },
  {
    id: "comp_006",
    trading_point_id: "1",
    equipment_id: "eq_3", // Терминал самообслуживания
    template_id: "comp_pinpad_1",
    display_name: "Пинпад VeriFone",
    serial_number: "VF2001567",
    params: {
      connection_type: "USB",
      encryption_level: "AES256",
      timeout_seconds: 60
    },
    status: 'online',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-01-10').toISOString()
  },
  {
    id: "comp_007",
    trading_point_id: "1",
    equipment_id: "eq_3", // Терминал самообслуживания
    template_id: "comp_tso_display_1",
    display_name: "Дисплей терминала",
    serial_number: "DISP001234",
    params: {
      resolution: "1920x1080",
      brightness: 75,
      touchscreen: true,
      size_inch: 21.5
    },
    status: 'online',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-01-10').toISOString()
  },
  
  // Компоненты системы управления
  {
    id: "comp_008",
    trading_point_id: "1",
    equipment_id: "eq_4", // Система управления
    template_id: "comp_server_1",
    display_name: "Главный сервер",
    serial_number: "SRV001",
    params: {
      cpu_cores: 8,
      ram_gb: 32,
      storage_gb: 1000,
      os: "Linux"
    },
    status: 'online',
    created_at: new Date('2024-01-05').toISOString(),
    updated_at: new Date('2024-01-05').toISOString()
  },
  {
    id: "comp_009",
    trading_point_id: "1",
    equipment_id: "eq_4", // Система управления
    template_id: "comp_ups_1",
    display_name: "ИБП основной",
    serial_number: "UPS001",
    params: {
      power_va: 3000,
      battery_runtime_min: 30,
      input_voltage: 220
    },
    status: 'online',
    created_at: new Date('2024-01-05').toISOString(),
    updated_at: new Date('2024-01-05').toISOString()
  },
  
  // Компоненты табло цен
  {
    id: "comp_010",
    trading_point_id: "1",
    equipment_id: "eq_5", // Табло цен
    template_id: "comp_price_panel_1",
    display_name: "Панель АИ-95",
    serial_number: "PANEL001A",
    params: {
      brightness: 5000,
      digits: 4,
      color: "red"
    },
    status: 'error',
    created_at: new Date('2024-03-01').toISOString(),
    updated_at: new Date('2024-03-01').toISOString()
  },
  {
    id: "comp_011",
    trading_point_id: "1",
    equipment_id: "eq_5", // Табло цен
    template_id: "comp_price_panel_1",
    display_name: "Панель АИ-92",
    serial_number: "PANEL001B",
    params: {
      brightness: 5000,
      digits: 4,
      color: "red"
    },
    status: 'online',
    created_at: new Date('2024-03-01').toISOString(),
    updated_at: new Date('2024-03-01').toISOString()
  },
  {
    id: "comp_012",
    trading_point_id: "1",
    equipment_id: "eq_5", // Табло цен
    template_id: "comp_price_panel_1",
    display_name: "Панель ДТ",
    serial_number: "PANEL001C",
    params: {
      brightness: 5000,
      digits: 4,
      color: "red"
    },
    status: 'online',
    created_at: new Date('2024-03-01').toISOString(),
    updated_at: new Date('2024-03-01').toISOString()
  },
  
  // Компоненты видеонаблюдения
  {
    id: "comp_013",
    trading_point_id: "1",
    equipment_id: "eq_6", // Видеонаблюдение
    template_id: "comp_cam_camera_1",
    display_name: "Камера периметр 1",
    serial_number: "CAM001",
    params: {
      resolution: "4K",
      fps: 30,
      night_vision: true,
      ptz: false
    },
    status: 'online',
    created_at: new Date('2024-02-15').toISOString(),
    updated_at: new Date('2024-02-15').toISOString()
  },
  {
    id: "comp_014",
    trading_point_id: "1",
    equipment_id: "eq_6", // Видеонаблюдение
    template_id: "comp_cam_camera_1",
    display_name: "Камера периметр 2",
    serial_number: "CAM002",
    params: {
      resolution: "4K",
      fps: 30,
      night_vision: true,
      ptz: false
    },
    status: 'online',
    created_at: new Date('2024-02-15').toISOString(),
    updated_at: new Date('2024-02-15').toISOString()
  },
  {
    id: "comp_015",
    trading_point_id: "1",
    equipment_id: "eq_6", // Видеонаблюдение
    template_id: "comp_cam_camera_1",
    display_name: "Камера кассовая зона",
    serial_number: "CAM003",
    params: {
      resolution: "4K",
      fps: 30,
      night_vision: false,
      ptz: false
    },
    status: 'online',
    created_at: new Date('2024-02-15').toISOString(),
    updated_at: new Date('2024-02-15').toISOString()
  },
  {
    id: "comp_016",
    trading_point_id: "1",
    equipment_id: "eq_6", // Видеонаблюдение
    template_id: "comp_cam_ctrl_1",
    display_name: "Контроллер видеонаблюдения",
    serial_number: "CAMCTRL001",
    params: {
      channels: 16,
      storage_tb: 8,
      retention_days: 30
    },
    status: 'online',
    created_at: new Date('2024-02-15').toISOString(),
    updated_at: new Date('2024-02-15').toISOString()
  },
  
  // Дополнительные ТРК компоненты
  {
    id: "comp_017",
    trading_point_id: "1",
    equipment_id: "eq_1", // Условно привязываем к резервуару
    template_id: "comp_pump_1",
    display_name: "Насос подачи А-95",
    serial_number: "PUMP001",
    params: {
      flow_rate: 50,
      pressure_bar: 3.5,
      power_kw: 2.2
    },
    status: 'online',
    created_at: new Date('2024-01-15').toISOString(),
    updated_at: new Date('2024-01-15').toISOString()
  },
  {
    id: "comp_018",
    trading_point_id: "1",
    equipment_id: "eq_2", // Условно привязываем к резервуару
    template_id: "comp_pump_1",
    display_name: "Насос подачи А-92",
    serial_number: "PUMP002",
    params: {
      flow_rate: 45,
      pressure_bar: 3.2,
      power_kw: 2.0
    },
    status: 'maintenance',
    created_at: new Date('2024-02-20').toISOString(),
    updated_at: new Date('2024-02-20').toISOString()
  },
  
  // Дополнительные компоненты резервуаров
  {
    id: "comp_019",
    trading_point_id: "1",
    equipment_id: "eq_1", // Резервуар №1
    template_id: "comp_sensor_water_1",
    display_name: "Датчик товарной воды А-95",
    serial_number: "WATER001",
    params: {
      sensitivity: 1.0,
      detection_level_mm: 10,
      alarm_enabled: true
    },
    status: 'online',
    created_at: new Date('2024-01-15').toISOString(),
    updated_at: new Date('2024-01-15').toISOString()
  },
  {
    id: "comp_020",
    trading_point_id: "1",
    equipment_id: "eq_1", // Резервуар №1
    template_id: "comp_sensor_leak_1",
    display_name: "Датчик утечки А-95",
    serial_number: "LEAK001",
    params: {
      sensitivity: 0.1,
      response_time: 5,
      auto_shutdown: true
    },
    status: 'online',
    created_at: new Date('2024-01-15').toISOString(),
    updated_at: new Date('2024-01-15').toISOString()
  },
  {
    id: "comp_021",
    trading_point_id: "1",
    equipment_id: "eq_2", // Резервуар №2
    template_id: "comp_sensor_water_1",
    display_name: "Датчик товарной воды А-92",
    serial_number: "WATER002",
    params: {
      sensitivity: 1.0,
      detection_level_mm: 10,
      alarm_enabled: true
    },
    status: 'error',
    created_at: new Date('2024-02-20').toISOString(),
    updated_at: new Date('2024-02-20').toISOString()
  },
  {
    id: "comp_022",
    trading_point_id: "1",
    equipment_id: "eq_2", // Резервуар №2
    template_id: "comp_sensor_leak_1",
    display_name: "Датчик утечки А-92",
    serial_number: "LEAK002",
    params: {
      sensitivity: 0.1,
      response_time: 5,
      auto_shutdown: true
    },
    status: 'offline',
    created_at: new Date('2024-02-20').toISOString(),
    updated_at: new Date('2024-02-20').toISOString()
  },
  
  // Новые компоненты ТСО
  {
    id: "comp_023",
    trading_point_id: "1",
    equipment_id: "eq_3", // Терминал самообслуживания
    template_id: "comp_tso_sw_1",
    display_name: "ПО терминала",
    serial_number: "TSOSW001",
    params: {
      version: "2.5.0",
      license_type: "commercial",
      modules: ["payment", "loyalty", "reporting"]
    },
    status: 'online',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-01-10').toISOString()
  },
  {
    id: "comp_024",
    trading_point_id: "1",
    equipment_id: "eq_3", // Терминал самообслуживания
    template_id: "comp_tso_fuelcr_1",
    display_name: "Картридер топливных карт",
    serial_number: "FUELCR001",
    params: {
      card_types: ["mifare", "em-marine"],
      encryption: "AES256",
      connection_type: "USB"
    },
    status: 'online',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-01-10').toISOString()
  },
  {
    id: "comp_025",
    trading_point_id: "1",
    equipment_id: "eq_3", // Терминал самообслуживания
    template_id: "comp_tso_bankcr_1",
    display_name: "Картридер банковских карт",
    serial_number: "BANKCR001",
    params: {
      card_types: ["visa", "mastercard", "mir"],
      contactless: true,
      pci_compliant: true
    },
    status: 'online',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-01-10').toISOString()
  },
  {
    id: "comp_026",
    trading_point_id: "1",
    equipment_id: "eq_3", // Терминал самообслуживания
    template_id: "comp_tso_kkt_1",
    display_name: "ККТ терминала",
    serial_number: "KKT001",
    params: {
      model: "АТОЛ 91Ф",
      fiscal_memory: true,
      ofd_connection: "ethernet"
    },
    status: 'online',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-01-10').toISOString()
  },
  {
    id: "comp_027",
    trading_point_id: "1",
    equipment_id: "eq_3", // Терминал самообслуживания
    template_id: "comp_tso_cashin_1",
    display_name: "Купюроприёмник терминала",
    serial_number: "CASHIN001",
    params: {
      currency: ["RUB"],
      capacity: 600,
      recycling: false
    },
    status: 'maintenance',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-01-10').toISOString()
  },
  {
    id: "comp_028",
    trading_point_id: "1",
    equipment_id: "eq_3", // Терминал самообслуживания
    template_id: "comp_tso_butrk_1",
    display_name: "БУТРК терминала",
    serial_number: "BUTRK001",
    params: {
      channels: 8,
      protocol: "IFSF",
      max_flow_rate: 130
    },
    status: 'online',
    created_at: new Date('2024-01-10').toISOString(),
    updated_at: new Date('2024-01-10').toISOString()
  },
  
  // Компоненты системы управления
  {
    id: "comp_029",
    trading_point_id: "1",
    equipment_id: "eq_4", // Система управления
    template_id: "comp_sys_display_1",
    display_name: "Дисплей системы управления",
    serial_number: "SYSDISP001",
    params: {
      resolution: "1920x1080",
      multi_touch: true,
      size_inch: 24
    },
    status: 'online',
    created_at: new Date('2024-01-05').toISOString(),
    updated_at: new Date('2024-01-05').toISOString()
  },
  {
    id: "comp_030",
    trading_point_id: "1",
    equipment_id: "eq_4", // Система управления
    template_id: "comp_sys_sw_1",
    display_name: "ПО системы управления",
    serial_number: "SYSSW001",
    params: {
      version: "3.0.0",
      database: "PostgreSQL",
      max_users: 50
    },
    status: 'online',
    created_at: new Date('2024-01-05').toISOString(),
    updated_at: new Date('2024-01-05').toISOString()
  },
  
  // Компоненты табло цен
  {
    id: "comp_031",
    trading_point_id: "1",
    equipment_id: "eq_5", // Табло цен
    template_id: "comp_price_ctrl_1",
    display_name: "Контроллер табло",
    serial_number: "PRICECTRL001",
    params: {
      channels: 4,
      protocol: "RS485",
      update_interval: 60
    },
    status: 'online',
    created_at: new Date('2024-03-01').toISOString(),
    updated_at: new Date('2024-03-01').toISOString()
  },
  
  // Компоненты звукового сопровождения
  {
    id: "comp_032",
    trading_point_id: "1",
    equipment_id: "eq_4", // Привязываем к системе управления
    template_id: "comp_sound_ctrl_1",
    display_name: "Контроллер звука",
    serial_number: "SOUND001",
    params: {
      channels: 4,
      power_watts: 100,
      zones: 3
    },
    status: 'online',
    created_at: new Date('2024-01-05').toISOString(),
    updated_at: new Date('2024-01-05').toISOString()
  }
];

// Загружаем данные из localStorage при инициализации
let mockComponents: Component[] = PersistentStorage.load<Component>('components', initialComponents);

// Функция для сохранения изменений
const saveComponents = () => {
  PersistentStorage.save('components', mockComponents);
};

// Mock API для компонентов с персистентным хранением
export const mockComponentsAPI = {
  async list(params: ListComponentsParams = {}): Promise<ListComponentsResponse> {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    let filteredComponents = [...mockComponents];
    
    // Фильтрация
    if (params.equipment_id) {
      filteredComponents = filteredComponents.filter(comp => comp.equipment_id === params.equipment_id);
    }
    
    if (params.status) {
      filteredComponents = filteredComponents.filter(comp => comp.status === params.status);
    }
    
    if (params.template_id) {
      filteredComponents = filteredComponents.filter(comp => comp.template_id === params.template_id);
    }
    
    if (params.search) {
      const searchLower = params.search.toLowerCase();
      filteredComponents = filteredComponents.filter(comp =>
        comp.display_name.toLowerCase().includes(searchLower) ||
        comp.serial_number?.toLowerCase().includes(searchLower)
      );
    }
    
    // Сортировка
    if (params.sort_by) {
      const sortBy = params.sort_by;
      const sortOrder = params.sort_order || 'asc';
      
      filteredComponents.sort((a, b) => {
        let valueA, valueB;
        
        switch (sortBy) {
          case 'display_name':
            valueA = a.display_name;
            valueB = b.display_name;
            break;
          case 'status':
            valueA = a.status;
            valueB = b.status;
            break;
          case 'created_at':
            valueA = a.created_at;
            valueB = b.created_at;
            break;
          case 'updated_at':
            valueA = a.updated_at;
            valueB = b.updated_at;
            break;
          default:
            return 0;
        }
        
        if (valueA < valueB) return sortOrder === 'asc' ? -1 : 1;
        if (valueA > valueB) return sortOrder === 'asc' ? 1 : -1;
        return 0;
      });
    }
    
    // Пагинация
    const page = params.page || 1;
    const limit = params.limit || 20;
    const total = filteredComponents.length;
    const total_pages = Math.ceil(total / limit);
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    
    const pageComponents = filteredComponents.slice(startIndex, endIndex);
    
    // Добавляем информацию о шаблонах
    const componentsWithTemplates = pageComponents.map(comp => ({
      ...comp,
      template: componentTemplatesStore.getById(comp.template_id)
    }));
    
    return {
      data: componentsWithTemplates,
      total,
      page,
      limit,
      total_pages
    };
  },

  async get(id: string): Promise<Component> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const component = mockComponents.find(comp => comp.id === id);
    if (!component) {
      throw new ApiError(404, 'Component not found');
    }
    
    return {
      ...component,
      template: componentTemplatesStore.getById(component.template_id)
    };
  },

  async create(data: CreateComponentRequest): Promise<Component> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Валидация совместимости (здесь нужно было бы получить equipment template_id)
    // Для демо предполагаем что проверка проходит
    
    const newComponent: Component = {
      id: `comp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      trading_point_id: data.trading_point_id,
      equipment_id: data.equipment_id,
      template_id: data.template_id,
      display_name: data.overrides.display_name,
      serial_number: data.overrides.serial_number,
      params: {
        // Берем defaults из шаблона
        ...(componentTemplatesStore.getById(data.template_id)?.defaults || {}),
        // Перезаписываем переданными параметрами
        ...(data.overrides.params || {})
      },
      status: 'online',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    // Сохраняем новый компонент в localStorage
    mockComponents.push(newComponent);
    saveComponents();
    
    return {
      ...newComponent,
      template: componentTemplatesStore.getById(newComponent.template_id)
    };
  },

  async update(id: string, data: UpdateComponentRequest): Promise<Component> {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const componentIndex = mockComponents.findIndex(comp => comp.id === id);
    if (componentIndex === -1) {
      throw new ApiError(404, 'Component not found');
    }
    
    const updatedComponent = {
      ...mockComponents[componentIndex],
      ...data,
      updated_at: new Date().toISOString()
    };
    
    // Обновляем данные и сохраняем в localStorage
    mockComponents[componentIndex] = updatedComponent;
    saveComponents();
    
    return {
      ...updatedComponent,
      template: componentTemplatesStore.getById(updatedComponent.template_id)
    };
  },

  async updateStatus(id: string, action: ComponentStatusAction): Promise<Component> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const componentIndex = mockComponents.findIndex(comp => comp.id === id);
    if (componentIndex === -1) {
      throw new ApiError(404, 'Component not found');
    }
    
    // Изменяем статус и сохраняем в localStorage
    let newStatus;
    switch (action) {
      case 'enable':
        newStatus = 'online';
        break;
      case 'disable':
        newStatus = 'disabled';
        break;
      case 'archive':
        newStatus = 'archived';
        break;
      default:
        throw new ApiError(400, 'Invalid status action');
    }
    
    const updatedComponent = {
      ...mockComponents[componentIndex],
      status: newStatus,
      updated_at: new Date().toISOString()
    };
    
    // Сохраняем изменения в localStorage
    mockComponents[componentIndex] = updatedComponent;
    saveComponents();
    
    return {
      ...updatedComponent,
      template: componentTemplatesStore.getById(updatedComponent.template_id)
    };
  }
};

// Экспорт API для компонентов
export const currentComponentsAPI = mockComponentsAPI;

// 🔄 ДЛЯ PRODUCTION: Заменить на импорт из apiSwitch.ts:
// import { currentComponentsAPI } from './apiSwitch';