/**
 * Helper –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í—Å–µ Supabase —Å–µ—Ä–≤–∏—Å—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç helper
 * –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 */

import { apiConfigServiceDB } from './apiConfigServiceDB';

export class SupabaseConnectionHelper {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
   */
  static async getActiveConnection() {
    try {
      const connection = await apiConfigServiceDB.getCurrentConnection();
      
      if (!connection) {
        console.log('üîÑ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        return null;
      }
      
      if (connection.type !== 'supabase') {
        console.log(`üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ ${connection.type}, Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        return null;
      }
      
      console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ');
      return connection;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
   */
  static async isSupabaseAvailable(): Promise<boolean> {
    const connection = await this.getActiveConnection();
    return connection !== null;
  }

  /**
   * ‚ùå FALLBACK –ú–ï–•–ê–ù–ò–ó–ú –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ë–ï–ó fallback - —Ç–æ–ª—å–∫–æ Supabase
   */
  static async executeWithFallback<T>(
    supabaseOperation: () => Promise<T>,
    fallbackOperation?: () => Promise<T>
  ): Promise<T> {
    if (!(await this.isSupabaseAvailable())) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');
    }

    return await supabaseOperation();
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   * –ë—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
   */
  static async executeWithConnection<T>(
    operation: () => Promise<T>
  ): Promise<T> {
    if (!(await this.isSupabaseAvailable())) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }

    try {
      return await operation();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Supabase –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * ‚ùå FALLBACK –ú–ï–•–ê–ù–ò–ó–ú –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ë–ï–ó fallback - —Ç–æ–ª—å–∫–æ Supabase
   */
  static async safeExecute<T>(
    operationName: string,
    operation: () => Promise<T>,
    fallbackOperation?: () => Promise<T>
  ): Promise<T> {
    console.log(`üîÑ ${operationName}: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Supabase...`);
    
    const isAvailable = await this.isSupabaseAvailable();
    
    if (!isAvailable) {
      throw new Error(`${operationName}: Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".`);
    }

    console.log(`‚úÖ ${operationName}: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Supabase`);
    const result = await operation();
    console.log(`‚úÖ ${operationName}: —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
    return result;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  static async getConnectionStatus() {
    try {
      const connection = await apiConfigServiceDB.getCurrentConnection();
      
      return {
        hasConnection: !!connection,
        type: connection?.type || null,
        isSupabaseActive: connection?.type === 'supabase',
        config: connection ? {
          name: connection.name,
          description: connection.description,
          status: connection.status
        } : null
      };
    } catch (error) {
      return {
        hasConnection: false,
        type: null,
        isSupabaseActive: false,
        config: null,
        error: error.message
      };
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å helper (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  static async initialize(): Promise<void> {
    try {
      await apiConfigServiceDB.initialize();
      console.log('‚úÖ SupabaseConnectionHelper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SupabaseConnectionHelper:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (mock/database)
   */
  static async isMockMode(): Promise<boolean> {
    try {
      return await apiConfigServiceDB.isMockMode();
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∂–∏–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mock —Ä–µ–∂–∏–º:', error);
      return true;
    }
  }
}

/**
 * Decorator –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function withSupabaseConnection(target: any, propertyName: string, descriptor: PropertyDescriptor) {
  const method = descriptor.value;
  
  descriptor.value = async function (...args: any[]) {
    if (!(await SupabaseConnectionHelper.isSupabaseAvailable())) {
      throw new Error(`${propertyName}: Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
    
    return method.apply(this, args);
  };
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö Supabase –≤—ã–∑–æ–≤–æ–≤
 */
// ‚ùå FALLBACK –ú–ï–•–ê–ù–ò–ó–ú –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù
export async function executeSupabaseOperation<T>(
  operationName: string,
  operation: () => Promise<{ data: T; error: any }>,
  fallback?: () => Promise<T>
): Promise<T> {
  return SupabaseConnectionHelper.safeExecute(
    operationName,
    async () => {
      const { data, error } = await operation();
      if (error) throw error;
      return data;
    }
    // Fallback —É–¥–∞–ª–µ–Ω - —Ç–æ–ª—å–∫–æ Supabase
  );
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const supabaseConnectionHelper = SupabaseConnectionHelper;