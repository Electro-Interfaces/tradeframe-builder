/**
 * Trading Transactions Sync Service
 * –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –º–µ–∂–¥—É —Ç–æ—Ä–≥–æ–≤—ã–º API –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
 * 
 * –û–ë–ù–û–í–õ–ï–ù –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é 15:
 * - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —Å–µ—Ç–∏ 15 –∏–∑ Supabase
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
 * - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º —Å–µ—Ç–∏
 * - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç operations
 */

import { supabaseClientBrowser } from './supabaseClientBrowser';
import { tradingNetworkConfigService } from './tradingNetworkConfigService';
import { operationsSupabaseService } from './operationsSupabaseService';
import { tradingNetworkAPI, newTradingNetworkAPI } from './tradingNetworkAPI';
import { Operation, OperationType, OperationStatus, PaymentMethod } from './operationsTypes';
import { httpClient } from './universalHttpClient';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
interface TradingTransaction {
  id: string;
  station_id: number;
  pos_id?: string;
  shift_id?: string;
  transaction_type: string;
  fuel_type: string;
  amount: number; // –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
  quantity: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ª–∏—Ç—Ä–∞—Ö
  price_per_liter: number; // –¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä
  payment_method: string;
  timestamp: string;
  status: string;
  operator_id?: string;
  customer_info?: any;
  receipt_number?: string;
  [key: string]: any; // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
}

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
const TRANSACTION_TYPE_MAPPING: Record<string, OperationType> = {
  'sale': 'sale',
  'refund': 'refund',
  'correction': 'correction',
  'fuel_sale': 'sale',
  'fuel_refund': 'refund',
  'maintenance': 'maintenance',
  'calibration': 'sensor_calibration',
  'diagnostics': 'diagnostics'
};

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
const STATUS_MAPPING: Record<string, OperationStatus> = {
  'completed': 'completed',
  'success': 'completed',
  'failed': 'failed',
  'error': 'failed',
  'pending': 'pending',
  'in_progress': 'in_progress',
  'cancelled': 'cancelled',
  'refunded': 'completed'
};

// –ú–∞–ø–ø–∏–Ω–≥ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
const PAYMENT_METHOD_MAPPING: Record<string, PaymentMethod> = {
  'cash': 'cash',
  'card': 'bank_card',
  'bank_card': 'bank_card',
  'fuel_card': 'fuel_card',
  'online': 'online_order',
  'online_order': 'online_order'
};

// –ö—ç—à –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ external_id -> UUID —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
let stationMappingCache: Record<string, {id: string, name: string}> = {};
let mappingCacheExpiry = 0;

/**
 * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç external_id —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API
 */
async function getStationMappingFromDatabase(): Promise<Record<string, {id: string, name: string}>> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç)
  if (Date.now() < mappingCacheExpiry && Object.keys(stationMappingCache).length > 0) {
    return stationMappingCache;
  }

  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
    const response = await httpClient.get('/rest/v1/trading_points', {
      destination: 'supabase',
      queryParams: {
        select: 'id,name,external_id'
      }
    });
    
    if (!response.success || !response.data) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞');
      return stationMappingCache; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
    }
    
    const tradingPoints = response.data;
    
    const mapping: Record<string, {id: string, name: string}> = {};
    tradingPoints?.forEach(tp => {
      if (tp.external_id) {
        mapping[tp.external_id] = {
          id: tp.id,
          name: tp.name
        };
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ 4 (–ê–ó–° ‚Ññ004 - –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ)
    mapping['4'] = {
      id: '6969b08d-1cbe-45c2-ae9c-8002c7022b59',
      name: '–ê–ó–° ‚Ññ004 - –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ'
    };
    
    stationMappingCache = mapping;
    mappingCacheExpiry = Date.now() + (5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
    
    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞–Ω—Ü–∏–π:', Object.keys(mapping).length, '—Å—Ç–∞–Ω—Ü–∏–π');
    console.log('üîç –ú–∞–ø–ø–∏–Ω–≥:', mapping);
    
    return mapping;
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞–Ω—Ü–∏–π:', error);
    return stationMappingCache;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å UUID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç–∞–Ω—Ü–∏–∏
 */
async function getTradingPointByStationNumber(stationNumber: number): Promise<{id: string, name: string} | null> {
  const mapping = await getStationMappingFromDatabase();
  const stationKey = stationNumber.toString();
  
  if (mapping[stationKey]) {
    return mapping[stationKey];
  }
  
  console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}`);
  return null;
}

export interface SyncResult {
  success: boolean;
  syncedTransactions: number;
  skippedTransactions: number;
  errors: string[];
  lastSyncTime: string;
  totalFromAPI?: number; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–æ —Å API
}

export interface SyncOptions {
  systemId?: number;
  stationNumber?: number;
  startDate?: string;
  endDate?: string;
  forceSync?: boolean; // –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
}

class TradingTransactionsSyncService {
  private isRunning = false;
  private lastSyncTime?: string;

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  async syncTransactions(options: SyncOptions = {}): Promise<SyncResult> {
    console.log('üöÄüöÄüöÄ [SYNC-ENTRY] syncTransactions —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞!', options);
    console.log('üöÄüöÄüöÄ [SYNC-ENTRY] this.isRunning:', this.isRunning);
    
    if (this.isRunning) {
      console.log('‚ö†Ô∏è [SYNC-ENTRY] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É');
      throw new Error('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
    }

    this.isRunning = true;
    const startTime = new Date().toISOString();
    
    // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    if (!options.startDate && !options.endDate) {
      const now = new Date();
      const sevenDaysAgo = new Date(now.getTime() - (7 * 24 * 60 * 60 * 1000));
      
      options.endDate = now.toISOString();
      options.startDate = sevenDaysAgo.toISOString();
      
      console.log('üìÖ [SYNC] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):', {
        startDate: options.startDate,
        endDate: options.endDate
      });
    }
    
    console.log('üîÑ [SYNC] –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ç–æ—Ä–≥–æ–≤—ã–º API');
    console.log('üîÑ [SYNC] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', options);

    const result: SyncResult = {
      success: false,
      syncedTransactions: 0,
      skippedTransactions: 0,
      errors: [],
      lastSyncTime: startTime
    };

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
      console.log('üì• [SYNC] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API...');
      console.log('üîß [SYNC] –í—ã–∑—ã–≤–∞–µ–º newTradingNetworkAPI.getOperations —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
        systemId: (options.systemId || 15).toString(),
        stationNumber: options.stationNumber?.toString() || '4',
        startDate: options.startDate,
        endDate: options.endDate
      });
      
      const transactions = await newTradingNetworkAPI.getOperations(
        (options.systemId || 15).toString(),
        options.stationNumber?.toString() || '4',
        {
          startDate: options.startDate,
          endDate: options.endDate
        }
      );

      console.log(`üì• [SYNC] –ü–æ–ª—É—á–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API`);
      
      // üöÄ –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –õ–ò–ú–ò–¢: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Ä–∞–∑ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const MAX_TRANSACTIONS_PER_BATCH = 500; // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 100 –¥–æ 500
      
      console.log(`üìä [SYNC] –ü–æ–ª—É—á–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ API. –ë—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ ${MAX_TRANSACTIONS_PER_BATCH}`);
      
      // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç–∞–º–∏
      const allTransactions = transactions; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      let processedCount = 0;

      if (allTransactions.length === 0) {
        console.log('‚ÑπÔ∏è [SYNC] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        result.success = true;
        return result;
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
      console.log('üîÑ [SYNC] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏...');
      const existingOperationIds = new Set<string>();

      if (!options.forceSync) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è
          const filters: any = {};
          if (options.stationNumber) {
            const stationTradingPointId = STATION_TO_TRADING_POINT_MAPPING[options.stationNumber];
            if (stationTradingPointId) {
              filters.tradingPointId = stationTradingPointId;
            }
          }
          
          const existingOperations = await operationsSupabaseService.getOperations(filters);
          existingOperations.forEach(op => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º transaction_id –∫–∞–∫ –∫–ª—é—á –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            if (op.transactionId) {
              existingOperationIds.add(op.transactionId.toString());
            }
          });
          console.log(`üìã [SYNC] –ù–∞–π–¥–µ–Ω–æ ${existingOperationIds.size} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å transactionId`);
        } catch (error) {
          console.warn('‚ö†Ô∏è [SYNC] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
        }
      }

      // 3. üöÄ –ü–ê–ö–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
      console.log(`üîÑ [SYNC] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É ${allTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ ${MAX_TRANSACTIONS_PER_BATCH}`);
      
      for (let i = 0; i < allTransactions.length; i += MAX_TRANSACTIONS_PER_BATCH) {
        const batch = allTransactions.slice(i, i + MAX_TRANSACTIONS_PER_BATCH);
        console.log(`üì¶ [SYNC] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç ${Math.floor(i / MAX_TRANSACTIONS_PER_BATCH) + 1}: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${i + 1}-${Math.min(i + MAX_TRANSACTIONS_PER_BATCH, allTransactions.length)} –∏–∑ ${allTransactions.length}`);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏
        const batchOperations: Operation[] = [];
        
        for (const transaction of batch) {
          try {
            // –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–µ–π
            const transactionId = transaction.id || transaction.transaction_id || transaction.trans_id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–ø–µ—Ä–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º transaction_id
            if (!options.forceSync && transactionId && existingOperationIds.has(transactionId.toString())) {
              result.skippedTransactions++;
              continue;
            }

            const operation = await this.transformTransactionToOperation(transaction, options.stationNumber);
            if (operation) {
              batchOperations.push(operation);
              // –î–æ–±–∞–≤–ª—è–µ–º –≤ Set —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–∞—Ö
              if (operation.transactionId) {
                existingOperationIds.add(operation.transactionId);
              }
            }
          } catch (error) {
            const errorMsg = `–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${transaction.id}: ${error.message}`;
            result.errors.push(errorMsg);
            console.error('‚ùå [SYNC]', errorMsg);
          }
        }
        
        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–∫–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Supabase
        if (batchOperations.length > 0) {
          console.log(`üíæ [SYNC] –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${batchOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
          
          try {
            // –ü–∞–∫–µ—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Supabase (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
            const { data, error } = await supabaseClientBrowser
              .from('operations')
              .upsert(batchOperations.map(op => ({
                id: op.id,
                operation_type: op.operationType,
                status: op.status,
                start_time: op.startTime,
                end_time: op.endTime,
                duration: op.duration,
                trading_point_id: op.tradingPointId,
                trading_point_name: op.tradingPointName,
                device_id: op.deviceId,
                transaction_id: op.transactionId, // –í–∞–∂–Ω–æ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                fuel_type: op.fuelType,
                quantity: op.quantity,
                price: op.price,
                total_cost: op.totalCost,
                payment_method: op.paymentMethod,
                details: op.details,
                progress: op.progress,
                operator_name: op.operatorName,
                customer_id: op.customerId,
                vehicle_number: op.vehicleNumber,
                metadata: op.metadata,
                created_at: op.createdAt,
                updated_at: op.updatedAt
              })), {
                onConflict: 'id',
                ignoreDuplicates: false
              })
              .select();

            if (error) {
              throw error;
            }

            result.syncedTransactions += batchOperations.length;
            processedCount += batchOperations.length;
            console.log(`‚úÖ [SYNC] –ü–∞–∫–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${batchOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}/${allTransactions.length}`);
            
          } catch (error) {
            const errorMsg = `–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞: ${error.message}`;
            result.errors.push(errorMsg);
            console.error('‚ùå [SYNC]', errorMsg, error);
            
            // –ï—Å–ª–∏ –ø–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ –æ–¥–Ω–æ–π (–¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
            console.log(`üîÑ [SYNC] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–∞–∫–µ—Ç–∞ (${batchOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π)...`);
            for (const operation of batchOperations) { // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ .slice(0, 10)
              try {
                await operationsSupabaseService.createOperation(operation);
                result.syncedTransactions++;
                processedCount++;
              } catch (singleError) {
                const singleErrorMsg = `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.id}: ${singleError.message}`;
                result.errors.push(singleErrorMsg);
                console.error('‚ùå [SYNC]', singleErrorMsg);
              }
            }
          }
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (i + MAX_TRANSACTIONS_PER_BATCH < allTransactions.length) {
          await new Promise(resolve => setTimeout(resolve, 100)); // 100ms –ø–∞—É–∑–∞
        }
      }

      // 5. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      this.lastSyncTime = startTime;
      result.success = result.errors.length === 0 || result.syncedTransactions > 0;
      result.totalFromAPI = allTransactions.length; // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

      console.log('‚úÖ [SYNC] –ü–∞–∫–µ—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
        totalFromAPI: allTransactions.length,
        processedTransactions: processedCount,
        existingInDB: existingOperationIds.size - processedCount, // –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–∑ –Ω–æ–≤—ã—Ö
        synced: result.syncedTransactions,
        skipped: result.skippedTransactions,
        errors: result.errors.length,
        batchSize: MAX_TRANSACTIONS_PER_BATCH,
        forceSync: options.forceSync || false
      });

    } catch (error) {
      const errorMsg = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`;
      result.errors.push(errorMsg);
      console.error('‚ùå [SYNC]', errorMsg);
    } finally {
      this.isRunning = false;
    }

    return result;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API –≤ –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private async transformTransactionToOperation(transaction: TradingTransaction, requestedStationId?: number): Promise<Operation | null> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!transaction || !transaction.id) {
        console.warn('‚ö†Ô∏è [SYNC] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ ID:', transaction);
        return null;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º requestedStationId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞, –∞ –Ω–µ transaction.station_id
      const stationId = requestedStationId || transaction.station_id || 0;
      const tradingPointInfo = await getTradingPointByStationNumber(stationId);
      
      if (!tradingPointInfo) {
        console.warn(`‚ö†Ô∏è [SYNC] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationId}`);
        return null;
      }
      
      const tradingPointId = tradingPointInfo.id;
      const tradingPointName = tradingPointInfo.name;
      
      console.log(`üè™ [SYNC] –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞–Ω—Ü–∏–∏: requested=${requestedStationId}, transaction.station_id=${transaction.station_id}, final=${stationId} -> ${tradingPointId}`);

      // –ú–∞–ø–∏–º —Ç–∏–ø—ã –∏ —Å—Ç–∞—Ç—É—Å—ã
      const operationType = TRANSACTION_TYPE_MAPPING[transaction.transaction_type] || 'sale';
      const status = STATUS_MAPPING[transaction.status] || 'completed';
      
      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞ pay_type
      let paymentMethod: PaymentMethod = 'cash';
      if (transaction.pay_type?.name) {
        const payTypeName = transaction.pay_type.name.toLowerCase();
        if (payTypeName.includes('–Ω–∞–ª–∏—á–Ω—ã–µ')) {
          paymentMethod = 'cash';
        } else if (payTypeName.includes('—Å–±–µ—Ä–±–∞–Ω–∫') || payTypeName.includes('–∫–∞—Ä—Ç')) {
          paymentMethod = 'bank_card';
        } else if (payTypeName.includes('–º–æ–±–∏–ª') || payTypeName.includes('—Ç–æ–ø–ª–∏–≤')) {
          paymentMethod = 'fuel_card';
        } else {
          paymentMethod = 'bank_card'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º
        }
      }

      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏
      const operationId = `op_${transaction.id}_${Date.now()}`;

      // –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç API  
      console.log('üîç –û–¢–õ–ê–î–ö–ê RAW transaction –æ—Ç API:', JSON.stringify(transaction, null, 2));
      console.log('üîç –û–¢–õ–ê–î–ö–ê –∫–ª—é—á–∏ transaction:', Object.keys(transaction));
      console.log('üîç –û–¢–õ–ê–î–ö–ê –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è:', {
        id: transaction.id,
        timestamp: transaction.timestamp,
        fuel_type: transaction.fuel_type,
        quantity: transaction.quantity,
        amount: transaction.amount,
        price_per_liter: transaction.price_per_liter,
        station_id: transaction.station_id
      });

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
      let startTime = transaction.dt || transaction.timestamp || transaction.date || transaction.datetime || transaction.created_at || transaction.transaction_date;
      
      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
      if (startTime && typeof startTime === 'string') {
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, –¥–æ–±–∞–≤–ª—è–µ–º +03:00 (–ú–æ—Å–∫–≤–∞)
        if (!startTime.includes('Z') && !startTime.includes('+') && !startTime.includes('-', 10)) {
          startTime = startTime + '+03:00';
        }
      }
      // –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞ (fuel_name), –∞ –ù–ï —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ (fuel)
      const fuelType = transaction.fuel_name || transaction.fuel_type || transaction.product_name || transaction.product_type;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–∞
      const quantity = parseFloat(transaction.quantity || transaction.volume || transaction.liters || '0');
      const price = parseFloat(transaction.price || transaction.price_per_liter || transaction.unit_price || transaction.liter_price || '0');
      const totalCost = parseFloat(transaction.cost || transaction.amount || transaction.sum || transaction.total || transaction.total_amount || '0');

      const operation: Operation = {
        id: operationId,
        operationType,
        status,
        startTime: startTime,
        endTime: status === 'completed' ? startTime : undefined,
        duration: status === 'completed' ? 2 : undefined, // –£—Å–ª–æ–≤–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        tradingPointId,
        tradingPointName,
        deviceId: transaction.pos_id || transaction.terminal_id || transaction.device_id || `POS-${stationId}`,
        transactionId: (transaction.id || transaction.transaction_id || transaction.trans_id)?.toString(), // –í–∞–∂–Ω–æ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ - –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
        fuelType: fuelType,
        quantity: quantity,
        price: price,
        totalCost: totalCost,
        paymentMethod,
        details: `–ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API. –ß–µ–∫: ${transaction.receipt_number || 'N/A'}`,
        progress: status === 'completed' ? 100 : status === 'in_progress' ? 50 : 0,
        lastUpdated: new Date().toISOString(),
        operatorName: transaction.operator_id || '–û–ø–µ—Ä–∞—Ç–æ—Ä',
        customerId: transaction.customer_info?.id || undefined,
        vehicleNumber: transaction.customer_info?.vehicle_number || undefined,
        metadata: {
          source: 'trading_api_sync',
          shift_id: transaction.shift_id,
          receipt_number: transaction.receipt_number,
          original_transaction: transaction
        },
        createdAt: new Date(),
        updatedAt: new Date()
      };

      // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã
      console.log('üîç –û–¢–õ–ê–î–ö–ê –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è (–ü–û–°–õ–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø):', {
        startTime: { original: transaction.dt, converted: startTime },
        fuelType: { original: transaction.fuel_name, number_fuel: transaction.fuel, converted: fuelType },
        quantity: { original: transaction.quantity, converted: quantity, type: typeof quantity },
        price: { original: transaction.price, converted: price, type: typeof price },
        totalCost: { original: transaction.cost, converted: totalCost, type: typeof totalCost }
      });

      // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
      console.log('üîç –û–¢–õ–ê–î–ö–ê —Å–æ–∑–¥–∞–Ω–Ω–∞—è operation:', {
        id: operation.id,
        startTime: operation.startTime,
        fuelType: operation.fuelType,
        quantity: operation.quantity,
        price: operation.price,
        totalCost: operation.totalCost,
        transactionId: operation.transactionId
      });

      return operation;
    } catch (error) {
      console.error('‚ùå [SYNC] –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
   */
  async startAutoSync(intervalMinutes: number = 15, options: SyncOptions = {}): Promise<() => void> {
    console.log(`üîÑ [AUTO-SYNC] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ ${intervalMinutes} –º–∏–Ω—É—Ç`);
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    this.syncTransactions(options).catch(error => 
      console.error('‚ùå [AUTO-SYNC] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error)
    );

    // –ó–∞—Ç–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    const intervalId = setInterval(() => {
      this.syncTransactions(options).catch(error => 
        console.error('‚ùå [AUTO-SYNC] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error)
      );
    }, intervalMinutes * 60 * 1000);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    return () => {
      clearInterval(intervalId);
      console.log('‚èπÔ∏è [AUTO-SYNC] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  getSyncStatus(): { isRunning: boolean; lastSyncTime?: string } {
    return {
      isRunning: this.isRunning,
      lastSyncTime: this.lastSyncTime
    };
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
   */
  async syncStationTransactions(stationNumber: number, days: number = 7): Promise<SyncResult> {
    const endDate = new Date().toISOString();
    const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString();

    return this.syncTransactions({
      stationNumber,
      startDate,
      endDate
    });
  }

  /**
   * –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
   */
  async syncAllStations(days: number = 1): Promise<SyncResult[]> {
    const stations = [1, 2, 3, 4, 5]; // –ù–æ–º–µ—Ä–∞ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π
    const results: SyncResult[] = [];

    for (const stationNumber of stations) {
      try {
        console.log(`üè™ [SYNC] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}...`);
        const result = await this.syncStationTransactions(stationNumber, days);
        results.push(result);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        console.error(`‚ùå [SYNC] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}:`, error);
        results.push({
          success: false,
          syncedTransactions: 0,
          skippedTransactions: 0,
          errors: [error.message],
          lastSyncTime: new Date().toISOString()
        });
      }
    }

    return results;
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–µ—Ç–∏ 15 –∏–∑ Supabase
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π
   */
  async syncNetwork15Transactions(options: {
    dateFrom?: string;
    dateTo?: string;
    forceSync?: boolean;
  } = {}): Promise<{
    success: boolean;
    totalPoints: number;
    results: SyncResult[];
    summary: {
      totalSynced: number;
      totalSkipped: number;
      totalErrors: number;
    };
  }> {
    console.log('üè¢ [SYNC-NETWORK-15] –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ–π —Å–µ—Ç–∏ 15');
    
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç—å 15 –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: network, error: networkError } = await supabaseClientBrowser
        .from('networks')
        .select('id, name, external_id')
        .eq('external_id', '15')
        .single();
        
      if (networkError || !network) {
        throw new Error(`–°–µ—Ç—å —Å external_id=15 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${networkError?.message}`);
      }
      
      console.log('üè¢ [SYNC-NETWORK-15] –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Ç—å:', network);
      
      // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Å–µ—Ç–∏ 15
      const { data: tradingPoints, error: tpError } = await supabaseClientBrowser
        .from('trading_points')
        .select('id, name, external_id, is_active')
        .eq('network_id', network.id)
        .eq('is_active', true); // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏
        
      if (tpError) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: ${tpError.message}`);
      }
      
      if (!tradingPoints || tradingPoints.length === 0) {
        throw new Error('–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Å–µ—Ç–∏ 15 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
      console.log(`üìç [SYNC-NETWORK-15] –ù–∞–π–¥–µ–Ω–æ ${tradingPoints.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫`);
      
      // 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
      const config = await tradingNetworkConfigService.getConfig();
      if (!config.enabled) {
        throw new Error('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"');
      }
      
      console.log('üîß [SYNC-NETWORK-15] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API:', {
        baseUrl: config.baseUrl,
        username: config.username,
        hasPassword: !!config.password
      });
      
      // 4. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
      const results: SyncResult[] = [];
      
      for (const tradingPoint of tradingPoints) {
        try {
          console.log(`üè™ [SYNC-NETWORK-15] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ—á–∫–∏: ${tradingPoint.name} (station=${tradingPoint.external_id})`);
          
          // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
          let dateFrom = options.dateFrom;
          let dateTo = options.dateTo;
          
          if (!dateFrom && !dateTo) {
            const now = new Date();
            const sevenDaysAgo = new Date(now.getTime() - (7 * 24 * 60 * 60 * 1000));
            
            dateTo = now.toISOString().split('T')[0];
            dateFrom = sevenDaysAgo.toISOString().split('T')[0];
            
            console.log(`üìÖ [SYNC-NETWORK-15] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):`, {
              dateFrom, dateTo
            });
          }

          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ API
          const apiTransactions = await this.fetchApiTransactions({
            systemId: 15, // ID —Å–µ—Ç–∏ –≤ API
            stationId: parseInt(tradingPoint.external_id), // ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤ API
            dateFrom: dateFrom,
            dateTo: dateTo
          });
          
          console.log(`üì• [SYNC-NETWORK-15] –ü–æ–ª—É—á–µ–Ω–æ ${apiTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${tradingPoint.name}`);
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          const syncResult = await this.processApiTransactions(
            apiTransactions,
            tradingPoint,
            options.forceSync || false
          );
          
          results.push(syncResult);
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 500));
          
        } catch (error: any) {
          console.error(`‚ùå [SYNC-NETWORK-15] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–∫–∏ ${tradingPoint.name}:`, error);
          results.push({
            success: false,
            syncedTransactions: 0,
            skippedTransactions: 0,
            errors: [error.message],
            lastSyncTime: new Date().toISOString()
          });
        }
      }
      
      // 5. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const summary = results.reduce(
        (acc, result) => ({
          totalSynced: acc.totalSynced + result.syncedTransactions,
          totalSkipped: acc.totalSkipped + result.skippedTransactions,
          totalErrors: acc.totalErrors + result.errors.length
        }),
        { totalSynced: 0, totalSkipped: 0, totalErrors: 0 }
      );
      
      console.log('‚úÖ [SYNC-NETWORK-15] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∏ 15 –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', summary);
      
      return {
        success: results.some(r => r.success),
        totalPoints: tradingPoints.length,
        results,
        summary
      };
      
    } catch (error: any) {
      console.error('‚ùå [SYNC-NETWORK-15] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏ 15:', error);
      throw error;
    }
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
   */
  private async fetchApiTransactions(params: {
    systemId: number;
    stationId: number;
    dateFrom?: string;
    dateTo?: string;
  }): Promise<TradingTransaction[]> {
    
    const config = await tradingNetworkConfigService.getConfig();
    
    // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    let dateFrom = params.dateFrom;
    let dateTo = params.dateTo;
    
    if (!dateFrom && !dateTo) {
      const now = new Date();
      const sevenDaysAgo = new Date(now.getTime() - (7 * 24 * 60 * 60 * 1000));
      
      dateTo = now.toISOString().split('T')[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è API
      dateFrom = sevenDaysAgo.toISOString().split('T')[0];
      
      console.log(`üìÖ [API] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞—Ç—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${params.stationId}:`, {
        dateFrom, dateTo
      });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const urlParams = new URLSearchParams({
      system: params.systemId.toString(),
      station: params.stationId.toString()
    });
    
    if (dateFrom) {
      urlParams.append('dt_beg', dateFrom);
    }
    if (dateTo) {
      urlParams.append('dt_end', dateTo);
    }
    
    const queryParams = {
      system: params.systemId.toString(),
      station: params.stationId.toString()
    };
    
    if (dateFrom) {
      queryParams['dt_beg'] = dateFrom;
    }
    if (dateTo) {
      queryParams['dt_end'] = dateTo;
    }
    
    console.log('üåê [API] –ó–∞–ø—Ä–æ—Å:', '/v1/transactions', queryParams);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç
    const response = await httpClient.get('/v1/transactions', {
      destination: 'external-api',
      useAuth: true,
      queryParams,
      timeout: config.timeout || 30000
    });
    
    if (!response.success) {
      throw new Error(`API –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω: ${response.error}`);
    }
    
    const data = response.data;
    
    // API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–æ–º
    if (Array.isArray(data)) {
      return data;
    } else if (data.transactions && Array.isArray(data.transactions)) {
      return data.transactions;
    } else if (data.data && Array.isArray(data.data)) {
      return data.data;
    } else {
      console.warn('‚ö†Ô∏è [API] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', data);
      return [];
    }
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ API –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async processApiTransactions(
    apiTransactions: TradingTransaction[],
    tradingPoint: any,
    forceSync: boolean
  ): Promise<SyncResult> {
    
    const result: SyncResult = {
      success: false,
      syncedTransactions: 0,
      skippedTransactions: 0,
      errors: [],
      lastSyncTime: new Date().toISOString()
    };
    
    if (apiTransactions.length === 0) {
      result.success = true;
      return result;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    const existingOperationIds = new Set<string>();
    if (!forceSync) {
      try {
        const existingOperations = await operationsSupabaseService.getOperations({
          tradingPointId: tradingPoint.id
        });
        existingOperations.forEach(op => {
          if (op.transactionId) {
            existingOperationIds.add(op.transactionId);
          }
        });
      } catch (error) {
        console.warn('‚ö†Ô∏è [PROCESS] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    for (const apiTx of apiTransactions) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if (!forceSync && existingOperationIds.has(apiTx.id)) {
          result.skippedTransactions++;
          console.log(`‚è≠Ô∏è [PROCESS] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ${apiTx.id} - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          continue;
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–ø–µ—Ä–∞—Ü–∏—é
        const operation = await this.transformApiTransactionToOperation(apiTx, tradingPoint);
        
        if (operation) {
          try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–∫–ª—é—á–∞—è transactionId
            const createResult = await operationsSupabaseService.createOperation({
              operationType: operation.operationType,
              tradingPointId: operation.tradingPointId,
              tradingPointName: operation.tradingPointName,
              deviceId: operation.deviceId,
              transactionId: operation.transactionId, // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
              fuelType: operation.fuelType,
              quantity: operation.quantity,
              price: operation.price,
              totalCost: operation.totalCost,
              paymentMethod: operation.paymentMethod,
              startTime: operation.startTime,
              endTime: operation.endTime,
              status: operation.status,
              details: operation.details,
              operatorName: operation.operatorName,
              metadata: operation.metadata
            });
            
            result.syncedTransactions++;
            console.log(`‚úÖ [PROCESS] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ${apiTx.id} —Å transaction_id: ${operation.transactionId}`);
            
          } catch (error: any) {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
            if (error.message && error.message.includes('duplicate') || 
                error.message && error.message.includes('unique') ||
                error.code === '23505') {
              result.skippedTransactions++;
              console.log(`‚è≠Ô∏è [PROCESS] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ${apiTx.id} - –¥—É–±–ª–∏–∫–∞—Ç –ø–æ transaction_id ${operation.transactionId}`);
            } else {
              result.errors.push(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${apiTx.id}: ${error.message}`);
              console.error(`‚ùå [PROCESS] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${apiTx.id}:`, error);
            }
          }
        }
        
      } catch (error: any) {
        result.errors.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${apiTx.id}: ${error.message}`);
        console.error(`‚ùå [PROCESS] ${result.errors[result.errors.length - 1]}`);
      }
    }
    
    result.success = result.errors.length === 0 || result.syncedTransactions > 0;
    return result;
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ API –≤ –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private async transformApiTransactionToOperation(
    apiTx: TradingTransaction,
    tradingPoint: any
  ): Promise<Operation | null> {
    
    try {
      // –ú–∞–ø–ø–∏–Ω–≥ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
      const paymentMethodMap: Record<string, PaymentMethod> = {
        'CASH': 'cash',
        'CARD': 'bank_card',
        'BANK_CARD': 'bank_card',
        'CORPORATE_CARD': 'corporate_card',
        'FUEL_CARD': 'fuel_card',
        'ONLINE': 'online_order'
      };
      
      // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
      const statusMap: Record<string, OperationStatus> = {
        'COMPLETED': 'completed',
        'SUCCESS': 'completed',
        'FAILED': 'failed',
        'ERROR': 'failed',
        'PENDING': 'pending',
        'IN_PROGRESS': 'in_progress',
        'CANCELLED': 'cancelled'
      };
      
      const operation: Operation = {
        id: `api_${apiTx.id}_${tradingPoint.id}`,
        operationType: 'sale' as OperationType,
        status: statusMap[apiTx.status] || 'completed',
        startTime: apiTx.timestamp,
        endTime: apiTx.timestamp,
        duration: 0,
        tradingPointId: tradingPoint.id,
        tradingPointName: tradingPoint.name,
        deviceId: apiTx.pos_id || `POS-${apiTx.station_id}`,
        transactionId: apiTx.id, // –í–∞–∂–Ω–æ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        fuelType: apiTx.fuel_type,
        quantity: apiTx.quantity,
        price: apiTx.price_per_liter,
        totalCost: apiTx.amount,
        paymentMethod: paymentMethodMap[apiTx.payment_method] || 'cash',
        details: `–ò–º–ø–æ—Ä—Ç –∏–∑ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ (—Å–∏—Å—Ç–µ–º–∞ 15): ${apiTx.fuel_type} ${apiTx.quantity}–ª –ø–æ ${apiTx.price_per_liter}‚ÇΩ/–ª`,
        progress: 100,
        lastUpdated: new Date().toISOString(),
        operatorName: apiTx.operator_id || '–û–ø–µ—Ä–∞—Ç–æ—Ä API',
        customerId: apiTx.customer_info?.id,
        vehicleNumber: apiTx.customer_info?.vehicle_number,
        metadata: {
          source: 'trading_network_api_15',
          apiTransactionId: apiTx.id,
          stationId: apiTx.station_id,
          shiftId: apiTx.shift_id,
          receiptNumber: apiTx.receipt_number,
          syncedAt: new Date().toISOString(),
          originalTransaction: apiTx
        },
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      return operation;
      
    } catch (error: any) {
      console.error('‚ùå [TRANSFORM] –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const tradingTransactionsSyncService = new TradingTransactionsSyncService();

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
export { TradingTransaction, SyncOptions, SyncResult };

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
if (import.meta.env.DEV) {
  // @ts-ignore
  window.tradingTransactionsSyncService = tradingTransactionsSyncService;
  console.log('üß™ TradingTransactionsSyncService –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ window.tradingTransactionsSyncService');
  console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:');
  console.log('  - syncNetwork15Transactions() - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å–µ—Ç–∏ 15');
  console.log('  - syncStationTransactions(stationNumber, days) - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏');
  console.log('  - getSyncStatus() - –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
}