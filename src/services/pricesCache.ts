// –°–µ—Ä–≤–∏—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω —Å localStorage
import { PersistentStorage } from '@/utils/persistentStorage';
import { tradingNetworkAPI, TradingNetworkPrice } from './tradingNetworkAPI';

export interface CachedFuelPrice {
  id: string;
  fuelType: string;
  fuelCode: string;
  priceNet: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  vatRate: number;
  priceGross: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  unit: string;
  appliedFrom: string;
  status: 'active' | 'scheduled' | 'expired';
  tradingPoint: string;
  networkId: string;
  tradingPointId: string;
  lastUpdated: string; // ISO timestamp
  source: 'cache' | 'network';
}

export interface PricesCacheEntry {
  tradingPointId: string;
  prices: CachedFuelPrice[];
  lastUpdated: string;
  lastNetworkSync: string;
}

class PricesCacheService {
  private readonly CACHE_KEY = 'prices_cache';
  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ –∏–∑ –∫—ç—à–∞)
  async getPricesForTradingPoint(tradingPointId: string): Promise<CachedFuelPrice[]> {
    console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏: ${tradingPointId}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
    const cached = this.getCachedPrices(tradingPointId);
    
    if (cached && this.isCacheValid(cached)) {
      console.log(`üí∞ –ù–∞–π–¥–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ —Ü–µ–Ω—ã –≤ –∫—ç—à–µ (${cached.prices.length} —Ü–µ–Ω)`);
      return cached.prices.map(price => ({ ...price, source: 'cache' as const }));
    }

    console.log(`üí∞ –ö—ç—à –ø—É—Å—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏...`);
    // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
    return this.fetchAndCachePrices(tradingPointId);
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ —Å–µ—Ç–∏
  async refreshPricesFromNetwork(tradingPointId: string): Promise<CachedFuelPrice[]> {
    console.log(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏: ${tradingPointId}`);
    return this.fetchAndCachePrices(tradingPointId);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Å–µ—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
  private async fetchAndCachePrices(tradingPointId: string): Promise<CachedFuelPrice[]> {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
      const stationNumber = this.getStationNumber(tradingPointId);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ API
      const networkResponse = await tradingNetworkAPI.getPrices(stationNumber);
      
      if (!networkResponse.prices || networkResponse.prices.length === 0) {
        console.log(`‚ö†Ô∏è –ù–µ—Ç —Ü–µ–Ω –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}`);
        return [];
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ—Ç–µ–≤—ã–µ —Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç –∫—ç—à–∞
      const cachedPrices: CachedFuelPrice[] = networkResponse.prices.map((netPrice, index) => {
        return {
          id: `${tradingPointId}_${netPrice.service_code}_${Date.now()}`,
          fuelType: netPrice.service_name,
          fuelCode: netPrice.service_name.replace('-', ''),
          priceNet: Math.round(netPrice.price * 100 / 1.2), // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –±–µ–∑ –ù–î–°
          vatRate: 20,
          priceGross: Math.round(netPrice.price * 100), // –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
          unit: "–õ",
          appliedFrom: new Date().toLocaleString('ru-RU'),
          status: 'active' as const,
          tradingPoint: this.getTradingPointName(tradingPointId),
          networkId: tradingPointId,
          tradingPointId,
          lastUpdated: new Date().toISOString(),
          source: 'network' as const
        };
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.savePricesToCache(tradingPointId, cachedPrices);

      console.log(`üí∞ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ ${cachedPrices.length} —Ü–µ–Ω`);
      return cachedPrices;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω –∏–∑ —Å–µ—Ç–∏:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
      const cached = this.getCachedPrices(tradingPointId);
      if (cached) {
        console.log(`‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞`);
        return cached.prices.map(price => ({ ...price, source: 'cache' as const }));
      }
      
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
  private getCachedPrices(tradingPointId: string): PricesCacheEntry | null {
    try {
      const allCache = PersistentStorage.load<Record<string, PricesCacheEntry>>(this.CACHE_KEY, {});
      return allCache[tradingPointId] || null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫—ç—à–∞:', error);
      return null;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—ã –≤ –∫—ç—à
  private savePricesToCache(tradingPointId: string, prices: CachedFuelPrice[]): void {
    try {
      const allCache = PersistentStorage.load<Record<string, PricesCacheEntry>>(this.CACHE_KEY, {});
      const now = new Date().toISOString();
      
      allCache[tradingPointId] = {
        tradingPointId,
        prices,
        lastUpdated: now,
        lastNetworkSync: now
      };

      PersistentStorage.save(this.CACHE_KEY, allCache);
      console.log(`üíæ –¶–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è ${tradingPointId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫—ç—à:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞
  private isCacheValid(cacheEntry: PricesCacheEntry): boolean {
    const now = Date.now();
    const cacheTime = new Date(cacheEntry.lastUpdated).getTime();
    const age = now - cacheTime;
    
    return age < this.CACHE_TTL;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  private getStationNumber(tradingPointId: string): number {
    const stationMapping: Record<string, number> = {
      'point1': 77,  // –ê–ó–° ‚Ññ001 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è
      'point2': 78,  // –ê–ó–° ‚Ññ002 - –°–µ–≤–µ—Ä–Ω–∞—è  
      'point3': 79,  // –ê–ó–° ‚Ññ003 - –Æ–∂–Ω–∞—è
      'point4': 80,  // –ê–ó–° ‚Ññ004 - –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ
      'point5': 81,  // –ê–ó–° ‚Ññ005 - –ü—Ä–æ–º–∑–æ–Ω–∞
    };
    
    return stationMapping[tradingPointId] || 77;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  private getTradingPointName(tradingPointId: string): string {
    const nameMapping: Record<string, string> = {
      'point1': '–ê–ó–° ‚Ññ001 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è',
      'point2': '–ê–ó–° ‚Ññ002 - –°–µ–≤–µ—Ä–Ω–∞—è',
      'point3': '–ê–ó–° ‚Ññ003 - –Æ–∂–Ω–∞—è', 
      'point4': '–ê–ó–° ‚Ññ004 - –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ',
      'point5': '–ê–ó–° ‚Ññ005 - –ü—Ä–æ–º–∑–æ–Ω–∞',
    };
    
    return nameMapping[tradingPointId] || `–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ ${tradingPointId}`;
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  clearCache(tradingPointId?: string): void {
    if (tradingPointId) {
      const allCache = PersistentStorage.load<Record<string, PricesCacheEntry>>(this.CACHE_KEY, {});
      delete allCache[tradingPointId];
      PersistentStorage.save(this.CACHE_KEY, allCache);
      console.log(`üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è ${tradingPointId}`);
    } else {
      PersistentStorage.remove(this.CACHE_KEY);
      console.log(`üóëÔ∏è –í–µ—Å—å –∫—ç—à —Ü–µ–Ω –æ—á–∏—â–µ–Ω`);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
  getCacheInfo(): { totalEntries: number; entries: Array<{ tradingPointId: string; lastUpdated: string; pricesCount: number }> } {
    const allCache = PersistentStorage.load<Record<string, PricesCacheEntry>>(this.CACHE_KEY, {});
    const entries = Object.values(allCache).map(entry => ({
      tradingPointId: entry.tradingPointId,
      lastUpdated: entry.lastUpdated,
      pricesCount: entry.prices.length
    }));

    return {
      totalEntries: entries.length,
      entries
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const pricesCacheService = new PricesCacheService();

// –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
if (typeof window !== 'undefined') {
  console.log('üßπ –û—á–∏—â–∞–µ–º –∫—ç—à —Ü–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è...');
  pricesCacheService.clearCache();
}