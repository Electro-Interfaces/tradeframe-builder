/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –û–ë–ù–û–í–õ–ï–ù: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É localStorage –∏ Supabase (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤)
 */

import { apiConfigServiceDB } from './apiConfigServiceDB';

export interface ComponentSystemType {
  id: string;
  value: string; // —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–¥ (sensor_level, printer, display, etc.)
  label: string; // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  description?: string;
  category: string; // –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (sensor, payment, display, etc.)
  isActive: boolean;
  createdAt: string;
  updatedAt?: string;
}

export interface ComponentSystemTypeInput {
  value: string;
  label: string;
  description?: string;
  category: string;
  isActive?: boolean;
}

export interface ComponentSystemTypeUpdateInput extends ComponentSystemTypeInput {
  isActive?: boolean;
}

// ‚ùå MOCK –î–ê–ù–ù–´–ï –£–î–ê–õ–ï–ù–´ –ò–ó –°–û–û–ë–†–ê–ñ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
// ‚ùå MOCK –î–ê–ù–ù–´–ï –£–î–ê–õ–ï–ù–´ –ò–ó –°–û–û–ë–†–ê–ñ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
const mockComponentSystemTypes: ComponentSystemType[] = [];

// ‚ùå LOCALSTORAGE –§–£–ù–ö–¶–ò–ò –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´
function getComponentSystemTypesFromStorage(): ComponentSystemType[] {
  throw new Error('–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');

// ‚ùå –°–û–•–†–ê–ù–ï–ù–ò–ï –í LOCALSTORAGE –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û
function saveComponentSystemTypesToStorage(types: ComponentSystemType[]): void {
  throw new Error('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤ localStorage –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.');
}

// –ù–æ–≤—ã–π API –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
export const componentSystemTypesService = {
  async initialize(): Promise<void> {
    try {
      await apiConfigServiceDB.initialize();
      console.log('‚úÖ ComponentSystemTypesService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ComponentSystemTypesService:', error);
    }
  },

  // ‚ùå MOCK –†–ï–ñ–ò–ú –ù–ê–í–°–ï–ì–î–ê –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù
  async isMockMode(): Promise<boolean> {
    return false;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  async list(): Promise<ComponentSystemType[]> {
    try {
      const isMock = await this.isMockMode();
      console.log(`üîÑ ComponentSystemTypesService.list: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${isMock ? 'localStorage' : 'database'} —Ä–µ–∂–∏–º`);
      
      await new Promise(resolve => setTimeout(resolve, 100));
      return getComponentSystemTypesFromStorage().filter(type => type.isActive);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
      return getComponentSystemTypesFromStorage().filter(type => type.isActive);
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
  async listAll(): Promise<ComponentSystemType[]> {
    try {
      const isMock = await this.isMockMode();
      console.log(`üîÑ ComponentSystemTypesService.listAll: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${isMock ? 'localStorage' : 'database'} —Ä–µ–∂–∏–º`);
      
      await new Promise(resolve => setTimeout(resolve, 100));
      return getComponentSystemTypesFromStorage();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
      return getComponentSystemTypesFromStorage();
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async listByCategory(category: string): Promise<ComponentSystemType[]> {
    await new Promise(resolve => setTimeout(resolve, 100));
    return getComponentSystemTypesFromStorage()
      .filter(type => type.isActive && type.category === category);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async getCategories(): Promise<string[]> {
    await new Promise(resolve => setTimeout(resolve, 50));
    const types = getComponentSystemTypesFromStorage().filter(type => type.isActive);
    return [...new Set(types.map(type => type.category))];
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –ø–æ ID
  async get(id: string): Promise<ComponentSystemType | null> {
    await new Promise(resolve => setTimeout(resolve, 50));
    return getComponentSystemTypesFromStorage().find(type => type.id === id) || null;
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –ø–æ value
  async getByValue(value: string): Promise<ComponentSystemType | null> {
    await new Promise(resolve => setTimeout(resolve, 50));
    return getComponentSystemTypesFromStorage().find(type => type.value === value) || null;
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  async create(input: ComponentSystemTypeInput): Promise<ComponentSystemType> {
    await new Promise(resolve => setTimeout(resolve, 100));
    
    const types = getComponentSystemTypesFromStorage();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ value
    if (types.some(type => type.value === input.value)) {
      throw new Error(`–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –∫–æ–¥–æ–º "${input.value}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    const newType: ComponentSystemType = {
      ...input,
      id: Date.now().toString(),
      isActive: input.isActive ?? true,
      createdAt: new Date().toISOString()
    };

    const updatedTypes = [...types, newType];
    saveComponentSystemTypesToStorage(updatedTypes);
    
    return newType;
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  async update(id: string, input: ComponentSystemTypeUpdateInput): Promise<ComponentSystemType | null> {
    await new Promise(resolve => setTimeout(resolve, 100));
    
    const types = getComponentSystemTypesFromStorage();
    const index = types.findIndex(type => type.id === id);
    
    if (index === -1) return null;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ value (–∏—Å–∫–ª—é—á–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç)
    if (input.value && types.some(type => type.value === input.value && type.id !== id)) {
      throw new Error(`–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –∫–æ–¥–æ–º "${input.value}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    const updatedType: ComponentSystemType = {
      ...types[index],
      ...input,
      updatedAt: new Date().toISOString()
    };

    types[index] = updatedType;
    saveComponentSystemTypesToStorage(types);
    
    return updatedType;
  },

  // –£–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  async delete(id: string): Promise<boolean> {
    await new Promise(resolve => setTimeout(resolve, 100));
    
    const types = getComponentSystemTypesFromStorage();
    const typeToDelete = types.find(type => type.id === id);
    
    if (!typeToDelete) return false;

    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω–∞—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
    typeToDelete.isActive = false;
    typeToDelete.updatedAt = new Date().toISOString();
    
    saveComponentSystemTypesToStorage(types);
    return true;
  },

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (—Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º)
  async restore(id: string): Promise<boolean> {
    await new Promise(resolve => setTimeout(resolve, 100));
    
    const types = getComponentSystemTypesFromStorage();
    const typeToRestore = types.find(type => type.id === id);
    
    if (!typeToRestore) return false;

    typeToRestore.isActive = true;
    typeToRestore.updatedAt = new Date().toISOString();
    
    saveComponentSystemTypesToStorage(types);
    return true;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è dropdown (–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã)
  async getOptions(): Promise<Array<{value: string, label: string, category: string}>> {
    try {
      const isMock = await this.isMockMode();
      console.log(`üîÑ ComponentSystemTypesService.getOptions: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${isMock ? 'localStorage' : 'database'} —Ä–µ–∂–∏–º`);
      
      const activeTypes = await this.list();
      return activeTypes.map(type => ({
        value: type.value,
        label: type.label,
        category: type.category
      }));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
      return [];
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è dropdown —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  async getGroupedOptions(): Promise<Record<string, Array<{value: string, label: string}>>> {
    const activeTypes = await this.list();
    const grouped: Record<string, Array<{value: string, label: string}>> = {};
    
    activeTypes.forEach(type => {
      if (!grouped[type.category]) {
        grouped[type.category] = [];
      }
      grouped[type.category].push({
        value: type.value,
        label: type.label
      });
    });
    
    return grouped;
  }
};

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
export const componentSystemTypesAPI = componentSystemTypesService;