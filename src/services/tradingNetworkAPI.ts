/**
 * üîÑ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ï–†–í–ò–° –î–õ–Ø –†–ê–ë–û–¢–´ –° API –¢–û–†–ì–û–í–û–ô –°–ï–¢–ò
 * 
 * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 * –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
 */

// –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
import { tanksApi, pricesApi, operationsApi } from './apiEndpoints';
import { httpClient } from './universalHttpClient';

// –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö
import { currentSupabaseEquipmentAPI } from './equipmentSupabase';
// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞
import { tradingNetworkMappingService } from './tradingNetworkMappingService';
import { tradingNetworkConfigService } from './tradingNetworkConfigService';

// –ë–∞–∑–æ–≤—ã–π URL –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
// const BASE_URL - —É–¥–∞–ª–µ–Ω, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è


// –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –∫–æ–¥—ã —É—Å–ª—É–≥
const FUEL_SERVICE_CODES: Record<string, number> = {
  '–ê–ò-92': 1,
  '–ê–ò-95': 2,
  '–ê–ò-98': 3,
  '–î–¢': 4,
  '–ê–ò-100': 5
};



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
async function getFuelTypesFromTanks(stationNumber: number): Promise<string[]> {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º trading_point_id –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç–∞–Ω—Ü–∏–∏
    // –ú–∞–ø–ø–∏–Ω–≥: –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ -> ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    // –ú–∞–ø–ø–∏–Ω–≥: –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ -> UUID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π)
    const stationToUuidMapping: Record<number, string> = {
      1: '9baf5375-9929-4774-8366-c0609b9f2a51',   // –ê–ó–° ‚Ññ001 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è
      2: 'point2',   // –ê–ó–° ‚Ññ002 - –°–µ–≤–µ—Ä–Ω–∞—è (–≤—Ä–µ–º–µ–Ω–Ω–æ, –Ω—É–∂–µ–Ω UUID) 
      3: 'f2566905-c748-4240-ac31-47b626ab625d',   // –ê–ó–° ‚Ññ003 - –Æ–∂–Ω–∞—è
      4: 'point4',   // –ê–ó–° ‚Ññ004 - –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ, –Ω—É–∂–µ–Ω UUID)
      5: 'f7963207-2732-4fae-988e-c73eef7645ca',   // –ê–ó–° ‚Ññ005 - –ü—Ä–æ–º–∑–æ–Ω–∞
    };
    
    // –°—Ç–∞—Ä—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const legacyStationMapping: Record<number, string> = {
      1: 'point1',   // –ê–ó–° ‚Ññ001 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è
      2: 'point2',   // –ê–ó–° ‚Ññ002 - –°–µ–≤–µ—Ä–Ω–∞—è  
      3: 'point3',   // –ê–ó–° ‚Ññ003 - –Æ–∂–Ω–∞—è
      4: 'point4',   // –ê–ó–° ‚Ññ004 - –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ
      5: 'point5',   // –ê–ó–° ‚Ññ005 - –ü—Ä–æ–º–∑–æ–Ω–∞
    };
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º UUID –º–∞–ø–ø–∏–Ω–≥, –ø–æ—Ç–æ–º legacy
    const tradingPointId = stationToUuidMapping[stationNumber] || legacyStationMapping[stationNumber] || `point${stationNumber}`;
    
    console.log(`üè≠ getFuelTypesFromTanks: —Å—Ç–∞–Ω—Ü–∏—è ${stationNumber} ‚Üí tradingPointId: ${tradingPointId}`);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    const equipmentResponse = await currentSupabaseEquipmentAPI.list({
      trading_point_id: tradingPointId,
      limit: 100
    });

    console.log(`üìã Raw equipment data for ${tradingPointId}:`, equipmentResponse.data.map(eq => ({
      id: eq.id,
      name: eq.display_name,
      type: eq.system_type,
      fuelType: eq.params?.['–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞'],
      status: eq.status
    })));

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞
    const fuelTypes = equipmentResponse.data
      .filter(eq => eq.system_type === 'fuel_tank' && eq.params?.['–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞'] && eq.status !== 'deleted')
      .map(eq => eq.params['–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞'])
      .filter((fuelType, index, array) => array.indexOf(fuelType) === index); // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    console.log(`üîç Station ${stationNumber} (${tradingPointId}): –Ω–∞–π–¥–µ–Ω–æ ${equipmentResponse.data.length} –µ–¥–∏–Ω–∏—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è`);
    console.log(`üîç Station ${stationNumber} (${tradingPointId}): –Ω–∞–π–¥–µ–Ω–æ ${fuelTypes.length} –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞:`, fuelTypes);

    return fuelTypes;
  } catch (error) {
    console.error('üö® –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏', stationNumber, ':', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.`);
  }
}

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
export interface TradingNetworkPrice {
  service_code: number;
  service_name: string;
  price: number;
}

export interface TradingNetworkPricesResponse {
  prices: TradingNetworkPrice[];
}

export interface TradingNetworkService {
  service_code: number;
  service_name: string;
}

export interface SetPricesRequest {
  prices: Record<string, number>; // service_code -> price
  effective_date: string; // ISO 8601 format
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
class TradingNetworkAPIService {
  private token: string | null = null;

  // ‚ùå –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç
  async login(): Promise<string> {
    throw new Error('–ü—Ä—è–º–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');
    /*
    const response = await fetch(`BASEURL_FROM_CONFIG/v1/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'text/plain, application/json' // –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
      },
      // –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
      // body: JSON.stringify({ username, password })
      signal: AbortSignal.timeout(10000) // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
    });

    if (!response.ok) {
      const errorText = await response.text().catch(() => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.status, response.statusText, errorText);
      throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const token = await response.text();
    // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    this.token = token.replace(/^["']|["']$/g, '');
    
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
    return token;
    */
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  private async ensureAuth(): Promise<void> {
    if (!this.token) {
      console.log('üîë –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...');
      await this.login();
    } else {
      console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  async reauth(): Promise<string> {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    this.token = null;
    return await this.login();
  }

  // ‚ùå –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ newTradingNetworkAPI.getFuelPrices()
  async getPrices(
    stationNumber: number,
    systemId: number = 15,
    date?: string,
    networkId?: string
  ): Promise<TradingNetworkPricesResponse> {
    throw new Error('–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ newTradingNetworkAPI.getFuelPrices() —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');
    /*
    console.log(`üî• [TRADING API] tradingNetworkAPI.getPrices() –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}`);
    

    await this.ensureAuth();

    try {
      const dateParam = date || new Date().toISOString();
      throw new Error('–ü—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –∏ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã (newTradingNetworkAPI.getFuelPrices).');
      
      const url = `BASEURL_FROM_CONFIG/v1/pos/prices/${stationNumber}?system=${systemId}&date=${encodeURIComponent(dateParam)}`;

      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${this.token}`
        }
      });

      if (!response.ok) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        if (response.status === 401) {
          await this.login();
          const retryResponse = await fetch(url, {
            headers: {
              'Authorization': `Bearer ${this.token}`
            }
          });
          
          if (!retryResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: ${retryResponse.status} ${retryResponse.statusText}`);
          }
          const rawData = await retryResponse.json();
          return this.applyMappingToPrices(rawData, networkId);
        }
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: ${response.status} ${response.statusText}`);
      }

      const rawData = await response.json();
      return this.applyMappingToPrices(rawData, networkId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω —Å –ê–ó–°:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏');
    }
    */
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∏–∑ API —Ü–µ–Ω–∞–º
  private async applyMappingToPrices(
    apiResponse: any, 
    networkId?: string
  ): Promise<TradingNetworkPricesResponse> {
    console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫ —Ü–µ–Ω–∞–º –æ—Ç API...');
    
    if (!apiResponse.prices) {
      console.warn('‚ö†Ô∏è API –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ prices');
      return apiResponse;
    }

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –º–∞–ø–ø–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç
      const config = await tradingNetworkConfigService.getConfig();
      if (config.fuelMapping?.enabled) {
        await tradingNetworkMappingService.initializeCache(config);
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–ø–ø–∏–Ω–≥
      const mappedPrices: TradingNetworkPrice[] = apiResponse.prices.map((apiPrice: any) => {
        // –ò—â–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ API –∫–æ–¥—É
        const mapping = tradingNetworkMappingService.getMappingForApiCode(
          apiPrice.service_code, 
          networkId
        );

        if (mapping) {
          console.log(`üîÑ –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏–º–µ–Ω–µ–Ω: API –∫–æ–¥ ${apiPrice.service_code} (${apiPrice.service_name}) ‚Üí ${mapping.internalCode} (${mapping.internalName})`);
          return {
            service_code: apiPrice.service_code,
            service_name: mapping.internalName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            price: apiPrice.price,
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            internal_code: mapping.internalCode,
            api_name: apiPrice.service_name
          };
        } else {
          console.warn(`‚ö†Ô∏è –ú–∞–ø–ø–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è API –∫–æ–¥–∞ ${apiPrice.service_code}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
          return apiPrice;
        }
      });

      console.log(`‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ ${mappedPrices.length} —Ü–µ–Ω–∞–º`);
      return { prices: mappedPrices };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –∫ —Ü–µ–Ω–∞–º:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –º–∞–ø–ø–∏–Ω–≥–∞
      return apiResponse;
    }
  }

  // ‚ùå –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ newTradingNetworkAPI.setFuelPrices()
  async setPrices(
    stationNumber: number,
    prices: Record<string, number>,
    effectiveDate: string,
    systemId: number = 15
  ): Promise<void> {
    throw new Error('–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ newTradingNetworkAPI.setFuelPrices() —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');
    /*
    */

    await this.ensureAuth();

    try {
      const url = `${BASE_URL}/v1/prices?system=${systemId}&station=${stationNumber}`;
      const body: SetPricesRequest = {
        prices,
        effective_date: effectiveDate
      };

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });

      if (!response.ok) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        if (response.status === 401) {
          await this.login();
          const retryResponse = await fetch(url, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${this.token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
          });
          
          if (!retryResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω: ${retryResponse.status} ${retryResponse.statusText}`);
          }
          return;
        }
        throw new Error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω –Ω–∞ –ê–ó–°:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥
  async getServices(systemId: number = 15, stationNumber?: number): Promise<TradingNetworkService[]> {

    await this.ensureAuth();

    try {
      const url = `${BASE_URL}/v1/services?system=${systemId}`;

      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${this.token}`
        }
      });

      if (!response.ok) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        if (response.status === 401) {
          await this.login();
          const retryResponse = await fetch(url, {
            headers: {
              'Authorization': `Bearer ${this.token}`
            }
          });
          
          if (!retryResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥: ${retryResponse.status} ${retryResponse.statusText}`);
          }
          return await retryResponse.json();
        }
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥: ${response.status} ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ API –º–µ—Ç–æ–¥—ã (–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Swagger)
  async getAvailableAPIMethods(): Promise<TradingNetworkAPIMethod[]> {
    await this.ensureAuth();

    try {
      // –ü–æ–ª—É—á–∞–µ–º Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
      const url = `${BASE_URL}/docs/swagger.json`;

      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Accept': 'application/json'
        }
      });

      if (!response.ok) {
        // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        return this.getKnownAPIMethods();
      }

      const swaggerDoc = await response.json();
      return this.parseSwaggerMethods(swaggerDoc);
      
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', error);
      return this.getKnownAPIMethods();
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ê–ó–° (–ù–ê–ô–î–ï–ù –í –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò!)
  async getTransactions(
    systemId: number = 15,
    stationNumber?: number,
    startDate?: string,
    endDate?: string,
    shiftId?: string,
    posId?: string
  ): Promise<any[]> {
    console.log(`üî• [TRADING API] tradingNetworkAPI.getTransactions() –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ${systemId}, —Å—Ç–∞–Ω—Ü–∏—è: ${stationNumber || '–≤—Å–µ'}`);
    

    await this.ensureAuth();

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: GET /v1/transactions
      const params = new URLSearchParams();
      params.append('system', systemId.toString());
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä station –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω—Ü–∏—é 4 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const actualStationNumber = stationNumber || 4;
      params.append('station', actualStationNumber.toString());
      
      console.log(`üìç –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏: ${actualStationNumber}`);
      if (startDate) params.append('date_from', startDate);
      if (endDate) params.append('date_to', endDate);
      if (shiftId) params.append('shift', shiftId);
      if (posId) params.append('pos', posId);

      const url = `${BASE_URL}/v1/transactions?${params.toString()}`;
      console.log(`üîç –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${url}`);

      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Accept': 'application/json'
        }
      });

      if (!response.ok) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        if (response.status === 401) {
          await this.login();
          const retryResponse = await fetch(url, {
            headers: {
              'Authorization': `Bearer ${this.token}`,
              'Accept': 'application/json'
            }
          });
          
          if (!retryResponse.ok) {
            const errorText = await retryResponse.text();
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${retryResponse.status} ${retryResponse.statusText} - ${errorText}`);
          }
          
          const retryData = await retryResponse.json();
          console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã (–ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏):`, retryData?.length || 0);
          return retryData || [];
        }
        
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const data = await response.json();
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:`, data?.length || 0);
      
      // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
      if (data && data.length > 0) {
        console.log('üîç [API RAW] –ü–ï–†–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –û–¢ –¢–û–†–ì–û–í–û–ì–û API:', JSON.stringify(data[0], null, 2));
        console.log('üîç [API RAW] –ö–õ–Æ–ß–ò –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', Object.keys(data[0]));
      }
      
      return data || [];

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      throw error;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (POST /v1/transactions)
  async uploadTransactions(
    systemId: number = 15,
    transactionsData: any[]
  ): Promise<boolean> {
    console.log(`üî• [TRADING API] –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º—É ${systemId}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${transactionsData.length}`);
    

    await this.ensureAuth();

    try {
      const response = await fetch(`${BASE_URL}/v1/transactions?system=${systemId}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(transactionsData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${response.status} ${response.statusText} - ${errorText}`);
      }

      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      throw error;
    }
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏
  async openShift(systemId: number = 15, stationNumber: number): Promise<boolean> {
    console.log(`üî• [TRADING API] –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}`);
    

    await this.ensureAuth();

    try {
      const response = await fetch(`${BASE_URL}/v1/control/shift_open?system=${systemId}&station=${stationNumber}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã: ${response.status} ${response.statusText} - ${errorText}`);
      }

      console.log(`‚úÖ –°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}`);
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã:', error);
      throw error;
    }
  }

  async closeShift(systemId: number = 15, stationNumber: number): Promise<boolean> {
    console.log(`üî• [TRADING API] –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}`);
    

    await this.ensureAuth();

    try {
      const response = await fetch(`${BASE_URL}/v1/control/shift_close?system=${systemId}&station=${stationNumber}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã: ${response.status} ${response.statusText} - ${errorText}`);
      }

      console.log(`‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}`);
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö
  async getTanks(systemId: number = 15, stationNumber?: number): Promise<any[]> {
    console.log(`üî• [TRADING API] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ${systemId}, —Å—Ç–∞–Ω—Ü–∏—è: ${stationNumber || '–≤—Å–µ'}`);
    

    await this.ensureAuth();

    try {
      const params = new URLSearchParams();
      params.append('system', systemId.toString());
      if (stationNumber) params.append('station', stationNumber.toString());

      const url = `${BASE_URL}/v1/tanks?${params.toString()}`;
      console.log(`üîç –ó–∞–ø—Ä–æ—Å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤: ${url}`);

      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Accept': 'application/json'
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const data = await response.json();
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã:`, data?.length || 0);
      return data || [];

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (fallback)
  private getKnownAPIMethods(): TradingNetworkAPIMethod[] {
    return [
      {
        id: 'login',
        name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        method: 'POST',
        endpoint: '/v1/login',
        category: 'auth',
        description: '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º JWT —Ç–æ–∫–µ–Ω–∞',
        parameters: [
          { name: 'username', type: 'string', required: true, description: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
          { name: 'password', type: 'string', required: true, description: '–ü–∞—Ä–æ–ª—å' }
        ]
      },
      {
        id: 'get_prices',
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω',
        method: 'GET', 
        endpoint: '/v1/pos/prices/{station_number}',
        category: 'prices',
        description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏',
        parameters: [
          { name: 'station_number', type: 'number', required: true, description: '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏' },
          { name: 'system', type: 'number', required: true, description: 'ID —Å–∏—Å—Ç–µ–º—ã' },
          { name: 'date', type: 'string', required: false, description: '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601' }
        ]
      },
      {
        id: 'set_prices',
        name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω',
        method: 'POST',
        endpoint: '/v1/prices',
        category: 'prices',
        description: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ü–µ–Ω –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ',
        parameters: [
          { name: 'system', type: 'number', required: true, description: 'ID —Å–∏—Å—Ç–µ–º—ã' },
          { name: 'station', type: 'number', required: true, description: '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏' },
          { name: 'prices', type: 'object', required: true, description: '–û–±—ä–µ–∫—Ç —Å —Ü–µ–Ω–∞–º–∏' },
          { name: 'effective_date', type: 'string', required: true, description: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è' }
        ]
      },
      {
        id: 'get_services',
        name: '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥',
        method: 'GET',
        endpoint: '/v1/services',
        category: 'reference',
        description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥',
        parameters: [
          { name: 'system', type: 'number', required: true, description: 'ID —Å–∏—Å—Ç–µ–º—ã' }
        ]
      },
      {
        id: 'get_info',
        name: '–°—Ç–∞—Ç—É—Å—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–∫—Ä–∞—Ç–∫–∏–µ)',
        method: 'GET',
        endpoint: '/v1/info',
        category: 'monitoring',
        description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏',
        parameters: [
          { name: 'system', type: 'number', required: true, description: 'ID —Å–∏—Å—Ç–µ–º—ã' },
          { name: 'station', type: 'number', required: true, description: '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏' }
        ]
      },
      {
        id: 'get_info_v2',
        name: '–°—Ç–∞—Ç—É—Å—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
        method: 'GET',
        endpoint: '/v2/info',
        category: 'monitoring',
        description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏',
        parameters: [
          { name: 'system', type: 'number', required: true, description: 'ID —Å–∏—Å—Ç–µ–º—ã' },
          { name: 'station', type: 'number', required: true, description: '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏' }
        ]
      },
      {
        id: 'restart_terminal',
        name: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
        method: 'POST',
        endpoint: '/v1/control/restart',
        category: 'control',
        description: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ',
        parameters: [
          { name: 'system', type: 'number', required: true, description: 'ID —Å–∏—Å—Ç–µ–º—ã' },
          { name: 'station', type: 'number', required: true, description: '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏' }
        ]
      },
      {
        id: 'get_transactions',
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
        method: 'GET',
        endpoint: '/v1/transactions',
        category: 'transactions',
        description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫',
        parameters: [
          { name: 'system', type: 'number', required: true, description: 'ID —Å–∏—Å—Ç–µ–º—ã' },
          { name: 'station', type: 'number', required: false, description: '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)' },
          { name: 'date_from', type: 'string', required: false, description: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞' },
          { name: 'date_to', type: 'string', required: false, description: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è' },
          { name: 'shift', type: 'string', required: false, description: 'ID —Å–º–µ–Ω—ã' },
          { name: 'pos', type: 'string', required: false, description: 'ID POS —Ç–µ—Ä–º–∏–Ω–∞–ª–∞' }
        ]
      },
      {
        id: 'upload_transactions',
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
        method: 'POST',
        endpoint: '/v1/transactions',
        category: 'transactions',
        description: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º—É',
        parameters: [
          { name: 'system', type: 'number', required: true, description: 'ID —Å–∏—Å—Ç–µ–º—ã' },
          { name: 'body', type: 'array', required: true, description: '–ú–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏' }
        ]
      },
      {
        id: 'get_tanks',
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤',
        method: 'GET',
        endpoint: '/v1/tanks',
        category: 'monitoring',
        description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö',
        parameters: [
          { name: 'system', type: 'number', required: true, description: 'ID —Å–∏—Å—Ç–µ–º—ã' },
          { name: 'station', type: 'number', required: false, description: '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)' }
        ]
      },
      {
        id: 'open_shift',
        name: '–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É',
        method: 'POST',
        endpoint: '/v1/control/shift_open',
        category: 'control',
        description: '–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ',
        parameters: [
          { name: 'system', type: 'number', required: true, description: 'ID —Å–∏—Å—Ç–µ–º—ã' },
          { name: 'station', type: 'number', required: true, description: '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏' }
        ]
      },
      {
        id: 'close_shift',
        name: '–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É',
        method: 'POST',
        endpoint: '/v1/control/shift_close',
        category: 'control',
        description: '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ',
        parameters: [
          { name: 'system', type: 'number', required: true, description: 'ID —Å–∏—Å—Ç–µ–º—ã' },
          { name: 'station', type: 'number', required: true, description: '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏' }
        ]
      }
    ];
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–æ–¥–æ–≤ –∏–∑ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  private parseSwaggerMethods(swaggerDoc: any): TradingNetworkAPIMethod[] {
    const methods: TradingNetworkAPIMethod[] = [];
    
    if (!swaggerDoc.paths) {
      return this.getKnownAPIMethods();
    }

    for (const path in swaggerDoc.paths) {
      const pathData = swaggerDoc.paths[path];
      
      for (const httpMethod in pathData) {
        if (['get', 'post', 'put', 'delete', 'patch'].includes(httpMethod.toLowerCase())) {
          const methodData = pathData[httpMethod];
          
          const method: TradingNetworkAPIMethod = {
            id: `${httpMethod}_${path}`.replace(/[^a-zA-Z0-9]/g, '_'),
            name: methodData.summary || methodData.operationId || `${httpMethod.toUpperCase()} ${path}`,
            method: httpMethod.toUpperCase(),
            endpoint: path,
            category: this.categorizeEndpoint(path),
            description: methodData.description || methodData.summary || `–ú–µ—Ç–æ–¥ ${httpMethod.toUpperCase()} –¥–ª—è ${path}`,
            parameters: this.parseParameters(methodData.parameters || [])
          };
          
          methods.push(method);
        }
      }
    }

    return methods.length > 0 ? methods : this.getKnownAPIMethods();
  }

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è endpoint'–æ–≤
  private categorizeEndpoint(path: string): string {
    if (path.includes('login') || path.includes('auth')) return 'auth';
    if (path.includes('price')) return 'prices';
    if (path.includes('service')) return 'reference';
    if (path.includes('info')) return 'monitoring';
    if (path.includes('control') || path.includes('restart')) return 'control';
    if (path.includes('transaction') || path.includes('sale') || path.includes('payment') || path.includes('receipt') || path.includes('history')) return 'transactions';
    return 'other';
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ Swagger
  private parseParameters(parameters: any[]): TradingNetworkAPIMethodParameter[] {
    return parameters.map(param => ({
      name: param.name,
      type: param.type || param.schema?.type || 'string',
      required: param.required || false,
      description: param.description || `–ü–∞—Ä–∞–º–µ—Ç—Ä ${param.name}`
    }));
  }
}

// –¢–∏–ø—ã –¥–ª—è API –º–µ—Ç–æ–¥–æ–≤
export interface TradingNetworkAPIMethod {
  id: string;
  name: string;
  method: string; // GET, POST, etc.
  endpoint: string;
  category: string;
  description: string;
  parameters: TradingNetworkAPIMethodParameter[];
}

export interface TradingNetworkAPIMethodParameter {
  name: string;
  type: string;
  required: boolean;
  description: string;
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ (LEGACY - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export const tradingNetworkAPI = new TradingNetworkAPIService();

// === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û HTTP –ö–õ–ò–ï–ù–¢–ê ===

/**
 * üîÑ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç
 */

/**
 * üõ¢Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ (–ù–û–í–´–ô –ú–ï–¢–û–î)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
 */
export async function getTanksFromTradingNetwork(systemId: string, stationId: string) {
  console.log(`üõ¢Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏: system=${systemId}, station=${stationId}`);
  
  try {
    const response = await tanksApi.getTanksFromTradingNetwork(systemId, stationId);
    
    if (response.success && response.data) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∑–∞ ${response.responseTime}–º—Å`);
      return response.data;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', response.error);
      throw new Error(response.error || 'Failed to fetch tanks');
    }
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', error.message);
    throw error;
  }
}

/**
 * üí∞ –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ (–ù–û–í–´–ô –ú–ï–¢–û–î)
 */
export async function getFuelPricesFromTradingNetwork(systemId: string, stationId: string): Promise<Record<string, number>> {
  console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏: system=${systemId}, station=${stationId}`);
  
  try {
    const response = await pricesApi.getPricesFromTradingNetwork(systemId, stationId);
    
    if (response.success && response.data) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è ${Object.keys(response.data).length} –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞`);
      return response.data;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω:', response.error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã —Ç–æ–ø–ª–∏–≤–∞: ${response.error}`);
    }
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API —Ü–µ–Ω:', error.message);
    throw error;
  }
}

/**
 * üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ (–ù–û–í–´–ô –ú–ï–¢–û–î)
 */
export async function setFuelPricesInTradingNetwork(
  systemId: string, 
  stationId: string, 
  prices: Record<string, number>
): Promise<boolean> {
  console.log(`üìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏:`, prices);
  
  try {
    const response = await pricesApi.setPricesInTradingNetwork(systemId, stationId, prices);
    
    if (response.success) {
      console.log('‚úÖ –¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω:', response.error);
      return false;
    }
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω:', error.message);
    return false;
  }
}

/**
 * üßæ –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ (–ù–û–í–´–ô –ú–ï–¢–û–î)
 */
export async function getOperationsFromTradingNetwork(
  systemId: string, 
  stationId: string,
  params?: {
    startDate?: string;
    endDate?: string;
    limit?: number;
  }
) {
  console.log(`üßæ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏: system=${systemId}, station=${stationId}`, params);
  
  try {
    const response = await operationsApi.getOperationsFromTradingNetwork(systemId, stationId, params);
    
    if (response.success && response.data) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ ${response.responseTime}–º—Å`);
      return response.data;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:', response.error);
      throw new Error(response.error || 'Failed to fetch operations');
    }
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –æ–ø–µ—Ä–∞—Ü–∏–π:', error.message);
    throw error;
  }
}

/**
 * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ (–ù–û–í–´–ô –ú–ï–¢–û–î)
 */
export async function testTradingNetworkConnection() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏...');
  
  try {
    const response = await httpClient.testExternalApiConnection();
    
    if (response.success) {
      console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: ${response.responseTime}–º—Å`);
      return {
        success: true,
        responseTime: response.responseTime,
        data: response.data
      };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', response.error);
      return {
        success: false,
        error: response.error
      };
    }
  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * üìã –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ù–û–í–´–ô –ú–ï–¢–û–î)
 */
export async function getTradingNetworkConfig() {
  console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏...');
  
  try {
    const configInfo = await httpClient.getConfigurationInfo();
    return configInfo.externalApi;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
    return null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const newTradingNetworkAPI = {
  getTanks: getTanksFromTradingNetwork,
  getFuelPrices: getFuelPricesFromTradingNetwork,
  setFuelPrices: setFuelPricesInTradingNetwork,
  getOperations: getOperationsFromTradingNetwork,
  testConnection: testTradingNetworkConnection,
  getConfig: getTradingNetworkConfig,
};