/**
 * Operations Supabase Service - –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * –û–ë–ù–û–í–õ–ï–ù: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SupabaseConnectionHelper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * –ó–∞–º–µ–Ω—è–µ—Ç mock-–¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Supabase
 */

import { supabaseClientBrowser, getSupabaseClient } from './supabaseClientBrowser';
import { supabaseConfigManager } from './supabaseConfigManager';
import { apiConfigServiceDB } from './apiConfigServiceDB';
import { Operation, OperationType, OperationStatus, PaymentMethod } from './operationsTypes';
import { SupabaseConnectionHelper, executeSupabaseOperation } from './supabaseConnectionHelper';
import { httpClient } from './universalHttpClient';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
interface SupabaseOperation {
  id: string;
  operation_type: OperationType;
  status: OperationStatus;
  start_time: string;
  end_time?: string;
  duration?: number;
  trading_point_id?: string;
  trading_point_name?: string;
  device_id?: string;
  transaction_id?: string;
  fuel_type?: string;
  quantity?: number;
  price?: number;
  total_cost?: number;
  payment_method?: PaymentMethod;
  details: string;
  progress?: number;
  operator_name?: string;
  customer_id?: string;
  vehicle_number?: string;
  metadata?: any;
  created_at: string;
  updated_at: string;
}

export interface OperationFilters {
  operationType?: OperationType;
  status?: OperationStatus;
  tradingPointId?: string;
  startDate?: string;
  endDate?: string;
  paymentMethod?: PaymentMethod;
  fuelType?: string;
}

class OperationsSupabaseService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
   */
  async getOperations(filters?: OperationFilters): Promise<Operation[]> {
    console.log('üöÄ –û–ü–ï–†–ê–¶–ò–ò: –ù–∞—á–∏–Ω–∞–µ–º getOperations with filters:', filters);
    console.log('üîç OperationsSupabaseService.getOperations() called with filters:', filters);
    try {
      console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
      const connection = await apiConfigServiceDB.getCurrentConnection();
      
      if (!connection) {
        throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');
      }
      
      if (connection.type !== 'supabase') {
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${connection.type}. –û–∂–∏–¥–∞–µ—Ç—Å—è "supabase".`);
      }
      
      const supabaseUrl = connection.url;
      const serviceKey = connection.settings?.serviceRoleKey || connection.settings?.apiKey;
      
      if (!supabaseUrl || !serviceKey) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç URL –∏–ª–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');
      }
      
      console.log('üåê Supabase URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', supabaseUrl);
      console.log('üîë Service Key length:', serviceKey.length);
      console.log('üîë Service Key preview:', serviceKey.substring(0, 50) + '...');
      console.log('üîë Key type:', serviceKey.includes('service_role') ? 'service_role' : 'anon');
      
      let endpoint = `${supabaseUrl}/rest/v1/operations?select=*&order=start_time.desc&limit=10000`;
      
      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ URL
      const params = new URLSearchParams();
      if (filters?.operationType) {
        params.append('operation_type', `eq.${filters.operationType}`);
      }
      if (filters?.status) {
        params.append('status', `eq.${filters.status}`);
      }
      if (filters?.tradingPointId) {
        params.append('trading_point_id', `eq.${filters.tradingPointId}`);
        console.log('üéØ –ö–†–ò–¢–ò–ß–ù–û: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ –≤ Supabase:', filters.tradingPointId);
      }
      if (filters?.fuelType) {
        params.append('fuel_type', `eq.${filters.fuelType}`);
      }
      if (filters?.paymentMethod) {
        params.append('payment_method', `eq.${filters.paymentMethod}`);
      }
      if (filters?.startDate) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–Ω—è (00:00:00) –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const startDateTime = filters.startDate.includes('T') 
          ? filters.startDate 
          : `${filters.startDate}T00:00:00`;
        params.append('start_time', `gte.${startDateTime}`);
        console.log('üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ:', startDateTime);
      }
      if (filters?.endDate) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–Ω—è (23:59:59) –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const endDateTime = filters.endDate.includes('T') 
          ? filters.endDate 
          : `${filters.endDate}T23:59:59`;
        params.append('start_time', `lte.${endDateTime}`);
        console.log('üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–µ:', endDateTime);
      }
      
      if (params.toString()) {
        endpoint += '&' + params.toString();
      }
      
      console.log('üîç –ö–†–ò–¢–ò–ß–ù–û: –§–∏–Ω–∞–ª—å–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞ –∫ Supabase:', endpoint);
      
      // –ü–∞—Ä—Å–∏–º URL —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å endpoint –∏ query parameters
      const url = new URL(endpoint);
      const supabaseEndpoint = url.pathname + url.search;
      
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç...');
      console.log('üîë DEBUG: About to make Supabase request via universalHttpClient');
      const response = await httpClient.get(supabaseEndpoint, {
        destination: 'supabase',
        useAuth: true
      });
      
      console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', {
        success: response.success,
        status: response.status,
        responseTime: response.responseTime
      });
      
      if (!response.success) {
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', {
          status: response.status,
          error: response.error
        });
        throw new Error(`HTTP ${response.status}: ${response.error}`);
      }
      
      const data = response.data;
      console.log('‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ Supabase:', data?.length || 0);
      
      if (filters?.tradingPointId) {
        console.log('üéØ –ö–†–ò–¢–ò–ß–ù–û: –û–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ —Ç–æ—á–∫–µ:', filters.tradingPointId);
        console.log('üéØ –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–≤—ã–µ 3 –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞:', data?.slice(0, 3)?.map(op => ({
          id: op.id,
          trading_point_id: op.trading_point_id,
          total_cost: op.total_cost,
          quantity: op.quantity
        })));
      }
      
      // –í–†–ï–ú–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      if (data && data.length > 0) {
        console.log('üîç –ü–ï–†–í–´–ï 3 –û–ü–ï–†–ê–¶–ò–ò –ò–ó –ë–ê–ó–´ (RAW):', data.slice(0, 3).map(op => ({
          id: op.id,
          trading_point_id: op.trading_point_id,
          start_time: op.start_time,
          fuel_type: op.fuel_type,
          total_cost: op.total_cost
        })));
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç Operation
      return (data || []).map(this.transformSupabaseToOperation);
    } catch (error) {
      console.error('‚ùå OperationsSupabaseService.getOperations error:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
      if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
        console.error('üåê –û–®–ò–ë–ö–ê –°–ï–¢–ò: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase –ø—Ä–æ–µ–∫—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
      }
      
      if (error.message.includes('HTTP 401')) {
        console.error('üîë –û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò: –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ Supabase');
        throw new Error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      }
      
      if (error.message.includes('HTTP 404')) {
        console.error('üóÇÔ∏è –û–®–ò–ë–ö–ê –°–¢–†–£–ö–¢–£–†–´: –¢–∞–±–ª–∏—Ü–∞ operations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Supabase');
        throw new Error('–¢–∞–±–ª–∏—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
      }
      
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ ID
   */
  async getOperationById(id: string): Promise<Operation | null> {
    try {
      const { data, error } = await supabaseClientBrowser
        .from('operations')
        .select('*')
        .eq('id', id)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          return null; // –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        }
        throw error;
      }

      return this.transformSupabaseToOperation(data);
    } catch (error) {
      console.error(`‚ùå OperationsSupabaseService.getOperationById(${id}) error:`, error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
   */
  async createOperation(operationData: Partial<Operation>): Promise<Operation> {
    try {
      console.log('üìù [SUPABASE] Creating operation with data:', operationData);
      const supabaseData = this.transformOperationToSupabase(operationData);
      console.log('üîÑ [SUPABASE] Transformed to Supabase format:', supabaseData);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π Supabase –∫–ª–∏–µ–Ω—Ç
      const client = await getSupabaseClient();
      console.log('‚úÖ [SUPABASE] Got real client, inserting operation...');
      
      const { data, error } = await client
        .from('operations')
        .insert(supabaseData)
        .select('*')
        .single();

      if (error) {
        console.error('‚ùå [SUPABASE] Insert error:', error);
        throw new Error(`Supabase insert failed: ${error.message}`);
      }

      if (!data) {
        throw new Error('No data returned from Supabase insert');
      }

      console.log('‚úÖ [SUPABASE] Operation created successfully:', data);

      return this.transformSupabaseToOperation(data);
    } catch (error) {
      console.error('‚ùå OperationsSupabaseService.createOperation error:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
   */
  async updateOperation(id: string, updates: Partial<Operation>): Promise<Operation> {
    try {
      const supabaseUpdates = this.transformOperationToSupabase(updates);
      
      const { data, error } = await supabaseClientBrowser
        .from('operations')
        .update({
          ...supabaseUpdates,
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;

      return this.transformSupabaseToOperation(data);
    } catch (error) {
      console.error(`‚ùå OperationsSupabaseService.updateOperation(${id}) error:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async getStatusStatistics(): Promise<Record<string, number>> {
    try {
      const { data, error } = await supabaseClientBrowser
        .from('operations')
        .select('status');

      if (error) throw error;

      const stats: Record<string, number> = {};
      (data || []).forEach(operation => {
        stats[operation.status] = (stats[operation.status] || 0) + 1;
      });

      return stats;
    } catch (error) {
      console.error('‚ùå OperationsSupabaseService.getStatusStatistics error:', error);
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
   */
  subscribeToOperations(
    callback: (operations: Operation[]) => void,
    filters?: OperationFilters
  ): () => void {
    const channel = supabaseClientBrowser
      .channel('operations_realtime')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'operations' },
        async () => {
          // –ü—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
          try {
            const operations = await this.getOperations(filters);
            callback(operations);
          } catch (error) {
            console.error('‚ùå Real-time operations update error:', error);
          }
        }
      )
      .subscribe();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      supabaseClientBrowser.removeChannel(channel);
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  private async getOperationsViaConfig(filters?: OperationFilters): Promise<Operation[]> {
    try {
      // –°—Ç—Ä–æ–∏–º URL —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
      let endpoint = '/rest/v1/operations?select=*&order=start_time.desc&limit=10000';
      
      if (filters) {
        const queryParams = new URLSearchParams();
        
        if (filters.operationType) {
          queryParams.append('operation_type', `eq.${filters.operationType}`);
        }
        if (filters.status) {
          queryParams.append('status', `eq.${filters.status}`);
        }
        if (filters.tradingPointId) {
          queryParams.append('trading_point_id', `eq.${filters.tradingPointId}`);
        }
        if (filters.fuelType) {
          queryParams.append('fuel_type', `eq.${filters.fuelType}`);
        }
        if (filters.paymentMethod) {
          queryParams.append('payment_method', `eq.${filters.paymentMethod}`);
        }
        if (filters.startDate) {
          queryParams.append('start_time', `gte.${filters.startDate}`);
        }
        if (filters.endDate) {
          queryParams.append('start_time', `lte.${filters.endDate}`);
        }
        
        if (queryParams.toString()) {
          endpoint += '&' + queryParams.toString();
        }
      }
      
      const data = await supabaseConfigManager.fetchFromSupabase(endpoint);
      console.log('‚úÖ Loaded operations via config:', data?.length || 0);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç Operation
      return (data || []).map(this.transformSupabaseToOperation);
      
    } catch (error) {
      console.error('‚ùå Error in getOperationsViaConfig:', error);
      throw error;
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

  private transformSupabaseToOperation(data: any): Operation {
    return {
      id: data.id,
      operationType: data.operation_type,
      status: data.status,
      startTime: data.start_time,
      endTime: data.end_time,
      duration: data.duration,
      tradingPointId: data.trading_point_id,
      tradingPointName: data.trading_point_name,
      deviceId: data.device_id,
      transactionId: data.transaction_id,
      fuelType: data.fuel_type,
      quantity: data.quantity,
      price: data.price,
      totalCost: data.total_cost,
      paymentMethod: data.payment_method,
      details: data.details,
      progress: data.progress,
      lastUpdated: data.updated_at,
      operatorName: data.operator_name,
      customerId: data.customer_id,
      vehicleNumber: data.vehicle_number,
      metadata: data.metadata,
      createdAt: new Date(data.created_at),
      updatedAt: new Date(data.updated_at)
    };
  }

  private transformOperationToSupabase(operation: Partial<Operation>): Partial<SupabaseOperation> {
    const result: Partial<SupabaseOperation> = {};

    if (operation.id) result.id = operation.id;
    if (operation.operationType) result.operation_type = operation.operationType;
    if (operation.status) result.status = operation.status;
    if (operation.startTime) result.start_time = operation.startTime;
    if (operation.endTime) result.end_time = operation.endTime;
    if (operation.duration !== undefined) result.duration = operation.duration;
    if (operation.tradingPointId) result.trading_point_id = operation.tradingPointId;
    if (operation.tradingPointName) result.trading_point_name = operation.tradingPointName;
    if (operation.deviceId) result.device_id = operation.deviceId;
    if (operation.transactionId) result.transaction_id = operation.transactionId;
    if (operation.fuelType) result.fuel_type = operation.fuelType;
    if (operation.quantity !== undefined) result.quantity = operation.quantity;
    if (operation.price !== undefined) result.price = operation.price;
    if (operation.totalCost !== undefined) result.total_cost = operation.totalCost;
    if (operation.paymentMethod) result.payment_method = operation.paymentMethod;
    if (operation.details) result.details = operation.details;
    if (operation.progress !== undefined) result.progress = operation.progress;
    if (operation.operatorName) result.operator_name = operation.operatorName;
    if (operation.customerId) result.customer_id = operation.customerId;
    if (operation.vehicleNumber) result.vehicle_number = operation.vehicleNumber;
    if (operation.metadata) result.metadata = operation.metadata;

    return result;
  }

  /**
   * –°–£–ü–ï–†-–ü–†–û–°–¢–û–ô –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (–±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏)
   */
  async clearTradingPointOperations(tradingPointId: string): Promise<{success: boolean, deletedCount: number, error?: string}> {
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è: ${tradingPointId}`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL —á–µ—Ä–µ–∑ Supabase RPC
      const { data, error } = await supabaseClientBrowser
        .rpc('delete_operations_by_trading_point', {
          trading_point_id: tradingPointId
        });

      if (error) {
        console.error('‚ùå RPC –æ—à–∏–±–∫–∞:', error);
        // –ï—Å–ª–∏ RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π delete
        const { error: deleteError } = await supabaseClientBrowser
          .from('operations')
          .delete()
          .match({ trading_point_id: tradingPointId });
          
        if (deleteError) {
          throw deleteError;
        }
      }

      console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
      return { success: true, deletedCount: 0 };
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error.message);
      return { success: false, deletedCount: 0, error: error.message };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –∞–≤–≥—É—Å—Ç 2025
   */
  async clearAugustDemoData(): Promise<{success: boolean, deletedCount: number, error?: string}> {
    try {
      console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –∑–∞ –∞–≤–≥—É—Å—Ç 2025...');

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
      const { data: operationsToDelete, error: checkError } = await supabaseClientBrowser
        .from('operations')
        .select('id, start_time, trading_point_id')
        .lt('start_time', '2025-09-02T00:00:00Z');

      if (checkError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π:', checkError);
        return { success: false, deletedCount: 0, error: checkError.message };
      }

      const countToDelete = operationsToDelete?.length || 0;
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${countToDelete}`);

      if (countToDelete === 0) {
        console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –∞–≤–≥—É—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–∞–∑–∞ —É–∂–µ —á–∏—Å—Ç–∞—è');
        return { success: true, deletedCount: 0 };
      }

      // –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ 2 —Å–µ–Ω—Ç—è–±—Ä—è 2025
      const { data: deletedOps, error: deleteError } = await supabaseClientBrowser
        .from('operations')
        .delete()
        .lt('start_time', '2025-09-02T00:00:00Z')
        .select('id');

      if (deleteError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:', deleteError);
        return { success: false, deletedCount: 0, error: deleteError.message };
      }

      const deletedCount = deletedOps?.length || 0;
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${deletedCount}`);

      return { success: true, deletedCount };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π:', errorMessage);
      return { success: false, deletedCount: 0, error: errorMessage };
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ê–ó–° ‚Ññ004 (—Å—Ç–∞–Ω—Ü–∏—è 4)
   */
  async clearStation4Operations(): Promise<{ success: boolean; deletedCount: number; message: string }> {
    try {
      // ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –ê–ó–° ‚Ññ004
      const station4TradingPointId = '6969b08d-1cbe-45c2-ae9c-8002c7022b59';
      
      console.log('üóëÔ∏è [CLEAR] –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ê–ó–° ‚Ññ004...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞
      const { data: operationsToDelete, error: countError } = await supabaseClientBrowser
        .from('operations')
        .select('id')
        .eq('trading_point_id', station4TradingPointId);
      
      const beforeCount = operationsToDelete ? operationsToDelete.length : 0;

      if (countError) {
        throw countError;
      }

      console.log(`üìä [CLEAR] –ù–∞–π–¥–µ–Ω–æ ${beforeCount} –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ 4
      const { error } = await supabaseClientBrowser
        .from('operations')
        .delete()
        .eq('trading_point_id', station4TradingPointId);

      if (error) {
        throw error;
      }

      const deletedCount = beforeCount || 0;
      console.log(`‚úÖ [CLEAR] –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${deletedCount} –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ê–ó–° ‚Ññ004`);
      
      return {
        success: true,
        deletedCount,
        message: `–£–¥–∞–ª–µ–Ω–æ ${deletedCount} –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ê–ó–° ‚Ññ004`
      };
    } catch (error) {
      console.error('‚ùå [CLEAR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ê–ó–° ‚Ññ004:', error);
      return {
        success: false,
        deletedCount: 0,
        message: `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const operationsSupabaseService = new OperationsSupabaseService();

// –ê–í–¢–û–í–´–ü–û–õ–ù–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –û–ü–ï–†–ê–¶–ò–ô –û–¢–ö–õ–Æ–ß–ï–ù–û

// –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API
export const operationsService = {
  async getAll() {
    return await operationsSupabaseService.getOperations();
  },

  async getStatusStatistics() {
    return await operationsSupabaseService.getStatusStatistics();
  },

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
   */
  async clearTradingPointOperations(tradingPointId: string) {
    return await operationsSupabaseService.clearTradingPointOperations(tradingPointId);
  },

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ 4 (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ clearTradingPointOperations('6969b08d-1cbe-45c2-ae9c-8002c7022b59')
   */
  async clearStation4Operations() {
    return await operationsSupabaseService.clearTradingPointOperations('6969b08d-1cbe-45c2-ae9c-8002c7022b59');
  },

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –∞–≤–≥—É—Å—Ç 2025
   */
  async clearAugustDemoData() {
    return await operationsSupabaseService.clearAugustDemoData();
  }
};