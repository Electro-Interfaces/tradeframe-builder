import { 
  Component, 
  ComponentTemplate,
  CreateComponentRequest, 
  UpdateComponentRequest,
  ComponentFilters,
  ListComponentsParams,
  ListComponentsResponse,
  ComponentStatusAction,
  ComponentEvent
} from '@/types/component';
import { componentTemplatesStore } from '@/mock/componentTemplatesStore';
import { PersistentStorage } from '@/utils/persistentStorage';

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
import { getApiBaseUrl, isApiMockMode } from '@/services/apiConfigService';
const API_BASE_URL = getApiBaseUrl();

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ç—Ä–µ–π—Å–∏–Ω–≥–æ–º
class ApiClient {
  private async request<T>(
    endpoint: string, 
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${API_BASE_URL}${endpoint}`;
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/problem+json',
      'X-Trace-Id': this.generateTraceId(),
      ...options.headers,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º Idempotency-Key –¥–ª—è –º—É—Ç–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    if (['POST', 'PUT', 'PATCH'].includes(options.method || 'GET')) {
      headers['Idempotency-Key'] = this.generateIdempotencyKey();
    }

    const response = await fetch(url, {
      ...options,
      headers,
    });

    if (!response.ok) {
      throw new ApiError(response.status, await response.text());
    }

    return response.json();
  }

  private generateTraceId(): string {
    return Math.random().toString(36).substring(2, 15) + 
           Math.random().toString(36).substring(2, 15);
  }

  private generateIdempotencyKey(): string {
    return `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;
  }

  async get<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'GET' });
  }

  async post<T>(endpoint: string, data: any): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async patch<T>(endpoint: string, data: any): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'PATCH',
      body: JSON.stringify(data),
    });
  }

  async delete<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'DELETE' });
  }
}

class ApiError extends Error {
  constructor(public status: number, public body: string) {
    super(`API Error ${status}: ${body}`);
    this.name = 'ApiError';
  }
}

const apiClient = new ApiClient();

// Mock –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
const initialComponents: Component[] = [
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ê–ó–° ‚Ññ001 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è
  {
    id: "comp_001",
    trading_point_id: "point1",
    equipment_id: "eq_1",
    name: "–î–∞—Ç—á–∏–∫ —É—Ä–æ–≤–Ω—è —Ç–æ–ø–ª–∏–≤–∞",
    display_name: "–î–∞—Ç—á–∏–∫ —É—Ä–æ–≤–Ω—è —Ç–æ–ø–ª–∏–≤–∞ –ü–ú–ü-201",
    system_type: "sensor",
    category: "level",
    serial_number: "DUT2024001",
    params: {
      accuracy: 2.0,
      range_min: 0,
      range_max: 50000,
      calibration_factor: 1.0,
      current_level: 32500
    },
    status: 'online',
    created_at: new Date('2024-01-15').toISOString(),
    updated_at: new Date('2024-08-30').toISOString(),
    created_from_template: "comp_sensor_level_1"
  },
  {
    id: "comp_002",
    trading_point_id: "point1",
    equipment_id: "eq_1",
    name: "–î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
    display_name: "–î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞",
    system_type: "sensor",
    category: "temperature",
    serial_number: "TEMP2024001",
    params: {
      accuracy: 0.5,
      range_min: -40,
      range_max: 80,
      alarm_threshold: 45,
      current_temp: 18.5
    },
    status: 'online',
    created_at: new Date('2024-01-15').toISOString(),
    updated_at: new Date('2024-08-30').toISOString(),
    created_from_template: "comp_sensor_temp_1"
  },
  {
    id: "comp_003",
    trading_point_id: "point1",
    equipment_id: "eq_1",
    name: "–î–∞—Ç—á–∏–∫ –≤–æ–¥—ã",
    display_name: "–î–∞—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–Ω–æ–π –≤–æ–¥—ã",
    system_type: "sensor",
    category: "water",
    serial_number: "WATER2024001",
    params: {
      threshold_mm: 15,
      current_level_mm: 0,
      alarm_enabled: true
    },
    status: 'online',
    created_at: new Date('2024-01-15').toISOString(),
    updated_at: new Date('2024-08-30').toISOString(),
    created_from_template: "comp_sensor_water_1"
  },

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
  {
    id: "comp_004",
    trading_point_id: "point1",
    equipment_id: "eq_1", // –ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—É ‚Ññ1 –¥–æ–±–∞–≤–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –æ—à–∏–±–∫–æ–π
    name: "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    display_name: "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–º",
    system_type: "controller",
    category: "control",
    serial_number: "CTRL2024001",
    params: {
      version: "2.1.4",
      connection_type: "ethernet",
      ip_address: "192.168.1.15"
    },
    status: 'error', // –û—à–∏–±–∫–∞
    created_at: new Date('2024-01-15').toISOString(),
    updated_at: new Date('2024-08-30').toISOString(),
    created_from_template: "comp_controller_1"
  },

  {
    id: "comp_005",
    trading_point_id: "point1",
    equipment_id: "eq_2", // –ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—É ‚Ññ2 –¥–æ–±–∞–≤–∏–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    name: "–î–∞—Ç—á–∏–∫ –¥–∞–≤–ª–µ–Ω–∏—è",
    display_name: "–î–∞—Ç—á–∏–∫ –¥–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–µ",
    system_type: "sensor",
    category: "pressure",
    serial_number: "PRESS2024001",
    params: {
      accuracy: 1.0,
      range_min: 0,
      range_max: 10,
      current_pressure: 2.1
    },
    status: 'offline', // –û—Ñ–ª–∞–π–Ω (–∂–µ–ª—Ç—ã–π)
    created_at: new Date('2024-02-20').toISOString(),
    updated_at: new Date('2024-08-30').toISOString(),
    created_from_template: "comp_sensor_pressure_1"
  },

  {
    id: "comp_006",
    trading_point_id: "point1",
    equipment_id: "eq_3", // –ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—É ‚Ññ3 –¥–æ–±–∞–≤–∏–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    name: "–°–∏—Å—Ç–µ–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏",
    display_name: "–°–∏—Å—Ç–µ–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞",
    system_type: "ventilation",
    category: "safety",
    serial_number: "VENT2024001",
    params: {
      fan_speed: 75,
      automatic: true,
      temp_threshold: 40
    },
    status: 'online', // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π
    created_at: new Date('2024-01-20').toISOString(),
    updated_at: new Date('2024-08-30').toISOString(),
    created_from_template: "comp_ventilation_1"
  }
];

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let mockComponents: Component[] = PersistentStorage.load<Component>('components_v2', initialComponents);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
const checkAndUpdateData = () => {
  if (!mockComponents.length || mockComponents.length < initialComponents.length) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...');
    mockComponents = [...initialComponents];
    saveComponents();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
const saveComponents = () => {
  PersistentStorage.save('components_v2', mockComponents);
};

// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
checkAndUpdateData();

// Mock API –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
export const mockComponentsAPI = {
  async list(params: ListComponentsParams = {}): Promise<ListComponentsResponse> {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    let filteredComponents = [...mockComponents];
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if (params.equipment_id) {
      filteredComponents = filteredComponents.filter(comp => comp.equipment_id === params.equipment_id);
    }
    
    if (params.status) {
      filteredComponents = filteredComponents.filter(comp => comp.status === params.status);
    }
    
    if (params.system_type) {
      filteredComponents = filteredComponents.filter(comp => comp.system_type === params.system_type);
    }
    
    if (params.category) {
      filteredComponents = filteredComponents.filter(comp => comp.category === params.category);
    }
    
    if (params.name) {
      filteredComponents = filteredComponents.filter(comp => comp.name === params.name);
    }
    
    if (params.search) {
      const searchLower = params.search.toLowerCase();
      filteredComponents = filteredComponents.filter(comp =>
        comp.display_name.toLowerCase().includes(searchLower) ||
        comp.serial_number?.toLowerCase().includes(searchLower)
      );
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if (params.sort_by) {
      const sortBy = params.sort_by;
      const sortOrder = params.sort_order || 'asc';
      
      filteredComponents.sort((a, b) => {
        let valueA, valueB;
        
        switch (sortBy) {
          case 'display_name':
            valueA = a.display_name;
            valueB = b.display_name;
            break;
          case 'status':
            valueA = a.status;
            valueB = b.status;
            break;
          case 'created_at':
            valueA = a.created_at;
            valueB = b.created_at;
            break;
          case 'updated_at':
            valueA = a.updated_at;
            valueB = b.updated_at;
            break;
          default:
            return 0;
        }
        
        if (valueA < valueB) return sortOrder === 'asc' ? -1 : 1;
        if (valueA > valueB) return sortOrder === 'asc' ? 1 : -1;
        return 0;
      });
    }
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const page = params.page || 1;
    const limit = params.limit || 20;
    const total = filteredComponents.length;
    const total_pages = Math.ceil(total / limit);
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    
    const pageComponents = filteredComponents.slice(startIndex, endIndex);
    
    return {
      data: pageComponents,
      total,
      page,
      limit,
      total_pages
    };
  },

  async get(id: string): Promise<Component> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const component = mockComponents.find(comp => comp.id === id);
    if (!component) {
      throw new ApiError(404, 'Component not found');
    }
    
    return component;
  },

  async create(data: CreateComponentRequest): Promise<Component> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const template = componentTemplatesStore.getById(data.template_id);
    if (!template) {
      throw new ApiError(404, 'Component template not found');
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const newComponent: Component = {
      id: `comp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      trading_point_id: data.trading_point_id,
      equipment_id: data.equipment_id,
      
      // –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
      name: template.name,
      display_name: data.display_name,
      system_type: template.system_type,
      category: template.category,
      
      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
      serial_number: data.serial_number,
      status: 'online',
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏
      params: {
        ...template.defaults,
        ...(data.custom_params || {})
      },
      
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      created_from_template: template.id // –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ localStorage
    mockComponents.push(newComponent);
    saveComponents();
    
    return newComponent;
  },

  async update(id: string, data: UpdateComponentRequest): Promise<Component> {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const componentIndex = mockComponents.findIndex(comp => comp.id === id);
    if (componentIndex === -1) {
      throw new ApiError(404, 'Component not found');
    }
    
    const updatedComponent = {
      ...mockComponents[componentIndex],
      ...data,
      updated_at: new Date().toISOString()
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    mockComponents[componentIndex] = updatedComponent;
    saveComponents();
    
    return updatedComponent;
  },

  async updateStatus(id: string, action: ComponentStatusAction): Promise<Component> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const componentIndex = mockComponents.findIndex(comp => comp.id === id);
    if (componentIndex === -1) {
      throw new ApiError(404, 'Component not found');
    }
    
    // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    let newStatus;
    switch (action) {
      case 'enable':
        newStatus = 'online';
        break;
      case 'disable':
        newStatus = 'disabled';
        break;
      case 'archive':
        newStatus = 'archived';
        break;
      default:
        throw new ApiError(400, 'Invalid status action');
    }
    
    const updatedComponent = {
      ...mockComponents[componentIndex],
      status: newStatus,
      updated_at: new Date().toISOString()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage
    mockComponents[componentIndex] = updatedComponent;
    saveComponents();
    
    return updatedComponent;
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç API –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export const currentComponentsAPI = mockComponentsAPI;