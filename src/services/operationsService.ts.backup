/**
 * Operations Service - –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API
 * –ó–∞–º–µ–Ω–∞ –¥–ª—è operationsService.ts —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–∫ mock, —Ç–∞–∫ –∏ API –¥–∞–Ω–Ω—ã—Ö
 */

import { apiConfigService } from './apiConfigService';
import { OperationsBusinessLogic } from './operationsBusinessLogic';
import { Operation, OperationType, OperationStatus, PaymentMethod, OperationInput } from './operationsTypes';
import { operationsSupabaseService } from './operationsSupabaseService';
import { httpClient } from './httpClients';

// –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
export interface OperationFilters {
  operationType?: OperationType;
  status?: OperationStatus;
  tradingPointId?: string;
  startDate?: string;
  endDate?: string;
  paymentMethod?: PaymentMethod;
  customerId?: string;
  operatorName?: string;
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
export interface PaginationParams {
  page?: number;
  limit?: number;
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
export interface PaginatedOperations {
  data: Operation[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    pages: number;
  };
  summary?: {
    totalOperations: number;
    completedOperations: number;
    totalAmount: number;
    averageOperationValue: number;
  };
}

class OperationsServiceUpdated {
  private apiUrl = apiConfigService.getCurrentApiUrl();
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  async getOperations(
    filters: OperationFilters = {}, 
    pagination: PaginationParams = {}
  ): Promise<PaginatedOperations> {
    try {
      // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –º–æ–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
      const isMockMode = apiConfigService.isMockMode();
      const currentConnection = apiConfigService.getCurrentConnection();
      const currentApiUrl = apiConfigService.getCurrentApiUrl();
      
      console.log('üîç OperationsService.getOperations debug:', {
        isMockMode,
        currentApiUrl,
        hasConnection: !!currentConnection,
        connectionId: currentConnection?.id,
        connectionType: currentConnection?.type,
        filters,
        pagination
      });
      
      if (isMockMode) {
        console.log('üì¶ Using mock operations data');
        return this.getMockOperations(filters, pagination);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞
      if (currentConnection?.type === 'supabase') {
        console.log('üóÑÔ∏è Using direct Supabase connection');
        return this.getSupabaseOperations(filters, pagination);
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API
      console.log('üåê Using API operations data');
      const queryParams = this.buildQueryParams(filters, pagination);
      console.log('üìä API request:', `/operations?${queryParams}`);
      const response = await httpClient.get(`/operations?${queryParams}`);
      
      console.log('‚úÖ API response received:', { dataCount: response?.data?.length });
      return this.transformOperationsResponse(response);
      
    } catch (error) {
      console.error('Operations API error:', error);
      
      // Fallback –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
      console.warn('Falling back to mock operations due to API error');
      return this.getMockOperations(filters, pagination);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
   */
  async getAll(): Promise<Operation[]> {
    try {
      console.log('üîÑ OperationsService.getAll() called');
      const result = await this.getOperations({}, { limit: 10000 });
      console.log('‚úÖ getAll() —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª', result.data.length, '–æ–ø–µ—Ä–∞—Ü–∏–π');
      return result.data;
    } catch (error) {
      console.error('‚ùå OperationsService.getAll() error:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  async forceReload(): Promise<void> {
    console.log('üîÑ OperationsService.forceReload() called');
    // –û—á–∏—â–∞–µ–º –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
    localStorage.removeItem('tradeframe_operations');
    localStorage.removeItem('operations');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ ID
   */
  async getOperationById(id: string): Promise<Operation | null> {
    try {
      if (apiConfigService.isMockMode()) {
        return this.getMockOperationById(id);
      }
      
      const response = await httpClient.get(`/operations/${id}`);
      return this.transformOperationFromApi(response);
      
    } catch (error: any) {
      if (error.status === 404) {
        return null;
      }
      
      console.error(`Operation ${id} API error:`, error);
      return this.getMockOperationById(id);
    }
  }
  
  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
   */
  async createOperation(operationInput: OperationInput): Promise<Operation> {
    try {
      if (apiConfigService.isMockMode()) {
        return this.createMockOperation(operationInput);
      }
      
      const response = await httpClient.post('/operations', operationInput);
      
      return this.transformOperationFromApi(response);
      
    } catch (error) {
      console.error('Create operation API error:', error);
      throw new Error(`Failed to create operation: ${error}`);
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async updateOperationStatus(
    id: string, 
    status: OperationStatus,
    progress?: number,
    details?: string
  ): Promise<Operation> {
    try {
      if (apiConfigService.isMockMode()) {
        return this.updateMockOperationStatus(id, status, progress, details);
      }
      
      const updateData: any = { status };
      if (progress !== undefined) updateData.progress = progress;
      if (details) updateData.details = details;
      if (status === 'completed') updateData.endTime = new Date().toISOString();
      
      const response = await httpClient.patch(`/operations/${id}/status`, updateData);
      
      return this.transformOperationFromApi(response);
      
    } catch (error) {
      console.error(`Update operation ${id} status API error:`, error);
      throw new Error(`Failed to update operation status: ${error}`);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async getOperationsStats(period: 'today' | 'week' | 'month' | 'year' = 'today'): Promise<{
    totalOperations: number;
    completedOperations: number;
    inProgressOperations: number;
    failedOperations: number;
    totalRevenue: number;
    averageOperationValue: number;
    operationsByType: Record<string, number>;
    operationsByHour: Record<string, number>;
  }> {
    try {
      if (apiConfigService.isMockMode()) {
        return this.getMockOperationsStats();
      }
      
      const response = await httpClient.get(`/operations/stats?period=${period}`);
      return response;
      
    } catch (error) {
      console.error('Operations stats API error:', error);
      return this.getMockOperationsStats();
    }
  }
  
  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async exportOperations(
    filters: OperationFilters = {}, 
    format: 'csv' | 'xlsx' | 'json' = 'csv'
  ): Promise<Blob | string> {
    try {
      if (apiConfigService.isMockMode()) {
        return this.exportMockOperations(filters, format);
      }
      
      const queryParams = this.buildQueryParams(filters, { format });
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º httpClient –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Blob)
      const response = await httpClient.get(`/operations/export?${queryParams}`);
      
      if (format === 'json') {
        return JSON.stringify(response);
      } else {
        // –î–ª—è CSV/Excel —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞)
        return JSON.stringify(response);
      }
      
    } catch (error) {
      console.error('Export operations API error:', error);
      return this.exportMockOperations(filters, format);
    }
  }
  
  /**
   * –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async cancelOperation(id: string, reason: string): Promise<Operation> {
    try {
      const operation = await this.getOperationById(id);
      if (!operation) {
        throw new Error('Operation not found');
      }
      
      if (!OperationsBusinessLogic.canCancelOperation(operation)) {
        throw new Error('Operation cannot be cancelled');
      }
      
      return this.updateOperationStatus(id, 'cancelled', 0, `Cancelled: ${reason}`);
      
    } catch (error) {
      console.error(`Cancel operation ${id} error:`, error);
      throw error;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (polling)
   */
  async startRealTimeOperations(
    filters: OperationFilters,
    callback: (operations: Operation[]) => void,
    intervalMs: number = 5000
  ): Promise<() => void> {
    let isRunning = true;
    
    const poll = async () => {
      if (!isRunning) return;
      
      try {
        const result = await this.getOperations(filters, { page: 1, limit: 50 });
        callback(result.data);
      } catch (error) {
        console.error('Real-time operations polling error:', error);
      }
      
      if (isRunning) {
        setTimeout(poll, intervalMs);
      }
    };
    
    // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    poll();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling
    return () => {
      isRunning = false;
    };
  }
  
  // ============================================
  // PRIVATE API HELPERS
  // ============================================
  
  private buildQueryParams(filters: OperationFilters & any, pagination: PaginationParams & any): string {
    const params = new URLSearchParams();
    
    if (filters.operationType) params.append('operationType', filters.operationType);
    if (filters.status) params.append('status', filters.status);
    if (filters.tradingPointId) params.append('tradingPointId', filters.tradingPointId);
    if (filters.startDate) params.append('startDate', filters.startDate);
    if (filters.endDate) params.append('endDate', filters.endDate);
    if (filters.paymentMethod) params.append('paymentMethod', filters.paymentMethod);
    
    if (pagination.page) params.append('page', pagination.page.toString());
    if (pagination.limit) params.append('limit', pagination.limit.toString());
    if (pagination.format) params.append('format', pagination.format);
    
    return params.toString();
  }
  
  
  private transformOperationsResponse(apiResponse: any): PaginatedOperations {
    console.log('üîÑ Transforming API response:', { 
      dataCount: apiResponse?.data?.length,
      pagination: apiResponse?.pagination,
      summaryExists: !!apiResponse?.summary
    });
    
    const result = {
      data: apiResponse.data.map((item: any) => this.transformOperationFromApi(item)),
      pagination: apiResponse.pagination,
      summary: apiResponse.summary
    };
    
    console.log('‚úÖ Transformed operations:', result.data.length, '–æ–ø–µ—Ä–∞—Ü–∏–π');
    return result;
  }
  
  private transformOperationFromApi(apiData: any): Operation {
    return {
      id: apiData.id,
      operationType: apiData.operation_type || apiData.operationType,
      status: apiData.status,
      startTime: apiData.start_time || apiData.startTime,
      endTime: apiData.end_time || apiData.endTime,
      duration: apiData.duration,
      tradingPointId: apiData.trading_point_id || apiData.tradingPointId,
      tradingPointName: apiData.trading_point_name || apiData.tradingPointName,
      deviceId: apiData.device_id || apiData.deviceId,
      transactionId: apiData.transaction_id || apiData.transactionId,
      fuelType: apiData.fuel_type || apiData.fuelType,
      quantity: apiData.quantity,
      price: apiData.price,
      totalCost: apiData.total_cost || apiData.totalCost,
      paymentMethod: apiData.payment_method || apiData.paymentMethod,
      details: apiData.details,
      progress: apiData.progress,
      lastUpdated: apiData.updated_at || apiData.lastUpdated || new Date().toISOString(),
      operatorName: apiData.operator_name || apiData.operatorName,
      customerId: apiData.customer_id || apiData.customerId,
      vehicleNumber: apiData.vehicle_number || apiData.vehicleNumber,
      metadata: apiData.metadata,
      createdAt: new Date(apiData.created_at || apiData.createdAt),
      updatedAt: new Date(apiData.updated_at || apiData.updatedAt)
    };
  }
  
  // ============================================
  // SUPABASE OPERATIONS METHODS
  // ============================================
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Supabase
   */
  private async getSupabaseOperations(filters: OperationFilters, pagination: PaginationParams): Promise<PaginatedOperations> {
    try {
      console.log('üì¶ Using direct Supabase operations data');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é
      const supabaseFilters = {
        operationType: filters.operationType,
        status: filters.status,
        tradingPointId: filters.tradingPointId,
        paymentMethod: filters.paymentMethod,
        startDate: filters.startDate,
        endDate: filters.endDate
      };

      const allOperations = await operationsSupabaseService.getOperations(supabaseFilters);
      console.log('‚úÖ Loaded from Supabase:', allOperations.length, 'operations');
      
      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let filteredOperations = allOperations;
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      const page = pagination.page || 1;
      const limit = pagination.limit || 20;
      const startIndex = (page - 1) * limit;
      const endIndex = startIndex + limit;
      const paginatedData = filteredOperations.slice(startIndex, endIndex);
      
      return {
        data: paginatedData,
        pagination: {
          page,
          limit,
          total: filteredOperations.length,
          pages: Math.ceil(filteredOperations.length / limit)
        },
        summary: {
          totalOperations: filteredOperations.length,
          completedOperations: filteredOperations.filter(op => op.status === 'completed').length,
          totalAmount: filteredOperations.reduce((sum, op) => sum + (op.totalCost || 0), 0),
          averageOperationValue: filteredOperations.length > 0 
            ? filteredOperations.reduce((sum, op) => sum + (op.totalCost || 0), 0) / filteredOperations.length 
            : 0
        }
      };
      
    } catch (error) {
      console.error('‚ùå Supabase operations error:', error);
      throw error;
    }
  }

  // ============================================
  // MOCK DATA METHODS (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  // ============================================
  
  private async getMockOperations(filters: OperationFilters, pagination: PaginationParams): Promise<PaginatedOperations> {
    try {
      console.log('üì¶ Using Supabase operations data instead of mock');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase —Å–µ—Ä–≤–∏—Å –≤–º–µ—Å—Ç–æ mock –¥–∞–Ω–Ω—ã—Ö
      const supabaseFilters = {
        operationType: filters.operationType,
        status: filters.status,
        tradingPointId: filters.tradingPointId,
        paymentMethod: filters.paymentMethod,
        startDate: filters.startDate,
        endDate: filters.endDate
      };

      const allOperations = await operationsSupabaseService.getOperations(supabaseFilters);
      
      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let filteredOperations = allOperations;
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      const page = pagination.page || 1;
      const limit = pagination.limit || 20;
      const startIndex = (page - 1) * limit;
      const endIndex = startIndex + limit;
      const paginatedData = filteredOperations.slice(startIndex, endIndex);
      
      return {
        data: paginatedData,
        pagination: {
          page,
          limit,
          total: filteredOperations.length,
          pages: Math.ceil(filteredOperations.length / limit)
        },
        summary: {
          totalOperations: filteredOperations.length,
          completedOperations: filteredOperations.filter(op => op.status === 'completed').length,
          totalAmount: filteredOperations.reduce((sum, op) => sum + (op.totalCost || 0), 0),
          averageOperationValue: filteredOperations.length > 0 
            ? filteredOperations.reduce((sum, op) => sum + (op.totalCost || 0), 0) / filteredOperations.length 
            : 0
        }
      };
    } catch (error) {
      console.error('‚ùå Error loading operations from Supabase, using fallback:', error);
      
      // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ mock –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const mockOperations: Operation[] = [
        {
          id: 'OP-001',
          operationType: 'sale',
          status: 'completed',
          startTime: new Date().toISOString(),
          endTime: new Date().toISOString(),
          duration: 120,
          tradingPointId: 'TP-001',
          tradingPointName: 'Test Trading Point',
          deviceId: 'DEV-001',
          transactionId: 'TXN-001',
          fuelType: '–ê–ò-95',
          quantity: 30,
          price: 50.5,
          totalCost: 1515,
          paymentMethod: 'bank_card',
          details: 'Test sale operation',
          progress: 100,
          lastUpdated: new Date().toISOString(),
          operatorName: 'Test Operator',
          createdAt: new Date(),
          updatedAt: new Date()
        }
      ];
      
      return {
        data: mockOperations,
        pagination: {
          page: 1,
          limit: 20,
          total: mockOperations.length,
          pages: 1
        },
        summary: {
          totalOperations: mockOperations.length,
          completedOperations: 1,
          totalAmount: 1515,
          averageOperationValue: 1515
        }
      };
    }
  }
  
  private async getMockOperationById(id: string): Promise<Operation | null> {
    try {
      console.log('üì¶ Using Supabase to get operation by ID:', id);
      return await operationsSupabaseService.getOperationById(id);
    } catch (error) {
      console.error(`‚ùå Error loading operation ${id} from Supabase:`, error);
      return null;
    }
  }
  
  private async createMockOperation(input: OperationInput): Promise<Operation> {
    // Mock implementation
    return OperationsBusinessLogic.createOperation(input);
  }
  
  private async updateMockOperationStatus(id: string, status: OperationStatus, progress?: number, details?: string): Promise<Operation> {
    // Mock implementation
    const operation = await this.getMockOperationById(id);
    if (!operation) throw new Error('Operation not found');
    
    return OperationsBusinessLogic.updateOperationStatus(operation, status, progress, details);
  }
  
  private async getMockOperationsStats(): Promise<any> {
    try {
      console.log('üì¶ Using Supabase to get operations statistics');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∏–∑ Supabase
      const statusStats = await operationsSupabaseService.getStatusStatistics();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
      const allOperations = await operationsSupabaseService.getOperations();
      
      const completedOperations = allOperations.filter(op => op.status === 'completed');
      const totalRevenue = completedOperations.reduce((sum, op) => sum + (op.totalCost || 0), 0);
      
      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
      const operationsByType: Record<string, number> = {};
      allOperations.forEach(op => {
        operationsByType[op.operationType] = (operationsByType[op.operationType] || 0) + 1;
      });
      
      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å–∞–º
      const operationsByHour: Record<string, number> = {};
      allOperations.forEach(op => {
        const hour = new Date(op.startTime).getHours().toString();
        operationsByHour[hour] = (operationsByHour[hour] || 0) + 1;
      });
      
      return {
        totalOperations: allOperations.length,
        completedOperations: statusStats.completed || 0,
        inProgressOperations: statusStats.in_progress || 0,
        failedOperations: statusStats.failed || 0,
        totalRevenue,
        averageOperationValue: completedOperations.length > 0 ? totalRevenue / completedOperations.length : 0,
        operationsByType,
        operationsByHour
      };
    } catch (error) {
      console.error('‚ùå Error loading operations stats from Supabase:', error);
      
      // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ mock –¥–∞–Ω–Ω—ã–µ
      return {
        totalOperations: 100,
        completedOperations: 85,
        inProgressOperations: 10,
        failedOperations: 5,
        totalRevenue: 150000,
        averageOperationValue: 1500,
        operationsByType: {
          'sale': 80,
          'refund': 15,
          'maintenance': 5
        },
        operationsByHour: {}
      };
    }
  }
  
  private async exportMockOperations(filters: OperationFilters, format: string): Promise<string> {
    const operations = await this.getMockOperations(filters, { limit: 10000 });
    
    if (format === 'json') {
      return JSON.stringify(operations.data, null, 2);
    }
    
    // CSV format
    const headers = ['ID', 'Type', 'Status', 'Start Time', 'Total Cost', 'Details'];
    let csv = headers.join(',') + '\n';
    
    operations.data.forEach(op => {
      const row = [
        op.id,
        op.operationType,
        op.status,
        op.startTime,
        op.totalCost || 0,
        `"${(op.details || '').replace(/"/g, '""')}"`
      ];
      csv += row.join(',') + '\n';
    });
    
    return csv;
  }

  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –∞–ª–∏–∞—Å –¥–ª—è getOperations()
   */
  async getAll(filters?: OperationFilters): Promise<Operation[]> {
    const result = await this.getOperations(filters || {}, { limit: 1000 });
    return result.data;
  }

  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
   */
  async forceReload(): Promise<void> {
    // –í API –≤–µ—Ä—Å–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å, –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ
    console.log('üîÑ Operations service force reload requested');
    return Promise.resolve();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const operationsService = new OperationsServiceUpdated();

/**
 * –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ú–ò–ì–†–ê–¶–ò–ò:
 * 
 * 1. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:
 *    mv src/services/operationsService.ts src/services/operationsService.old.ts
 * 
 * 2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª:
 *    mv src/services/operationsService.updated.ts src/services/operationsService.ts
 * 
 * 3. –û–±–Ω–æ–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö:
 *    import { operationsService } from '@/services/operationsService';
 * 
 * 4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É mock –∏ API —Ä–µ–∂–∏–º–∞–º–∏
 * 
 * 5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è API URL
 * 
 * 6. –î–æ–±–∞–≤–∏—Ç—å Operations routes –≤ API server:
 *    import { operationsRouter } from './routes/operations';
 *    app.use('/api/v1/operations', operationsRouter);
 */