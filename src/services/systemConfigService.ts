/**
 * üóÑÔ∏è –°–ò–°–¢–ï–ú–ù–´–ô –°–ï–†–í–ò–° –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
 * 
 * –ó–∞–º–µ–Ω—è–µ—Ç localStorage –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–µ–π system_config –≤ Supabase
 */

import { supabaseConfigClient } from './supabaseConfigClient';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export interface SystemConfig {
  id?: string;
  config_key: string;
  config_value: any;
  config_type?: string;
  description?: string;
  is_encrypted?: boolean;
  created_at?: string;
  updated_at?: string;
}

export interface DatabaseConnection {
  id: string;
  name: string;
  url: string;
  type: 'postgresql' | 'mysql' | 'sqlite' | 'mock' | 'supabase' | 'external-api';
  description?: string;
  isActive: boolean;
  isDefault: boolean;
  createdAt: Date;
  updatedAt: Date;
  settings?: {
    timeout?: number;
    retryAttempts?: number;
    poolSize?: number;
    ssl?: boolean;
    apiKey?: string;
    serviceRoleKey?: string;
    schema?: string;
    autoApiKey?: boolean;
    username?: string;
    password?: string;
    authType?: 'basic' | 'bearer' | 'none';
  };
}

export interface DatabaseConfig {
  currentConnectionId: string;
  availableConnections: DatabaseConnection[];
  debugMode: boolean;
  lastUpdated: Date;
}

class SystemConfigService {
  private cache: Map<string, any> = new Map();
  private cacheTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ –∫–ª—é—á—É
   */
  async getConfig<T = any>(key: string, useCache = true): Promise<T | null> {
    console.log(`üîç SystemConfigService.getConfig(${key})`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      if (useCache && this.cache.has(key)) {
        const cached = this.cache.get(key);
        if (Date.now() - cached.timestamp < this.cacheTimeout) {
          console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫–µ—à–∞: ${key}`);
          return cached.value;
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data, error } = await supabaseConfigClient
        .from('system_config')
        .select('*')
        .eq('config_key', key)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          console.log(`‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
          return null;
        }
        throw error;
      }

      const value = data.config_value;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      this.cache.set(key, {
        value,
        timestamp: Date.now()
      });

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${key}`);
      return value;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ${key}:`, error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  async setConfig(key: string, value: any, configType = 'general', description?: string): Promise<void> {
    console.log(`üíæ SystemConfigService.setConfig(${key})`);
    
    try {
      const configData: Partial<SystemConfig> = {
        config_key: key,
        config_value: value,
        config_type: configType,
        description,
        updated_at: new Date().toISOString()
      };

      // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const { data: existing } = await supabaseConfigClient
        .from('system_config')
        .select('id')
        .eq('config_key', key)
        .single();

      if (existing) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        const { error } = await supabaseConfigClient
          .from('system_config')
          .update(configData)
          .eq('config_key', key);

        if (error) throw error;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${key}`);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        const { error } = await supabaseConfigClient
          .from('system_config')
          .insert(configData);

        if (error) throw error;
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${key}`);
      }

      // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
      this.cache.delete(key);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ${key}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É
   */
  async getConfigsByType(configType: string): Promise<SystemConfig[]> {
    console.log(`üîç SystemConfigService.getConfigsByType(${configType})`);
    
    try {
      const { data, error } = await supabaseConfigClient
        .from('system_config')
        .select('*')
        .eq('config_type', configType)
        .order('config_key');

      if (error) throw error;

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ç–∏–ø–∞ ${configType}: ${data?.length || 0}`);
      return data || [];

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ç–∏–ø–∞ ${configType}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
   */
  async getDatabaseConfig(): Promise<DatabaseConfig | null> {
    console.log('üîç SystemConfigService.getDatabaseConfig()');
    
    try {
      const config = await this.getConfig<DatabaseConfig>('database_connections');
      
      if (!config) {
        throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏".');
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫ –≤ –æ–±—ä–µ–∫—Ç—ã Date
      if (config.availableConnections) {
        config.availableConnections = config.availableConnections.map(conn => ({
          ...conn,
          createdAt: new Date(conn.createdAt),
          updatedAt: new Date(conn.updatedAt)
        }));
      }

      if (config.lastUpdated) {
        config.lastUpdated = new Date(config.lastUpdated);
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î: ${config.availableConnections?.length || 0} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π`);
      return config;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î:', error);
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' + (error instanceof Error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
   */
  async setDatabaseConfig(config: DatabaseConfig): Promise<void> {
    console.log('üíæ SystemConfigService.setDatabaseConfig()');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    config.lastUpdated = new Date();

    await this.setConfig(
      'database_connections', 
      config, 
      'database', 
      '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö'
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async getCurrentConnection(): Promise<DatabaseConnection | null> {
    console.log('üîç SystemConfigService.getCurrentConnection()');
    
    const config = await this.getDatabaseConfig();
    if (!config) return null;

    const current = config.availableConnections.find(
      conn => conn.id === config.currentConnectionId
    );

    if (!current) {
      console.log('‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return null;
    }

    console.log(`‚úÖ –¢–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${current.name} (${current.type})`);
    return current;
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async switchConnection(connectionId: string): Promise<{ success: boolean; error?: string }> {
    console.log(`üîÑ SystemConfigService.switchConnection(${connectionId})`);
    
    try {
      const config = await this.getDatabaseConfig();
      if (!config) {
        return { success: false, error: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }

      const connection = config.availableConnections.find(conn => conn.id === connectionId);
      if (!connection) {
        return { success: false, error: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      config.currentConnectionId = connectionId;
      await this.setDatabaseConfig(config);

      console.log(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${connection.name}`);
      return { success: true };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      return { success: false, error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à
   */
  clearCache(): void {
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    this.cache.clear();
  }

  /**
   * Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
   */
  private getFallbackDatabaseConfig(): DatabaseConfig {
    return {
      currentConnectionId: 'supabase-main',
      debugMode: false,
      lastUpdated: new Date(),
      availableConnections: [
        {
          id: 'supabase-main',
          name: '–û—Å–Ω–æ–≤–Ω–∞—è –ë–î Supabase',
          url: '',
          type: 'supabase',
          description: '–û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã (fallback)',
          isActive: true,
          isDefault: true,
          createdAt: new Date(),
          updatedAt: new Date(),
          settings: {
            timeout: 8000,
            retryAttempts: 3,
            ssl: true,
            schema: 'public',
            autoApiKey: true,
            // API –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            apiKey: '',
            serviceRoleKey: ''
          }
        },
        {
          id: 'mock-data',
          name: '–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ (Mock)',
          url: 'localStorage',
          type: 'mock',
          description: '–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
          isActive: false,
          isDefault: false,
          createdAt: new Date(),
          updatedAt: new Date(),
          settings: {
            timeout: 1000,
            retryAttempts: 3
          }
        }
      ]
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  async healthCheck(): Promise<{ healthy: boolean; error?: string }> {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª—é–±—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      await supabaseConfigClient
        .from('system_config')
        .select('id')
        .limit(1);

      return { healthy: true };
    } catch (error) {
      return { 
        healthy: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const systemConfigService = new SystemConfigService();

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
export const isSystemConfigHealthy = async () => {
  const health = await systemConfigService.healthCheck();
  return health.healthy;
};