/**
 * üéØ –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï API ENDPOINTS
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ API endpoints
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 */

import { httpClient, RequestConfig } from './universalHttpClient';

// === –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–ê–ù–ù–´–• ===

// –î–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
export interface TradingApiTank {
  number: number;
  fuel: number;
  fuel_name: string;
  state: number;
  volume_begin?: string | null;
  volume_end: string;
  volume_max: string;
  volume_free: string;
  volume: string;
  amount_begin?: string | null;
  amount_end: string;
  level: string;
  water: {
    volume: string;
    amount: string;
    level: string;
  };
  temperature: string;
  density: string;
  release: {
    volume: string;
    amount: string;
  };
  dt: string;
}

// –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
export interface TradingApiTransaction {
  id: string;
  timestamp: string;
  stationId: string;
  dispenserId: number;
  fuelType: number;
  volume: number;
  amount: number;
  price: number;
  paymentMethod: string;
  status: 'completed' | 'pending' | 'failed';
}

// –î–∞–Ω–Ω—ã–µ –∏–∑ Supabase
export interface SupabaseRecord {
  id: string;
  created_at: string;
  updated_at: string;
  [key: string]: any;
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
export interface FilterParams {
  limit?: number;
  offset?: number;
  startDate?: string;
  endDate?: string;
  stationId?: string;
  systemId?: string;
  [key: string]: any;
}

// === –¢–û–†–ì–û–í–ê–Ø –°–ï–¢–¨ API ===

class TradingNetworkApiEndpoints {
  /**
   * üõ¢Ô∏è –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
   */
  async getTanks(systemId: string, stationId: string, params?: FilterParams) {
    return httpClient.get<TradingApiTank[]>('/v1/tanks', {
      destination: 'external-api',
      queryParams: {
        system: systemId,
        station: stationId,
        ...params
      }
    });
  }

  /**
   * üßæ –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async getTransactions(systemId: string, stationId: string, params?: FilterParams) {
    return httpClient.get<TradingApiTransaction[]>('/v1/transactions', {
      destination: 'external-api',
      queryParams: {
        system: systemId,
        station: stationId,
        ...(params?.startDate && { date_from: params.startDate }),
        ...(params?.endDate && { date_to: params.endDate }),
        ...(params?.limit && { limit: params.limit })
      }
    });
  }

  /**
   * üí∞ –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ
   */
  async getFuelPrices(systemId: string, stationId: string) {
    return httpClient.get<Record<string, number>>('/fuel-prices', {
      destination: 'external-api',
      queryParams: { systemId, stationId }
    });
  }

  /**
   * üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ
   */
  async setFuelPrices(systemId: string, stationId: string, prices: Record<string, number>) {
    return httpClient.post<{ success: boolean }>('/fuel-prices', {
      systemId,
      stationId,
      prices
    }, {
      destination: 'external-api'
    });
  }

  /**
   * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async testConnection() {
    return httpClient.testExternalApiConnection();
  }
}

// === SUPABASE API ===

class SupabaseApiEndpoints {
  /**
   * üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
   */
  async getRecords<T = SupabaseRecord>(
    table: string, 
    params?: FilterParams & {
      select?: string;
      orderBy?: string;
      orderDirection?: 'asc' | 'desc';
    }
  ) {
    const queryParams: any = {};
    
    if (params?.select) queryParams.select = params.select;
    if (params?.limit) queryParams.limit = params.limit;
    if (params?.offset) queryParams.offset = params.offset;
    if (params?.orderBy) queryParams.order = `${params.orderBy}.${params.orderDirection || 'asc'}`;

    return httpClient.get<T[]>(`/rest/v1/${table}`, {
      destination: 'supabase',
      queryParams
    });
  }

  /**
   * ‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
   */
  async createRecord<T = SupabaseRecord>(table: string, data: Partial<T>) {
    return httpClient.post<T>(`/rest/v1/${table}`, data, {
      destination: 'supabase',
      headers: {
        'Prefer': 'return=representation'
      }
    });
  }

  /**
   * üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
   */
  async updateRecord<T = SupabaseRecord>(table: string, id: string, data: Partial<T>) {
    return httpClient.patch<T>(`/rest/v1/${table}?id=eq.${id}`, data, {
      destination: 'supabase',
      headers: {
        'Prefer': 'return=representation'
      }
    });
  }

  /**
   * ‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
   */
  async deleteRecord(table: string, id: string) {
    return httpClient.delete(`/rest/v1/${table}?id=eq.${id}`, {
      destination: 'supabase'
    });
  }

  /**
   * üîç –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
   */
  async getRecord<T = SupabaseRecord>(table: string, id: string, select?: string) {
    const queryParams: any = { limit: 1 };
    if (select) queryParams.select = select;

    const response = await httpClient.get<T[]>(`/rest/v1/${table}?id=eq.${id}`, {
      destination: 'supabase',
      queryParams
    });

    return {
      ...response,
      data: response.data?.[0] || null
    };
  }

  /**
   * üìä –í—ã–ø–æ–ª–Ω–∏—Ç—å RPC —Ñ—É–Ω–∫—Ü–∏—é
   */
  async callRpcFunction<T = any>(functionName: string, params?: any) {
    return httpClient.post<T>(`/rest/v1/rpc/${functionName}`, params, {
      destination: 'supabase'
    });
  }
}

// === –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï ENDPOINT –ì–†–£–ü–ü–´ ===

/**
 * üõ¢Ô∏è –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º–∏
 */
export class TanksApiEndpoints {
  private tradingApi = new TradingNetworkApiEndpoints();
  private supabaseApi = new SupabaseApiEndpoints();

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
   */
  async getTanksFromTradingNetwork(systemId: string, stationId: string) {
    return this.tradingApi.getTanks(systemId, stationId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –∏–∑ Supabase
   */
  async getTanksFromDatabase(tradingPointId?: string) {
    const params: any = {};
    if (tradingPointId) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      params.trading_point_id = `eq.${tradingPointId}`;
    }

    return this.supabaseApi.getRecords('tanks', {
      select: '*',
      ...params
    });
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –º–µ–∂–¥—É API –∏ –ë–î
   */
  async syncTanks(systemId: string, stationId: string, tradingPointId: string) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
    const tradingResponse = await this.getTanksFromTradingNetwork(systemId, stationId);
    
    if (!tradingResponse.success || !tradingResponse.data) {
      return {
        success: false,
        error: 'Failed to fetch tanks from trading network'
      };
    }

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ë–î
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    return {
      success: true,
      data: {
        tradingData: tradingResponse.data,
        syncedCount: tradingResponse.data.length
      }
    };
  }
}

/**
 * üßæ –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏/—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
 */
export class OperationsApiEndpoints {
  private tradingApi = new TradingNetworkApiEndpoints();
  private supabaseApi = new SupabaseApiEndpoints();

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
   */
  async getOperationsFromTradingNetwork(systemId: string, stationId: string, params?: FilterParams) {
    return this.tradingApi.getTransactions(systemId, stationId, params);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ Supabase
   */
  async getOperationsFromDatabase(params?: FilterParams) {
    return this.supabaseApi.getRecords('operations', {
      select: '*',
      orderBy: 'start_time',
      orderDirection: 'desc',
      ...params
    });
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
   */
  async createOperation(operationData: any) {
    return this.supabaseApi.createRecord('operations', operationData);
  }
}

/**
 * üí∞ –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
 */
export class PricesApiEndpoints {
  private tradingApi = new TradingNetworkApiEndpoints();
  private supabaseApi = new SupabaseApiEndpoints();

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
   */
  async getPricesFromTradingNetwork(systemId: string, stationId: string) {
    return this.tradingApi.getFuelPrices(systemId, stationId);
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
   */
  async setPricesInTradingNetwork(systemId: string, stationId: string, prices: Record<string, number>) {
    return this.tradingApi.setFuelPrices(systemId, stationId, prices);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async getPricesFromDatabase(tradingPointId?: string) {
    return this.supabaseApi.getRecords('prices', {
      select: '*',
      ...(tradingPointId && { trading_point_id: `eq.${tradingPointId}` })
    });
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async savePricesToDatabase(pricesData: any[]) {
    // Batch insert prices
    const results = await Promise.all(
      pricesData.map(price => this.supabaseApi.createRecord('prices', price))
    );

    return {
      success: results.every(r => r.success),
      data: results
    };
  }
}

// === –≠–ö–°–ü–û–†–¢ –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í ===

export const tradingNetworkApi = new TradingNetworkApiEndpoints();
export const supabaseApi = new SupabaseApiEndpoints();
export const tanksApi = new TanksApiEndpoints();
export const operationsApi = new OperationsApiEndpoints();
export const pricesApi = new PricesApiEndpoints();

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç —Å–æ –≤—Å–µ–º–∏ API
export const apiEndpoints = {
  tradingNetwork: tradingNetworkApi,
  supabase: supabaseApi,
  tanks: tanksApi,
  operations: operationsApi,
  prices: pricesApi,
};

export default apiEndpoints;