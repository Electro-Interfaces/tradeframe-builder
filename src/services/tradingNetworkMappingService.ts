/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–º –∫–æ–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π –∏ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
 */

import { 
  FuelCodeMapping, 
  MappingSyncResult, 
  FuelMappingConfig, 
  TradingNetworkConfig 
} from './tradingNetworkConfigService';
import { nomenclatureService } from './nomenclatureService';
import { tradingNetworkAPI } from './tradingNetworkAPI';
import { FuelNomenclature } from '../types/nomenclature';

// –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤
interface MappingValidationResult {
  valid: boolean;
  errors: string[];
  warnings: string[];
}

// –ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–∞–ø–ø–∏–Ω–≥–æ–≤
interface MappingConflict {
  type: 'duplicate_api_code' | 'duplicate_internal_code' | 'nomenclature_mismatch';
  mappingId: string;
  conflictWith: string;
  description: string;
  suggestedResolution: string;
}

class TradingNetworkMappingService {
  private cachedMappings: Map<string, FuelCodeMapping> = new Map();
  private lastCacheUpdate: Date | null = null;
  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞
   */
  getMappingForFuelType(internalCode: string, networkId?: string): FuelCodeMapping | null {
    console.log(`üîç getMappingForFuelType: –ø–æ–∏—Å–∫ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è "${internalCode}"`);
    
    const key = networkId ? `${internalCode}_${networkId}` : internalCode;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.cachedMappings.has(key) && this.isCacheValid()) {
      const mapping = this.cachedMappings.get(key)!;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥: ${internalCode} ‚Üí API –∫–æ–¥ ${mapping.apiCode}`);
      return mapping;
    }

    return null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è API –∫–æ–¥–∞
   */
  getMappingForApiCode(apiCode: number, networkId?: string): FuelCodeMapping | null {
    console.log(`üîç getMappingForApiCode: –ø–æ–∏—Å–∫ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è API –∫–æ–¥–∞ ${apiCode}`);
    
    for (const mapping of this.cachedMappings.values()) {
      if (mapping.apiCode === apiCode && 
          (!networkId || mapping.networkId === networkId) && 
          mapping.isActive) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥: API –∫–æ–¥ ${apiCode} ‚Üí ${mapping.internalCode}`);
        return mapping;
      }
    }

    console.log(`‚ö†Ô∏è –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è API –∫–æ–¥–∞ ${apiCode} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π –∏ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
   */
  async syncFuelMappings(config: TradingNetworkConfig, networkId: string): Promise<MappingSyncResult> {
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–∞–ø–ø–∏–Ω–≥–æ–≤ –¥–ª—è —Å–µ—Ç–∏ ${networkId}`);
    
    const result: MappingSyncResult = {
      success: false,
      created: 0,
      updated: 0,
      conflicts: 0,
      errors: [],
      mappings: []
    };

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const nomenclature = await nomenclatureService.getNomenclature({ 
        networkId, 
        status: 'active' 
      });
      console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${nomenclature.length} –∑–∞–ø–∏—Å–µ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã`);

      // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏–∑ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
      const apiServices = await tradingNetworkAPI.getServices();
      console.log(`üåê –ü–æ–ª—É—á–µ–Ω–æ ${apiServices.length} —É—Å–ª—É–≥ –∏–∑ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏`);

      // 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const existingMappings = config.fuelMapping?.mappings || [];
      const mappingsByInternalCode = new Map<string, FuelCodeMapping>();
      const mappingsByApiCode = new Map<number, FuelCodeMapping>();

      existingMappings.forEach(mapping => {
        if (mapping.networkId === networkId) {
          mappingsByInternalCode.set(mapping.internalCode, mapping);
          mappingsByApiCode.set(mapping.apiCode, mapping);
        }
      });

      // 4. –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
      for (const nomenclatureItem of nomenclature) {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É—Å–ª—É–≥—É –≤ API –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const matchingService = this.findMatchingApiService(nomenclatureItem, apiServices);
        
        if (matchingService) {
          const existingMapping = mappingsByInternalCode.get(nomenclatureItem.internalCode);
          
          if (existingMapping) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥
            if (existingMapping.apiCode !== matchingService.service_code || 
                existingMapping.apiName !== matchingService.service_name) {
              existingMapping.apiCode = matchingService.service_code;
              existingMapping.apiName = matchingService.service_name;
              existingMapping.updatedAt = new Date();
              existingMapping.lastSync = new Date();
              result.updated++;
              console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥: ${nomenclatureItem.internalCode} ‚Üí API ${matchingService.service_code}`);
            }
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥
            const newMapping: FuelCodeMapping = {
              id: `mapping_${nomenclatureItem.id}_${matchingService.service_code}`,
              internalCode: nomenclatureItem.internalCode,
              internalName: nomenclatureItem.name,
              apiCode: matchingService.service_code,
              apiName: matchingService.service_name,
              networkId: networkId,
              nomenclatureId: nomenclatureItem.id,
              isActive: true,
              priority: 1,
              lastSync: new Date(),
              createdAt: new Date(),
              updatedAt: new Date()
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            const existingByApiCode = mappingsByApiCode.get(matchingService.service_code);
            if (existingByApiCode && existingByApiCode.internalCode !== nomenclatureItem.internalCode) {
              result.conflicts++;
              result.errors.push(
                `–ö–æ–Ω—Ñ–ª–∏–∫—Ç API –∫–æ–¥–∞ ${matchingService.service_code}: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è "${existingByApiCode.internalCode}" –∏ "${nomenclatureItem.internalCode}"`
              );
              console.warn(`‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è API –∫–æ–¥–∞ ${matchingService.service_code}`);
            } else {
              result.mappings.push(newMapping);
              mappingsByInternalCode.set(newMapping.internalCode, newMapping);
              mappingsByApiCode.set(newMapping.apiCode, newMapping);
              result.created++;
              console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥: ${nomenclatureItem.internalCode} ‚Üí API ${matchingService.service_code}`);
            }
          }
        } else {
          console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ API –¥–ª—è "${nomenclatureItem.name}" (${nomenclatureItem.internalCode})`);
          result.errors.push(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ API –¥–ª—è "${nomenclatureItem.name}"`);
        }
      }

      // 5. –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
      result.mappings.push(...existingMappings.filter(m => m.networkId === networkId));

      // 6. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      this.updateCache(result.mappings);

      result.success = result.errors.length === 0 || result.created > 0 || result.updated > 0;
      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–æ–∑–¥–∞–Ω–æ ${result.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result.updated}, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ${result.conflicts}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∞–ø–ø–∏–Ω–≥–æ–≤:', error);
      result.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      result.success = false;
    }

    return result;
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–∑–≤–∞–Ω–∏–π
   */
  async autoCreateMappings(config: TradingNetworkConfig, networkId: string): Promise<FuelCodeMapping[]> {
    console.log(`ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–æ–≤ –¥–ª—è —Å–µ—Ç–∏ ${networkId}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –∏ API —É—Å–ª—É–≥–∏
      const [nomenclature, apiServices] = await Promise.all([
        nomenclatureService.getNomenclature({ networkId, status: 'active' }),
        tradingNetworkAPI.getServices()
      ]);

      const mappings: FuelCodeMapping[] = [];

      for (const nomenclatureItem of nomenclature) {
        const matchingService = this.findMatchingApiService(nomenclatureItem, apiServices);
        
        if (matchingService) {
          mappings.push({
            id: `auto_mapping_${nomenclatureItem.id}_${matchingService.service_code}`,
            internalCode: nomenclatureItem.internalCode,
            internalName: nomenclatureItem.name,
            apiCode: matchingService.service_code,
            apiName: matchingService.service_name,
            networkId: networkId,
            nomenclatureId: nomenclatureItem.id,
            isActive: true,
            priority: 1,
            lastSync: new Date(),
            createdAt: new Date(),
            updatedAt: new Date()
          });
        }
      }

      console.log(`ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ ${mappings.length} –º–∞–ø–ø–∏–Ω–≥–æ–≤`);
      return mappings;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤:', error);
      return [];
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤
   */
  validateMappings(mappings: FuelCodeMapping[]): MappingValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å API –∫–æ–¥–æ–≤
    const apiCodes = new Map<number, string>();
    const internalCodes = new Map<string, number>();

    for (const mapping of mappings.filter(m => m.isActive)) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è API –∫–æ–¥–æ–≤
      if (apiCodes.has(mapping.apiCode)) {
        errors.push(
          `–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è API –∫–æ–¥ ${mapping.apiCode} –¥–ª—è "${mapping.internalCode}" –∏ "${apiCodes.get(mapping.apiCode)}"`
        );
      } else {
        apiCodes.set(mapping.apiCode, mapping.internalCode);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–¥–æ–≤
      if (internalCodes.has(mapping.internalCode)) {
        warnings.push(
          `–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ "${mapping.internalCode}" –¥–ª—è API –∫–æ–¥–æ–≤ ${mapping.apiCode} –∏ ${internalCodes.get(mapping.internalCode)}`
        );
      } else {
        internalCodes.set(mapping.internalCode, mapping.apiCode);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–¥–æ–≤
      if (!mapping.internalCode || mapping.internalCode.trim().length === 0) {
        errors.push(`–ü—É—Å—Ç–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ ${mapping.id}`);
      }

      if (!mapping.apiCode || mapping.apiCode <= 0) {
        errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–æ–¥ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ ${mapping.id}`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π
      if (!mapping.internalName || mapping.internalName.trim().length === 0) {
        warnings.push(`–ü—É—Å—Ç–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ ${mapping.id}`);
      }

      if (!mapping.apiName || mapping.apiName.trim().length === 0) {
        warnings.push(`–ü—É—Å—Ç–æ–µ API –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ ${mapping.id}`);
      }
    }

    return {
      valid: errors.length === 0,
      errors,
      warnings
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ –º–∞–ø–ø–∏–Ω–≥–∞—Ö
   */
  findConflicts(mappings: FuelCodeMapping[]): MappingConflict[] {
    const conflicts: MappingConflict[] = [];
    const activeMappings = mappings.filter(m => m.isActive);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ API –∫–æ–¥–∞–º –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∫–æ–¥–∞–º
    const byApiCode = new Map<number, FuelCodeMapping[]>();
    const byInternalCode = new Map<string, FuelCodeMapping[]>();

    activeMappings.forEach(mapping => {
      // –ü–æ API –∫–æ–¥–∞–º
      if (!byApiCode.has(mapping.apiCode)) {
        byApiCode.set(mapping.apiCode, []);
      }
      byApiCode.get(mapping.apiCode)!.push(mapping);

      // –ü–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∫–æ–¥–∞–º
      if (!byInternalCode.has(mapping.internalCode)) {
        byInternalCode.set(mapping.internalCode, []);
      }
      byInternalCode.get(mapping.internalCode)!.push(mapping);
    });

    // –ò—â–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã API –∫–æ–¥–æ–≤
    byApiCode.forEach((mappingsGroup, apiCode) => {
      if (mappingsGroup.length > 1) {
        for (let i = 0; i < mappingsGroup.length - 1; i++) {
          conflicts.push({
            type: 'duplicate_api_code',
            mappingId: mappingsGroup[i].id,
            conflictWith: mappingsGroup[i + 1].id,
            description: `API –∫–æ–¥ ${apiCode} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è "${mappingsGroup[i].internalCode}" –∏ "${mappingsGroup[i + 1].internalCode}"`,
            suggestedResolution: '–û—Å—Ç–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º'
          });
        }
      }
    });

    // –ò—â–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–¥–æ–≤
    byInternalCode.forEach((mappingsGroup, internalCode) => {
      if (mappingsGroup.length > 1) {
        for (let i = 0; i < mappingsGroup.length - 1; i++) {
          conflicts.push({
            type: 'duplicate_internal_code',
            mappingId: mappingsGroup[i].id,
            conflictWith: mappingsGroup[i + 1].id,
            description: `–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ "${internalCode}" —Å–≤—è–∑–∞–Ω —Å API –∫–æ–¥–∞–º–∏ ${mappingsGroup[i].apiCode} –∏ ${mappingsGroup[i + 1].apiCode}`,
            suggestedResolution: '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥–∏ –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö'
          });
        }
      }
    });

    return conflicts;
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–∏ API –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
   */
  private findMatchingApiService(nomenclature: FuelNomenclature, apiServices: any[]): any | null {
    // 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∫–æ–¥—É
    let match = apiServices.find(service => 
      service.service_name.toLowerCase() === nomenclature.internalCode.toLowerCase()
    );
    if (match) return match;

    // 2. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    match = apiServices.find(service => 
      service.service_name.toLowerCase() === nomenclature.name.toLowerCase()
    );
    if (match) return match;

    // 3. –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const nomenclatureLower = nomenclature.name.toLowerCase();
    const internalCodeLower = nomenclature.internalCode.toLowerCase();
    
    match = apiServices.find(service => {
      const serviceLower = service.service_name.toLowerCase();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–µ–Ω–∑–∏–Ω–∞
      if ((nomenclatureLower.includes('–∞–∏-92') || internalCodeLower.includes('–∞–∏-92')) && 
          serviceLower.includes('–∞–∏-92')) return true;
      if ((nomenclatureLower.includes('–∞–∏-95') || internalCodeLower.includes('–∞–∏-95')) && 
          serviceLower.includes('–∞–∏-95')) return true;
      if ((nomenclatureLower.includes('–∞–∏-98') || internalCodeLower.includes('–∞–∏-98')) && 
          serviceLower.includes('–∞–∏-98')) return true;
      if ((nomenclatureLower.includes('–∞–∏-100') || internalCodeLower.includes('–∞–∏-100')) && 
          serviceLower.includes('–∞–∏-100')) return true;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–∏–∑–µ–ª—è
      if ((nomenclatureLower.includes('–¥–∏–∑–µ–ª—å') || internalCodeLower.includes('–¥—Ç')) && 
          serviceLower.includes('–¥–∏–∑–µ–ª—å')) return true;
      
      return false;
    });

    return match || null;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –º–∞–ø–ø–∏–Ω–≥–æ–≤
   */
  private updateCache(mappings: FuelCodeMapping[]): void {
    this.cachedMappings.clear();
    
    mappings.forEach(mapping => {
      if (mapping.isActive) {
        // –ö—ç—à–∏—Ä—É–µ–º –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∫–æ–¥—É
        this.cachedMappings.set(mapping.internalCode, mapping);
        // –ö—ç—à–∏—Ä—É–µ–º –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∫–æ–¥—É —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–µ—Ç–∏
        if (mapping.networkId) {
          this.cachedMappings.set(`${mapping.internalCode}_${mapping.networkId}`, mapping);
        }
      }
    });

    this.lastCacheUpdate = new Date();
    console.log(`üóÇÔ∏è –ö—ç—à –º–∞–ø–ø–∏–Ω–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: ${this.cachedMappings.size} –∑–∞–ø–∏—Å–µ–π`);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
   */
  private isCacheValid(): boolean {
    if (!this.lastCacheUpdate) return false;
    const now = new Date();
    return (now.getTime() - this.lastCacheUpdate.getTime()) < this.CACHE_TTL;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  async initializeCache(config: TradingNetworkConfig): Promise<void> {
    if (config.fuelMapping?.mappings) {
      this.updateCache(config.fuelMapping.mappings);
      console.log(`üîÑ –ö—ç—à –º–∞–ø–ø–∏–Ω–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache(): void {
    this.cachedMappings.clear();
    this.lastCacheUpdate = null;
    console.log(`üóëÔ∏è –ö—ç—à –º–∞–ø–ø–∏–Ω–≥–æ–≤ –æ—á–∏—â–µ–Ω`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–ø–ø–∏–Ω–≥–æ–≤
   */
  getMappingStats(mappings: FuelCodeMapping[]): {
    total: number;
    active: number;
    inactive: number;
    withNomenclature: number;
    conflicts: number;
  } {
    const active = mappings.filter(m => m.isActive);
    const withNomenclature = mappings.filter(m => m.nomenclatureId);
    const conflicts = this.findConflicts(mappings);

    return {
      total: mappings.length,
      active: active.length,
      inactive: mappings.length - active.length,
      withNomenclature: withNomenclature.length,
      conflicts: conflicts.length
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const tradingNetworkMappingService = new TradingNetworkMappingService();
export { TradingNetworkMappingService };