/**
 * üóÑÔ∏è SUPABASE DATABASE CLIENT
 * 
 * –ö–ª–∏–µ–Ω—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Supabase
 * –¢–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ Supabase
export interface SupabaseResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  status?: number;
  headers?: Record<string, string>;
  responseTime?: number;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Supabase
export interface SupabaseRequestConfig {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
  headers?: Record<string, string>;
  body?: any;
  timeout?: number;
  queryParams?: Record<string, string | number | boolean>;
}

class SupabaseDatabaseClient {
  // –ü–†–Ø–ú–´–ï –†–ï–ö–í–ò–ó–ò–¢–´ SUPABASE (–±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Ä–∞–∑–¥–µ–ª—É "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏")
  private readonly SUPABASE_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
  private readonly SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –¥–ª—è Supabase
   */
  private getBaseUrl(): string {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º proxy
    if (import.meta.env.DEV) {
      const port = window.location.port || '3000';
      return `http://localhost:${port}/supabase-proxy`;
    }
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –ø—Ä—è–º–æ–π URL
    return this.SUPABASE_URL;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private getAuthHeaders(): Record<string, string> {
    return {
      'Authorization': `Bearer ${this.SUPABASE_SERVICE_ROLE_KEY}`,
      'apikey': this.SUPABASE_SERVICE_ROLE_KEY,
      'Content-Type': 'application/json',
      'Prefer': 'return=representation'
    };
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å URL —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  private buildUrl(endpoint: string, queryParams?: Record<string, string | number | boolean>): string {
    const baseUrl = this.getBaseUrl();
    let url = `${baseUrl}${endpoint}`;
    
    if (queryParams && Object.keys(queryParams).length > 0) {
      const params = new URLSearchParams();
      Object.entries(queryParams).forEach(([key, value]) => {
        params.append(key, String(value));
      });
      url += `?${params.toString()}`;
    }
    
    return url;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private async request<T>(
    endpoint: string, 
    config: SupabaseRequestConfig = {}
  ): Promise<SupabaseResponse<T>> {
    const startTime = Date.now();
    const method = config.method || 'GET';
    const url = this.buildUrl(endpoint, config.queryParams);
    
    console.log(`üì° [SUPABASE DB] ${method} ${url}`);
    
    try {
      const headers = {
        ...this.getAuthHeaders(),
        ...config.headers
      };

      const fetchOptions: RequestInit = {
        method,
        headers,
        ...(config.timeout && { signal: AbortSignal.timeout(config.timeout) })
      };

      if (config.body && method !== 'GET') {
        fetchOptions.body = typeof config.body === 'string' 
          ? config.body 
          : JSON.stringify(config.body);
      }

      const response = await fetch(url, fetchOptions);
      const responseTime = Date.now() - startTime;
      
      let responseData: any = null;
      const contentType = response.headers.get('content-type');
      
      if (contentType?.includes('application/json')) {
        try {
          responseData = await response.json();
        } catch (jsonError) {
          console.warn('‚ö†Ô∏è [SUPABASE DB] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
          responseData = null;
        }
      } else {
        responseData = await response.text();
      }

      if (response.ok) {
        console.log(`‚úÖ [SUPABASE DB] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status} (${responseTime}ms)`);
        if (Array.isArray(responseData)) {
          console.log(`üìä [SUPABASE DB] –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${responseData.length}`);
        }
        
        return {
          success: true,
          data: responseData,
          status: response.status,
          responseTime,
          headers: Object.fromEntries(response.headers.entries())
        };
      } else {
        const errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        console.error(`‚ùå [SUPABASE DB] –û—à–∏–±–∫–∞: ${errorMessage}`);
        console.error(`üìÑ [SUPABASE DB] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, responseData);
        
        return {
          success: false,
          error: errorMessage,
          status: response.status,
          responseTime,
          headers: Object.fromEntries(response.headers.entries())
        };
      }
      
    } catch (error) {
      const responseTime = Date.now() - startTime;
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      console.error(`‚ùå [SUPABASE DB] –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${errorMessage}`);
      
      return {
        success: false,
        error: errorMessage,
        responseTime
      };
    }
  }

  /**
   * GET –∑–∞–ø—Ä–æ—Å
   */
  async get<T>(endpoint: string, config: Omit<SupabaseRequestConfig, 'method'> = {}): Promise<SupabaseResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'GET' });
  }

  /**
   * POST –∑–∞–ø—Ä–æ—Å
   */
  async post<T>(endpoint: string, data: any, config: Omit<SupabaseRequestConfig, 'method' | 'body'> = {}): Promise<SupabaseResponse<T>> {
    // –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ Prefer –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const headers = {
      'Prefer': 'return=representation',
      ...config.headers
    };
    return this.request<T>(endpoint, { ...config, method: 'POST', body: data, headers });
  }

  /**
   * PUT –∑–∞–ø—Ä–æ—Å
   */
  async put<T>(endpoint: string, data: any, config: Omit<SupabaseRequestConfig, 'method' | 'body'> = {}): Promise<SupabaseResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'PUT', body: data });
  }

  /**
   * PATCH –∑–∞–ø—Ä–æ—Å
   */
  async patch<T>(endpoint: string, data: any, config: Omit<SupabaseRequestConfig, 'method' | 'body'> = {}): Promise<SupabaseResponse<T>> {
    // –î–ª—è PATCH –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ Prefer –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const headers = {
      'Prefer': 'return=representation',
      ...config.headers
    };
    return this.request<T>(endpoint, { ...config, method: 'PATCH', body: data, headers });
  }

  /**
   * DELETE –∑–∞–ø—Ä–æ—Å
   */
  async delete<T>(endpoint: string, config: Omit<SupabaseRequestConfig, 'method'> = {}): Promise<SupabaseResponse<T>> {
    return this.request<T>(endpoint, { ...config, method: 'DELETE' });
  }

  /**
   * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
   */
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ç–∏
  async getNetworks(filters?: Record<string, any>): Promise<SupabaseResponse<any[]>> {
    const queryParams: Record<string, string> = { select: '*' };
    
    if (filters) {
      Object.entries(filters).forEach(([key, value]) => {
        queryParams[key] = `eq.${value}`;
      });
    }
    
    return this.get('/rest/v1/networks', { queryParams });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏
  async getTradingPoints(filters?: Record<string, any>): Promise<SupabaseResponse<any[]>> {
    const queryParams: Record<string, string> = { select: '*' };
    
    if (filters) {
      Object.entries(filters).forEach(([key, value]) => {
        queryParams[key] = `eq.${value}`;
      });
    }
    
    return this.get('/rest/v1/trading_points', { queryParams });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  async getEquipment(filters?: Record<string, any>): Promise<SupabaseResponse<any[]>> {
    const queryParams: Record<string, string> = { select: '*' };
    
    if (filters) {
      Object.entries(filters).forEach(([key, value]) => {
        queryParams[key] = `eq.${value}`;
      });
    }
    
    return this.get('/rest/v1/equipment', { queryParams });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã  
  async getTanks(filters?: Record<string, any>): Promise<SupabaseResponse<any[]>> {
    const queryParams: Record<string, string> = { select: '*' };
    
    if (filters) {
      Object.entries(filters).forEach(([key, value]) => {
        queryParams[key] = `eq.${value}`;
      });
    }
    
    return this.get('/rest/v1/tanks', { queryParams });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
  async getOperations(filters?: Record<string, any>): Promise<SupabaseResponse<any[]>> {
    const queryParams: Record<string, string> = { select: '*' };
    
    if (filters) {
      Object.entries(filters).forEach(([key, value]) => {
        queryParams[key] = `eq.${value}`;
      });
    }
    
    return this.get('/rest/v1/operations', { queryParams });
  }

  /**
   * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   */
  getConnectionInfo(): Record<string, any> {
    return {
      baseUrl: this.getBaseUrl(),
      proxyMode: import.meta.env.DEV,
      timestamp: new Date().toISOString()
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const supabaseDatabaseClient = new SupabaseDatabaseClient();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏  
export default supabaseDatabaseClient;