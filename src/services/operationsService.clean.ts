/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
 * –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: –∏–∑–≤–ª–µ—á–µ–Ω–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
 */

import { PersistentStorage } from '@/utils/persistentStorage';
import { getApiBaseUrl } from '@/services/apiConfigService';
import { OperationsBusinessLogic } from './operationsBusinessLogic';
import { 
  Operation, 
  OperationType, 
  OperationStatus, 
  PaymentMethod, 
  OperationInput,
  OperationFilters,
  OperationStatistics,
  CreateOperationResponse,
  UpdateOperationResponse
} from './operationsTypes';

// –ò–º–ø–æ—Ä—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
// –í production —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –ë–î
let demoDataOperations: Operation[] = [];

// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
try {
  // –í production —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –≤—ã–∑–æ–≤ API
  demoDataOperations = require('../data/operationsDemoData.json');
  console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–π:', demoDataOperations.length);
} catch (error) {
  console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
  demoDataOperations = [];
}

// –†–∞–±–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–π
let operationsData: Operation[] = [];

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
console.log('üßπ –û—á–∏—â–∞–µ–º –∫—ç—à –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –¥–µ–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
PersistentStorage.remove('operations');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
try {
  operationsData = PersistentStorage.load<Operation>('operations', demoDataOperations);
  console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ PersistentStorage:', operationsData.length);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ localStorage:', error);
  operationsData = demoDataOperations;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
const saveOperations = () => {
  PersistentStorage.save('operations', operationsData);
};

/**
 * –°–µ—Ä–≤–∏—Å –æ–ø–µ—Ä–∞—Ü–∏–π - —á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export const operationsService = {
  // === –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ
   */
  async getAll(): Promise<Operation[]> {
    return OperationsBusinessLogic.sortOperations(operationsData);
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
   */
  async getFiltered(filters: OperationFilters): Promise<Operation[]> {
    const filtered = OperationsBusinessLogic.filterOperations(operationsData, filters);
    return OperationsBusinessLogic.sortOperations(filtered);
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ ID
   */
  async getById(id: string): Promise<Operation | null> {
    return operationsData.find(op => op.id === id) || null;
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async getStatistics(): Promise<OperationStatistics> {
    return OperationsBusinessLogic.calculateOperationsStatistics(operationsData);
  },

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –¥–∞—Ç–µ
   */
  async getGroupedByDate(): Promise<Record<string, Operation[]>> {
    return OperationsBusinessLogic.groupOperationsByDate(operationsData);
  },

  // === –°–û–ó–î–ê–ù–ò–ï –ò –ò–ó–ú–ï–ù–ï–ù–ò–ï ===

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async create(input: OperationInput): Promise<CreateOperationResponse> {
    try {
      const newOperation = OperationsBusinessLogic.createOperation(input);
      operationsData.unshift(newOperation);
      saveOperations();
      
      return {
        operation: newOperation,
        success: true
      };
    } catch (error) {
      return {
        operation: {} as Operation,
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  },

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async update(id: string, updates: Partial<Operation>): Promise<UpdateOperationResponse> {
    const index = operationsData.findIndex(op => op.id === id);
    if (index === -1) {
      return {
        operation: null,
        success: false,
        error: '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      };
    }
    
    const updatedOperation = {
      ...operationsData[index],
      ...updates,
      id: operationsData[index].id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π ID
      updatedAt: new Date()
    };

    operationsData[index] = updatedOperation;
    saveOperations();
    
    return {
      operation: updatedOperation,
      success: true
    };
  },

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async updateStatus(id: string, status: OperationStatus, progress?: number): Promise<UpdateOperationResponse> {
    const index = operationsData.findIndex(op => op.id === id);
    if (index === -1) {
      return {
        operation: null,
        success: false,
        error: '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      };
    }

    const updatedOperation = OperationsBusinessLogic.updateOperationStatus(
      operationsData[index], 
      status, 
      progress
    );

    operationsData[index] = updatedOperation;
    saveOperations();
    
    return {
      operation: updatedOperation,
      success: true
    };
  },

  /**
   * –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async cancel(id: string): Promise<UpdateOperationResponse> {
    const operation = operationsData.find(op => op.id === id);
    if (!operation) {
      return {
        operation: null,
        success: false,
        error: '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      };
    }

    if (!OperationsBusinessLogic.canCancelOperation(operation)) {
      return {
        operation: null,
        success: false,
        error: '–û–ø–µ—Ä–∞—Ü–∏—é –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ'
      };
    }

    return this.updateStatus(id, 'cancelled');
  },

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async delete(id: string): Promise<boolean> {
    const index = operationsData.findIndex(op => op.id === id);
    if (index === -1) return false;
    
    operationsData.splice(index, 1);
    saveOperations();
    return true;
  },

  // === –£–¢–ò–õ–ò–¢–´ ===

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  async forceReload(): Promise<void> {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π...');
    operationsData = [...demoDataOperations];
    saveOperations();
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  getAvailablePaymentMethods(operationType: OperationType): PaymentMethod[] {
    return OperationsBusinessLogic.getAvailablePaymentMethods(operationType);
  },

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatForDisplay(operation: Operation) {
    return OperationsBusinessLogic.formatOperationForDisplay(operation);
  },

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  validateInput(input: OperationInput) {
    return OperationsBusinessLogic.validateOperationInput(input);
  },

  // === –ú–ò–ì–†–ê–¶–ò–Ø ===

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  async exportForMigration(): Promise<{
    operations: Operation[];
    count: number;
    exportDate: string;
  }> {
    return {
      operations: operationsData,
      count: operationsData.length,
      exportDate: new Date().toISOString()
    };
  },

  /**
   * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  async importFromMigration(operations: Operation[]): Promise<boolean> {
    try {
      operationsData = operations;
      saveOperations();
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
      return false;
    }
  },

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ë–î)
   */
  async clearLocalData(): Promise<void> {
    operationsData = [];
    PersistentStorage.remove('operations');
    console.log('üßπ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—â–µ–Ω—ã');
  }
};