/**
 * –ß–∏—Å—Ç—ã–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å Supabase –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
 */

interface DatabaseUser {
  id: string;
  email: string;
  name: string;
  phone?: string;
  status: string;
  pwd_salt: string;
  pwd_hash: string;
  user_roles: Array<{
    role: {
      id: number;
      name: string;
      code: string;
      permissions: string[];
    }
  }>;
  created_at: string;
  updated_at: string;
}

interface AppUser {
  id: string;
  email: string;
  name: string;
  phone?: string;
  status: string;
  role: string;
  roleId: number;
  permissions: string[];
}

class AuthService {
  private readonly SUPABASE_URL = 'https://ssvazdgnmatbdynkhkqo.supabase.co';
  private readonly SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzdmF6ZGdubWF0YmR5bmtoa3FvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzM0MzgzNCwiZXhwIjoyMDcyOTE5ODM0fQ.Gen-PI-vDkKjskpIvJNcQw0Uj3d0zGXB98zIxNK6di0';

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Supabase
   */
  private async makeRequest(endpoint: string, options: RequestInit = {}): Promise<any> {
    const url = `${this.SUPABASE_URL}/rest/v1/${endpoint}`;

    const response = await fetch(url, {
      ...options,
      headers: {
        'apikey': this.SUPABASE_KEY,
        'Authorization': `Bearer ${this.SUPABASE_KEY}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation',
        ...options.headers,
      },
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({}));
      throw new Error(`Database request failed: ${response.status} ${JSON.stringify(error)}`);
    }

    return response.json();
  }

  /**
   * –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–æ–ª—è–º–∏ (–Ω–æ–≤–∞—è —Å—Ö–µ–º–∞ –ë–î)
   */
  async getUserByEmail(email: string): Promise<DatabaseUser | null> {
    try {
      console.log('üîç AuthService: Searching for user with roles:', email);

      // –ù–û–í–ê–Ø –°–•–ï–ú–ê: –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—è–º–∏ —á–µ—Ä–µ–∑ –¥–∂–æ–π–Ω
      const users = await this.makeRequest(
        `users?select=*,user_roles(role:roles(*))&email=ilike.${encodeURIComponent(email)}&deleted_at=is.null&limit=1`
      );

      if (users.length === 0) {
        console.log('‚ùå AuthService: User not found');
        return null;
      }

      const user = users[0];
      console.log('‚úÖ AuthService: User found');
      console.log('üîç DEBUG: User roles from new schema:', user.user_roles);

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–æ–ª–∏ –∏–∑ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã –ë–î
      const userRoles = user.user_roles || [];
      console.log('üé≠ AuthService: User roles from database:', userRoles);

      return user;
    } catch (error) {
      console.error('‚ùå AuthService: Error finding user:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Å—Ç–æ–π SHA-256)
   */
  async verifyPassword(user: DatabaseUser, password: string): Promise<boolean> {
    if (!password || password.length < 1) {
      console.log('‚ùå AuthService: Empty password');
      return false;
    }

    if (!user.pwd_salt || !user.pwd_hash) {
      console.log('‚ùå AuthService: User has no password data');
      return false;
    }

    console.log('üîê AuthService: Verifying password with SHA-256...');

    try {
      // –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–∞—Ä–æ–ª—å + —Å–æ–ª—å
      const passwordWithSalt = password + user.pwd_salt;

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º SHA-256 –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ base64
      let computedHash: string;

      if (crypto && crypto.subtle) {
        const encoder = new TextEncoder();
        const data = encoder.encode(passwordWithSalt);
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        computedHash = btoa(String.fromCharCode(...hashArray));
      } else {
        // –ü—Ä–æ—Å—Ç–æ–π base64 fallback
        computedHash = btoa(passwordWithSalt);
      }

      const isValid = computedHash === user.pwd_hash;

      console.log(`üîç Password check result: ${isValid ? '‚úÖ Valid' : '‚ùå Invalid'}`);
      console.log(`üìù Input: "${password}" + "${user.pwd_salt}"`);
      console.log(`üîë Computed: ${computedHash.substring(0, 20)}...`);
      console.log(`üóÉÔ∏è Stored:   ${user.pwd_hash.substring(0, 20)}...`);

      return isValid;
    } catch (error) {
      console.error('‚ùå AuthService: Password verification error:', error);
      return false;
    }
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async authenticate(email: string, password: string): Promise<AppUser | null> {
    try {
      console.log('üîê AuthService: Authenticating user:', email);

      const dbUser = await this.getUserByEmail(email);
      if (!dbUser) {
        return null;
      }

      const isValidPassword = await this.verifyPassword(dbUser, password);
      if (!isValidPassword) {
        return null;
      }

      // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const appUser = this.transformUser(dbUser);
      console.log('‚úÖ AuthService: Authentication successful for:', appUser.email);

      return appUser;
    } catch (error) {
      console.error('‚ùå AuthService: Authentication error:', error);
      throw error;
    }
  }

  /**
   * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ù–û–í–ê–Ø –°–•–ï–ú–ê)
   */
  private transformUser(dbUser: DatabaseUser): AppUser {
    console.log('üîÑ AuthService: Transforming user with new DB schema');
    console.log('üîç DEBUG: dbUser.user_roles =', dbUser.user_roles);

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é (–æ—Å–Ω–æ–≤–Ω—É—é) —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã –ë–î
    const userRoles = dbUser.user_roles || [];
    const primaryRole = userRoles[0]?.role;

    let userRole = 'user';
    let roleId = 0;
    let permissions: string[] = [];

    if (primaryRole) {
      console.log('üé≠ AuthService: Found primary role:', primaryRole);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ —Ä–æ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î –∏–ª–∏ –∏–º—è —Ä–æ–ª–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
      userRole = primaryRole.code || primaryRole.name;
      roleId = primaryRole.id;
      permissions = primaryRole.permissions || [];

      // –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω —Ä–æ–ª–µ–π –Ω–∞ –∫–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω)
      if (!primaryRole.code) {
        const roleNameToCode: Record<string, string> = {
          '–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': 'super_admin',
          '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∏': 'network_admin',
          '–ú–µ–Ω–µ–¥–∂–µ—Ä': 'manager',
          '–û–ø–µ—Ä–∞—Ç–æ—Ä': 'operator',
          '–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–¢–û': 'bto_manager'
        };

        if (roleNameToCode[primaryRole.name]) {
          console.log('üé≠ –†–û–õ–¨ –ú–ê–ü–ü–ò–ù–ì:', primaryRole.name, '->', roleNameToCode[primaryRole.name]);
          userRole = roleNameToCode[primaryRole.name];
        }
      }
    } else {
      console.log('‚ö†Ô∏è AuthService: No roles found, using default role "user"');
    }

    const appUser = {
      id: dbUser.id,
      email: dbUser.email,
      name: dbUser.name,
      phone: dbUser.phone,
      status: dbUser.status,
      role: userRole,
      roleId: roleId,
      permissions: permissions
    };

    console.log('‚úÖ AuthService: Transformed user role:', userRole);
    return appUser;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ö–µ—à –¥–ª—è –ø–∞—Ä–æ–ª—è (SHA-256 –∏–ª–∏ base64)
   */
  async createPasswordHash(password: string, salt: string): Promise<string> {
    const passwordWithSalt = password + salt;

    if (crypto && crypto.subtle) {
      const encoder = new TextEncoder();
      const data = encoder.encode(passwordWithSalt);
      const hashBuffer = await crypto.subtle.digest('SHA-256', data);
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      return btoa(String.fromCharCode(...hashArray));
    } else {
      return btoa(passwordWithSalt);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å–æ–ª—å
   */
  generateSalt(): string {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async updateUserName(userId: string, newName: string): Promise<void> {
    try {
      console.log('üîÑ AuthService: Updating user name for:', userId);

      await this.makeRequest(`users?id=eq.${userId}`, {
        method: 'PATCH',
        body: JSON.stringify({
          name: newName.trim(),
          updated_at: new Date().toISOString()
        })
      });

      console.log('‚úÖ AuthService: User name updated successfully');
    } catch (error) {
      console.error('‚ùå AuthService: Error updating user name:', error);
      throw error;
    }
  }
}

export const authService = new AuthService();
export type { AppUser };