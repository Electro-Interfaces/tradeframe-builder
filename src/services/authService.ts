/**
 * –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –≥—Ä–∞–Ω—É–ª—è—Ä–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 * –û–ë–ù–û–í–õ–ï–ù: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É localStorage (mock) –∏ Supabase (database)
 */

import { CryptoUtils, type PasswordHash } from '@/utils/crypto'
import { PermissionChecker } from '@/utils/permissions'
import { persistentStorage } from '@/utils/persistentStorage'
import { apiConfigServiceDB } from './apiConfigServiceDB'
import { SupabaseAuthService } from './supabaseAuthService'
import { errorLogService } from './errorLogService'
import type {
  User,
  Session,
  Role,
  UserRole,
  LoginCredentials,
  CreateUserInput,
  ChangePasswordInput,
  PermissionAction,
  AuditLog
} from '@/types/auth'

export class AuthService {
  private static readonly SESSION_KEY = 'tradeframe_session'
  private static readonly USERS_KEY = 'tradeframe_users'
  private static readonly SESSIONS_KEY = 'tradeframe_sessions'
  private static readonly AUDIT_KEY = 'tradeframe_audit'
  
  private static readonly SESSION_DURATION = 8 * 60 * 60 * 1000 // 8 —á–∞—Å–æ–≤
  private static readonly REFRESH_DURATION = 30 * 24 * 60 * 60 * 1000 // 30 –¥–Ω–µ–π

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  static async initialize(): Promise<void> {
    try {
      await apiConfigServiceDB.initialize();
      console.log('‚úÖ AuthService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthService, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock —Ä–µ–∂–∏–º (localStorage)
   */
  private static async isMockMode(): Promise<boolean> {
    try {
      return await apiConfigServiceDB.isMockMode();
    } catch (error) {
      // ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
      await errorLogService.logCriticalError(
        'AuthService',
        'isMockMode',
        error instanceof Error ? error : new Error(String(error))
      );
      
      // ‚úÖ FAIL-SECURE: –ü—Ä–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
      throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã. –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.');
    }
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async login(credentials: LoginCredentials): Promise<{
    user: User
    session: Session
    token: string
  }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
      const isMock = await this.isMockMode();
      
      if (isMock) {
        // –†–µ–∂–∏–º localStorage (mock)
        console.log('üîÑ AuthService: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localStorage —Ä–µ–∂–∏–º');
        return await this.loginMock(credentials);
      } else {
        // –†–µ–∂–∏–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Supabase)
        console.log('üîÑ AuthService: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase —Ä–µ–∂–∏–º');
        return await this.loginSupabase(credentials);
      }
    } catch (error) {
      // ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –ù–ï–¢ FALLBACK –ù–ê MOCK –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Æ!
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —Å–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞:', error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      await errorLogService.logCriticalError(
        'AuthService',
        'login',
        error instanceof Error ? error : new Error(String(error)),
        {
          metadata: { 
            service: 'AuthService',
            email: credentials.email,
            securityEvent: 'AUTHENTICATION_SYSTEM_FAILURE'
          }
        }
      );
      
      // ‚úÖ FAIL-SECURE: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–∞ –ë–õ–û–ö–ò–†–£–ï–¢–°–Ø
      throw new Error('–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.');
    }
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ localStorage (mock —Ä–µ–∂–∏–º)
   */
  private static async loginMock(credentials: LoginCredentials): Promise<{
    user: User
    session: Session
    token: string
  }> {
    const users = await this.getUsers()
    const user = users.find(u => u.email === credentials.email && u.status === 'active' && !u.deleted_at)

    if (!user) {
      await this.logAudit('Auth.Login.Failed', 'User', undefined, { 
        email: credentials.email,
        reason: 'User not found or inactive' 
      })
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValidPassword = await CryptoUtils.verifyPassword(
      credentials.password,
      user.pwd_hash,
      user.pwd_salt
    )

    if (!isValidPassword) {
      await this.logAudit('Auth.Login.Failed', 'User', user.id, {
        email: credentials.email,
        reason: 'Invalid password'
      })
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    }

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    const now = new Date()
    const session: Session = {
      id: CryptoUtils.generateSessionToken(),
      user_id: user.id,
      tenant_id: user.tenant_id,
      issued_at: now,
      expires_at: new Date(now.getTime() + this.SESSION_DURATION),
      refresh_expires_at: new Date(now.getTime() + this.REFRESH_DURATION),
      is_active: true
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await this.updateUserLastLogin(user.id)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    await this.saveSession(session)

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è localStorage
    const tokenData = {
      user_id: user.id,
      tenant_id: user.tenant_id,
      issued_at: session.issued_at.getTime(),
      expires_at: session.expires_at.getTime()
    }
    const token = CryptoUtils.createSessionData(tokenData)

    await this.logAudit('Auth.Login.Success', 'User', user.id, {
      email: user.email,
      session_id: session.id
    })

    return { user, session, token }
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase (database —Ä–µ–∂–∏–º)
   */
  private static async loginSupabase(credentials: LoginCredentials): Promise<{
    user: User
    session: Session
    token: string
  }> {
    try {
      const authUser = await SupabaseAuthService.login(credentials.email, credentials.password);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SupabaseUser –≤ User –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const user: User = {
        id: authUser.id,
        tenant_id: authUser.networkId || 'default',
        email: authUser.email,
        name: authUser.name,
        status: 'active',
        roles: [{ role_code: authUser.role, permissions: authUser.permissions }],
        pwd_hash: '', // –Ω–µ –Ω—É–∂–Ω–æ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ
        pwd_salt: '', // –Ω–µ –Ω—É–∂–Ω–æ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ
        created_at: new Date(),
        updated_at: new Date(),
        last_login: new Date(),
        version: 1
      };

      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const now = new Date()
      const session: Session = {
        id: CryptoUtils.generateSessionToken(),
        user_id: user.id,
        tenant_id: user.tenant_id,
        issued_at: now,
        expires_at: new Date(now.getTime() + this.SESSION_DURATION),
        refresh_expires_at: new Date(now.getTime() + this.REFRESH_DURATION),
        is_active: true
      }

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
      const tokenData = {
        user_id: user.id,
        tenant_id: user.tenant_id,
        issued_at: session.issued_at.getTime(),
        expires_at: session.expires_at.getTime()
      }
      const token = CryptoUtils.createSessionData(tokenData)
      localStorage.setItem(this.SESSION_KEY, token)

      console.log('‚úÖ AuthService: Supabase –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      return { user, session, token }
    } catch (error) {
      console.error('‚ùå AuthService: –û—à–∏–±–∫–∞ Supabase –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  static async logout(sessionId?: string): Promise<void> {
    const currentSession = sessionId ? 
      await this.getSessionById(sessionId) : 
      await this.getCurrentSession()

    if (currentSession) {
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
      await this.deactivateSession(currentSession.id)
      
      await this.logAudit('Auth.Logout.Success', 'User', currentSession.user_id, {
        session_id: currentSession.id
      })
    }

    // –û—á–∏—â–∞–µ–º localStorage
    localStorage.removeItem(this.SESSION_KEY)
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async register(input: CreateUserInput): Promise<User> {
    try {
      const isMock = await this.isMockMode();
      
      if (isMock) {
        console.log('üîÑ AuthService: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ localStorage');
        return await this.registerMock(input);
      } else {
        console.log('üîÑ AuthService: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase');
        return await this.registerSupabase(input);
      }
    } catch (error) {
      // ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      await errorLogService.logCriticalError(
        'AuthService',
        'register',
        error instanceof Error ? error : new Error(String(error)),
        {
          metadata: { 
            email: input.email,
            securityEvent: 'USER_REGISTRATION_FAILURE'
          }
        }
      );
      
      // ‚úÖ FAIL-SECURE: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
      throw new Error('–°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.');
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ localStorage (mock —Ä–µ–∂–∏–º)
   */
  private static async registerMock(input: CreateUserInput): Promise<User> {
    const users = await this.getUsers()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
    const existingUser = users.find(u => u.email === input.email && !u.deleted_at)
    if (existingUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const passwordValidation = CryptoUtils.validatePasswordStrength(input.password)
    if (!passwordValidation.isValid) {
      throw new Error(`–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å: ${passwordValidation.errors.join(', ')}`)
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const passwordHash = await CryptoUtils.hashPassword(input.password)

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const now = new Date()
    const user: User = {
      id: CryptoUtils.generateSecureId(),
      tenant_id: input.tenant_id || 'default', // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      email: input.email,
      name: input.name,
      phone: input.phone,
      status: input.status || 'active',
      roles: [], // —Ä–æ–ª–∏ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ
      pwd_salt: passwordHash.salt,
      pwd_hash: passwordHash.hash,
      created_at: now,
      updated_at: now,
      version: 1
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users.push(user)
    await persistentStorage.setItem(this.USERS_KEY, users)

    await this.logAudit('User.Created', 'User', user.id, {
      email: user.email,
      name: user.name
    })

    return user
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase (database —Ä–µ–∂–∏–º)
   */
  private static async registerSupabase(input: CreateUserInput): Promise<User> {
    try {
      // ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨ –£–°–¢–†–ê–ù–ï–ù–ê: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º');
      await errorLogService.logCriticalError(
        'AuthService',
        'registerSupabase',
        new Error('Supabase —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'),
        {
          metadata: { 
            email: input.email,
            securityEvent: 'SUPABASE_REGISTRATION_NOT_IMPLEMENTED'
          }
        }
      );
      
      // ‚úÖ FAIL-SECURE: –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ –Ω–∞–¥–ª–µ–∂–∞—â–µ–π Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      throw new Error('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    } catch (error) {
      console.error('‚ùå AuthService: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Supabase:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getCurrentUser(): Promise<User | null> {
    try {
      const session = await this.getCurrentSession()
      if (!session) return null

      const isMock = await this.isMockMode();
      if (isMock) {
        return await this.getUserById(session.user_id)
      } else {
        // –í database —Ä–µ–∂–∏–º–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
        try {
          const authUser = await SupabaseAuthService.getCurrentUser();
          if (!authUser) return null;

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          const user: User = {
            id: authUser.id,
            tenant_id: authUser.networkId || 'default',
            email: authUser.email,
            name: authUser.name,
            status: 'active',
            roles: [{ role_code: authUser.role, permissions: authUser.permissions }],
            pwd_hash: '',
            pwd_salt: '',
            created_at: new Date(),
            updated_at: new Date(),
            version: 1
          };
          
          return user;
        } catch (error) {
          // ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
          console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase:', error);
          await errorLogService.logCriticalError(
            'AuthService',
            'getCurrentUser',
            error instanceof Error ? error : new Error(String(error)),
            {
              metadata: { 
                userId: session.user_id,
                securityEvent: 'USER_DATA_RETRIEVAL_FAILURE'
              }
            }
          );
          
          // ‚úÖ FAIL-SECURE: –ü—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
          throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
   */
  static async getCurrentSession(): Promise<Session | null> {
    const token = localStorage.getItem(this.SESSION_KEY)
    if (!token) return null

    const sessionData = CryptoUtils.parseSessionData(token)
    if (!sessionData || !CryptoUtils.isSessionValid(token)) {
      localStorage.removeItem(this.SESSION_KEY)
      return null
    }

    const session = await this.getSessionById(`session_${sessionData.user_id}`)
    if (!session || !session.is_active) {
      localStorage.removeItem(this.SESSION_KEY)
      return null
    }

    return session
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é (refresh token)
   */
  static async refreshSession(): Promise<string | null> {
    const currentSession = await this.getCurrentSession()
    if (!currentSession) return null

    const now = new Date()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ refresh token
    if (now > currentSession.refresh_expires_at) {
      await this.logout(currentSession.id)
      return null
    }

    // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    currentSession.expires_at = new Date(now.getTime() + this.SESSION_DURATION)
    await this.saveSession(currentSession)

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    const tokenData = {
      user_id: currentSession.user_id,
      tenant_id: currentSession.tenant_id,
      issued_at: currentSession.issued_at.getTime(),
      expires_at: currentSession.expires_at.getTime()
    }
    const token = CryptoUtils.createSessionData(tokenData)
    localStorage.setItem(this.SESSION_KEY, token)

    return token
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async hasPermission(
    section: string,
    resource: string,
    action: PermissionAction,
    context?: Record<string, any>
  ): Promise<boolean> {
    const user = await this.getCurrentUser()
    return PermissionChecker.hasPermission(user, section, resource, action, context)
  }

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
   */
  static async changePassword(input: ChangePasswordInput): Promise<void> {
    const users = await this.getUsers()
    const user = users.find(u => u.id === input.user_id && !u.deleted_at)

    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å
    const isValidOldPassword = await CryptoUtils.verifyPassword(
      input.old_password,
      user.pwd_hash,
      user.pwd_salt
    )

    if (!isValidOldPassword) {
      await this.logAudit('Auth.Password.Change.Failed', 'User', user.id, {
        reason: 'Invalid old password'
      })
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å')
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const passwordValidation = CryptoUtils.validatePasswordStrength(input.new_password)
    if (!passwordValidation.isValid) {
      throw new Error(`–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å: ${passwordValidation.errors.join(', ')}`)
    }

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const newPasswordHash = await CryptoUtils.hashPassword(input.new_password)

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    user.pwd_hash = newPasswordHash.hash
    user.pwd_salt = newPasswordHash.salt
    user.updated_at = new Date()
    user.version += 1

    await persistentStorage.setItem(this.USERS_KEY, users)

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π re-login)
    await this.deactivateAllUserSessions(user.id)

    await this.logAudit('Auth.Password.Changed', 'User', user.id, {
      email: user.email
    })
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private static async getUsers(): Promise<User[]> {
    return await persistentStorage.getItem(this.USERS_KEY) || []
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  static async getUserById(id: string): Promise<User | null> {
    const users = await this.getUsers()
    return users.find(u => u.id === id && !u.deleted_at) || null
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
   */
  static async getUserByEmail(email: string): Promise<User | null> {
    const users = await this.getUsers()
    return users.find(u => u.email === email && !u.deleted_at) || null
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é
   */
  private static async saveSession(session: Session): Promise<void> {
    const sessions = await persistentStorage.getItem<Session[]>(this.SESSIONS_KEY) || []
    const existingIndex = sessions.findIndex(s => s.id === session.id)
    
    if (existingIndex >= 0) {
      sessions[existingIndex] = session
    } else {
      sessions.push(session)
    }

    await persistentStorage.setItem(this.SESSIONS_KEY, sessions)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const tokenData = {
      user_id: session.user_id,
      tenant_id: session.tenant_id,
      issued_at: session.issued_at.getTime(),
      expires_at: session.expires_at.getTime()
    }
    localStorage.setItem(this.SESSION_KEY, CryptoUtils.createSessionData(tokenData))
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ ID
   */
  private static async getSessionById(id: string): Promise<Session | null> {
    const sessions = await persistentStorage.getItem<Session[]>(this.SESSIONS_KEY) || []
    return sessions.find(s => s.id === id) || null
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é
   */
  private static async deactivateSession(sessionId: string): Promise<void> {
    const sessions = await persistentStorage.getItem<Session[]>(this.SESSIONS_KEY) || []
    const session = sessions.find(s => s.id === sessionId)
    
    if (session) {
      session.is_active = false
      await persistentStorage.setItem(this.SESSIONS_KEY, sessions)
    }
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static async deactivateAllUserSessions(userId: string): Promise<void> {
    const sessions = await persistentStorage.getItem<Session[]>(this.SESSIONS_KEY) || []
    const userSessions = sessions.filter(s => s.user_id === userId)
    
    userSessions.forEach(session => {
      session.is_active = false
    })

    await persistentStorage.setItem(this.SESSIONS_KEY, sessions)
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
   */
  private static async updateUserLastLogin(userId: string): Promise<void> {
    const users = await this.getUsers()
    const user = users.find(u => u.id === userId)
    
    if (user) {
      user.last_login = new Date()
      user.updated_at = new Date()
      await persistentStorage.setItem(this.USERS_KEY, users)
    }
  }

  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∞—É–¥–∏—Ç
   */
  private static async logAudit(
    action: string,
    entityType: string,
    entityId?: string,
    details?: Record<string, any>
  ): Promise<void> {
    const auditLogs = await persistentStorage.getItem<AuditLog[]>(this.AUDIT_KEY) || []
    const currentUser = await this.getCurrentUser()
    
    const log: AuditLog = {
      id: CryptoUtils.generateSecureId(),
      tenant_id: currentUser?.tenant_id || 'system',
      user_id: currentUser?.id,
      action,
      entity_type: entityType,
      entity_id: entityId,
      new_values: details,
      created_at: new Date()
    }

    auditLogs.push(log)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
    if (auditLogs.length > 1000) {
      auditLogs.splice(0, auditLogs.length - 1000)
    }

    await persistentStorage.setItem(this.AUDIT_KEY, auditLogs)
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
   */
  static async cleanupExpiredSessions(): Promise<void> {
    const sessions = await persistentStorage.getItem<Session[]>(this.SESSIONS_KEY) || []
    const now = new Date()
    
    const activeSessions = sessions.filter(s => s.refresh_expires_at > now)
    await persistentStorage.setItem(this.SESSIONS_KEY, activeSessions)
  }
}