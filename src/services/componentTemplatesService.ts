import { ComponentTemplate, ComponentTemplateId } from '@/types/componentTemplate';
import { supabaseService as supabase } from './supabaseServiceClient';

const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç ComponentTemplate
const mapFromSupabase = (data: any): ComponentTemplate => ({
  id: data.id,
  name: data.name,
  code: data.technical_code,
  description: data.description || '',
  systemType: data.system_type,
  statusValues: data.default_params?.statusValues || ['OK', 'ERROR', 'OFFLINE'],
  isActive: data.is_active,
  created_at: data.created_at,
  updated_at: data.updated_at
});

// –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç Supabase
const mapToSupabase = (data: Partial<ComponentTemplate>) => ({
  name: data.name,
  technical_code: data.code,
  description: data.description,
  system_type: data.systemType,
  default_params: {
    statusValues: data.statusValues,
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
  },
  is_active: data.isActive,
  updated_at: new Date().toISOString()
});

export const componentTemplatesAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
  async list(): Promise<ComponentTemplate[]> {
    console.log('üîÑ Loading component templates from Supabase...');
    await delay(300);
    
    try {
      const { data, error } = await supabase
        .from('equipment_templates')
        .select('*')
        .order('name');

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
        throw error;
      }

      const mappedData = (data || []).map(mapFromSupabase);
      console.log('‚úÖ Loaded component templates from Supabase:', mappedData.length, 'items');
      return mappedData;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ componentTemplatesAPI.list:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ ID
  async get(id: ComponentTemplateId): Promise<ComponentTemplate | null> {
    console.log('üîç Getting component template by ID:', id);
    await delay(200);
    
    try {
      const { data, error } = await supabase
        .from('equipment_templates')
        .select('*')
        .eq('id', id)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          return null; // –ù–µ –Ω–∞–π–¥–µ–Ω
        }
        throw error;
      }

      const mappedData = mapFromSupabase(data);
      console.log('‚úÖ Component template found:', mappedData.name);
      return mappedData;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ componentTemplatesAPI.get:', error);
      return null;
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
  async create(data: Omit<ComponentTemplate, 'id' | 'created_at' | 'updated_at'>): Promise<ComponentTemplate> {
    console.log('‚ûï Creating component template:', data.name);
    await delay(500);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
      const { data: existingData } = await supabase
        .from('equipment_templates')
        .select('id')
        .eq('technical_code', data.code)
        .single();

      if (existingData) {
        throw new Error('Component template with this code already exists');
      }

      const supabaseData = mapToSupabase(data);
      const { data: insertedData, error } = await supabase
        .from('equipment_templates')
        .insert([supabaseData])
        .select('*')
        .single();

      if (error) {
        throw error;
      }

      const mappedData = mapFromSupabase(insertedData);
      console.log('‚úÖ Component template created:', mappedData.name);
      return mappedData;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ componentTemplatesAPI.create:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω
  async update(id: ComponentTemplateId, data: Partial<Omit<ComponentTemplate, 'id' | 'created_at'>>): Promise<ComponentTemplate | null> {
    console.log('‚úèÔ∏è Updating component template:', id);
    await delay(250);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      if (data.code) {
        const { data: existingData } = await supabase
          .from('equipment_templates')
          .select('id')
          .eq('technical_code', data.code)
          .neq('id', id)
          .single();

        if (existingData) {
          throw new Error('Component template with this code already exists');
        }
      }

      const supabaseData = mapToSupabase(data);
      const { data: updatedData, error } = await supabase
        .from('equipment_templates')
        .update(supabaseData)
        .eq('id', id)
        .select('*')
        .single();

      if (error) {
        throw error;
      }

      const mappedData = mapFromSupabase(updatedData);
      console.log('‚úÖ Component template updated:', mappedData.name);
      return mappedData;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ componentTemplatesAPI.update:', error);
      throw error;
    }
  },

  // –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω
  async delete(id: ComponentTemplateId): Promise<boolean> {
    console.log('üóëÔ∏è Deleting component template:', id);
    await delay(200);
    
    try {
      const { error } = await supabase
        .from('equipment_templates')
        .delete()
        .eq('id', id);

      if (error) {
        throw error;
      }

      console.log('‚úÖ Component template deleted');
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ componentTemplatesAPI.delete:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
  async getActive(): Promise<ComponentTemplate[]> {
    console.log('üîÑ Loading active component templates...');
    await delay(150);
    
    try {
      const { data, error } = await supabase
        .from('equipment_templates')
        .select('*')
        .eq('is_active', true)
        .order('name');

      if (error) {
        throw error;
      }

      const mappedData = (data || []).map(mapFromSupabase);
      console.log('‚úÖ Loaded active component templates:', mappedData.length, 'items');
      return mappedData;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ componentTemplatesAPI.getActive:', error);
      throw error;
    }
  },

  // –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤
  async search(query: string): Promise<ComponentTemplate[]> {
    console.log('üîç Searching component templates:', query);
    await delay(200);
    
    if (!query.trim()) {
      return this.list();
    }
    
    try {
      const searchTerm = `%${query.toLowerCase()}%`;
      const { data, error } = await supabase
        .from('equipment_templates')
        .select('*')
        .or(`name.ilike.${searchTerm},technical_code.ilike.${searchTerm},description.ilike.${searchTerm}`)
        .order('name');

      if (error) {
        throw error;
      }

      const mappedData = (data || []).map(mapFromSupabase);
      console.log('‚úÖ Found component templates:', mappedData.length, 'items');
      return mappedData;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ componentTemplatesAPI.search:', error);
      throw error;
    }
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
export const currentComponentTemplatesAPI = componentTemplatesAPI;