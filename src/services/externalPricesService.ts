/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º–∏)
 */

import { supabaseClient } from '@/lib/supabase/client';

// –¢–∏–ø—ã –¥–ª—è —Ü–µ–Ω –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
export interface ExternalPrice {
  id: string;
  fuel_type: string;
  fuel_code: string;
  price_net: number;
  vat_rate: number;
  price_gross: number;
  unit: string;
  valid_from: string;
  valid_to?: string;
  status: 'active' | 'scheduled' | 'expired' | 'cancelled';
  trading_point_id?: string;
  trading_point_name?: string;
  network_id?: string;
  created_at: string;
  updated_at: string;
}

interface ExternalPricesConfig {
  url: string;
  apiKey: string;
}

class ExternalPricesService {
  private config: ExternalPricesConfig | null = null;

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ localStorage
   */
  private getConfig(): ExternalPricesConfig {
    if (this.config) return this.config;

    const savedSettings = localStorage.getItem('externalDatabase');
    if (!savedSettings) {
      throw new Error('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    try {
      const parsed = JSON.parse(savedSettings);
      if (!parsed.url || !parsed.apiKey) {
        throw new Error('–ù–µ–ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      
      this.config = {
        url: parsed.url,
        apiKey: parsed.apiKey
      };
      
      return this.config;
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
   */
  isConfigured(): boolean {
    try {
      this.getConfig();
      return true;
    } catch {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API (Supabase)
   */
  async getPrices(params: {
    networkId?: string;
    tradingPointId?: string;
    fuelTypes?: string[];
    status?: string[];
  } = {}): Promise<ExternalPrice[]> {
    try {
      if (!this.isConfigured()) {
        throw new Error('–°–µ—Ä–≤–∏—Å –≤–Ω–µ—à–Ω–∏—Ö —Ü–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      console.log('üîÑ externalPricesService: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API...');
      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', params);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π Supabase –∫–ª–∏–µ–Ω—Ç
      if (!supabaseClient.isInitialized()) {
        const initialized = supabaseClient.initialize();
        if (!initialized) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase –∫–ª–∏–µ–Ω—Ç');
        }
      }

      // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const filters: Record<string, any> = {};
      
      if (params.networkId) {
        filters.network_id = params.networkId;
      }
      
      if (params.tradingPointId && params.tradingPointId !== 'all') {
        filters.trading_point_id = params.tradingPointId;
      }

      if (params.status && params.status.length > 0) {
        // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä in
        // –ù–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ—Å—Ç—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        filters.status = params.status[0];
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        filters.status = 'active';
      }

      const { data: prices, error } = await supabaseClient.select<ExternalPrice>(
        'fuel_prices', // –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase
        '*',
        {
          filters,
          orderBy: { column: 'valid_from', ascending: false },
          limit: 100,
          retryOptions: {
            maxRetries: 3,
            delay: 1000,
            backoff: true
          }
        }
      );

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω:', error);
        throw new Error(`–û—à–∏–±–∫–∞ API: ${error.message}`);
      }

      if (!prices || prices.length === 0) {
        console.log('‚ÑπÔ∏è –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
        return [];
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${prices.length} —Ü–µ–Ω –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API`);
      return prices;

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getPrices:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–Ω—ã –ø–æ ID
   */
  async getPriceById(id: string): Promise<ExternalPrice | null> {
    try {
      if (!supabaseClient.isInitialized()) {
        supabaseClient.initialize();
      }

      const { data: prices, error } = await supabaseClient.select<ExternalPrice>(
        'fuel_prices',
        '*',
        {
          filters: { id },
          limit: 1
        }
      );

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ API: ${error.message}`);
      }

      return prices && prices.length > 0 ? prices[0] : null;
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getPriceById:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
   */
  async createPrice(priceData: Omit<ExternalPrice, 'id' | 'created_at' | 'updated_at'>): Promise<ExternalPrice> {
    try {
      if (!supabaseClient.isInitialized()) {
        supabaseClient.initialize();
      }

      const newPrice = {
        ...priceData,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data: prices, error } = await supabaseClient.insert<ExternalPrice>(
        'fuel_prices',
        newPrice
      );

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω—ã: ${error.message}`);
      }

      if (!prices || prices.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–Ω—É');
      }

      console.log('‚úÖ –¶–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞:', prices[0].id);
      return prices[0];
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ createPrice:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
   */
  async updatePrice(id: string, updates: Partial<ExternalPrice>): Promise<ExternalPrice> {
    try {
      if (!supabaseClient.isInitialized()) {
        supabaseClient.initialize();
      }

      const updateData = {
        ...updates,
        updated_at: new Date().toISOString()
      };

      const { data: prices, error } = await supabaseClient.update<ExternalPrice>(
        'fuel_prices',
        updateData,
        { id }
      );

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã: ${error.message}`);
      }

      if (!prices || prices.length === 0) {
        throw new Error('–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      console.log('‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', id);
      return prices[0];
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ updatePrice:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–µ–Ω–∞–º
   */
  async getPricesStats(params: {
    networkId?: string;
    tradingPointId?: string;
  } = {}): Promise<{
    total: number;
    active: number;
    scheduled: number;
    expired: number;
    avgPrice: number;
  }> {
    try {
      const allPrices = await this.getPrices({
        ...params,
        status: undefined // –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      });

      const stats = {
        total: allPrices.length,
        active: allPrices.filter(p => p.status === 'active').length,
        scheduled: allPrices.filter(p => p.status === 'scheduled').length,
        expired: allPrices.filter(p => p.status === 'expired').length,
        avgPrice: 0
      };

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω
      const activePrices = allPrices.filter(p => p.status === 'active');
      if (activePrices.length > 0) {
        stats.avgPrice = activePrices.reduce((sum, p) => sum + p.price_gross, 0) / activePrices.length;
      }

      return stats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω:', error);
      return { total: 0, active: 0, scheduled: 0, expired: 0, avgPrice: 0 };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–º—É API
   */
  async testConnection(): Promise<{ success: boolean; error?: string }> {
    try {
      if (!this.isConfigured()) {
        return { success: false, error: '–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
      }

      const testResult = await supabaseClient.testConnection();
      return testResult;
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞
   */
  async getFuelTypes(): Promise<string[]> {
    try {
      const prices = await this.getPrices();
      const fuelTypes = [...new Set(prices.map(p => p.fuel_type))];
      return fuelTypes.sort();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞:', error);
      return [];
    }
  }
}

export const externalPricesService = new ExternalPricesService();