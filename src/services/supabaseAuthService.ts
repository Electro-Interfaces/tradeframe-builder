/**
 * –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Supabase
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

import { supabaseService } from '@/services/supabaseServiceClient';
import { createClient } from '@supabase/supabase-js';
import * as bcrypt from 'bcryptjs';

interface SupabaseUser {
  id: string;
  tenant_id: string;
  email: string;
  name: string;
  phone: string;
  status: string;
  pwd_salt: string;
  pwd_hash: string;
  preferences: any;
  last_login: string;
  created_at: string;
  updated_at: string;
  deleted_at: string | null;
}

export interface AuthUser {
  id: string;
  email: string;
  name: string;
  role: string;
  networkId?: string;
  tradingPointIds: string[];
  permissions: string[];
}

export class SupabaseAuthService {

  /**
   * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ email –∏ –ø–∞—Ä–æ–ª—å
   */
  static async login(email: string, password: string): Promise<AuthUser> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º service –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('üîê Attempting login with email:', email);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–æ–≤–∞—è —Å—Ö–µ–º–∞)
      const { data: users, error: userError } = await supabaseService
        .from('users')
        .select('*')
        .eq('email', email)
        .eq('status', 'active')
        .is('deleted_at', null)
        .limit(1);

      console.log('‚úÖ Query result:', { users, userError });

      if (userError) {
        console.error('‚ùå Supabase user query error:', userError);
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ' + userError);
      }

      if (!users || users.length === 0) {
        console.error('No users found for email:', email);
        // –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ deleted_at
        const { data: allUsers } = await supabaseService
          .from('users')
          .select('*')
          .eq('email', email)
          .limit(1);
        console.log('Users without deleted_at filter:', allUsers);
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      }

      const user: SupabaseUser = users[0];

      // –î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const demoUsers = {
        'admin@tradeframe.com': 'admin123',
        'network.admin@demo-azs.ru': 'admin123',
        'manager@demo-azs.ru': 'admin123',
        'operator@demo-azs.ru': 'admin123',
        'bto.manager@tradeframe.com': 'admin123',
        'superadmin@tradeframe.com': 'SuperAdmin2024!'
      };
      
      if (user.email in demoUsers) {
        // –î–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
        if (password !== demoUsers[user.email as keyof typeof demoUsers]) {
          throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å: ${demoUsers[user.email as keyof typeof demoUsers]}`);
        }
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à –ø–∞—Ä–æ–ª—è (–Ω–æ–≤–æ–µ –ø–æ–ª–µ pwd_hash)
        const isPasswordValid = await bcrypt.compare(password, user.pwd_hash);
        if (!isPasswordValid) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–ª—å –∏–∑ preferences (–Ω–æ–≤–∞—è —Å—Ö–µ–º–∞)
      const userRole = user.preferences?.role || 'operator';
      const userRoleId = user.preferences?.role_id;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
      const permissions = this.getRolePermissions(userRole);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const authUser: AuthUser = {
        id: user.id,
        email: user.email,
        name: user.name,
        role: userRole,
        networkId: user.tenant_id || undefined, // tenant_id —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ network_id
        tradingPointIds: user.preferences?.trading_point_ids || [],
        permissions
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      const rememberMe = sessionStorage.getItem('remember_me') === 'true';
      const storage = rememberMe ? localStorage : sessionStorage;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const token = this.generateAuthToken(authUser);
      const expiryTime = new Date(Date.now() + 60 * 60 * 1000); // 1 —á–∞—Å
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      storage.setItem('auth_user', JSON.stringify(authUser));
      storage.setItem('auth_token', token);
      storage.setItem('auth_token_expiry', expiryTime.toISOString());
      storage.setItem('auth_login', email);
      storage.setItem('auth_password', password); // –í production —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å refresh token
      
      console.log('User authenticated successfully:', authUser.email, authUser.role, 'tenant:', user.tenant_id);
      return authUser;

    } catch (error: any) {
      console.error('Login error:', error);
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   */
  static async getCurrentUser(): Promise<AuthUser | null> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
      // –î–ª—è –¥–µ–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –≤—Ö–æ–¥–∏–ª —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
      return null;
    } catch (error) {
      console.error('Get current user error:', error);
      return null;
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async logout(): Promise<void> {
    try {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      ['auth_user', 'auth_token', 'auth_token_expiry', 'auth_login', 'auth_password'].forEach(key => {
        localStorage.removeItem(key);
        sessionStorage.removeItem(key);
      });
      console.log('User logged out successfully');
    } catch (error) {
      console.error('Logout error:', error);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
   */
  private static generateAuthToken(user: AuthUser): string {
    const payload = {
      userId: user.id,
      email: user.email,
      role: user.role,
      networkId: user.networkId,
      permissions: user.permissions,
      exp: Math.floor(Date.now() / 1000) + 3600 // 1 —á–∞—Å
    };
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å JWT –ø–æ–¥–ø–∏—Å—ã–≤–∞–Ω–∏–µ
    return `token_${btoa(JSON.stringify(payload))}_${Date.now()}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
   */
  private static getRolePermissions(role: string): string[] {
    const rolePermissions: Record<string, string[]> = {
      'system_admin': [
        'users.read', 'users.create', 'users.update', 'users.delete',
        'networks.read', 'networks.create', 'networks.update', 'networks.delete',
        'trading_points.read', 'trading_points.create', 'trading_points.update', 'trading_points.delete',
        'equipment.read', 'equipment.create', 'equipment.update', 'equipment.delete',
        'operations.read', 'operations.create', 'operations.update', 'operations.delete',
        'reports.read', 'reports.create', 'reports.export',
        'settings.read', 'settings.update'
      ],
      'network_admin': [
        'users.read', 'users.create', 'users.update',
        'trading_points.read', 'trading_points.update',
        'equipment.read', 'equipment.update',
        'operations.read', 'operations.create', 'operations.update',
        'reports.read', 'reports.create', 'reports.export'
      ],
      'manager': [
        'operations.read', 'operations.create', 'operations.update',
        'equipment.read', 'equipment.update',
        'fuel_stocks.read', 'fuel_stocks.update',
        'reports.read', 'reports.create'
      ],
      'operator': [
        'operations.read', 'operations.create',
        'equipment.read',
        'fuel_stocks.read',
        'reports.read'
      ],
      'bto_manager': [
        'networks.read', 'trading_points.read', 'networks.view_bto', 'points.view_bto'
      ]
    };

    return rolePermissions[role] || ['basic.read'];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   */
  static hasPermission(user: AuthUser, permission: string): boolean {
    return user.permissions.includes(permission) || 
           user.permissions.includes('all') ||
           user.role === 'system_admin';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
   */
  static async getUsers(): Promise<SupabaseUser[]> {
    try {
      const { data: users, error } = await supabaseService
        .from('users')
        .select('*')
        .eq('status', 'active')
        .is('deleted_at', null)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Get users error:', error);
        return [];
      }

      return users || [];
    } catch (error) {
      console.error('Get users error:', error);
      return [];
    }
  }
}