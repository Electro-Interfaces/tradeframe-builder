import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import './styles/mobile.css'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ auth —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
// import './utils/authTestRunner' // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ localStorage
import './utils/localStorageReport'

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker –¥–ª—è PWA —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
if ('serviceWorker' in navigator && import.meta.env.PROD) {
  window.addEventListener('load', () => {
    const swPath = import.meta.env.PROD ? '/tradeframe-builder/sw.js' : '/sw.js';
    
    navigator.serviceWorker.register(swPath)
      .then((registration) => {
        console.log('‚úÖ SW registered:', registration.scope);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          if (newWorker) {
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                console.log('üîÑ New version available');
                // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
              }
            });
          }
        });
      })
      .catch((error) => {
        console.log('‚ùå SW registration failed:', error);
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ SW –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
        console.log('üì± App will continue without PWA features');
      });
  });
} else if (!('serviceWorker' in navigator)) {
  console.log('üö´ Service Worker not supported in this browser');
} else {
  console.log('üîß Service Worker disabled in development mode');
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
declare global {
  interface Window {
    resetDemoData: () => void;
  }
}

window.resetDemoData = () => {
  console.log('üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...');
  localStorage.clear();
  console.log('‚úÖ localStorage –æ—á–∏—â–µ–Ω');
  location.reload();
};

console.log('üí° –î–ª—è —Å–±—Ä–æ—Å–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏: resetDemoData()');

// –î–µ—Ç–µ–∫—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (typeof window !== 'undefined') {
  const userAgent = navigator.userAgent;
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
  const isWebView = /wv|WebView|Version.*Chrome/i.test(userAgent) && isMobile;
  const isStandalone = window.matchMedia('(display-mode: standalone)').matches || 
                      (window.navigator as any).standalone;
  
  console.log('üîç Browser Detection:', {
    userAgent: userAgent.substring(0, 50) + '...',
    isMobile,
    isWebView,
    isStandalone,
    viewport: `${window.innerWidth}x${window.innerHeight}`,
    cookiesEnabled: navigator.cookieEnabled,
    onLine: navigator.onLine
  });

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∏–∫—Å—ã –¥–ª—è WebView
  if (isWebView) {
    console.log('üì± WebView detected, applying fixes');
    document.documentElement.classList.add('webview-optimized');
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∏–∫—Å—ã –¥–ª—è PWA —Ä–µ–∂–∏–º–∞  
  if (isStandalone) {
    console.log('üì± PWA standalone mode detected');
    document.documentElement.classList.add('pwa-installed');
  }
}

// GitHub Pages SPA routing support
if (typeof window !== 'undefined') {
  const redirectPath = sessionStorage.getItem('redirectPath');
  if (redirectPath) {
    sessionStorage.removeItem('redirectPath');
    // Wait for the app to initialize, then navigate to the stored path
    setTimeout(() => {
      // Extract the path without the base
      let targetPath = redirectPath;
      if (targetPath.startsWith('/tradeframe-builder')) {
        targetPath = targetPath.substring('/tradeframe-builder'.length);
      }
      if (targetPath === '' || targetPath === '/') {
        targetPath = '/';
      }
      console.log('üîÑ Redirecting from 404 to:', targetPath);
      window.history.replaceState(null, '', targetPath);
      window.dispatchEvent(new Event('popstate'));
    }, 100);
  }
}

// –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ PULL-TO-REFRESH
if (typeof window !== 'undefined') {
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º pull-to-refresh –∂–µ—Å—Ç–∞–º–∏
  let startY = 0;
  
  document.addEventListener('touchstart', (e) => {
    startY = e.touches[0].clientY;
  }, { passive: false });
  
  document.addEventListener('touchmove', (e) => {
    const currentY = e.touches[0].clientY;
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è —Å–∫—Ä–æ–ª–ª–∏—Ç—å –≤–≤–µ—Ä—Ö –∫–æ–≥–¥–∞ —É–∂–µ –Ω–∞–≤–µ—Ä—Ö—É
    if (scrollTop === 0 && currentY > startY) {
      console.log('üö´ Preventing pull-to-refresh');
      e.preventDefault();
      e.stopPropagation();
    }
  }, { passive: false });
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è —Å–∫—Ä–æ–ª–ª–∞
  document.addEventListener('scroll', (e) => {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    if (scrollTop < 0) {
      window.scrollTo(0, 0);
      e.preventDefault();
      e.stopPropagation();
    }
  }, { passive: false });
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º refresh —á–µ—Ä–µ–∑ Meta-R, F5 –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
  document.addEventListener('keydown', (e) => {
    if ((e.ctrlKey && e.key === 'r') || e.key === 'F5') {
      console.log('üö´ Preventing keyboard refresh');
      e.preventDefault();
    }
  });
}

// –û—Ç–ª–∞–¥–∫–∞ pull-to-refresh –ø—Ä–æ–±–ª–µ–º—ã
if (typeof window !== 'undefined') {
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.addEventListener('beforeunload', (e) => {
    console.log('üö® [PULL-TO-REFRESH DEBUG] beforeunload triggered');
    const currentUser = localStorage.getItem('tradeframe_user') || localStorage.getItem('currentUser');
    const authToken = localStorage.getItem('authToken') || localStorage.getItem('auth_token');
    console.log('üö® [PULL-TO-REFRESH DEBUG] Auth data before unload:', {
      hasUser: !!currentUser,
      hasToken: !!authToken
    });
  });

  window.addEventListener('unload', (e) => {
    console.log('üö® [PULL-TO-REFRESH DEBUG] unload triggered');
  });

  window.addEventListener('pagehide', (e) => {
    console.log('üö® [PULL-TO-REFRESH DEBUG] pagehide triggered, persisted:', e.persisted);
  });

  window.addEventListener('pageshow', (e) => {
    console.log('üö® [PULL-TO-REFRESH DEBUG] pageshow triggered, persisted:', e.persisted);
    if (e.persisted) {
      // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ bfcache
      console.log('üö® [PULL-TO-REFRESH DEBUG] Page restored from bfcache');
      const currentUser = localStorage.getItem('tradeframe_user') || localStorage.getItem('currentUser');
      const authToken = localStorage.getItem('authToken') || localStorage.getItem('auth_token');
      console.log('üö® [PULL-TO-REFRESH DEBUG] Auth data after bfcache restore:', {
        hasUser: !!currentUser,
        hasToken: !!authToken
      });
    }
  });

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.addEventListener('visibilitychange', () => {
    console.log('üö® [PULL-TO-REFRESH DEBUG] visibilitychange:', document.visibilityState);
    if (document.visibilityState === 'visible') {
      const currentUser = localStorage.getItem('tradeframe_user') || localStorage.getItem('currentUser');
      const authToken = localStorage.getItem('authToken') || localStorage.getItem('auth_token');
      console.log('üö® [PULL-TO-REFRESH DEBUG] Auth data when visible:', {
        hasUser: !!currentUser,
        hasToken: !!authToken
      });
    }
  });

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ focus/blur
  window.addEventListener('focus', () => {
    console.log('üö® [PULL-TO-REFRESH DEBUG] window focus');
    const currentUser = localStorage.getItem('tradeframe_user') || localStorage.getItem('currentUser');
    const authToken = localStorage.getItem('authToken') || localStorage.getItem('auth_token');
    console.log('üö® [PULL-TO-REFRESH DEBUG] Auth data on focus:', {
      hasUser: !!currentUser,
      hasToken: !!authToken
    });
  });

  window.addEventListener('blur', () => {
    console.log('üö® [PULL-TO-REFRESH DEBUG] window blur');
  });
}

// –£–±–∏—Ä–∞–µ–º fallback loading –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–≥–¥–∞ React –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
const rootElement = document.getElementById("root")!;
if (rootElement.innerHTML.includes('app-loading')) {
  console.log('üéØ Clearing fallback loading indicator');
}

createRoot(rootElement).render(<App />);
