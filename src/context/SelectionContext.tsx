import React, { createContext, useContext, useEffect, useState } from "react";
import { networksService } from "@/services/networksService";
import { Network } from "@/types/network";

type SelectionContextValue = {
  selectedNetwork: Network | null;
  setSelectedNetwork: (networkId: string) => void;
  selectedTradingPoint: string;
  setSelectedTradingPoint: (v: string) => void;
  isAllTradingPoints: boolean;
};

const SelectionContext = createContext<SelectionContextValue | undefined>(undefined);

export function SelectionProvider({ children }: { children: React.ReactNode }) {
  const [selectedNetworkId, setSelectedNetworkId] = useState<string>("");
  const [selectedTradingPoint, setSelectedTradingPoint] = useState<string>("");

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–µ—Ç–∏ –ø–æ ID
  const [selectedNetwork, setSelectedNetworkState] = useState<Network | null>(null);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    if (!selectedNetworkId) {
      networksService.getAll().then(networks => {
        if (networks.length > 0) {
          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–µ—Ç—å —Å external_id = "1", –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
          const demoNetwork = networks.find(n => n.external_id === "1");
          const networkToSelect = demoNetwork || networks[0];
          console.log('üéØ –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:', networkToSelect);
          setSelectedNetworkId(networkToSelect.id);
        }
      }).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:', error);
      });
    }
  }, []);
  
  useEffect(() => {
    if (selectedNetworkId) {
      networksService.getById(selectedNetworkId)
        .then(network => {
          setSelectedNetworkState(network);
          console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç—å:', network);
        })
        .catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ç–∏:', error);
          setSelectedNetworkState(null);
          // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
          networksService.getAll().then(networks => {
            if (networks.length > 0) {
              console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Ç—å:', networks[0]);
              setSelectedNetworkId(networks[0].id);
            }
          });
        });
    } else {
      setSelectedNetworkState(null);
    }
  }, [selectedNetworkId]);

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è setSelectedNetwork, –∫–æ—Ç–æ—Ä–∞—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∏
  const handleSetSelectedNetwork = (networkId: string) => {
    setSelectedNetworkId(networkId);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∏
    if (selectedTradingPoint) {
      setSelectedTradingPoint("");
    }
  };

  // Hydrate from localStorage on first mount
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (typeof window !== 'undefined') {
      try {
        const savedNetwork = localStorage.getItem("tc:selectedNetwork");
        const savedTradingPoint = localStorage.getItem("tc:selectedTradingPoint");
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if (savedNetwork && savedNetwork.trim()) {
          console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç—å –∏–∑ localStorage:', savedNetwork);
          setSelectedNetworkId(savedNetwork);
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if (savedTradingPoint) {
          setSelectedTradingPoint(savedTradingPoint);
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è LocalStorage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', e);
      }
    }
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å selectedNetworkId

  // Persist to localStorage
  useEffect(() => {
    if (typeof window !== 'undefined') {
      try {
        localStorage.setItem("tc:selectedNetwork", selectedNetworkId || "");
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', e);
      }
    }
  }, [selectedNetworkId]);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      try {
        localStorage.setItem("tc:selectedTradingPoint", selectedTradingPoint || "");
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', e);
      }
    }
  }, [selectedTradingPoint]);

  const isAllTradingPoints = selectedTradingPoint === "all";

  const value: SelectionContextValue = {
    selectedNetwork,
    setSelectedNetwork: handleSetSelectedNetwork,
    selectedTradingPoint,
    setSelectedTradingPoint,
    isAllTradingPoints,
  };

  return (
    <SelectionContext.Provider value={value}>{children}</SelectionContext.Provider>
  );
}

export function useSelection() {
  const ctx = useContext(SelectionContext);
  if (!ctx) throw new Error("useSelection must be used within SelectionProvider");
  return ctx;
}

