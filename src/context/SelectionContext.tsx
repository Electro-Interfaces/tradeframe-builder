import React, { createContext, useContext, useEffect, useState } from "react";
import { networksService } from "@/services/networksService";
import { userPreferencesService } from "@/services/userPreferencesService";
import { AuthService } from "@/services/authService";
import { Network } from "@/types/network";

type SelectionContextValue = {
  selectedNetwork: Network | null;
  setSelectedNetwork: (networkId: string) => void;
  selectedTradingPoint: string;
  setSelectedTradingPoint: (v: string) => void;
  isAllTradingPoints: boolean;
  isLoading: boolean;
};

const SelectionContext = createContext<SelectionContextValue | undefined>(undefined);

export function SelectionProvider({ children }: { children: React.ReactNode }) {
  const [selectedNetworkId, setSelectedNetworkId] = useState<string>("");
  const [selectedTradingPoint, setSelectedTradingPoint] = useState<string>("all");
  const [selectedNetwork, setSelectedNetworkState] = useState<Network | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [preferencesLoaded, setPreferencesLoaded] = useState(false);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  useEffect(() => {
    async function loadUserPreferences() {
      try {
        setIsLoading(true);
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏—è
        const timeoutId = setTimeout(() => {
          console.warn('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º');
          setPreferencesLoaded(true);
          setIsLoading(false);
        }, 3000);
        
        const savedNetwork = localStorage.getItem('selectedNetworkId');
        const savedTradingPoint = localStorage.getItem('selectedTradingPoint');
        
        if (savedNetwork) {
          console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Ç—å –∏–∑ localStorage:', savedNetwork);
          setSelectedNetworkId(savedNetwork);
        }
        
        if (savedTradingPoint) {
          console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –∏–∑ localStorage:', savedTradingPoint);
          setSelectedTradingPoint(savedTradingPoint);
        } else {
          setSelectedTradingPoint("all");
        }
        
        setPreferencesLoaded(true);
        clearTimeout(timeoutId);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏–∑ localStorage:', error);
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!');
        setPreferencesLoaded(true);
        clearTimeout(timeoutId);
      } finally {
        setIsLoading(false);
      }
    }

    loadUserPreferences();
  }, []);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π
  useEffect(() => {
    async function loadDefaultNetwork() {
      if (!selectedNetworkId && preferencesLoaded) {
        try {
          console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–≤—ã–±–æ—Ä–∞...');
          const networks = await networksService.getAll();
          
          if (networks.length > 0) {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–µ—Ç—å —Å external_id = "1", –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
            const demoNetwork = networks.find(n => n.external_id === "1");
            const networkToSelect = demoNetwork || networks[0];
            console.log('üéØ –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', networkToSelect);
            
            setSelectedNetworkId(networkToSelect.id);
            setSelectedTradingPoint("all");
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await userPreferencesService.setNetworkSelection(networkToSelect.id, "all");
          } else {
            console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–µ—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è preferencesLoaded —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    const timer = setTimeout(() => {
      loadDefaultNetwork();
    }, 100);

    return () => clearTimeout(timer);
  }, [selectedNetworkId, preferencesLoaded]);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–µ—Ç–∏ –ø–æ ID
  useEffect(() => {
    async function loadNetworkById() {
      if (selectedNetworkId) {
        try {
          const network = await networksService.getById(selectedNetworkId);
          if (network) {
            setSelectedNetworkState(network);
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç—å:', network);
          } else {
            console.warn('‚ö†Ô∏è –°–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', selectedNetworkId);
            setSelectedNetworkState(null);
            
            // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            const networks = await networksService.getAll();
            if (networks.length > 0) {
              console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Ç—å:', networks[0]);
              setSelectedNetworkId(networks[0].id);
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ç–∏:', error);
          setSelectedNetworkState(null);
        }
      } else {
        setSelectedNetworkState(null);
      }
    }

    if (preferencesLoaded) {
      loadNetworkById();
    }
  }, [selectedNetworkId, preferencesLoaded]);

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ localStorage
  const handleSetSelectedNetwork = async (networkId: string) => {
    setSelectedNetworkId(networkId);
    setSelectedTradingPoint("all");
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('selectedNetworkId', networkId);
    localStorage.setItem('selectedTradingPoint', "all");
    console.log('‚úÖ –í—ã–±–æ—Ä —Å–µ—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:', networkId);
  };

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ localStorage
  const handleSetSelectedTradingPoint = async (tradingPointId: string) => {
    setSelectedTradingPoint(tradingPointId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('selectedTradingPoint', tradingPointId);
    console.log('‚úÖ –í—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:', tradingPointId);
  };

  const isAllTradingPoints = selectedTradingPoint === "all";

  const value: SelectionContextValue = {
    selectedNetwork,
    setSelectedNetwork: handleSetSelectedNetwork,
    selectedTradingPoint,
    setSelectedTradingPoint: handleSetSelectedTradingPoint,
    isAllTradingPoints,
    isLoading,
  };

  return (
    <SelectionContext.Provider value={value}>{children}</SelectionContext.Provider>
  );
}

export function useSelection() {
  const ctx = useContext(SelectionContext);
  if (!ctx) throw new Error("useSelection must be used within SelectionProvider");
  return ctx;
}

