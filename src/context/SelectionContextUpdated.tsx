import React, { createContext, useContext, useEffect, useState } from "react";
import { networksService } from "@/services/networksService";
import { userPreferencesService } from "@/services/userPreferencesService";
import { Network } from "@/types/network";

type SelectionContextValue = {
  selectedNetwork: Network | null;
  setSelectedNetwork: (networkId: string) => void;
  selectedTradingPoint: string;
  setSelectedTradingPoint: (v: string) => void;
  isAllTradingPoints: boolean;
  isLoading: boolean;
};

const SelectionContext = createContext<SelectionContextValue | undefined>(undefined);

export function SelectionProvider({ children }: { children: React.ReactNode }) {
  const [selectedNetworkId, setSelectedNetworkId] = useState<string>("");
  const [selectedTradingPoint, setSelectedTradingPoint] = useState<string>("all");
  const [selectedNetwork, setSelectedNetworkState] = useState<Network | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [preferencesLoaded, setPreferencesLoaded] = useState(false);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    async function loadUserPreferences() {
      try {
        setIsLoading(true);
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const savedNetwork = await userPreferencesService.getSelectedNetwork();
        const savedTradingPoint = await userPreferencesService.getSelectedTradingPoint();
        
        if (savedNetwork) {
          console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', savedNetwork);
          setSelectedNetworkId(savedNetwork);
        } else {
          console.log('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage...');
          
          // Fallback –Ω–∞ localStorage –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          const localNetwork = localStorage.getItem("tc:selectedNetwork");
          if (localNetwork && localNetwork.trim()) {
            console.log('üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å–µ—Ç—å –∏–∑ localStorage –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', localNetwork);
            setSelectedNetworkId(localNetwork);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await userPreferencesService.setSelectedNetwork(localNetwork);
          }
        }
        
        if (savedTradingPoint) {
          console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', savedTradingPoint);
          setSelectedTradingPoint(savedTradingPoint);
        } else {
          // Fallback –Ω–∞ localStorage –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
          const localTradingPoint = localStorage.getItem("tc:selectedTradingPoint");
          if (localTradingPoint) {
            console.log('üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –∏–∑ localStorage:', localTradingPoint);
            setSelectedTradingPoint(localTradingPoint);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await userPreferencesService.setSelectedTradingPoint(localTradingPoint);
          } else {
            setSelectedTradingPoint("all");
          }
        }
        
        setPreferencesLoaded(true);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        console.log('üîÑ Fallback –Ω–∞ localStorage...');
        
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
        try {
          const localNetwork = localStorage.getItem("tc:selectedNetwork");
          const localTradingPoint = localStorage.getItem("tc:selectedTradingPoint");
          
          if (localNetwork && localNetwork.trim()) {
            setSelectedNetworkId(localNetwork);
          }
          
          if (localTradingPoint) {
            setSelectedTradingPoint(localTradingPoint);
          } else {
            setSelectedTradingPoint("all");
          }
          
          setPreferencesLoaded(true);
          
        } catch (localError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å localStorage:', localError);
          setPreferencesLoaded(true);
        }
      } finally {
        setIsLoading(false);
      }
    }

    loadUserPreferences();
  }, []);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π
  useEffect(() => {
    async function loadDefaultNetwork() {
      if (!selectedNetworkId && preferencesLoaded) {
        try {
          const networks = await networksService.getAll();
          if (networks.length > 0) {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–µ—Ç—å —Å external_id = "1", –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
            const demoNetwork = networks.find(n => n.external_id === "1");
            const networkToSelect = demoNetwork || networks[0];
            console.log('üéØ –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', networkToSelect);
            
            setSelectedNetworkId(networkToSelect.id);
            setSelectedTradingPoint("all");
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await userPreferencesService.setNetworkSelection(networkToSelect.id, "all");
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
        }
      }
    }

    loadDefaultNetwork();
  }, [selectedNetworkId, preferencesLoaded]);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–µ—Ç–∏ –ø–æ ID
  useEffect(() => {
    async function loadNetworkById() {
      if (selectedNetworkId) {
        try {
          const network = await networksService.getById(selectedNetworkId);
          if (network) {
            setSelectedNetworkState(network);
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç—å:', network);
          } else {
            console.warn('‚ö†Ô∏è –°–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', selectedNetworkId);
            setSelectedNetworkState(null);
            
            // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            const networks = await networksService.getAll();
            if (networks.length > 0) {
              console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Ç—å:', networks[0]);
              setSelectedNetworkId(networks[0].id);
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ç–∏:', error);
          setSelectedNetworkState(null);
        }
      } else {
        setSelectedNetworkState(null);
      }
    }

    if (preferencesLoaded) {
      loadNetworkById();
    }
  }, [selectedNetworkId, preferencesLoaded]);

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è setSelectedNetwork, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É
  const handleSetSelectedNetwork = async (networkId: string) => {
    try {
      setSelectedNetworkId(networkId);
      setSelectedTradingPoint("all");
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await userPreferencesService.setNetworkSelection(networkId, "all");
      console.log('‚úÖ –í—ã–±–æ—Ä —Å–µ—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', networkId);
      
      // Fallback —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
      localStorage.setItem("tc:selectedNetwork", networkId);
      localStorage.setItem("tc:selectedTradingPoint", "all");
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏:', error);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ localStorage
      try {
        localStorage.setItem("tc:selectedNetwork", networkId);
        localStorage.setItem("tc:selectedTradingPoint", "all");
        console.log('‚ö†Ô∏è –í—ã–±–æ—Ä —Å–µ—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –≤ localStorage');
      } catch (localError) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', localError);
      }
    }
  };

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è setSelectedTradingPoint, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const handleSetSelectedTradingPoint = async (tradingPointId: string) => {
    try {
      setSelectedTradingPoint(tradingPointId);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await userPreferencesService.setSelectedTradingPoint(tradingPointId);
      console.log('‚úÖ –í—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', tradingPointId);
      
      // Fallback —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
      localStorage.setItem("tc:selectedTradingPoint", tradingPointId);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', error);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ localStorage
      try {
        localStorage.setItem("tc:selectedTradingPoint", tradingPointId);
        console.log('‚ö†Ô∏è –í—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –≤ localStorage');
      } catch (localError) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', localError);
      }
    }
  };

  const isAllTradingPoints = selectedTradingPoint === "all";

  const value: SelectionContextValue = {
    selectedNetwork,
    setSelectedNetwork: handleSetSelectedNetwork,
    selectedTradingPoint,
    setSelectedTradingPoint: handleSetSelectedTradingPoint,
    isAllTradingPoints,
    isLoading,
  };

  return (
    <SelectionContext.Provider value={value}>{children}</SelectionContext.Provider>
  );
}

export function useSelection() {
  const ctx = useContext(SelectionContext);
  if (!ctx) throw new Error("useSelection must be used within SelectionProvider");
  return ctx;
}