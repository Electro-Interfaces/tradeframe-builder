/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –¥–ª—è TradeFrame Builder
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ development –∏ production —Ä–µ–∂–∏–º–æ–≤
 */

import { supabaseService } from '@/services/supabaseServiceClient';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || 'https://tohtryzyffcebtyvkxwh.supabase.co';
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || '';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå Supabase configuration missing!');
  console.error('   Please check your .env files:');
  console.error('   - VITE_SUPABASE_URL should be set');
  console.error('   - VITE_SUPABASE_ANON_KEY should be set');
  throw new Error('Supabase configuration is incomplete');
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
const isDevelopment = import.meta.env.DEV;
const useSupabaseDirect = import.meta.env.VITE_USE_SUPABASE_DIRECT === 'true';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π service –∫–ª–∏–µ–Ω—Ç
export const supabase = supabaseService;

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export const supabaseConfig = {
  url: SUPABASE_URL,
  isDevelopment,
  useSupabaseDirect,
  keyType: SUPABASE_ANON_KEY.includes('"role":"service_role"') ? 'SERVICE_ROLE' : 'ANON',
  schema: 'public'
};

// Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development)
if (isDevelopment && import.meta.env.VITE_DEBUG_MODE === 'true') {
  console.log('üîß Supabase Configuration:', {
    url: supabaseConfig.url,
    keyType: supabaseConfig.keyType,
    isDevelopment,
    useSupabaseDirect
  });
  
  if (supabaseConfig.keyType === 'SERVICE_ROLE') {
    console.log('‚ö° Using SERVICE ROLE KEY - Full database access!');
  } else {
    console.log('üîë Using ANON KEY - Normal user access');
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase
 */
export async function testSupabaseConnection() {
  console.log('üîç Testing Supabase connection...');
  
  try {
    const result = await supabase.testConnection();
    
    if (result.success) {
      console.log('‚úÖ Supabase connection successful!', result.info);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü
      const tablesResult = await supabase.select('equipment_templates', { limit: 1 });
      if (tablesResult.error) {
        console.warn('‚ö†Ô∏è Table access limited:', tablesResult.error);
        return { success: true, warning: 'Limited table access', details: result.info };
      } else {
        console.log('‚úÖ Table access confirmed');
        return { success: true, details: result.info };
      }
      
    } else {
      console.error('‚ùå Supabase connection failed:', result.error);
      return { success: false, error: result.error };
    }
    
  } catch (error) {
    const errorMsg = error instanceof Error ? error.message : String(error);
    console.error('‚ùå Supabase connection test error:', errorMsg);
    return { success: false, error: errorMsg };
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
 */
export async function getAvailableTables() {
  try {
    const result = await supabase.getTables();
    
    if (result.error) {
      console.warn('‚ö†Ô∏è Could not fetch tables list:', result.error);
      return { success: false, error: result.error };
    }
    
    const tables = result.data?.map(t => t.table_name) || [];
    console.log(`üìã Available tables (${tables.length}):`, tables);
    
    return { success: true, tables };
    
  } catch (error) {
    const errorMsg = error instanceof Error ? error.message : String(error);
    console.error('‚ùå Error fetching tables:', errorMsg);
    return { success: false, error: errorMsg };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 */
export async function checkTableAccess(tableName: string) {
  try {
    const result = await supabase.select(tableName, { limit: 1 });
    
    if (result.error) {
      console.warn(`‚ö†Ô∏è Table '${tableName}' access issue:`, result.error);
      return { accessible: false, error: result.error };
    }
    
    console.log(`‚úÖ Table '${tableName}' is accessible`);
    return { accessible: true, sampleData: result.data?.[0] };
    
  } catch (error) {
    const errorMsg = error instanceof Error ? error.message : String(error);
    console.error(`‚ùå Error checking table '${tableName}':`, errorMsg);
    return { accessible: false, error: errorMsg };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default supabase;