/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
 */

import { networksService } from '@/services/networksService';
import { tradingPointsService } from '@/services/tradingPointsService';
import { operationsService } from '@/services/operationsSupabaseService';
import { usersSupabaseService } from '@/services/usersSupabaseService';
import { shiftReportsSupabaseService } from '@/services/shiftReportsSupabaseService';
import { messagesService } from '@/services/messagesSupabaseService';
import { componentStatusService } from '@/services/componentStatusSupabaseService';
import { tanksService } from '@/services/tanksServiceSupabase';
import { pricesService } from '@/services/pricesSupabaseService';
import { commandsService } from '@/services/commandsService';

interface TestResult {
  service: string;
  status: 'success' | 'error';
  message: string;
  data?: any;
}

export async function testAllServices(): Promise<TestResult[]> {
  const results: TestResult[] = [];

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º networks service
  try {
    const networks = await networksService.getAll();
    results.push({
      service: 'networksService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${networks.length} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–µ–π`,
      data: networks.slice(0, 2)
    });
  } catch (error) {
    results.push({
      service: 'networksService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º trading points service
  try {
    const points = await tradingPointsService.getAll();
    results.push({
      service: 'tradingPointsService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${points.length} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫`,
      data: points.slice(0, 2)
    });
  } catch (error) {
    results.push({
      service: 'tradingPointsService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º operations service
  try {
    const operations = await operationsService.getAll();
    results.push({
      service: 'operationsSupabaseService', 
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`,
      data: operations.slice(0, 2)
    });
  } catch (error) {
    results.push({
      service: 'operationsSupabaseService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º users service
  try {
    const users = await usersSupabaseService.getAllUsers();
    results.push({
      service: 'usersSupabaseService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      data: users.slice(0, 2)
    });
  } catch (error) {
    results.push({
      service: 'usersSupabaseService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º shift reports service
  try {
    const shifts = await shiftReportsSupabaseService.getAllShiftReports();
    results.push({
      service: 'shiftReportsSupabaseService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${shifts.length} —Å–º–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤`,
      data: shifts.slice(0, 2)
    });
  } catch (error) {
    results.push({
      service: 'shiftReportsSupabaseService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º messages service
  try {
    const messages = await messagesService.getAllChatMessages();
    const tickets = await messagesService.getAllTickets();
    const notifications = await messagesService.getAllNotifications();
    results.push({
      service: 'messagesService',
      status: 'success',
      message: `–°–æ–æ–±—â–µ–Ω–∏—è: ${messages.length}, –¢–∏–∫–µ—Ç—ã: ${tickets.length}, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notifications.length}`,
      data: { messages: messages.slice(0, 1), tickets: tickets.slice(0, 1) }
    });
  } catch (error) {
    results.push({
      service: 'messagesService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º component status service
  try {
    const statuses = await componentStatusService.getAll();
    results.push({
      service: 'componentStatusService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${statuses.length} —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`,
      data: statuses.slice(0, 2)
    });
  } catch (error) {
    results.push({
      service: 'componentStatusService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º tanks service
  try {
    const tanks = await tanksService.getTanks();
    results.push({
      service: 'tanksServiceSupabase',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${tanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤`,
      data: tanks.slice(0, 2)
    });
  } catch (error) {
    results.push({
      service: 'tanksServiceSupabase',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º prices service
  try {
    const prices = await pricesService.getCurrentPrices();
    results.push({
      service: 'pricesSupabaseService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${prices.length} —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω`,
      data: prices.slice(0, 2)
    });
  } catch (error) {
    results.push({
      service: 'pricesSupabaseService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º commands service
  try {
    const commands = await commandsService.getAllCommands();
    const workflows = await commandsService.getAllWorkflows();
    results.push({
      service: 'commandTemplatesSupabaseService',
      status: 'success',
      message: `–ö–æ–º–∞–Ω–¥—ã: ${commands.length}, –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã: ${workflows.length}`,
      data: { commands: commands.slice(0, 1), workflows: workflows.slice(0, 1) }
    });
  } catch (error) {
    results.push({
      service: 'commandTemplatesSupabaseService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  return results;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
export function logTestResults(results: TestResult[]) {
  console.group('üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤');
  
  const successCount = results.filter(r => r.status === 'success').length;
  const errorCount = results.filter(r => r.status === 'error').length;
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount} | ‚ùå –û—à–∏–±–∫–∏: ${errorCount}`);
  console.log('');
  
  results.forEach(result => {
    const icon = result.status === 'success' ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${result.service}: ${result.message}`);
    
    if (result.data && result.status === 'success') {
      console.log('   –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', result.data);
    }
  });
  
  console.groupEnd();
  
  return { successCount, errorCount, total: results.length };
}