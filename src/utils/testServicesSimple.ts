/**
 * –ü—Ä–æ—Å—Ç–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
 */

interface TestResult {
  service: string;
  status: 'success' | 'error';
  message: string;
  data?: any;
}

export async function testBasicServices(): Promise<TestResult[]> {
  const results: TestResult[] = [];

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ –æ–¥–Ω–æ–º—É
  try {
    const { networksService } = await import('@/services/networksService');
    const networks = await networksService.getAll();
    results.push({
      service: 'networksService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${networks.length} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–µ–π`,
      data: networks.slice(0, 1)
    });
  } catch (error) {
    results.push({
      service: 'networksService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  try {
    const { tradingPointsService } = await import('@/services/tradingPointsService');
    const points = await tradingPointsService.getAll();
    results.push({
      service: 'tradingPointsService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${points.length} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫`,
      data: points.slice(0, 1)
    });
  } catch (error) {
    results.push({
      service: 'tradingPointsService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
  try {
    const { usersService } = await import('@/services/usersService');
    const users = await usersService.getAllUsers();
    results.push({
      service: 'usersService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      data: users.slice(0, 1)
    });
  } catch (error) {
    results.push({
      service: 'usersService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  try {
    const { operationsService } = await import('@/services/operationsService');
    const operations = await operationsService.getAll();
    results.push({
      service: 'operationsService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`,
      data: operations.slice(0, 1)
    });
  } catch (error) {
    results.push({
      service: 'operationsService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  try {
    const { shiftReportsService } = await import('@/services/shiftReportsService');
    const shifts = await shiftReportsService.getAllShiftReports();
    results.push({
      service: 'shiftReportsService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${shifts.length} —Å–º–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤`,
      data: shifts.slice(0, 1)
    });
  } catch (error) {
    results.push({
      service: 'shiftReportsService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  try {
    const { messagesService } = await import('@/services/messagesService');
    const messages = await messagesService.getAllChatMessages();
    const tickets = await messagesService.getAllTickets();
    const notifications = await messagesService.getAllNotifications();
    results.push({
      service: 'messagesService',
      status: 'success',
      message: `–°–æ–æ–±—â–µ–Ω–∏—è: ${messages.length}, –¢–∏–∫–µ—Ç—ã: ${tickets.length}, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notifications.length}`,
      data: { messages: messages.slice(0, 1), tickets: tickets.slice(0, 1) }
    });
  } catch (error) {
    results.push({
      service: 'messagesService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  try {
    const { tanksService } = await import('@/services/tanksService');
    const tanks = await tanksService.getTanks();
    results.push({
      service: 'tanksService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${tanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤`,
      data: tanks.slice(0, 1)
    });
  } catch (error) {
    results.push({
      service: 'tanksService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  try {
    const { pricesService } = await import('@/services/pricesService');
    const prices = await pricesService.getCurrentPrices();
    results.push({
      service: 'pricesService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${prices.length} —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω`,
      data: prices.slice(0, 1)
    });
  } catch (error) {
    results.push({
      service: 'pricesService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  try {
    const { commandsService } = await import('@/services/commandsService');
    const commands = await commandsService.getAllCommands();
    const workflows = await commandsService.getAllWorkflows();
    results.push({
      service: 'commandsService',
      status: 'success',
      message: `–ö–æ–º–∞–Ω–¥—ã: ${commands.length}, –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã: ${workflows.length}`,
      data: { commands: commands.slice(0, 1), workflows: workflows.slice(0, 1) }
    });
  } catch (error) {
    results.push({
      service: 'commandsService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  try {
    const { componentStatusService } = await import('@/services/componentStatusService');
    const statuses = await componentStatusService.getAll();
    results.push({
      service: 'componentStatusService',
      status: 'success',
      message: `–ù–∞–π–¥–µ–Ω–æ ${statuses.length} —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`,
      data: statuses.slice(0, 1)
    });
  } catch (error) {
    results.push({
      service: 'componentStatusService',
      status: 'error',
      message: `–û—à–∏–±–∫–∞: ${error}`
    });
  }

  return results;
}

export function logTestResults(results: TestResult[]) {
  console.group('üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤');
  
  const successCount = results.filter(r => r.status === 'success').length;
  const errorCount = results.filter(r => r.status === 'error').length;
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount} | ‚ùå –û—à–∏–±–∫–∏: ${errorCount}`);
  
  results.forEach(result => {
    const icon = result.status === 'success' ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${result.service}: ${result.message}`);
  });
  
  console.groupEnd();
  
  return { successCount, errorCount, total: results.length };
}