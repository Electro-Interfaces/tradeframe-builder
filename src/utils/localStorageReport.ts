/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
 */

export class LocalStorageReport {
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ localStorage
   */
  static generateReport(): void {
    console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –î–ê–ù–ù–´–• –í LOCALSTORAGE');
    console.log('=' .repeat(60));

    // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = this.getStorageStatistics();
    console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`- –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: ${stats.totalKeys}`);
    console.log(`- TradeFrame –∫–ª—é—á–µ–π: ${stats.tradeframeKeys}`);
    console.log(`- –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${(stats.totalSize / 1024).toFixed(2)} KB`);
    console.log(`- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${stats.usagePercent.toFixed(1)}%`);

    // 2. –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
    console.log('\nüóÇÔ∏è –°–û–î–ï–†–ñ–ò–ú–û–ï –•–†–ê–ù–ò–õ–ò–©–ê:');
    stats.keys.forEach(keyInfo => {
      console.log(`\nüìÅ ${keyInfo.key}`);
      console.log(`   –†–∞–∑–º–µ—Ä: ${(keyInfo.size / 1024).toFixed(2)} KB`);
      console.log(`   –ó–∞–ø–∏—Å–µ–π: ${keyInfo.count}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${keyInfo.lastModified}`);
      
      if (keyInfo.preview) {
        console.log('   –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:', keyInfo.preview);
      }
    });

    // 3. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = this.analyzeUsers();
    if (users.length > 0) {
      console.log('\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í –°–ò–°–¢–ï–ú–ï:');
      console.log('=' .repeat(60));
      users.forEach((user, index) => {
        console.log(`\n${index + 1}. ${user.name} (${user.email})`);
        console.log(`   ID: ${user.id}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${user.status}`);
        console.log(`   –†–æ–ª–∏: ${user.roles.map(r => r.role_name).join(', ')}`);
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${user.last_login ? new Date(user.last_login).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}`);
      });
    }

    // 4. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–æ–ª–µ–π
    const roles = this.analyzeRoles();
    if (roles.length > 0) {
      console.log('\nüé≠ –†–û–õ–ò –í –°–ò–°–¢–ï–ú–ï:');
      console.log('=' .repeat(60));
      roles.forEach((role, index) => {
        console.log(`\n${index + 1}. ${role.name} (${role.code})`);
        console.log(`   ID: ${role.id}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${role.description}`);
        console.log(`   –û–±–ª–∞—Å—Ç—å: ${role.scope}`);
        console.log(`   –¢–∏–ø: ${role.is_system ? '–°–∏—Å—Ç–µ–º–Ω–∞—è' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è'}`);
        console.log(`   –ê–∫—Ç–∏–≤–Ω–∞: ${role.is_active ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`   –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${role.permissions.length}`);
        
        // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        if (role.permissions.length > 0 && role.permissions.length <= 5) {
          console.log('   –†–∞–∑—Ä–µ—à–µ–Ω–∏—è:');
          role.permissions.forEach(perm => {
            console.log(`     - ${perm.section}.${perm.resource}: [${perm.actions.join(', ')}]`);
          });
        }
      });
    }

    // 5. –ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π
    const sessions = this.analyzeSessions();
    if (sessions.length > 0) {
      console.log('\nüîê –ê–ö–¢–ò–í–ù–´–ï –°–ï–°–°–ò–ò:');
      console.log('=' .repeat(60));
      sessions.forEach((session, index) => {
        console.log(`\n${index + 1}. –°–µ—Å—Å–∏—è ${session.id}`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.user_id}`);
        console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${new Date(session.issued_at).toLocaleString('ru-RU')}`);
        console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(session.expires_at).toLocaleString('ru-RU')}`);
        console.log(`   –ê–∫—Ç–∏–≤–Ω–∞: ${session.is_active ? '–î–∞' : '–ù–µ—Ç'}`);
      });
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò:');
    console.log('=' .repeat(60));
    const integrity = this.checkDataIntegrity();
    integrity.forEach(check => {
      const icon = check.passed ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${check.name}: ${check.message}`);
    });

    console.log('\n' + '=' .repeat(60));
    console.log('üìã –û–¢–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ö—Ä–∞–Ω–∏–ª–∏—â—É
   */
  private static getStorageStatistics(): any {
    const keys: any[] = [];
    let totalSize = 0;
    let tradeframeKeys = 0;

    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (!key) continue;

      const value = localStorage.getItem(key);
      const size = (key.length + (value?.length || 0)) * 2;
      totalSize += size;

      if (key.startsWith('tradeframe_')) {
        tradeframeKeys++;
        
        let count = 0;
        let lastModified = 'Unknown';
        let preview = null;

        try {
          const parsed = JSON.parse(value || '{}');
          
          if (parsed.data && Array.isArray(parsed.data)) {
            count = parsed.data.length;
          }
          
          if (parsed.metadata?.lastModified) {
            lastModified = new Date(parsed.metadata.lastModified).toLocaleString('ru-RU');
          }

          // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
          const keyName = key.replace('tradeframe_', '');
          if (keyName === 'users' && parsed.data?.[0]) {
            preview = `${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
          } else if (keyName === 'roles' && parsed.data?.[0]) {
            preview = `${count} —Ä–æ–ª–µ–π`;
          } else if (keyName === 'sessions' && parsed.data?.[0]) {
            const activeSessions = parsed.data.filter((s: any) => s.is_active).length;
            preview = `${activeSessions} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑ ${count}`;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        }

        keys.push({
          key,
          size,
          count,
          lastModified,
          preview
        });
      }
    }

    const limitBytes = 5 * 1024 * 1024; // 5MB
    const usagePercent = (totalSize / limitBytes) * 100;

    return {
      totalKeys: localStorage.length,
      tradeframeKeys,
      totalSize,
      usagePercent,
      keys
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private static analyzeUsers(): any[] {
    try {
      const stored = localStorage.getItem('tradeframe_users');
      if (!stored) return [];
      
      const parsed = JSON.parse(stored);
      return parsed.data || [];
    } catch (error) {
      return [];
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏
   */
  private static analyzeRoles(): any[] {
    try {
      const stored = localStorage.getItem('tradeframe_roles');
      if (!stored) return [];
      
      const parsed = JSON.parse(stored);
      return parsed.data || [];
    } catch (error) {
      return [];
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏
   */
  private static analyzeSessions(): any[] {
    try {
      const stored = localStorage.getItem('tradeframe_sessions');
      if (!stored) return [];
      
      const parsed = JSON.parse(stored);
      return parsed.data || [];
    } catch (error) {
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
   */
  private static checkDataIntegrity(): Array<{name: string, passed: boolean, message: string}> {
    const checks: Array<{name: string, passed: boolean, message: string}> = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π
    const requiredKeys = ['tradeframe_users', 'tradeframe_roles'];
    requiredKeys.forEach(key => {
      const exists = localStorage.getItem(key) !== null;
      checks.push({
        name: `–ö–ª—é—á ${key}`,
        passed: exists,
        message: exists ? '–ù–∞–π–¥–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      });
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    try {
      const users = JSON.parse(localStorage.getItem('tradeframe_users') || '{}');
      const hasUserData = users.data && Array.isArray(users.data);
      checks.push({
        name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        passed: hasUserData,
        message: hasUserData ? `${users.data.length} –∑–∞–ø–∏—Å–µ–π` : '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
      });
    } catch (error) {
      checks.push({
        name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        passed: false,
        message: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
      });
    }

    try {
      const roles = JSON.parse(localStorage.getItem('tradeframe_roles') || '{}');
      const hasRoleData = roles.data && Array.isArray(roles.data);
      checks.push({
        name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–æ–ª–µ–π',
        passed: hasRoleData,
        message: hasRoleData ? `${roles.data.length} –∑–∞–ø–∏—Å–µ–π` : '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
      });
    } catch (error) {
      checks.push({
        name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–æ–ª–µ–π',
        passed: false,
        message: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–æ–ª–µ–π
    try {
      const roles = JSON.parse(localStorage.getItem('tradeframe_roles') || '{}');
      if (roles.data && Array.isArray(roles.data)) {
        const systemRoles = roles.data.filter((r: any) => r.is_system);
        const hasAllSystemRoles = systemRoles.length >= 5;
        checks.push({
          name: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏',
          passed: hasAllSystemRoles,
          message: `${systemRoles.length} –∏–∑ 5 —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–æ–ª–µ–π`
        });
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try {
      const users = JSON.parse(localStorage.getItem('tradeframe_users') || '{}');
      if (users.data && Array.isArray(users.data)) {
        const superAdmin = users.data.find((u: any) => 
          u.roles?.some((r: any) => r.role_code === 'super_admin')
        );
        checks.push({
          name: '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          passed: !!superAdmin,
          message: superAdmin ? `${superAdmin.email}` : '–ù–µ –Ω–∞–π–¥–µ–Ω'
        });
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    }

    return checks;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ auth —Å–∏—Å—Ç–µ–º—ã
   */
  static clearAuthData(): void {
    const keysToRemove = [
      'tradeframe_users',
      'tradeframe_roles',
      'tradeframe_sessions',
      'tradeframe_audit',
      'tradeframe_session'
    ];

    keysToRemove.forEach(key => {
      localStorage.removeItem(key);
    });

    console.log('üßπ –î–∞–Ω–Ω—ã–µ auth —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—â–µ–Ω—ã');
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ development
if (import.meta.env.DEV) {
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  (window as any).authReport = () => LocalStorageReport.generateReport();
  (window as any).clearAuth = () => LocalStorageReport.clearAuthData();
  
  console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏:');
  console.log('   authReport() - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –¥–∞–Ω–Ω—ã—Ö auth —Å–∏—Å—Ç–µ–º—ã');
  console.log('   clearAuth() - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ auth —Å–∏—Å—Ç–µ–º—ã');
}