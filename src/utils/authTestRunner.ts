/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã auth —Å–∏—Å—Ç–µ–º—ã –≤ localStorage
 */

import { AuthService } from '@/services/authService'
import { RoleService } from '@/services/roleService'
import { UserService } from '@/services/userService'
import { CryptoTesting } from '@/utils/crypto'

export class AuthTestRunner {
  static async runFullSystemTest(): Promise<{
    success: boolean
    results: Record<string, any>
    errors: string[]
  }> {
    const results: Record<string, any> = {}
    const errors: string[] = []

    console.log('üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è auth —Å–∏—Å—Ç–µ–º—ã...')

    try {
      // 1. –¢–µ—Å—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...')
      const cryptoTest = await CryptoTesting.testPasswordHashing()
      const idTest = CryptoTesting.testSecureIdGeneration()
      results.crypto = { passwordHashing: cryptoTest, secureIdGeneration: idTest }

      if (!cryptoTest || !idTest) {
        errors.push('–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏')
      }

      // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–æ–ª–µ–π
      console.log('2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–æ–ª–µ–π...')
      const systemRoles = await RoleService.createDefaultSystemRoles('default_tenant')
      results.systemRoles = {
        created: systemRoles.length,
        roles: systemRoles.map(r => ({ code: r.code, name: r.name }))
      }
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${systemRoles.length} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–æ–ª–µ–π`)

      // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
      const testUsers = await UserService.createTestUsers('default_tenant')
      results.testUsers = {
        created: testUsers.length,
        users: testUsers.map(u => ({ email: u.email, name: u.name, status: u.status }))
      }
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${testUsers.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)

      // 4. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('4Ô∏è‚É£ –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...')
      const loginResult = await AuthService.login({
        email: 'admin@tradeframe.ru',
        password: 'Admin123!'
      })

      results.login = {
        user: {
          email: loginResult.user.email,
          name: loginResult.user.name,
          roles: loginResult.user.roles.length
        },
        sessionValid: !!loginResult.session,
        tokenGenerated: !!loginResult.token
      }
      console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ: ${loginResult.user.email}`)

      // 5. –¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      console.log('5Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...')
      const hasAllPermissions = await AuthService.hasPermission('*', '*', 'manage')
      const hasNetworkPermissions = await AuthService.hasPermission('networks', 'networks', 'read')
      const hasNoPermissions = await AuthService.hasPermission('admin', 'system', 'delete')

      results.permissions = {
        allPermissions: hasAllPermissions, // –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true –¥–ª—è super_admin
        networkPermissions: hasNetworkPermissions, // –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true
        restrictedPermissions: hasNoPermissions // –º–æ–∂–µ—Ç –±—ã—Ç—å true –¥–ª—è super_admin
      }

      // 6. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      console.log('6Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
      const userStats = await UserService.getUserStatistics()
      const roleStats = await RoleService.getRoleStatistics()

      results.statistics = {
        totalUsers: userStats.totalUsers,
        activeUsers: userStats.activeUsers,
        totalRoles: roleStats.totalRoles,
        systemRoles: roleStats.systemRoles
      }

      // 7. –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      console.log('7Ô∏è‚É£ –¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...')
      await AuthService.logout()
      const currentUser = await AuthService.getCurrentUser()
      results.logout = {
        userAfterLogout: currentUser === null
      }
      console.log(`‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω`)

      // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage
      console.log('8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage...')
      const localStorageKeys = []
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i)
        if (key?.startsWith('tradeframe_')) {
          localStorageKeys.push(key)
        }
      }

      results.localStorage = {
        keysFound: localStorageKeys.length,
        keys: localStorageKeys
      }

      console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!')
      return { success: errors.length === 0, results, errors }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
      errors.push(`–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`)
      return { success: false, results, errors }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ localStorage
   */
  static inspectLocalStorage(): Record<string, any> {
    const inspection: Record<string, any> = {
      keys: [],
      sizes: {},
      totalSize: 0
    }

    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i)
      if (key?.startsWith('tradeframe_')) {
        const value = localStorage.getItem(key)
        const size = (key.length + (value?.length || 0)) * 2 // approximate bytes
        
        inspection.keys.push(key)
        inspection.sizes[key] = {
          size,
          hasData: !!value,
          preview: value ? JSON.parse(value).metadata?.lastModified : null
        }
        inspection.totalSize += size
      }
    }

    console.log('üìä –ò–Ω—Å–ø–µ–∫—Ü–∏—è localStorage:', inspection)
    return inspection
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  static async clearTestData(): Promise<void> {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
    
    const keysToRemove: string[] = []
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i)
      if (key?.startsWith('tradeframe_')) {
        keysToRemove.push(key)
      }
    }

    keysToRemove.forEach(key => localStorage.removeItem(key))
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${keysToRemove.length} –∫–ª—é—á–µ–π –∏–∑ localStorage`)
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  static exportAllData(): Record<string, any> {
    const exportData: Record<string, any> = {}
    
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i)
      if (key?.startsWith('tradeframe_')) {
        const value = localStorage.getItem(key)
        if (value) {
          try {
            exportData[key] = JSON.parse(value)
          } catch (error) {
            exportData[key] = { error: 'Failed to parse', raw: value }
          }
        }
      }
    }

    console.log('üì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', exportData)
    return exportData
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤ development
if (import.meta.env.DEV) {
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  setTimeout(async () => {
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è auth —Å–∏—Å—Ç–µ–º—ã...')
    const testResult = await AuthTestRunner.runFullSystemTest()
    
    if (testResult.success) {
      console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!')
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', testResult.results)
      
      // –ò–Ω—Å–ø–µ–∫—Ü–∏—è localStorage
      AuthTestRunner.inspectLocalStorage()
    } else {
      console.error('‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò')
      console.error('üêõ –û—à–∏–±–∫–∏:', testResult.errors)
    }
  }, 2000)
}