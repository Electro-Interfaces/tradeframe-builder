import React, { useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ComposedChart, Area } from 'recharts';
import { TrendingUp, TrendingDown, Target, AlertTriangle, Lightbulb } from 'lucide-react';
import { useIsMobile } from '@/hooks/use-mobile';

interface Transaction {
  id: number;
  startTime?: string;
  timestamp?: string;
  createdAt?: string;
  date?: string;
  total?: number;
  actualAmount?: number;
  totalCost?: number;
  volume?: number;
  actualQuantity?: number;
  quantity?: number;
  fuelType?: string;
  paymentMethod?: string;
}

interface SalesForecastProps {
  transactions: Transaction[];
  className?: string;
}

interface ChartDataPoint {
  date: string;
  historical?: number;
  forecast?: number;
  confidenceUpper?: number;
  confidenceLower?: number;
  displayDate: string;
}

interface ForecastSummary {
  tomorrowRevenue: number;
  weeklyRevenue: number;
  confidence: number;
  trend: 'up' | 'down' | 'stable';
  trendPercentage: number;
  recommendations: string[];
}

export function SalesForecast({ transactions, className }: SalesForecastProps) {
  const isMobile = useIsMobile();

  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
  const { chartData, summary } = useMemo(() => {
    console.log('üîÆ SalesForecast: –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏:', transactions?.length || 0);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (transactions && transactions.length > 0) {
      console.log('üîç SalesForecast: –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactions.slice(0, 3).map((tx, i) => ({
        index: i,
        id: tx.id,
        startTime: tx.startTime,
        timestamp: tx.timestamp,
        date: tx.date,
        total: tx.total,
        actualAmount: tx.actualAmount,
        volume: tx.volume,
        fuelType: tx.fuelType
      })));
    }
    
    if (!transactions || transactions.length === 0) {
      console.log('‚ö†Ô∏è SalesForecast: –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑');
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const today = new Date();
      const baseRevenue = 75000; // –ë–∞–∑–æ–≤–∞—è –¥–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞
      const chartData: ChartDataPoint[] = [];
      
      // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ 0 –∏–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
      for (let i = 6; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(today.getDate() - i);
        
        chartData.push({
          date: date.toISOString().split('T')[0],
          displayDate: date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' }),
          historical: i === 0 ? baseRevenue * 0.3 : 0, // –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ
        });
      }
      
      // –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–Ω–∏ (—Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π)
      for (let i = 1; i <= 7; i++) {
        const date = new Date(today);
        date.setDate(today.getDate() + i);
        const variation = 0.8 + Math.random() * 0.4; // ¬±20% –≤–∞—Ä–∏–∞—Ü–∏—è
        const forecastValue = baseRevenue * variation;
        
        chartData.push({
          date: date.toISOString().split('T')[0],
          displayDate: date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' }),
          forecast: forecastValue,
          confidenceUpper: forecastValue * 1.25,
          confidenceLower: forecastValue * 0.75,
        });
      }
      
      const summary: ForecastSummary = {
        tomorrowRevenue: baseRevenue,
        weeklyRevenue: baseRevenue * 7,
        confidence: 30,
        trend: 'stable',
        trendPercentage: 0,
        recommendations: [
          'üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞',
          'üîÑ –ù–∞—á–Ω–∏—Ç–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤',
          'üìà –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö –æ—Ç—Ä–∞—Å–ª–∏'
        ]
      };
      
      return { chartData, summary };
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üìä SalesForecast: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    const dailyRevenue = new Map<string, number>();
    const dailyVolume = new Map<string, number>();
    const dailyCount = new Map<string, number>();
    
    transactions.forEach((tx, index) => {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –¥–∞—Ç—ã (–∫–∞–∫ –≤ STS API)
      const txTime = tx.startTime || tx.timestamp || tx.createdAt || tx.date;
      
      if (!txTime) {
        console.warn(`üö´ SalesForecast: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${index} –±–µ–∑ –¥–∞—Ç—ã:`, tx);
        return;
      }
      
      const txDate = new Date(txTime);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
      if (isNaN(txDate.getTime())) {
        console.warn(`üö´ SalesForecast: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${index}:`, txTime, tx);
        return;
      }
      
      const dateKey = txDate.toISOString().split('T')[0]; // YYYY-MM-DD format
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å—É–º–º—ã
      const revenue = tx.total || tx.actualAmount || tx.totalCost || 0;
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±—ä–µ–º–∞
      const volume = tx.volume || tx.actualQuantity || tx.quantity || 0;
      
      if (revenue > 0) {
        dailyRevenue.set(dateKey, (dailyRevenue.get(dateKey) || 0) + revenue);
        dailyVolume.set(dateKey, (dailyVolume.get(dateKey) || 0) + volume);
        dailyCount.set(dateKey, (dailyCount.get(dateKey) || 0) + 1);
      }
    });

    console.log('üìÖ SalesForecast: –î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º:', {
      daysWithData: dailyRevenue.size,
      totalDays: Array.from(dailyRevenue.keys()),
      dailyTotals: Array.from(dailyRevenue.entries()).map(([date, revenue]) => ({
        date, 
        revenue: Math.round(revenue)
      }))
    });

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π + –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π)
    const today = new Date();
    const chartData: ChartDataPoint[] = [];
    
    // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    const historicalRevenues: number[] = [];
    
    for (let i = 6; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(today.getDate() - i);
      const dateKey = date.toISOString().split('T')[0];
      const revenue = dailyRevenue.get(dateKey) || 0;
      
      if (revenue > 0) {
        historicalRevenues.push(revenue);
      }
      
      chartData.push({
        date: dateKey,
        displayDate: date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' }),
        historical: revenue > 0 ? revenue : undefined, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
      });
    }

    console.log('üìà SalesForecast: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–æ—Ö–æ–¥—ã –¥–ª—è —Ç—Ä–µ–Ω–¥–∞:', historicalRevenues);

    // –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
    let avgRevenue = 50000; // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    let trend: 'up' | 'down' | 'stable' = 'stable';
    let trendPercentage = 0;
    let confidence = 40;

    if (historicalRevenues.length >= 2) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –≤—ã—Ä—É—á–∫—É
      avgRevenue = historicalRevenues.reduce((sum, rev) => sum + rev, 0) / historicalRevenues.length;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö)
      const mid = Math.floor(historicalRevenues.length / 2);
      const firstHalf = historicalRevenues.slice(0, mid);
      const secondHalf = historicalRevenues.slice(mid);
      
      const firstAvg = firstHalf.reduce((sum, rev) => sum + rev, 0) / firstHalf.length;
      const secondAvg = secondHalf.reduce((sum, rev) => sum + rev, 0) / secondHalf.length;
      
      trendPercentage = ((secondAvg - firstAvg) / firstAvg) * 100;
      trend = trendPercentage > 5 ? 'up' : trendPercentage < -5 ? 'down' : 'stable';
      confidence = Math.min(90, Math.max(50, 70 + historicalRevenues.length * 3));
      
      console.log('üìä SalesForecast: –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞:', {
        avgRevenue: Math.round(avgRevenue),
        firstAvg: Math.round(firstAvg),
        secondAvg: Math.round(secondAvg),
        trend,
        trendPercentage: Math.round(trendPercentage),
        confidence
      });
    } else if (historicalRevenues.length === 1) {
      avgRevenue = historicalRevenues[0];
      confidence = 60;
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π)
    const trendMultiplier = 1 + (trendPercentage / 100);
    
    for (let i = 1; i <= 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–µ–Ω–¥ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é
      const baseForecast = avgRevenue * Math.pow(trendMultiplier, i / 7); // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
      const variation = 0.85 + Math.random() * 0.3; // ¬±15% —Å–ª—É—á–∞–π–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è
      const forecastValue = baseForecast * variation;
      
      chartData.push({
        date: date.toISOString().split('T')[0],
        displayDate: date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' }),
        forecast: forecastValue,
        confidenceUpper: forecastValue * (1 + (100 - confidence) / 200), // –ß–µ–º –Ω–∏–∂–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —Ç–µ–º —à–∏—Ä–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        confidenceLower: forecastValue * (1 - (100 - confidence) / 200),
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations: string[] = [];
    
    if (historicalRevenues.length < 3) {
      recommendations.push('üìä –ù–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞');
    }
    
    if (trend === 'up') {
      recommendations.push(`üìà –ü—Ä–æ–¥–∞–∂–∏ —Ä–∞—Å—Ç—É—Ç –Ω–∞ ${Math.round(Math.abs(trendPercentage))}%! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫`);
    } else if (trend === 'down') {
      recommendations.push(`üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞ ${Math.round(Math.abs(trendPercentage))}%. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã`);
    } else {
      recommendations.push('üìä –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–µ –æ–±—ä–µ–º—ã');
    }
    
    recommendations.push('‚õΩ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–ø–ª–∏–≤–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º');

    const summary: ForecastSummary = {
      tomorrowRevenue: avgRevenue * trendMultiplier,
      weeklyRevenue: avgRevenue * trendMultiplier * 7,
      confidence: Math.round(confidence),
      trend,
      trendPercentage: Math.round(trendPercentage),
      recommendations
    };

    console.log('‚úÖ SalesForecast: –ì–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:', {
      chartDataLength: chartData.length,
      historicalPoints: chartData.filter(d => d.historical !== undefined).length,
      forecastPoints: chartData.filter(d => d.forecast !== undefined).length,
      summary
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç SalesForecast: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ chartData:');
    chartData.forEach((point, index) => {
      if (point.historical !== undefined) {
        console.log(`  üìà –ò—Å—Ç–æ—Ä–∏—è [${index}]: ${point.displayDate} = ${Math.round(point.historical)}‚ÇΩ`);
      }
      if (point.forecast !== undefined) {
        console.log(`  üîÆ –ü—Ä–æ–≥–Ω–æ–∑ [${index}]: ${point.displayDate} = ${Math.round(point.forecast)}‚ÇΩ`);
      }
    });

    return { chartData, summary };
  }, [transactions]);

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'up': return <TrendingUp className="w-4 h-4 text-green-500" />;
      case 'down': return <TrendingDown className="w-4 h-4 text-red-500" />;
      default: return <Target className="w-4 h-4 text-yellow-500" />;
    }
  };

  const getTrendColor = (trend: string) => {
    switch (trend) {
      case 'up': return 'text-green-500';
      case 'down': return 'text-red-500';
      default: return 'text-yellow-500';
    }
  };

  return (
    <div className={`space-y-6 ${className}`}>
      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ */}
      <div className={`grid gap-4 ${isMobile ? 'grid-cols-1' : 'grid-cols-2 lg:grid-cols-3'}`}>
        <Card>
          <CardContent className={`${isMobile ? 'p-3' : 'p-4'}`}>
            <div className={`flex ${isMobile ? 'flex-col text-center space-y-2' : 'items-center justify-between'}`}>
              <div>
                <p className={`text-slate-400 ${isMobile ? 'text-xs' : 'text-sm'}`}>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</p>
                <p className={`font-bold text-white ${isMobile ? 'text-xl' : 'text-2xl'}`}>
                  {Math.round(summary.tomorrowRevenue).toLocaleString('ru-RU')} ‚ÇΩ
                </p>
              </div>
              <div className="flex items-center space-x-1">
                {getTrendIcon(summary.trend)}
                <span className={`${isMobile ? 'text-xs' : 'text-sm'} ${getTrendColor(summary.trend)}`}>
                  {summary.trendPercentage > 0 ? '+' : ''}{summary.trendPercentage}%
                </span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className={`${isMobile ? 'p-3' : 'p-4'}`}>
            <div className={`flex ${isMobile ? 'flex-col text-center space-y-2' : 'items-center justify-between'}`}>
              <div>
                <p className={`text-slate-400 ${isMobile ? 'text-xs' : 'text-sm'}`}>–ù–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑</p>
                <p className={`font-bold text-white ${isMobile ? 'text-xl' : 'text-2xl'}`}>
                  {Math.round(summary.weeklyRevenue).toLocaleString('ru-RU')} ‚ÇΩ
                </p>
              </div>
              <Target className={`text-blue-400 ${isMobile ? 'w-6 h-6' : 'w-8 h-8'}`} />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className={`${isMobile ? 'p-3' : 'p-4'}`}>
            <div className={`flex ${isMobile ? 'flex-col text-center space-y-2' : 'items-center justify-between'}`}>
              <div>
                <p className={`text-slate-400 ${isMobile ? 'text-xs' : 'text-sm'}`}>–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞</p>
                <p className={`font-bold text-white ${isMobile ? 'text-xl' : 'text-2xl'}`}>{summary.confidence}%</p>
                <Badge variant={summary.confidence > 75 ? "default" : "secondary"} className={`${isMobile ? 'text-[10px]' : 'text-xs'}`}>
                  {summary.confidence > 75 ? "–í—ã—Å–æ–∫–∞—è" : summary.confidence > 50 ? "–°—Ä–µ–¥–Ω—è—è" : "–ù–∏–∑–∫–∞—è"}
                </Badge>
              </div>
              <AlertTriangle className={`${summary.confidence > 75 ? 'text-green-400' : summary.confidence > 50 ? 'text-yellow-400' : 'text-red-400'} ${isMobile ? 'w-6 h-6' : 'w-8 h-8'}`} />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ */}
      <Card>
        <CardHeader className={`${isMobile ? 'pb-2' : ''}`}>
          <CardTitle className={`flex items-center space-x-2 ${isMobile ? 'text-base' : ''}`}>
            <TrendingUp className="w-5 h-5" />
            <span>–ü—Ä–æ–¥–∞–∂–∏: –ò—Å—Ç–æ—Ä–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π</span>
          </CardTitle>
        </CardHeader>
        <CardContent className={`${isMobile ? 'px-2' : ''}`}>
          <ResponsiveContainer width="100%" height={isMobile ? 280 : 350}>
            <ComposedChart 
              data={chartData} 
              margin={isMobile ? { top: 10, right: 10, left: 10, bottom: 10 } : { top: 20, right: 30, left: 20, bottom: 20 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis 
                dataKey="displayDate" 
                stroke="#9CA3AF"
                fontSize={isMobile ? 10 : 12}
                angle={isMobile ? -45 : 0}
                textAnchor={isMobile ? 'end' : 'middle'}
                height={isMobile ? 60 : 40}
              />
              <YAxis 
                stroke="#9CA3AF"
                fontSize={isMobile ? 10 : 12}
                tickFormatter={(value) => `${Math.round(value / 1000)}k`}
                width={isMobile ? 40 : 70}
              />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1F2937', 
                  border: '1px solid #374151',
                  color: '#F9FAFB',
                  fontSize: isMobile ? '12px' : '14px'
                }}
                formatter={(value: number, name: string) => {
                  if (value === null || value === undefined) return ['', ''];
                  const formattedValue = `${Math.round(value).toLocaleString('ru-RU')} ‚ÇΩ`;
                  const label = name === 'historical' ? '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏' : 
                              name === 'forecast' ? '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂' : 
                              name === 'confidenceUpper' ? '–í–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª' : '–ù–∏–∂–Ω–∏–π –ø—Ä–µ–¥–µ–ª';
                  return [formattedValue, label];
                }}
                labelFormatter={(label) => `–î–∞—Ç–∞: ${label}`}
              />
              {!isMobile && <Legend />}
              
              {/* –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞ */}
              <Area
                dataKey="confidenceUpper"
                stackId="confidence"
                stroke="none"
                fill="#3B82F6"
                fillOpacity={0.15}
                connectNulls={false}
              />
              <Area
                dataKey="confidenceLower"
                stackId="confidence"
                stroke="none"
                fill="#FFFFFF"
                fillOpacity={1}
                connectNulls={false}
              />
              
              {/* –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–∑–µ–ª–µ–Ω–∞—è –ª–∏–Ω–∏—è —Å —Ç–æ—á–∫–∞–º–∏) */}
              <Line
                type="monotone"
                dataKey="historical"
                stroke="#10B981"
                strokeWidth={isMobile ? 2 : 3}
                dot={{ fill: '#10B981', strokeWidth: 2, r: isMobile ? 4 : 5 }}
                activeDot={{ r: isMobile ? 6 : 8, fill: '#10B981' }}
                connectNulls={false}
                name="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏"
              />
              
              {/* –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–∏–Ω—è—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è) */}
              <Line
                type="monotone"
                dataKey="forecast"
                stroke="#3B82F6"
                strokeWidth={isMobile ? 2 : 3}
                strokeDasharray="8 4"
                dot={{ fill: '#3B82F6', strokeWidth: 2, r: isMobile ? 3 : 4 }}
                activeDot={{ r: isMobile ? 5 : 6, fill: '#3B82F6' }}
                connectNulls={false}
                name="–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂"
              />
              
            </ComposedChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <Card>
        <CardHeader className={`${isMobile ? 'pb-2' : ''}`}>
          <CardTitle className={`flex items-center space-x-2 ${isMobile ? 'text-base' : ''}`}>
            <Lightbulb className="w-5 h-5" />
            <span>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className={`space-y-${isMobile ? '2' : '3'}`}>
            {summary.recommendations.map((recommendation, index) => (
              <div key={index} className={`flex items-start space-x-${isMobile ? '2' : '3'} ${isMobile ? 'p-2' : 'p-3'} bg-slate-700/50 rounded-lg`}>
                <div className={`bg-blue-600 rounded-full flex items-center justify-center text-white font-bold ${isMobile ? 'w-5 h-5 text-xs' : 'w-6 h-6 text-sm'} flex-shrink-0`}>
                  {index + 1}
                </div>
                <p className={`text-slate-200 leading-relaxed ${isMobile ? 'text-xs' : 'text-sm'}`}>{recommendation}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}