import { useState } from 'react';
import { RefreshCw, CheckCircle, AlertCircle } from 'lucide-react';

interface UpdateCheckerProps {
  className?: string;
  onShowUpdateInfo?: (details: {
    version: string;
    buildNumber: string;
    hasUpdate: boolean;
    swRegistrations: number;
    swActive: boolean;
    swWaiting: boolean;
    swScope: string;
    lastCheck: string;
  }) => void;
}

export const UpdateChecker: React.FC<UpdateCheckerProps> = ({ className, onShowUpdateInfo }) => {
  const [isChecking, setIsChecking] = useState(false);
  const [lastChecked, setLastChecked] = useState<Date | null>(null);
  const [hasUpdate, setHasUpdate] = useState(false);
  const [updateStatus, setUpdateStatus] = useState<'idle' | 'no-updates' | 'found-updates' | null>(null);

  const currentVersion = '1.5.5';
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã (YYYYMMDD + —á–∞—Å—ã)
  const now = new Date();
  const buildNumber = `${now.getFullYear()}${(now.getMonth() + 1).toString().padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}.${now.getHours().toString().padStart(2, '0')}`;

  const checkForUpdates = async () => {
    if (isChecking) return;

    console.log('üîÑ UpdateChecker: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    setIsChecking(true);
    setLastChecked(new Date());
    setUpdateStatus(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Service Worker –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      if ('serviceWorker' in navigator) {
        console.log('üîÑ UpdateChecker: Service Worker –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Service Workers
        const registrations = await navigator.serviceWorker.getRegistrations();
        console.log('üîÑ UpdateChecker: –ù–∞–π–¥–µ–Ω–æ Service Worker —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', registrations.length);

        if (registrations.length === 0) {
          console.log('‚ùå UpdateChecker: Service Worker –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å...');

          try {
            const swPath = import.meta.env.PROD ? '/tradeframe-builder/sw.js' : '/sw.js';
            console.log('üîÑ UpdateChecker: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker:', swPath);
            const registration = await navigator.serviceWorker.register(swPath);
            console.log('‚úÖ UpdateChecker: Service Worker —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);

            // –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await new Promise(resolve => setTimeout(resolve, 1000));
          } catch (regError) {
            console.error('‚ùå UpdateChecker: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', regError);
            setUpdateStatus('no-updates');
            setTimeout(() => setUpdateStatus(null), 3000);
            return;
          }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º-–∞—É—Ç –¥–ª—è ready
        const readyPromise = navigator.serviceWorker.ready;
        const timeoutPromise = new Promise((_, reject) =>
          setTimeout(() => reject(new Error('Service Worker ready timeout')), 5000)
        );

        const registration = await Promise.race([readyPromise, timeoutPromise]) as ServiceWorkerRegistration;
        console.log('üîÑ UpdateChecker: Service Worker –≥–æ—Ç–æ–≤:', registration);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        console.log('üîÑ UpdateChecker: Registration state:', {
          active: !!registration.active,
          installing: !!registration.installing,
          waiting: !!registration.waiting,
          scope: registration.scope
        });

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        console.log('üîÑ UpdateChecker: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
        await registration.update();

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await new Promise(resolve => setTimeout(resolve, 1500));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–π SW
        if (registration.waiting) {
          console.log('üîÑ UpdateChecker: –ù–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞—é—â–∏–π Service Worker - –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!');
          setHasUpdate(true);
          setUpdateStatus('found-updates');

          // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
          onShowUpdateInfo?.({
            version: currentVersion,
            buildNumber,
            hasUpdate: true,
            swRegistrations: registrations.length,
            swActive: !!registration.active,
            swWaiting: !!registration.waiting,
            swScope: registration.scope,
            lastCheck: new Date().toLocaleString('ru-RU')
          });

          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π Service Worker
          registration.waiting.postMessage({ type: 'SKIP_WAITING' });

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫
          setTimeout(() => {
            console.log('üîÑ UpdateChecker: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
            window.location.reload();
          }, 3000);
        } else {
          console.log('üîÑ UpdateChecker: –û–∂–∏–¥–∞—é—â–∏–π Service Worker –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç');
          setHasUpdate(false);
          setUpdateStatus('no-updates');

          // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
          console.log('üîÑ UpdateChecker: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ (–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)');
          onShowUpdateInfo?.({
            version: currentVersion,
            buildNumber,
            hasUpdate: false,
            swRegistrations: registrations.length,
            swActive: !!registration.active,
            swWaiting: !!registration.waiting,
            swScope: registration.scope,
            lastCheck: new Date().toLocaleString('ru-RU')
          });
        }
      } else {
        console.log('‚ùå UpdateChecker: Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        setUpdateStatus('no-updates');
        setTimeout(() => {
          setUpdateStatus(null);
        }, 3000);
      }
    } catch (error) {
      console.error('‚ùå UpdateChecker: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
      setUpdateStatus('no-updates');
      setTimeout(() => {
        setUpdateStatus(null);
      }, 3000);
    } finally {
      console.log('üîÑ UpdateChecker: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      setIsChecking(false);
    }
  };

  const getStatusIcon = () => {
    if (isChecking) {
      return <RefreshCw className="h-4 w-4 text-blue-400 animate-spin" />;
    }
    if (hasUpdate) {
      return <AlertCircle className="h-4 w-4 text-orange-500" />;
    }
    if (updateStatus === 'no-updates') {
      return <CheckCircle className="h-4 w-4 text-green-500" />;
    }
    if (updateStatus === 'found-updates') {
      return <AlertCircle className="h-4 w-4 text-orange-500 animate-pulse" />;
    }
    if (lastChecked) {
      return <CheckCircle className="h-4 w-4 text-green-500" />;
    }
    return <RefreshCw className="h-4 w-4 text-slate-400" />;
  };

  const getStatusText = () => {
    if (isChecking) return '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
    if (hasUpdate) return '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
    if (updateStatus === 'no-updates') return '–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è';
    if (updateStatus === 'found-updates') return '–ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!';
    if (lastChecked) {
      const timeDiff = Date.now() - lastChecked.getTime();
      const minutes = Math.floor(timeDiff / (1000 * 60));
      return minutes < 1 ? '–û–±–Ω–æ–≤–ª–µ–Ω–æ' : `${minutes}–º –Ω–∞–∑–∞–¥`;
    }
    return '–û–±–Ω–æ–≤–∏—Ç—å';
  };

  return (
    <div
      className={`flex items-center gap-3 p-2 rounded-md cursor-pointer hover:bg-accent/50 transition-colors ${className}`}
      onClick={checkForUpdates}
    >
      {getStatusIcon()}
      <div className="flex flex-col">
        <span className="text-sm font-medium">
          {isChecking ? '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'}
        </span>
        <span className="text-xs text-muted-foreground">
          v{currentVersion} (#{buildNumber})
        </span>
        {lastChecked && (
          <span className="text-xs text-muted-foreground">
            –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {lastChecked.toLocaleTimeString('ru-RU')}
          </span>
        )}
      </div>
    </div>
  );
};

export default UpdateChecker;