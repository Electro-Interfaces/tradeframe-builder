/**
 * –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏
 * –í–∫–ª—é—á–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 */

import React, { useState, useEffect } from 'react'
import { useIsMobile } from '@/hooks/use-mobile'
import { Button } from '@/components/ui/button'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Switch } from '@/components/ui/switch'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Checkbox } from '@/components/ui/checkbox'
import { externalRolesService } from '@/services/externalRolesService'
import { PERMISSION_SECTIONS, PermissionHelpers } from '@/config/permissions'
import type { Role, Permission, RoleScope, PermissionAction } from '@/types/auth'

interface RoleFormDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  role?: Role | null
  onSaved: () => void
}

const SCOPE_OPTIONS: Array<{ value: RoleScope; label: string; description: string }> = [
  { value: 'global', label: '–ì–ª–æ–±–∞–ª—å–Ω–∞—è', description: '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ' },
  { value: 'network', label: '–°–µ—Ç—å', description: '–î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏' },
  { value: 'trading_point', label: '–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞', description: '–î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ê–ó–°' },
  { value: 'assigned', label: '–ù–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è', description: '–î–æ—Å—Ç—É–ø –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º' }
]

const ACTION_LABELS: Record<PermissionAction, string> = {
  'read': '–ß—Ç–µ–Ω–∏–µ',
  'write': '–ó–∞–ø–∏—Å—å',
  'delete': '–£–¥–∞–ª–µ–Ω–∏–µ', 
  'manage': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
  'view_menu': '–í–∏–¥–∏–º–æ—Å—Ç—å –º–µ–Ω—é'
}

export function RoleFormDialog({ open, onOpenChange, role, onSaved }: RoleFormDialogProps) {
  const isMobile = useIsMobile()
  const [formData, setFormData] = useState({
    code: '',
    name: '',
    description: '',
    scope: 'trading_point' as RoleScope,
    is_active: true
  })
  const [permissions, setPermissions] = useState<Permission[]>([])
  const [loading, setLoading] = useState(false)
  const [activeTab, setActiveTab] = useState('basic')


  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏
  useEffect(() => {
    if (role) {
      setFormData({
        code: role.code,
        name: role.name,
        description: role.description,
        scope: role.scope,
        is_active: role.is_active
      })
      setPermissions([...role.permissions])
    } else {
      setFormData({
        code: '',
        name: '',
        description: '',
        scope: 'trading_point',
        is_active: true
      })
      setPermissions([])
    }
  }, [role])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (loading) return

    try {
      setLoading(true)

      if (role) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        await externalRolesService.updateRole(role.id, {
          name: formData.name,
          description: formData.description,
          permissions,
          scope: formData.scope,
          is_active: formData.is_active
        })
      } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏
        await externalRolesService.createRole({
          code: formData.code,
          name: formData.name,
          description: formData.description,
          permissions,
          scope: formData.scope
        })
      }

      onSaved()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:', error)
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª—å: ' + error)
    } finally {
      setLoading(false)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  const togglePermission = (section: string, resource: string, action: PermissionAction) => {
    console.log('üîÑ Toggling permission:', section, resource, action);
    console.log('üîç Current permissions:', permissions);
    setPermissions(current => {
      console.log('üìù Updating permissions state...');
      const existing = current.find(p => p.section === section && p.resource === resource)
      
      if (existing) {
        if (existing.actions?.includes(action)) {
          // –£–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
          const newActions = existing.actions?.filter(a => a !== action) || []
          if (newActions.length === 0) {
            // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            return current.filter(p => !(p.section === section && p.resource === resource))
          } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            return current.map(p => 
              p.section === section && p.resource === resource
                ? { ...p, actions: newActions }
                : p
            )
          }
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
          return current.map(p => 
            p.section === section && p.resource === resource
              ? { ...p, actions: [...(p.actions || []), action] }
              : p
          )
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        return [...current, {
          section,
          resource,
          actions: [action]
        }]
      }
    })
  }

  const hasPermission = (section: string, resource: string, action: PermissionAction): boolean => {
    const permission = permissions.find(p => p.section === section && p.resource === resource)
    return permission?.actions?.includes(action) || false
  }


  const applyRoleTemplate = (template: 'admin' | 'manager' | 'readonly') => {
    let newPermissions: Permission[] = []

    switch (template) {
      case 'admin':
        // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        newPermissions = Object.values(PERMISSION_SECTIONS)
          .filter(section => section.code !== 'admin') // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
          .flatMap(section => 
            Object.values(section.resources).map(resource => ({
              section: section.code,
              resource: resource.code,
              actions: section.code === 'menu_visibility' ? 
                ['view_menu'] as PermissionAction[] : 
                ['read', 'write', 'delete', 'manage'] as PermissionAction[]
            }))
          )
        break

      case 'manager':
        // –ú–µ–Ω–µ–¥–∂–µ—Ä: –æ–ø–µ—Ä–∞—Ü–∏–∏, –æ—Ç—á–µ—Ç—ã, —Ü–µ–Ω—ã, —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã + –≤–∏–¥–∏–º–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ–Ω—é
        const managerSections = ['networks', 'operations', 'equipment', 'finance', 'menu_visibility']
        newPermissions = Object.values(PERMISSION_SECTIONS)
          .filter(section => managerSections.includes(section.code))
          .flatMap(section => 
            Object.values(section.resources).map(resource => ({
              section: section.code,
              resource: resource.code,
              actions: section.code === 'menu_visibility' ? 
                ['view_menu'] as PermissionAction[] :
                section.code === 'finance' ? 
                ['read', 'write'] as PermissionAction[] : 
                ['read', 'write'] as PermissionAction[]
            }))
          )
        break

      case 'readonly':
        // –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ: –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —á—Ç–µ–Ω–∏–µ + –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –º–µ–Ω—é
        newPermissions = Object.values(PERMISSION_SECTIONS)
          .flatMap(section => 
            Object.values(section.resources).map(resource => ({
              section: section.code,
              resource: resource.code,
              actions: section.code === 'menu_visibility' ? 
                ['view_menu'] as PermissionAction[] : 
                ['read'] as PermissionAction[]
            }))
          )
        break
    }

    setPermissions(newPermissions)
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className={`${isMobile ? 'max-w-[95vw] max-h-[95vh]' : 'max-w-4xl max-h-[90vh]'} overflow-y-auto bg-slate-900 border-slate-700 text-white`}>
        <DialogHeader>
          <DialogTitle>
            {role ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏' : '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏'}
          </DialogTitle>
          <DialogDescription>
            {role ? '–ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è' : '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è'}
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="flex-1 flex flex-col">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
            <TabsList className={`grid w-full ${isMobile ? 'grid-cols-1 gap-1' : 'grid-cols-2'} bg-slate-800 border-slate-700`}>
              <TabsTrigger value="basic">
                –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </TabsTrigger>
              <TabsTrigger value="permissions" className="relative">
                –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
                {permissions.length > 0 && (
                  <Badge className="ml-2 h-5 px-1" variant="secondary">
                    {permissions.reduce((sum, p) => sum + (p.actions?.length || 0), 0)}
                  </Badge>
                )}
              </TabsTrigger>
            </TabsList>

            {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <TabsContent value="basic" className="space-y-4 overflow-y-auto">
              <div className={`grid gap-4 ${isMobile ? 'grid-cols-1' : 'grid-cols-2'}`}>
                <div className="space-y-2">
                  <Label htmlFor="code" className="text-slate-200">–ö–æ–¥ —Ä–æ–ª–∏ *</Label>
                  <Input
                    id="code"
                    value={formData.code}
                    onChange={(e) => setFormData(prev => ({ ...prev, code: e.target.value }))}
                    placeholder="network_admin"
                    disabled={!!role} // –ö–æ–¥ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                    required
                    className="bg-slate-800 border-slate-700 text-white placeholder-slate-400"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="name" className="text-slate-200">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ *</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∏"
                    required
                    className="bg-slate-800 border-slate-700 text-white placeholder-slate-400"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description" className="text-slate-200">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏ –µ—ë –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
                  rows={3}
                  className="bg-slate-800 border-slate-700 text-white placeholder-slate-400"
                />
              </div>

              <div className="space-y-2">
                <Label className="text-slate-200">–û–±–ª–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</Label>
                <Select 
                  value={formData.scope} 
                  onValueChange={(value: RoleScope) => setFormData(prev => ({ ...prev, scope: value }))}
                >
                  <SelectTrigger className="bg-slate-800 border-slate-700 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-800 border-slate-700">
                    {SCOPE_OPTIONS.map(option => (
                      <SelectItem key={option.value} value={option.value} className="text-white hover:bg-slate-700">
                        <div>
                          <div className="font-medium">{option.label}</div>
                          <div className="text-sm text-slate-400">{option.description}</div>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center space-x-2">
                <Switch
                  id="is_active"
                  checked={formData.is_active}
                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, is_active: checked }))}
                />
                <Label htmlFor="is_active" className="text-slate-200">–†–æ–ª—å –∞–∫—Ç–∏–≤–Ω–∞</Label>
              </div>

              {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ */}
              <div className="bg-slate-800 border border-slate-700 rounded-lg p-4">
                <div className="flex items-start space-x-3">
                  <div className="text-blue-400">‚ÑπÔ∏è</div>
                  <div>
                    <h4 className="font-medium text-slate-200">–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π</h4>
                    <p className="text-sm text-slate-400 mt-1">
                      –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è", —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º —Å–∏—Å—Ç–µ–º—ã.
                    </p>
                    {permissions.length > 0 && (
                      <p className="text-sm text-green-400 mt-2">
                        ‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {permissions.reduce((sum, p) => sum + (p.actions?.length || 0), 0)} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                      </p>
                    )}
                    <div className="flex justify-between items-center mt-3">
                      <Button
                        type="button"
                        variant="link"
                        className="p-0 h-auto text-blue-400 hover:text-blue-300"
                        onClick={() => setActiveTab('permissions')}
                      >
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π ‚Üí
                      </Button>
                      {formData.name && formData.code && permissions.length > 0 && (
                        <div className="flex items-center space-x-2 text-green-400">
                          <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                          <span className="text-xs">–ì–æ—Ç–æ–≤–æ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </TabsContent>

            {/* –†–∞–∑—Ä–µ—à–µ–Ω–∏—è */}
            <TabsContent value="permissions" className="flex-1 overflow-y-auto space-y-4">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π */}
              <div className="bg-slate-800 border border-slate-700 rounded-lg p-4">
                <h3 className="font-medium text-slate-200 mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º —Å–∏—Å—Ç–µ–º—ã</h3>
                <p className="text-sm text-slate-400 mb-3">
                  –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —ç—Ç–æ–π —Ä–æ–ª—å—é:
                </p>
                <div className={`grid gap-4 text-xs ${isMobile ? 'grid-cols-2' : 'grid-cols-5'}`}>
                  <div className="flex items-center space-x-1">
                    <div className="w-3 h-3 bg-green-800 border border-green-600 rounded"></div>
                    <span className="text-green-300 font-medium">–ß—Ç–µ–Ω–∏–µ</span> - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
                  </div>
                  <div className="flex items-center space-x-1">
                    <div className="w-3 h-3 bg-blue-800 border border-blue-600 rounded"></div>
                    <span className="text-blue-300 font-medium">–ó–∞–ø–∏—Å—å</span> - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                  </div>
                  <div className="flex items-center space-x-1">
                    <div className="w-3 h-3 bg-red-800 border border-red-600 rounded"></div>
                    <span className="text-red-300 font-medium">–£–¥–∞–ª–µ–Ω–∏–µ</span> - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
                  </div>
                  <div className="flex items-center space-x-1">
                    <div className="w-3 h-3 bg-purple-800 border border-purple-600 rounded"></div>
                    <span className="text-purple-300 font-medium">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</span> - –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞
                  </div>
                  <div className="flex items-center space-x-1">
                    <div className="w-3 h-3 bg-yellow-800 border border-yellow-600 rounded"></div>
                    <span className="text-yellow-300 font-medium">–í–∏–¥–∏–º–æ—Å—Ç—å –º–µ–Ω—é</span> - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –º–µ–Ω—é
                  </div>
                </div>
              </div>

              {/* –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã */}
              <div className="bg-slate-800 border border-slate-700 rounded-lg p-4">
                <h4 className="font-medium text-slate-200 mb-3">üöÄ –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã —Ä–æ–ª–µ–π</h4>
                <div className={`grid gap-3 ${isMobile ? 'grid-cols-1' : 'md:grid-cols-3'}`}>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    className="text-left justify-start h-auto p-3"
                    onClick={() => applyRoleTemplate('admin')}
                  >
                    <div>
                      <div className="font-medium">üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</div>
                      <div className="text-xs text-slate-400">–ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫</div>
                    </div>
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    className="text-left justify-start h-auto p-3"
                    onClick={() => applyRoleTemplate('manager')}
                  >
                    <div>
                      <div className="font-medium">üè¢ –ú–µ–Ω–µ–¥–∂–µ—Ä</div>
                      <div className="text-xs text-slate-400">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –æ—Ç—á–µ—Ç—ã</div>
                    </div>
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    className="text-left justify-start h-auto p-3"
                    onClick={() => applyRoleTemplate('readonly')}
                  >
                    <div>
                      <div className="font-medium">üëÄ –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ</div>
                      <div className="text-xs text-slate-400">–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è</div>
                    </div>
                  </Button>
                </div>
              </div>

              {/* –ï–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π */}
              <div className="space-y-4">
                <Card className="bg-slate-800 border-slate-700">
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg text-slate-200">–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π</CardTitle>
                      <Badge variant="outline">
                        {permissions.reduce((sum, p) => sum + (p.actions?.length || 0), 0)} –∏–∑ {Object.values(PERMISSION_SECTIONS).reduce((total, section) => total + Object.keys(section.resources).length * 4, 0)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö
                      </Badge>
                    </div>
                    <CardDescription className="text-slate-400">
                      –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {Object.values(PERMISSION_SECTIONS).flatMap(section => 
                        Object.values(section.resources).map(resource => (
                          <div key={`${section.code}-${resource.code}`} className="border border-slate-600 rounded-lg p-4 bg-slate-700">
                            <div className="flex items-start justify-between mb-3">
                              <div>
                                <h4 className="font-medium text-slate-200">
                                  {section.name} ‚Üí {resource.name}
                                </h4>
                                <p className="text-sm text-slate-400 mt-1">{resource.description}</p>
                              </div>
                            </div>
                            <div className={`grid gap-2 ${section.code === 'menu_visibility' ? 'grid-cols-1' : isMobile ? 'grid-cols-2' : 'grid-cols-4'}`}>
                              {(section.code === 'menu_visibility' ? 
                                ['view_menu'] : 
                                ['read', 'write', 'delete', 'manage']
                              ).map(action => {
                                const isChecked = hasPermission(section.code, resource.code, action)
                                const colorClasses = {
                                  read: isChecked ? 'border-green-500 bg-green-900 text-green-300' : 'border-slate-600 bg-slate-700 text-slate-400',
                                  write: isChecked ? 'border-blue-500 bg-blue-900 text-blue-300' : 'border-slate-600 bg-slate-700 text-slate-400', 
                                  delete: isChecked ? 'border-red-500 bg-red-900 text-red-300' : 'border-slate-600 bg-slate-700 text-slate-400',
                                  manage: isChecked ? 'border-purple-500 bg-purple-900 text-purple-300' : 'border-slate-600 bg-slate-700 text-slate-400',
                                  view_menu: isChecked ? 'border-yellow-500 bg-yellow-900 text-yellow-300' : 'border-slate-600 bg-slate-700 text-slate-400'
                                }
                                
                                return (
                                  <label 
                                    key={action} 
                                    className={`
                                      flex items-center justify-center space-x-2 cursor-pointer p-2 rounded border-2 transition-all hover:shadow-sm
                                      ${colorClasses[action]}
                                    `}
                                  >
                                    <Checkbox
                                      checked={isChecked}
                                      onCheckedChange={() => togglePermission(section.code, resource.code, action)}
                                      className="data-[state=checked]:bg-current data-[state=checked]:border-current"
                                    />
                                    <span className="text-sm font-medium">{ACTION_LABELS[action]}</span>
                                  </label>
                                )
                              })}
                            </div>
                          </div>
                        ))
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>

          <DialogFooter className="mt-6">
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              disabled={loading}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button type="submit" disabled={loading}>
              {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (role ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å')}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}