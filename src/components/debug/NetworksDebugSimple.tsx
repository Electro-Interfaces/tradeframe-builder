/**
 * –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–µ–π
 */
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { networksService } from '@/services/networksService';
import { apiConfigService } from '@/services/apiConfigService';
import { Network } from '@/types/network';
import { 
  Database, 
  RefreshCw, 
  Plus, 
  CheckCircle, 
  XCircle,
  Settings
} from 'lucide-react';

export function NetworksDebugSimple() {
  const [networks, setNetworks] = useState<Network[]>([]);
  const [apiMode, setApiMode] = useState<string>('loading...');
  const [connectionName, setConnectionName] = useState<string>('loading...');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastAction, setLastAction] = useState<string>('');

  const loadStatus = async () => {
    try {
      setLoading(true);
      setError(null);
      setLastAction('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      const currentApiMode = apiConfigService.getApiMode();
      const currentConnection = apiConfigService.getCurrentConnection();
      
      setApiMode(currentApiMode);
      setConnectionName(currentConnection?.name || '–ù–ï –ù–ê–ô–î–ï–ù–û');
      
      console.log('üîç Debug - API Mode:', currentApiMode);
      console.log('üîç Debug - Connection:', currentConnection?.name);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç–∏
      const networksData = await networksService.getAll();
      setNetworks(networksData);
      
      console.log('üîç Debug - Networks loaded:', networksData.length, 'networks');
      setLastAction(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${networksData.length} —Å–µ—Ç–µ–π`);
      
    } catch (err) {
      console.error('‚ùå Debug error:', err);
      const errorMsg = err instanceof Error ? err.message : String(err);
      setError(errorMsg);
      setLastAction('–û—à–∏–±–∫–∞: ' + errorMsg);
    } finally {
      setLoading(false);
    }
  };

  const runMigration = async () => {
    try {
      setLoading(true);
      setError(null);
      setLastAction('–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏...');
      
      console.log('üöÄ Debug - Running migration...');
      const result = await networksService.migrateToSupabase();
      
      console.log('üöÄ Debug - Migration result:', result);
      
      if (result.success) {
        setLastAction(`–ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: ${result.migrated}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped}`);
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        setTimeout(() => loadStatus(), 1000);
      } else {
        setError(result.message);
        setLastAction('–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ' + result.message);
      }
      
    } catch (err) {
      console.error('‚ùå Migration error:', err);
      const errorMsg = err instanceof Error ? err.message : String(err);
      setError(errorMsg);
      setLastAction('–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ' + errorMsg);
    } finally {
      setLoading(false);
    }
  };

  const createTestNetwork = async () => {
    try {
      setLoading(true);
      setError(null);
      setLastAction('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏...');
      
      const testData = {
        name: `–¢–µ—Å—Ç ${new Date().toLocaleTimeString()}`,
        description: '–°–µ—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º',
        type: '–ê–ó–°'
      };
      
      console.log('üèóÔ∏è Debug - Creating test network:', testData);
      const newNetwork = await networksService.create(testData);
      console.log('‚úÖ Debug - Test network created:', newNetwork);
      
      setLastAction(`–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç—å: ${newNetwork.name} (ID: ${newNetwork.id})`);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      setTimeout(() => loadStatus(), 500);
      
    } catch (err) {
      console.error('‚ùå Create error:', err);
      const errorMsg = err instanceof Error ? err.message : String(err);
      setError(errorMsg);
      setLastAction('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + errorMsg);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadStatus();
  }, []);

  const getApiModeBadge = () => {
    switch (apiMode) {
      case 'supabase':
        return <Badge className="bg-green-600">Supabase</Badge>;
      case 'mock':
        return <Badge className="bg-yellow-600">Mock</Badge>;
      case 'http':
        return <Badge className="bg-blue-600">HTTP</Badge>;
      default:
        return <Badge variant="outline">{apiMode}</Badge>;
    }
  };

  return (
    <Card className="w-full mb-6">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-lg">
          <Settings className="w-5 h-5" />
          üè™ –û—Ç–ª–∞–¥–∫–∞ —Å–µ—Ç–µ–π
          {getApiModeBadge()}
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-4">
        
        {/* –°—Ç–∞—Ç—É—Å */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
          <div>
            <strong>–†–µ–∂–∏–º:</strong> {apiMode}
          </div>
          <div>
            <strong>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</strong> {connectionName}
          </div>
          <div>
            <strong>–°–µ—Ç–µ–π:</strong> {networks.length}
          </div>
        </div>

        {/* –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ */}
        {lastAction && (
          <div className="text-sm text-slate-300 bg-slate-800 p-2 rounded">
            <strong>–°—Ç–∞—Ç—É—Å:</strong> {lastAction}
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex flex-wrap gap-2">
          <Button 
            onClick={loadStatus} 
            disabled={loading}
            variant="outline"
            size="sm"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
          
          {apiMode === 'supabase' && (
            <Button 
              onClick={runMigration} 
              disabled={loading}
              variant="outline"
              size="sm"
            >
              <Database className="w-4 h-4 mr-2" />
              –ú–∏–≥—Ä–∞—Ü–∏—è
            </Button>
          )}
          
          <Button 
            onClick={createTestNetwork} 
            disabled={loading}
            variant="outline"
            size="sm"
          >
            <Plus className="w-4 h-4 mr-2" />
            –¢–µ—Å—Ç —Å–µ—Ç—å
          </Button>
        </div>

        {/* –û—à–∏–±–∫–∏ */}
        {error && (
          <div className="p-3 rounded-lg bg-red-900/20 border border-red-700 text-sm">
            <div className="flex items-center gap-2 mb-1">
              <XCircle className="w-4 h-4 text-red-400" />
              <strong>–û—à–∏–±–∫–∞:</strong>
            </div>
            <div className="font-mono text-xs">{error}</div>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π) */}
        {networks.length > 0 && (
          <div>
            <strong className="text-sm">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏:</strong>
            <div className="mt-2 space-y-1 max-h-32 overflow-y-auto text-xs">
              {networks.slice(0, 5).map((network) => (
                <div key={network.id} className="flex justify-between bg-slate-800 p-2 rounded">
                  <span>{network.name}</span>
                  <span className="text-slate-400">ID: {network.id}</span>
                </div>
              ))}
              {networks.length > 5 && (
                <div className="text-slate-400 text-center">
                  ... –∏ –µ—â–µ {networks.length - 5} —Å–µ—Ç–µ–π
                </div>
              )}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}