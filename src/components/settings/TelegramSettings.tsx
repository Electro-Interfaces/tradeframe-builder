import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Switch } from "@/components/ui/switch";
import { Send, Settings, CheckCircle, XCircle, Info, Copy, Bot } from "lucide-react";
import { getUserSettings, saveUserSettings, UserSettings } from "@/config/userSettings";
import { getSystemConfig, isGlobalTelegramConfigured } from "@/config/system";
import { telegramService } from "@/services/telegramService";

export const TelegramSettings: React.FC = () => {
  const [userSettings, setUserSettings] = useState<UserSettings>(getUserSettings());
  const [testing, setTesting] = useState(false);
  const [testResult, setTestResult] = useState<{ success: boolean; message: string } | null>(null);
  const [botInfo, setBotInfo] = useState<any>(null);
  const [updates, setUpdates] = useState<any[]>([]);

  const systemConfig = getSystemConfig();
  const isGlobalBotConfigured = isGlobalTelegramConfigured();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    const settings = getUserSettings();
    setUserSettings(settings);
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleSave = async () => {
    if (!isGlobalBotConfigured) {
      setTestResult({ success: false, message: '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' });
      return;
    }

    if (userSettings.telegram.enabled && !userSettings.telegram.chatId.trim()) {
      setTestResult({ success: false, message: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Chat ID' });
      return;
    }

    saveUserSettings(userSettings);
    setTestResult({ success: true, message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    if (isGlobalBotConfigured) {
      try {
        const info = await telegramService.getBotInfo();
        setBotInfo(info);
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ');
      }
    }
  };

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const handleTest = async () => {
    if (!isGlobalBotConfigured) {
      setTestResult({ success: false, message: '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
      return;
    }

    if (!userSettings.telegram.enabled || !userSettings.telegram.chatId.trim()) {
      setTestResult({ success: false, message: '–°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ Telegram –∏ –≤–≤–µ–¥–∏—Ç–µ Chat ID' });
      return;
    }

    setTesting(true);
    setTestResult(null);

    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await telegramService.sendMessage(
        'ü§ñ <b>–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è TradeFrame</b>\n\n–í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –∏ —Ñ–∞–π–ª—ã.',
        userSettings.telegram.chatId
      );
      
      setTestResult({ success: true, message: '–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram.' });
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const info = await telegramService.getBotInfo();
      setBotInfo(info);

    } catch (error) {
      setTestResult({ 
        success: false, 
        message: `–û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
      });
    } finally {
      setTesting(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id (–ø–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
  const handleGetChatId = async () => {
    if (!isGlobalBotConfigured) {
      setTestResult({ success: false, message: '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' });
      return;
    }

    try {
      const updatesData = await telegramService.getUpdates();
      setUpdates(updatesData);
      
      if (updatesData.length === 0) {
        setTestResult({ 
          success: false, 
          message: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.' 
        });
      } else {
        setTestResult({ 
          success: true, 
          message: `–ù–∞–π–¥–µ–Ω–æ ${updatesData.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à chat_id –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.` 
        });
      }
    } catch (error) {
      setTestResult({ 
        success: false, 
        message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id: ${error.message}` 
      });
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleClear = () => {
    const clearedSettings = {
      ...userSettings,
      telegram: {
        enabled: false,
        chatId: '',
        sendReports: true
      }
    };
    setUserSettings(clearedSettings);
    saveUserSettings(clearedSettings);
    setBotInfo(null);
    setTestResult(null);
    setUpdates([]);
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ chat_id
  const copyChatId = (chatId: string) => {
    navigator.clipboard.writeText(chatId);
    setUserSettings(prev => ({
      ...prev,
      telegram: {
        ...prev.telegram,
        chatId
      }
    }));
    setTestResult({ success: true, message: `Chat ID ${chatId} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω` });
  };

  const isUserTelegramConfigured = userSettings.telegram.enabled && !!userSettings.telegram.chatId;

  return (
    <Card className="bg-slate-800 border-slate-700">
      <CardHeader>
        <CardTitle className="text-white flex items-center gap-2">
          <Send className="w-5 h-5" />
          –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram
          {isUserTelegramConfigured && <Badge className="bg-green-600">–í–∫–ª—é—á–µ–Ω</Badge>}
          {!isGlobalBotConfigured && <Badge variant="destructive">–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</Badge>}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ */}
        {botInfo && isGlobalBotConfigured && (
          <Alert>
            <Bot className="h-4 w-4" />
            <AlertDescription>
              <strong>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç:</strong> @{botInfo.username} ({botInfo.first_name})
            </AlertDescription>
          </Alert>
        )}

        {/* –°—Ç–∞—Ç—É—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ */}
        {!isGlobalBotConfigured && (
          <Alert className="border-yellow-600">
            <Info className="h-4 w-4 text-yellow-600" />
            <AlertDescription className="text-yellow-200">
              <strong>Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</strong><br />
              –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞.
            </AlertDescription>
          </Alert>
        )}

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        {isGlobalBotConfigured && (
          <Alert>
            <Settings className="h-4 w-4" />
            <AlertDescription>
              <strong>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</strong><br />
              1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @{botInfo?.username || '—Ç—Ä–µ–∫—Ñ—Ä–µ–π–º_–±–æ—Ç'} –≤ Telegram<br />
              2. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ<br />
              3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å Chat ID"<br />
              4. –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º
            </AlertDescription>
          </Alert>
        )}

        {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div className="space-y-4">
          {/* –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ Telegram */}
          <div className="flex items-center justify-between">
            <div>
              <Label className="text-slate-300 text-base font-medium">–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram</Label>
              <p className="text-sm text-slate-400">–í–∫–ª—é—á–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤ –≤ Telegram</p>
            </div>
            <Switch
              checked={userSettings.telegram.enabled}
              onCheckedChange={(enabled) => 
                setUserSettings(prev => ({
                  ...prev,
                  telegram: { ...prev.telegram, enabled }
                }))
              }
              disabled={!isGlobalBotConfigured}
            />
          </div>

          {/* Chat ID - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Telegram –≤–∫–ª—é—á–µ–Ω */}
          {userSettings.telegram.enabled && (
            <div>
              <Label className="text-slate-300">–í–∞—à Chat ID</Label>
              <div className="flex gap-2">
                <Input
                  placeholder="123456789 –∏–ª–∏ -123456789"
                  value={userSettings.telegram.chatId}
                  onChange={(e) => setUserSettings(prev => ({
                    ...prev,
                    telegram: { ...prev.telegram, chatId: e.target.value }
                  }))}
                  className="bg-slate-700 border-slate-600 text-white"
                />
                <Button 
                  variant="outline" 
                  onClick={handleGetChatId}
                  disabled={!isGlobalBotConfigured}
                >
                  –ü–æ–ª—É—á–∏—Ç—å Chat ID
                </Button>
              </div>
            </div>
          )}

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          {userSettings.telegram.enabled && (
            <div className="flex items-center justify-between">
              <div>
                <Label className="text-slate-300">–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</Label>
                <p className="text-sm text-slate-400">–ü–æ–ª—É—á–∞—Ç—å —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Telegram</p>
              </div>
              <Switch
                checked={userSettings.telegram.sendReports}
                onCheckedChange={(sendReports) => 
                  setUserSettings(prev => ({
                    ...prev,
                    telegram: { ...prev.telegram, sendReports }
                  }))
                }
              />
            </div>
          )}
        </div>

        {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ chat_id */}
        {updates.length > 0 && (
          <div>
            <Label className="text-slate-300">–î–æ—Å—Ç—É–ø–Ω—ã–µ Chat ID:</Label>
            <div className="mt-2 space-y-2 max-h-40 overflow-y-auto">
              {updates.slice(-10).map((update, index) => {
                const chat = update.message?.chat || update.channel_post?.chat;
                if (!chat) return null;

                return (
                  <div 
                    key={index}
                    className="flex items-center justify-between p-2 bg-slate-700 rounded border border-slate-600"
                  >
                    <div className="text-sm">
                      <div className="text-white font-mono">{chat.id}</div>
                      <div className="text-slate-400">
                        {chat.type} ‚Ä¢ {chat.title || chat.first_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                      </div>
                    </div>
                    <Button 
                      size="sm" 
                      variant="outline"
                      onClick={() => copyChatId(chat.id.toString())}
                    >
                      <Copy className="w-3 h-3" />
                    </Button>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex gap-2">
          <Button 
            onClick={handleSave}
            disabled={!isGlobalBotConfigured || (userSettings.telegram.enabled && !userSettings.telegram.chatId.trim())}
          >
            <Settings className="w-4 h-4 mr-2" />
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          </Button>
          
          <Button 
            variant="outline" 
            onClick={handleTest} 
            disabled={!isGlobalBotConfigured || !isUserTelegramConfigured || testing}
          >
            {testing ? (
              <>–¢–µ—Å—Ç–∏—Ä—É—é...</>
            ) : (
              <>
                <Send className="w-4 h-4 mr-2" />
                –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
              </>
            )}
          </Button>
          
          {userSettings.telegram.enabled && (
            <Button variant="destructive" onClick={handleClear}>
              –û—Ç–∫–ª—é—á–∏—Ç—å
            </Button>
          )}
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ */}
        {testResult && (
          <Alert className={testResult.success ? "border-green-600" : "border-red-600"}>
            {testResult.success ? 
              <CheckCircle className="h-4 w-4 text-green-600" /> : 
              <XCircle className="h-4 w-4 text-red-600" />
            }
            <AlertDescription className={testResult.success ? "text-green-200" : "text-red-200"}>
              {testResult.message}
            </AlertDescription>
          </Alert>
        )}
      </CardContent>
    </Card>
  );
};