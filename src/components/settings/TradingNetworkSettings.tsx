/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
 * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –î–ò–ó–ê–ô–ù: –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–ø–æ–∫–æ–π–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
 */

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { 
  tradingNetworkConfigService, 
  TradingNetworkConfig,
  ConnectionTestResult
} from '@/services/tradingNetworkConfigService';
import { universalMappingService, EntityMapping, MappingSyncResult } from '@/services/universalMappingService';
import { 
  Network, 
  Settings, 
  TestTube, 
  CheckCircle, 
  XCircle, 
  Clock,
  AlertTriangle,
  Save,
  RotateCcw,
  Activity,
  Fuel,
  Receipt,
  RefreshCw,
  Link2,
  AlertCircle,
  Key,
  Edit3,
  Trash2,
  Plus,
  Zap,
  ChevronDown,
  ChevronUp
} from 'lucide-react';

export const TradingNetworkSettings: React.FC = () => {
  const { toast } = useToast();
  const [config, setConfig] = useState<TradingNetworkConfig>(() => {
    const loadedConfig = tradingNetworkConfigService.getConfigSync();
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ endpoints –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if (!loadedConfig.endpoints) {
      loadedConfig.endpoints = {
        tanks: '/tanks',
        transactions: '/transactions'
      };
    }
    return loadedConfig;
  });
  const [isTestingConnection, setIsTestingConnection] = useState(false);
  const [testResult, setTestResult] = useState<ConnectionTestResult | null>(null);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const [testSystemId, setTestSystemId] = useState('1');
  const [testStationId, setTestStationId] = useState('15');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
  const [isSyncingMappings, setIsSyncingMappings] = useState(false);
  const [mappingSyncResult, setMappingSyncResult] = useState<MappingSyncResult | null>(null);
  const [selectedNetworkId, setSelectedNetworkId] = useState<string>('');
  const [selectedMappingType, setSelectedMappingType] = useState<string>('fuel');
  const [showMappingEditor, setShowMappingEditor] = useState(false);
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
  const [expandedSection, setExpandedSection] = useState<string>('mapping');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadConfig();
    // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–ø–ø–∏–Ω–≥–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const currentConfig = tradingNetworkConfigService.getConfigSync();
    if (!currentConfig.universalMapping?.enabled || !currentConfig.baseUrl) {
      console.log('üîÑ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      const defaultConfig = tradingNetworkConfigService.resetToDefault();
      setConfig(defaultConfig);
    }
  }, []);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  useEffect(() => {
    const savedConfig = tradingNetworkConfigService.getConfigSync();
    setHasUnsavedChanges(JSON.stringify(config) !== JSON.stringify(savedConfig));
  }, [config]);

  const loadConfig = () => {
    try {
      const loadedConfig = tradingNetworkConfigService.getConfigSync();
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ endpoints –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
      if (!loadedConfig.endpoints) {
        loadedConfig.endpoints = {
          tanks: '/tanks',
          transactions: '/transactions'
        };
      }
      setConfig(loadedConfig);
    } catch (error) {
      console.error('Failed to load trading network config:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏",
        variant: "destructive"
      });
    }
  };

  const saveConfig = async () => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      const validation = tradingNetworkConfigService.validateConfig(config);
      if (!validation.valid) {
        toast({
          title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          description: validation.errors.join(', '),
          variant: "destructive"
        });
        return;
      }

      await tradingNetworkConfigService.saveConfig(config);
      setHasUnsavedChanges(false);
      toast({
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        description: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      });
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        variant: "destructive"
      });
    }
  };

  const resetConfig = () => {
    const resetConfig = tradingNetworkConfigService.resetToDefaultSync();
    console.log('üîÑ Resetting to default config:', resetConfig);
    setConfig(resetConfig);
    toast({
      title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã",
      description: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
    });
  };

  const testConnection = async () => {
    setIsTestingConnection(true);
    setTestResult(null);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
      const actualConfig = tradingNetworkConfigService.getConfigSync();
      
      console.log('üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', {
        authType: config.authType,
        username: config.username,
        password: config.password ? '***' + config.password.slice(-3) : '–ù–ï–¢ –ü–ê–†–û–õ–Ø',
        hasPassword: !!config.password,
        baseUrl: config.baseUrl
      });
      
      console.log('üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ —Å–µ—Ä–≤–∏—Å–∞:', {
        authType: actualConfig.authType,
        username: actualConfig.username,
        password: actualConfig.password ? '***' + actualConfig.password.slice(-3) : '–ù–ï–¢ –ü–ê–†–û–õ–Ø',
        hasPassword: !!actualConfig.password,
        baseUrl: actualConfig.baseUrl
      });
      
      // üîÑ –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å HTTP –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const { testTradingNetworkConnectionWithParams } = await import('../../services/tradingNetworkConfigService');
      const result = await testTradingNetworkConnectionWithParams(actualConfig, testSystemId, testStationId);
      setTestResult(result);
      
      if (result.success) {
        toast({
          title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ",
          description: `–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∑–∞ ${result.responseTime}–º—Å. ${result.data && Array.isArray(result.data) ? `–ù–∞–π–¥–µ–Ω–æ ${result.data.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤.` : ''}`,
        });
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
          description: result.error,
          variant: "destructive"
        });
      }
    } catch (error: any) {
      const errorResult = {
        success: false,
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
      setTestResult(errorResult);
      
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        description: error.message || '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞',
        variant: "destructive"
      });
    } finally {
      setIsTestingConnection(false);
    }
  };

  const updateConfig = (updates: Partial<TradingNetworkConfig>) => {
    console.log('üîß Updating config:', updates);
    setConfig(prev => {
      const newConfig = { ...prev, ...updates };
      console.log('üîß New config state:', newConfig);
      
      // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (updates.username !== undefined || updates.password !== undefined || updates.authType !== undefined) {
        console.log('üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
        tradingNetworkConfigService.saveConfigSync(newConfig);
      }
      
      return newConfig;
    });
  };

  const getStatusIcon = () => {
    if (isTestingConnection) {
      return <Clock className="h-4 w-4 text-amber-500 animate-spin" />;
    }
    
    if (testResult?.success) {
      return <CheckCircle className="h-4 w-4 text-blue-500" />;
    }
    
    if (testResult?.success === false) {
      return <XCircle className="h-4 w-4 text-red-500" />;
    }
    
    return <Activity className="h-4 w-4 text-slate-400" />;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π
  const toggleSection = (section: string) => {
    setExpandedSection(expandedSection === section ? '' : section);
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–±—â–∏–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å */}
      <Card className="bg-slate-800 border-slate-700 shadow-sm">
        <CardContent className="pt-6">
          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <h3 className="text-xl font-semibold flex items-center gap-3 text-slate-200">
                <div className="p-2 rounded-lg bg-blue-400/10">
                  <Network className="h-6 w-6 text-blue-400" />
                </div>
                API –¢–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
              </h3>
              <p className="text-sm text-slate-400 max-w-2xl">
                –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
              </p>
            </div>
            <div className="flex items-center gap-3">
              {config.enabled && (
                <div className="flex items-center gap-2">
                  <div className={`w-2 h-2 rounded-full ${
                    testResult?.success 
                      ? 'bg-blue-500 animate-pulse' 
                      : testResult === null 
                        ? 'bg-slate-400' 
                        : 'bg-red-500'
                  }`} />
                  <Badge 
                    variant={testResult?.success ? "default" : "secondary"}
                    className={testResult?.success 
                      ? "bg-blue-400/10 text-blue-300 border-blue-800" 
                      : "bg-slate-700 text-slate-300 border-slate-600"}
                  >
                    {testResult?.success ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : testResult === null ? '‚ö´ –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ' : 'üî¥ –û—à–∏–±–∫–∞'}
                  </Badge>
                </div>
              )}
              <div className="flex items-center gap-2">
                <Label htmlFor="main-switch" className="text-sm font-medium text-slate-300">
                  {config.enabled ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
                </Label>
                <Switch
                  id="main-switch"
                  checked={config.enabled}
                  onCheckedChange={(enabled) => updateConfig({ enabled })}
                  className="data-[state=checked]:bg-blue-500"
                />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {config.enabled && (
        <div className="space-y-4">
          {/* –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
          <Card className="bg-slate-800 border-slate-700 hover:shadow-md transition-all duration-200">
            <CardHeader className="pb-3">
              <button 
                onClick={() => toggleSection('connection')}
                className="flex items-center justify-between w-full text-left hover:bg-slate-700/50 -m-4 p-4 rounded-lg transition-colors"
              >
                <div className="flex items-center gap-3">
                  <div className="p-1.5 rounded-md bg-blue-400/10">
                    <Settings className="h-4 w-4 text-blue-400" />
                  </div>
                  <div>
                    <CardTitle className="text-base text-slate-200">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</CardTitle>
                    <CardDescription className="text-slate-400">
                      URL, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API
                    </CardDescription>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  {expandedSection === 'connection' && (
                    <div className="flex items-center gap-2">
                      {getStatusIcon()}
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={(e) => {
                          e.stopPropagation();
                          testConnection();
                        }}
                        disabled={isTestingConnection}
                        className="bg-slate-700 border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-700"
                      >
                        <TestTube className="h-4 w-4 mr-2" />
                        {isTestingConnection ? 'üîÑ –¢–µ—Å—Ç–∏—Ä—É—é...' : 'üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å'}
                      </Button>
                    </div>
                  )}
                  {expandedSection === 'connection' ? (
                    <ChevronUp className="h-4 w-4 text-slate-400" />
                  ) : (
                    <ChevronDown className="h-4 w-4 text-slate-400" />
                  )}
                </div>
              </button>
            </CardHeader>

            {expandedSection === 'connection' && (
              <CardContent className="space-y-6 bg-slate-800/20 rounded-b-lg border-t bg-slate-800 border-slate-700">
                {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                <div className="space-y-4">
                  <h4 className="font-medium text-slate-300 flex items-center gap-2">
                    <div className="w-1.5 h-1.5 rounded-full bg-blue-500"></div>
                    –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="baseUrl" className="text-sm font-medium text-slate-300">–ë–∞–∑–æ–≤—ã–π URL API *</Label>
                      <Input
                        id="baseUrl"
                        value={config.baseUrl}
                        onChange={(e) => updateConfig({ baseUrl: e.target.value })}
                        placeholder="https://pos.autooplata.ru/tms"
                        className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500"
                      />
                    </div>

                    {/* systemId –∏ defaultStationId —É–±—Ä–∞–Ω—ã - —Ç–µ–ø–µ—Ä—å –±–µ—Ä—É—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å–µ—Ç–∏ –∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ */}

                    <div className="space-y-2">
                      <Label htmlFor="timeout" className="text-sm font-medium text-slate-300">Timeout (–º—Å)</Label>
                      <Input
                        id="timeout"
                        type="number"
                        value={config.timeout}
                        onChange={(e) => updateConfig({ timeout: parseInt(e.target.value) || 30000 })}
                        className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500"
                      />
                    </div>
                  </div>
                </div>

                <Separator className="bg-slate-200 dark:bg-slate-700" />

                {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
                <div className="space-y-4">
                  <h4 className="font-medium text-slate-300 flex items-center gap-2">
                    <div className="w-1.5 h-1.5 rounded-full bg-green-500"></div>
                    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                  </h4>
                  
                  <div className="space-y-2">
                    <Label htmlFor="authType" className="text-sm font-medium text-slate-300">–¢–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</Label>
                    <Select 
                      value={config.authType} 
                      onValueChange={(value: any) => updateConfig({ authType: value })}
                    >
                      <SelectTrigger className="bg-slate-700 border-slate-600">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-slate-700 border-slate-600">
                        <SelectItem value="none">üîì –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</SelectItem>
                        <SelectItem value="basic">üë§ Basic Auth</SelectItem>
                        <SelectItem value="bearer">üîë Bearer Token</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {config.authType === 'basic' && (
                    <div className="grid grid-cols-2 gap-4 p-4 bg-slate-700/30 rounded-lg border border-slate-600">
                      <div className="space-y-2">
                        <Label htmlFor="username" className="text-sm font-medium text-slate-300">üë§ –õ–æ–≥–∏–Ω</Label>
                        <Input
                          id="username"
                          value={config.username || ''}
                          onChange={(e) => updateConfig({ username: e.target.value })}
                          placeholder="UserApi"
                          className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="password" className="text-sm font-medium text-slate-300">üîí –ü–∞—Ä–æ–ª—å</Label>
                        <Input
                          id="password"
                          type="password"
                          value={config.password || ''}
                          onChange={(e) => {
                            console.log('üîê –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω:', e.target.value ? '***' + e.target.value.slice(-2) : '–ü–£–°–¢–û–ï –ü–û–õ–ï');
                            updateConfig({ password: e.target.value });
                          }}
                          placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                          className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500"
                        />
                      </div>
                    </div>
                  )}

                  {config.authType === 'bearer' && (
                    <div className="space-y-4 p-4 bg-slate-700/30 rounded-lg border border-slate-600">
                      <div className="flex items-center gap-2">
                        <div className="p-1.5 rounded-full bg-blue-400/10">
                          <Key className="h-4 w-4 text-blue-400" />
                        </div>
                        <Label className="text-sm font-medium text-slate-300">üîë Bearer Token</Label>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="apiKey" className="text-sm font-medium text-slate-300">API –∫–ª—é—á</Label>
                        <Input
                          id="apiKey"
                          type="text"
                          value={config.apiKey || ''}
                          onChange={(e) => {
                            console.log('üîë Bearer token –∏–∑–º–µ–Ω–µ–Ω:', e.target.value ? 'eyJ...' + e.target.value.slice(-10) : '–ü–£–°–¢–û–ï –ü–û–õ–ï');
                            updateConfig({ apiKey: e.target.value });
                          }}
                          placeholder="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500 font-mono text-sm"
                        />
                        <p className="text-xs text-slate-400">
                          –í–≤–µ–¥–∏—Ç–µ Bearer token –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API
                        </p>
                      </div>
                    </div>
                  )}
                </div>

                <Separator className="bg-slate-200 dark:bg-slate-700" />

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö */}
                <div className="space-y-4">
                  <h4 className="font-medium text-slate-300 flex items-center gap-2">
                    <Settings className="h-4 w-4" />
                    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
                  </h4>
                  <div className="bg-slate-700/50 rounded-lg p-4">
                    <p className="text-sm text-slate-300 mb-3">
                      <strong>System ID</strong> –∏ <strong>Station ID</strong> —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
                    </p>
                    <ul className="text-xs text-slate-400 space-y-2">
                      <li className="flex items-center gap-2">
                        <div className="w-1.5 h-1.5 rounded-full bg-blue-400"></div>
                        <strong>System ID</strong> - –±–µ—Ä–µ—Ç—Å—è –∏–∑ external_id –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                      </li>
                      <li className="flex items-center gap-2">
                        <div className="w-1.5 h-1.5 rounded-full bg-green-400"></div>
                        <strong>Station ID</strong> - –±–µ—Ä–µ—Ç—Å—è –∏–∑ external_id –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                      </li>
                      <li className="flex items-center gap-2">
                        <div className="w-1.5 h-1.5 rounded-full bg-orange-400"></div>
                        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ API
                      </li>
                    </ul>
                  </div>
                </div>

                <Separator className="bg-slate-200 dark:bg-slate-700" />

                {/* –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã */}
                <div className="space-y-4">
                  <h4 className="font-medium text-slate-300 flex items-center gap-2">
                    <div className="w-1.5 h-1.5 rounded-full bg-purple-500"></div>
                    –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API
                  </h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="tanksEndpoint" className="text-sm font-medium text-slate-300 flex items-center gap-2">
                        <Fuel className="h-4 w-4 text-blue-400" />
                        –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
                      </Label>
                      <Input
                        id="tanksEndpoint"
                        value={config.endpoints.tanks}
                        onChange={(e) => updateConfig({ 
                          endpoints: { ...config.endpoints, tanks: e.target.value } 
                        })}
                        placeholder="/v1/tanks"
                        className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500 font-mono text-sm"
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="transactionsEndpoint" className="text-sm font-medium text-slate-300 flex items-center gap-2">
                        <Receipt className="h-4 w-4 text-green-600 dark:text-green-400" />
                        –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                      </Label>
                      <Input
                        id="transactionsEndpoint"
                        value={config.endpoints.transactions}
                        onChange={(e) => updateConfig({ 
                          endpoints: { ...config.endpoints, transactions: e.target.value } 
                        })}
                        placeholder="/v1/transactions"
                        className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500 font-mono text-sm"
                      />
                    </div>
                  </div>
                </div>

                <Separator className="bg-slate-200 dark:bg-slate-700" />

                {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */}
                <div className="space-y-4">
                  <h4 className="font-medium text-slate-300 flex items-center gap-2">
                    <div className="w-1.5 h-1.5 rounded-full bg-orange-500"></div>
                    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                  </h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="refreshInterval" className="text-sm font-medium text-slate-300">‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)</Label>
                      <Input
                        id="refreshInterval"
                        type="number"
                        value={config.defaultParams.refreshInterval}
                        onChange={(e) => updateConfig({ 
                          defaultParams: { 
                            ...config.defaultParams, 
                            refreshInterval: parseInt(e.target.value) || 60 
                          } 
                        })}
                        className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500"
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="maxRecords" className="text-sm font-medium text-slate-300">üìä –ú–∞–∫—Å. –∑–∞–ø–∏—Å–µ–π</Label>
                      <Input
                        id="maxRecords"
                        type="number"
                        value={config.defaultParams.maxRecords}
                        onChange={(e) => updateConfig({ 
                          defaultParams: { 
                            ...config.defaultParams, 
                            maxRecords: parseInt(e.target.value) || 1000 
                          } 
                        })}
                        className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500"
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="retryAttempts" className="text-sm font-medium text-slate-300">üîÑ –ü–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–∞</Label>
                      <Input
                        id="retryAttempts"
                        type="number"
                        value={config.retryAttempts}
                        onChange={(e) => updateConfig({ retryAttempts: parseInt(e.target.value) || 3 })}
                        className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500"
                      />
                    </div>
                  </div>
                </div>

                <Separator className="bg-slate-200 dark:bg-slate-700" />

                {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                <div className="space-y-4">
                  <h4 className="font-medium text-slate-300 flex items-center gap-2">
                    <div className="w-1.5 h-1.5 rounded-full bg-yellow-500"></div>
                    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="testSystemId" className="text-sm font-medium text-slate-300">System ID –¥–ª—è —Ç–µ—Å—Ç–∞</Label>
                      <Input
                        id="testSystemId"
                        value={testSystemId}
                        onChange={(e) => setTestSystemId(e.target.value)}
                        placeholder="1"
                        className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500"
                      />
                      <p className="text-xs text-slate-400">ID —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</p>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="testStationId" className="text-sm font-medium text-slate-300">Station ID –¥–ª—è —Ç–µ—Å—Ç–∞</Label>
                      <Input
                        id="testStationId"
                        value={testStationId}
                        onChange={(e) => setTestStationId(e.target.value)}
                        placeholder="15"
                        className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500"
                      />
                      <p className="text-xs text-slate-400">ID —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –¥–ª—è "–ù–æ—Ä–¥ –õ–∞–π–Ω")</p>
                    </div>
                  </div>
                </div>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                {testResult && (
                  <div className={`p-4 rounded-lg border-l-4 ${
                    testResult.success 
                      ? 'bg-blue-50 border-blue-400 dark:bg-blue-950/20 dark:border-blue-600' 
                      : 'bg-red-50 border-red-400 dark:bg-red-950/20 dark:border-red-600'
                  }`}>
                    <div className="flex items-start gap-3">
                      <div className={`p-1.5 rounded-full ${
                        testResult.success
                          ? 'bg-blue-500/10 dark:bg-blue-400/10'
                          : 'bg-red-500/10 dark:bg-red-400/10'
                      }`}>
                        {testResult.success ? (
                          <CheckCircle className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                        ) : (
                          <XCircle className="h-5 w-5 text-red-600 dark:text-red-400" />
                        )}
                      </div>
                      <div className="flex-1">
                        {testResult.success ? (
                          <div>
                            <div className="font-semibold text-blue-800 dark:text-blue-200 text-base">
                              ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
                            </div>
                            <div className="text-blue-700 dark:text-blue-300 text-sm mt-1">
                              ‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {testResult.responseTime}–º—Å
                            </div>
                          </div>
                        ) : (
                          <div>
                            <div className="font-semibold text-red-800 dark:text-red-200 text-base">
                              ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                            </div>
                            <div className="text-red-700 dark:text-red-300 text-sm mt-1">
                              {testResult.error}
                            </div>
                          </div>
                        )}
                        <div className="text-xs text-slate-500 dark:text-slate-400 mt-2 font-mono">
                          üåê –≠–Ω–¥–ø–æ–∏–Ω—Ç: {testResult.endpoint}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            )}
          </Card>

          {/* –°–µ–∫—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ */}
          <Card className="bg-slate-800 border-slate-700 hover:shadow-md transition-all duration-200">
            <CardHeader className="pb-3">
              <button 
                onClick={() => toggleSection('mapping')}
                className="flex items-center justify-between w-full text-left hover:bg-slate-700/50 -m-4 p-4 rounded-lg transition-colors"
              >
                <div className="flex items-center gap-3">
                  <div className="p-1.5 rounded-md bg-blue-500/10 dark:bg-blue-400/10">
                    <Link2 className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                  </div>
                  <div>
                    <CardTitle className="text-base text-slate-200">–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–∞–ø–ø–∏–Ω–≥ —Å—É—â–Ω–æ—Å—Ç–µ–π</CardTitle>
                    <CardDescription className="text-slate-400">
                      –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–æ–≤ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
                    </CardDescription>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="flex items-center gap-2">
                    <Label 
                      htmlFor="mapping-switch" 
                      className="text-sm font-medium text-slate-300"
                      onClick={(e) => e.stopPropagation()}
                    >
                      {config.universalMapping?.enabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω–æ' : '‚ö´ –û—Ç–∫–ª—é—á–µ–Ω–æ'}
                    </Label>
                    <Switch
                      id="mapping-switch"
                      checked={config.universalMapping?.enabled || false}
                      onCheckedChange={(enabled) => {
                        updateConfig({ 
                          universalMapping: { 
                            ...config.universalMapping, 
                            enabled 
                          } 
                        });
                      }}
                      onClick={(e) => e.stopPropagation()}
                      className="data-[state=checked]:bg-blue-500"
                    />
                  </div>
                  {expandedSection === 'mapping' ? (
                    <ChevronUp className="h-4 w-4 text-slate-400" />
                  ) : (
                    <ChevronDown className="h-4 w-4 text-slate-400" />
                  )}
                </div>
              </button>
            </CardHeader>

            {expandedSection === 'mapping' && (
              <CardContent className="space-y-6 bg-slate-800/20 rounded-b-lg border-t bg-slate-800 border-slate-700">
                <div className="space-y-6">
                  <div className="p-4 bg-gradient-to-r from-blue-950/30 to-blue-900/20 rounded-lg border border-blue-800/50">
                    <p className="text-sm text-slate-300 leading-relaxed">
                      üìã <strong>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:</strong> –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∫–æ–¥–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π 
                      –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º.
                    </p>
                  </div>

                  {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –º–∞–ø–ø–∏–Ω–≥–∞ */}
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                    <div className="p-3 bg-slate-700/50 border bg-slate-800 border-slate-700 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-lg">üõ¢Ô∏è</span>
                        <h5 className="font-medium text-slate-300">–¢–æ–ø–ª–∏–≤–æ</h5>
                      </div>
                      <p className="text-xs text-slate-400">–ê–ò-92, –ê–ò-95, –î–¢ –∏ –¥—Ä.</p>
                    </div>
                    
                    <div className="p-3 bg-slate-700/50 border bg-slate-800 border-slate-700 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-lg">üí≥</span>
                        <h5 className="font-medium text-slate-300">–û–ø–ª–∞—Ç–∞</h5>
                      </div>
                      <p className="text-xs text-slate-400">–ù–∞–ª–∏—á–Ω—ã–µ, –∫–∞—Ä—Ç–∞, —Ç–∞–ª–æ–Ω—ã</p>
                    </div>

                    <div className="p-3 bg-slate-700/50 border bg-slate-800 border-slate-700 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-lg">‚õΩ</span>
                        <h5 className="font-medium text-slate-300">–¢–†–ö</h5>
                      </div>
                      <p className="text-xs text-slate-400">–î–∏—Å–ø–µ–Ω—Å–µ—Ä—ã –∏ –∫–æ–ª–æ–Ω–∫–∏</p>
                    </div>

                    <div className="p-3 bg-slate-700/50 border bg-slate-800 border-slate-700 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-lg">üñ•Ô∏è</span>
                        <h5 className="font-medium text-slate-300">–¢–Æ–î</h5>
                      </div>
                      <p className="text-xs text-slate-400">–¢–µ—Ä–º–∏–Ω–∞–ª—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</p>
                    </div>

                    <div className="p-3 bg-slate-700/50 border bg-slate-800 border-slate-700 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-lg">üîß</span>
                        <h5 className="font-medium text-slate-300">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h5>
                      </div>
                      <p className="text-xs text-slate-400">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</p>
                    </div>

                    <div className="p-3 bg-slate-700/50 border bg-slate-800 border-slate-700 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-lg">üõ†Ô∏è</span>
                        <h5 className="font-medium text-slate-300">–£—Å–ª—É–≥–∏</h5>
                      </div>
                      <p className="text-xs text-slate-400">–î–æ–ø. —É—Å–ª—É–≥–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã</p>
                    </div>
                  </div>

                  {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
                  <div className="space-y-4">
                    <h4 className="font-medium text-slate-300 flex items-center gap-2">
                      <div className="w-1.5 h-1.5 rounded-full bg-blue-500"></div>
                      –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="networkSelect" className="text-sm font-medium text-slate-300">üè¢ –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Ç—å</Label>
                        <Input
                          id="networkSelect"
                          value={selectedNetworkId}
                          onChange={(e) => setSelectedNetworkId(e.target.value)}
                          placeholder="ID —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏"
                          className="bg-slate-700 border-slate-600 focus:border-blue-500 focus:ring-blue-500"
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="mappingTypeSelect" className="text-sm font-medium text-slate-300">üìã –¢–∏–ø –º–∞–ø–ø–∏–Ω–≥–∞</Label>
                        <Select 
                          value={selectedMappingType} 
                          onValueChange={setSelectedMappingType}
                        >
                          <SelectTrigger className="bg-slate-700 border-slate-600">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent className="bg-slate-700 border-slate-600">
                            <SelectItem value="fuel">üõ¢Ô∏è –¢–æ–ø–ª–∏–≤–æ</SelectItem>
                            <SelectItem value="payment">üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</SelectItem>
                            <SelectItem value="dispenser">‚õΩ –¢–†–ö (–¥–∏—Å–ø–µ–Ω—Å–µ—Ä—ã)</SelectItem>
                            <SelectItem value="terminal">üñ•Ô∏è –¢–Æ–î (—Ç–µ—Ä–º–∏–Ω–∞–ª—ã)</SelectItem>
                            <SelectItem value="equipment">üîß –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</SelectItem>
                            <SelectItem value="service">üõ†Ô∏è –£—Å–ª—É–≥–∏</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="syncStrategy" className="text-sm font-medium text-slate-300">‚öôÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</Label>
                        <Select 
                          value={config.universalMapping?.syncStrategy || 'hybrid'} 
                          onValueChange={(value: any) => updateConfig({ 
                            universalMapping: { 
                              ...config.universalMapping, 
                              syncStrategy: value 
                            } 
                          })}
                        >
                          <SelectTrigger className="bg-slate-700 border-slate-600">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent className="bg-slate-700 border-slate-600">
                            <SelectItem value="manual">üë§ –†—É—á–Ω–∞—è</SelectItem>
                            <SelectItem value="auto">ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è</SelectItem>
                            <SelectItem value="hybrid">‚öñÔ∏è –°–º–µ—à–∞–Ω–Ω–∞—è</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="conflictResolution" className="text-sm font-medium text-slate-300">‚ö° –ü—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö</Label>
                        <Select 
                          value={config.universalMapping?.conflictResolution || 'prefer_internal'} 
                          onValueChange={(value: any) => updateConfig({ 
                            universalMapping: { 
                              ...config.universalMapping, 
                              conflictResolution: value 
                            } 
                          })}
                        >
                          <SelectTrigger className="bg-slate-700 border-slate-600">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent className="bg-slate-700 border-slate-600">
                            <SelectItem value="prefer_api">üåê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç API</SelectItem>
                            <SelectItem value="prefer_internal">üè† –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</SelectItem>
                            <SelectItem value="manual">üë®‚Äçüíª –†—É—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>

                  {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–º */}
                  <div className="flex gap-3 flex-wrap">
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}}
                      disabled={isSyncingMappings || !selectedNetworkId}
                      className="bg-slate-700 border-slate-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 hover:border-blue-300 dark:hover:border-blue-600"
                    >
                      <RefreshCw className={`h-4 w-4 mr-2 ${isSyncingMappings ? 'animate-spin' : ''}`} />
                      {isSyncingMappings ? 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : 'üîÑ –°–∏–Ω—Ö—Ä. –≤—Å–µ —Ç–∏–ø—ã'}
                    </Button>
                    
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è */}}
                      disabled={!selectedNetworkId}
                      className="bg-slate-700 border-slate-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 hover:border-blue-300 dark:hover:border-blue-600"
                    >
                      <Zap className="h-4 w-4 mr-2" />
                      ‚ö° –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è {selectedMappingType}
                    </Button>
                    
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => setShowMappingEditor(!showMappingEditor)}
                      className="bg-slate-700 border-slate-600 hover:bg-purple-50 dark:hover:bg-purple-900/20 hover:border-purple-300 dark:hover:border-purple-600"
                    >
                      <Edit3 className="h-4 w-4 mr-2" />
                      {showMappingEditor ? 'üìã –°–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä' : '‚úèÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä'}
                    </Button>
                  </div>
                </div>
              </CardContent>
            )}
          </Card>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <Card className="bg-slate-50/50 dark:bg-slate-800/50 bg-slate-800 border-slate-700">
        <CardContent className="pt-6">
          <div className="flex justify-between items-center">
            <Button 
              variant="outline" 
              onClick={resetConfig}
              className="bg-slate-700 border-slate-600 text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700"
            >
              <RotateCcw className="h-4 w-4 mr-2" />
              üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            </Button>
            
            <div className="flex items-center gap-4">
              {hasUnsavedChanges && (
                <div className="flex items-center gap-2 px-3 py-2 bg-amber-50 dark:bg-amber-950/30 border border-amber-200 dark:border-amber-800 rounded-lg">
                  <div className="w-2 h-2 bg-amber-500 rounded-full animate-pulse"></div>
                  <span className="text-amber-700 dark:text-amber-300 text-sm font-medium">
                    ‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                  </span>
                </div>
              )}
              <Button 
                onClick={saveConfig} 
                disabled={!hasUnsavedChanges}
                className={`min-w-[140px] ${
                  hasUnsavedChanges 
                    ? 'bg-blue-600 hover:bg-blue-700 text-white shadow-md' 
                    : 'bg-slate-300 dark:bg-slate-600 text-slate-500 dark:text-slate-400'
                }`}
              >
                <Save className="h-4 w-4 mr-2" />
                {hasUnsavedChanges ? 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '‚úÖ –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};