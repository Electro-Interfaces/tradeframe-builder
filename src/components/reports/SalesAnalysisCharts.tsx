// üö® –ö–†–ò–¢–ò–ß–ù–û: –§–ê–ô–õ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù - –°–û–î–ï–†–ñ–ò–¢ –¢–û–õ–¨–ö–û –î–ï–ú–û –î–ê–ù–ù–´–ï
// ‚ùå –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∞–ª —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:
// - Fake fuel sales data
// - Fake payment methods data  
// - Fake trend data
// - Hard-coded metrics: "–ê–ò-95 (45%)", "14:00 - 18:00", "78.5%"
//
// ‚úÖ FAIL-SECURE: –í —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞–∑ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–≤–µ—Ä–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏—è–º –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ø–æ—Ç–µ—Ä—è–º.
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SalesAnalysisChartsSimple.tsx –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase.

export function SalesAnalysisCharts() {
  throw new Error('üö® –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û: SalesAnalysisCharts —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SalesAnalysisChartsSimple');
}

// ‚ùå –í–°–ï MOCK –î–ê–ù–ù–´–ï –£–î–ê–õ–ï–ù–´ –ò–ó –°–û–û–ë–†–ê–ñ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
const ChartSkeleton = () => (
  <div className="w-full h-64 bg-slate-700 rounded-lg flex items-center justify-center">
    <div className="text-slate-400">–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞...</div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ–ø–ª–∏–≤–∞
const FuelChart = () => {
  const [isClient, setIsClient] = useState(false);

  React.useEffect(() => {
    setIsClient(true);
  }, []);

  if (!isClient) {
    return <ChartSkeleton />;
  }

  return (
    <React.Suspense fallback={<ChartSkeleton />}>
      <ResponsiveContainer width="100%" height={300}>
        <PieChart>
          <Pie
            data={mockFuelData}
            cx="50%"
            cy="50%"
            outerRadius={80}
            dataKey="value"
            label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
          >
            {mockFuelData.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={entry.color} />
            ))}
          </Pie>
          <Tooltip 
            contentStyle={{ 
              backgroundColor: '#1e293b', 
              border: '1px solid #475569',
              borderRadius: '6px',
              color: '#f1f5f9'
            }}
          />
        </PieChart>
      </ResponsiveContainer>
    </React.Suspense>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
const TrendChart = () => {
  const [isClient, setIsClient] = useState(false);

  React.useEffect(() => {
    setIsClient(true);
  }, []);

  if (!isClient) {
    return <ChartSkeleton />;
  }

  return (
    <React.Suspense fallback={<ChartSkeleton />}>
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={mockTrendData}>
          <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
          <XAxis dataKey="period" stroke="#9ca3af" />
          <YAxis stroke="#9ca3af" />
          <Tooltip 
            contentStyle={{ 
              backgroundColor: '#1e293b', 
              border: '1px solid #475569',
              borderRadius: '6px',
              color: '#f1f5f9'
            }}
          />
          <Legend />
          <Line 
            type="monotone" 
            dataKey="revenue" 
            stroke="#3b82f6" 
            strokeWidth={2}
            name="–í—ã—Ä—É—á–∫–∞"
          />
          <Line 
            type="monotone" 
            dataKey="transactions" 
            stroke="#10b981" 
            strokeWidth={2}
            name="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
          />
        </LineChart>
      </ResponsiveContainer>
    </React.Suspense>
  );
};

interface SalesAnalysisChartsProps {
  selectedNetwork?: string;
  selectedTradingPoint?: string;
}

export function SalesAnalysisCharts({ selectedNetwork, selectedTradingPoint }: SalesAnalysisChartsProps) {
  return (
    <div className="space-y-6">
      {/* –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞ */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞</CardTitle>
          </CardHeader>
          <CardContent>
            <FuelChart />
          </CardContent>
        </Card>

        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">–¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂</CardTitle>
          </CardHeader>
          <CardContent>
            <TrendChart />
          </CardContent>
        </Card>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
      <Card className="bg-slate-800 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-white">
            <div className="text-center p-4 bg-slate-700 rounded-lg">
              <h4 className="text-sm text-slate-400 mb-2">–¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç</h4>
              <p className="text-lg font-semibold">–ê–ò-95 (45%)</p>
            </div>
            <div className="text-center p-4 bg-slate-700 rounded-lg">
              <h4 className="text-sm text-slate-400 mb-2">–ü–∏–∫ –ø—Ä–æ–¥–∞–∂</h4>
              <p className="text-lg font-semibold">14:00 - 18:00</p>
            </div>
            <div className="text-center p-4 bg-slate-700 rounded-lg">
              <h4 className="text-sm text-slate-400 mb-2">–ö–æ–Ω–≤–µ—Ä—Å–∏—è</h4>
              <p className="text-lg font-semibold">78.5%</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}