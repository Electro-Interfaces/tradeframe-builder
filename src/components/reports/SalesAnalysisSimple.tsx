import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { TrendingUp, CreditCard, Fuel, Users, DollarSign } from "lucide-react";
import { useIsMobile } from "@/hooks/use-mobile";
import { operationsSupabaseService } from "@/services/operationsSupabaseService";
import { tradingPointsService } from "@/services/tradingPointsService";
import { Network } from "@/types/network";
import { TradingPoint } from "@/types/tradingpoint";

interface SalesAnalysisData {
  totalRevenue: number;
  totalTransactions: number;
  totalFuelLiters: number;
  averageTicket: number;
  cashlessPercentage: number;
  loading: boolean;
}

interface SalesAnalysisProps {
  selectedNetwork?: Network | null;
  selectedTradingPoint?: string;
  dateFrom?: string;
  dateTo?: string;
  groupBy?: string;
}

export function SalesAnalysisSimple({ selectedNetwork, selectedTradingPoint, dateFrom, dateTo, groupBy }: SalesAnalysisProps) {
  const isMobile = useIsMobile();
  
  const [salesData, setSalesData] = useState<SalesAnalysisData>({
    totalRevenue: 0,
    totalTransactions: 0,
    totalFuelLiters: 0,
    averageTicket: 0,
    cashlessPercentage: 0,
    loading: true
  });

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(value);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  useEffect(() => {
    async function loadSalesData() {
      if (!selectedNetwork) {
        setSalesData(prev => ({ ...prev, loading: false }));
        return;
      }

      try {
        setSalesData(prev => ({ ...prev, loading: true }));

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        const filters: any = {};
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞
        if (selectedTradingPoint && selectedTradingPoint !== "all") {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
          filters.tradingPointId = selectedTradingPoint;
          console.log('üéØ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ (UUID):', { 
            selectedTradingPoint
          });
        } else {
          console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–π —Å–µ—Ç–∏');
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        let startDateValue, endDateValue;
        
        if (dateFrom && dateTo) {
          startDateValue = dateFrom;
          endDateValue = dateTo;
          console.log('üìÖ Using provided date range:', { dateFrom, dateTo });
        } else {
          const endDate = new Date();
          const startDate = new Date();
          startDate.setDate(startDate.getDate() - 7);
          startDateValue = startDate.toISOString().split('T')[0];
          endDateValue = endDate.toISOString().split('T')[0];
          console.log('üìÖ Using default 7-day range:', { startDateValue, endDateValue });
        }
        
        filters.status = 'completed';
        filters.startDate = startDateValue;
        filters.endDate = endDateValue;
        
        if (groupBy) {
          console.log('üìä Grouping by:', groupBy);
          filters.groupBy = groupBy;
        }

        console.log('üîç Loading sales data with filters:', filters);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ Supabase
        let operations = await operationsSupabaseService.getOperations(filters);
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≤—Å—è —Å–µ—Ç—å (–Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞), —Ç–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º —ç—Ç–æ–π —Å–µ—Ç–∏
        if (selectedNetwork && (!selectedTradingPoint || selectedTradingPoint === "all")) {
          console.log('üè™ –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–π —Å–µ—Ç–∏:', selectedNetwork.id);
          
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
            const tradingPoints = await tradingPointsService.getByNetworkId(selectedNetwork.id);
            const networkTradingPointIds = tradingPoints.map(tp => tp.id);
            
            console.log('üè™ UUID —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —Å–µ—Ç–∏:', networkTradingPointIds);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ UUID —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —Å–µ—Ç–∏
            operations = operations.filter(op => 
              op.tradingPointId && networkTradingPointIds.includes(op.tradingPointId)
            );
            
            console.log('üè™ –û–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–µ—Ç–∏:', operations.length);
            
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —Å–µ—Ç–∏:', error);
          }
        }

        console.log('üìä Loaded operations for analysis:', operations.length);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
        const uniqueTradingPoints = [...new Set(operations.map(op => op.tradingPointId).filter(Boolean))];
        console.log('üè™ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:', uniqueTradingPoints);
        
        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ
        if (selectedTradingPoint && selectedTradingPoint !== "all") {
          console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ:');
          console.log('   - –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞:', selectedTradingPoint);
          console.log('   - –¢–∏–ø –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', typeof selectedTradingPoint);
          console.log('   - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:', uniqueTradingPoints);
          console.log('   - –¢–∏–ø—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:', uniqueTradingPoints.map(id => typeof id));
          
          const exactMatches = operations.filter(op => op.tradingPointId === selectedTradingPoint);
          const stringMatches = operations.filter(op => String(op.tradingPointId) === String(selectedTradingPoint));
          
          console.log(`   - –¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (===): ${exactMatches.length}`);
          console.log(`   - –°—Ç—Ä–æ–∫–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${stringMatches.length}`);
          console.log('   - –û–±—Ä–∞–∑—Ü—ã –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–æ—á–∫–æ–π:', operations.slice(0, 3).map(op => ({
            id: op.id,
            tradingPointId: op.tradingPointId,
            tradingPointIdType: typeof op.tradingPointId
          })));
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        const totalRevenue = operations.reduce((sum, op) => sum + (op.totalCost || 0), 0);
        const totalTransactions = operations.length;
        const totalFuelLiters = operations.reduce((sum, op) => sum + (op.quantity || 0), 0);
        const averageTicket = totalTransactions > 0 ? totalRevenue / totalTransactions : 0;
        
        // –ü—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        const cashlessOperations = operations.filter(op => 
          op.paymentMethod === 'bank_card' || 
          op.paymentMethod === 'corporate_card'
        ).length;
        const cashlessPercentage = totalTransactions > 0 ? (cashlessOperations / totalTransactions) * 100 : 0;

        setSalesData({
          totalRevenue,
          totalTransactions,
          totalFuelLiters,
          averageTicket,
          cashlessPercentage,
          loading: false
        });

        console.log('‚úÖ Sales data calculated:', {
          totalRevenue,
          totalTransactions,
          totalFuelLiters,
          averageTicket,
          cashlessPercentage: `${cashlessPercentage.toFixed(1)}%`
        });

      } catch (error) {
        console.error('‚ùå Error loading sales data:', error);
        setSalesData(prev => ({ ...prev, loading: false }));
      }
    }

    loadSalesData();
  }, [selectedNetwork, selectedTradingPoint, dateFrom, dateTo, groupBy]);

  return (
    <div className="space-y-6">
      {/* KPI –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-slate-200">
              –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
            </CardTitle>
            <DollarSign className="h-4 w-4 text-green-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">
              {salesData.loading ? (
                <div className="animate-pulse bg-slate-600 h-8 w-24 rounded"></div>
              ) : (
                formatCurrency(salesData.totalRevenue)
              )}
            </div>
            <p className="text-xs text-green-400">
              {selectedTradingPoint ? '–ó–∞ –Ω–µ–¥–µ–ª—é –ø–æ —Ç–æ—á–∫–µ' : '–ó–∞ –Ω–µ–¥–µ–ª—é –ø–æ —Å–µ—Ç–∏'}
            </p>
          </CardContent>
        </Card>

        <Card className="bg-slate-800 border-slate-700">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-slate-200">
              –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            </CardTitle>
            <Users className="h-4 w-4 text-blue-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">
              {salesData.loading ? (
                <div className="animate-pulse bg-slate-600 h-8 w-20 rounded"></div>
              ) : (
                salesData.totalTransactions.toLocaleString()
              )}
            </div>
            <p className="text-xs text-blue-400">
              {selectedTradingPoint ? '–û–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Ç–æ—á–∫–µ' : '–û–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Å–µ—Ç–∏'}
            </p>
          </CardContent>
        </Card>

        <Card className="bg-slate-800 border-slate-700">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-slate-200">
              –¢–æ–ø–ª–∏–≤–∞ –æ—Ç–ø—É—â–µ–Ω–æ
            </CardTitle>
            <Fuel className="h-4 w-4 text-orange-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">
              {salesData.loading ? (
                <div className="animate-pulse bg-slate-600 h-8 w-20 rounded"></div>
              ) : (
                `${salesData.totalFuelLiters.toLocaleString()} –ª`
              )}
            </div>
            <p className="text-xs text-orange-400">
              {selectedTradingPoint ? '–õ–∏—Ç—Ä–æ–≤ –ø–æ —Ç–æ—á–∫–µ' : '–õ–∏—Ç—Ä–æ–≤ –ø–æ —Å–µ—Ç–∏'}
            </p>
          </CardContent>
        </Card>

        <Card className="bg-slate-800 border-slate-700">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-slate-200">
              –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
            </CardTitle>
            <TrendingUp className="h-4 w-4 text-purple-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">
              {salesData.loading ? (
                <div className="animate-pulse bg-slate-600 h-8 w-20 rounded"></div>
              ) : (
                formatCurrency(salesData.averageTicket)
              )}
            </div>
            <p className="text-xs text-purple-400">
              –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            </p>
          </CardContent>
        </Card>

        <Card className="bg-slate-800 border-slate-700">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-slate-200">
              –î–æ–ª—è –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã—Ö
            </CardTitle>
            <CreditCard className="h-4 w-4 text-cyan-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">
              {salesData.loading ? (
                <div className="animate-pulse bg-slate-600 h-8 w-16 rounded"></div>
              ) : (
                `${salesData.cashlessPercentage.toFixed(1)}%`
              )}
            </div>
            <p className="text-xs text-cyan-400">
              –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}