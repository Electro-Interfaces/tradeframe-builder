// üö® –ö–†–ò–¢–ò–ß–ù–û: –§–ê–ô–õ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù - –°–û–î–ï–†–ñ–ò–¢ –¢–û–õ–¨–ö–û –î–ï–ú–û –î–ê–ù–ù–´–ï
// ‚ùå –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∞–ª —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ KPI –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:
// - totalRevenue: 2847635 (—Ñ–∏–∫—Ç–∏–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞)
// - totalTransactions: 1247 (—Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)  
// - totalFuelLiters: 45832 (—Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –ª–∏—Ç—Ä—ã —Ç–æ–ø–ª–∏–≤–∞)
// - averageTicket: 2284 (—Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫)
// - cashlessPercentage: 78.5 (—Ñ–∏–∫—Ç–∏–≤–Ω–∞—è –¥–æ–ª—è –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã—Ö)
//
// ‚úÖ FAIL-SECURE: –í —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞–∑ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–≤–µ—Ä–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏—è–º –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ø–æ—Ç–µ—Ä—è–º.
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SalesAnalysisSimple.tsx –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase.

export function SalesAnalysis() {
  throw new Error('üö® –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û: SalesAnalysis —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SalesAnalysisSimple');
}

// ‚ùå –í–°–ï MOCK –î–ê–ù–ù–´–ï –£–î–ê–õ–ï–ù–´ –ò–ó –°–û–û–ë–†–ê–ñ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò

interface SalesAnalysisProps {
  selectedNetwork: string | null;
  selectedTradingPoint: string | null;
}

export function SalesAnalysis({ selectedNetwork, selectedTradingPoint }: SalesAnalysisProps) {
  const isNetworkOnly = selectedNetwork && !selectedTradingPoint;
  const isTradingPointSelected = selectedNetwork && selectedTradingPoint;
  const [dateFrom, setDateFrom] = useState("2024-12-01");
  const [dateTo, setDateTo] = useState("2024-12-07");
  const [groupBy, setGroupBy] = useState("days");
  const [searchTransaction, setSearchTransaction] = useState("");
  const isMobile = useIsMobile();

  const handleApplyFilters = () => {
    toast({
      title: "–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã",
      description: `–ü–µ—Ä–∏–æ–¥: ${dateFrom} - ${dateTo}, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: ${groupBy}`,
    });
  };

  const handleExport = (type: string) => {
    toast({
      title: "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
      description: `–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö "${type}" –≤ CSV —Ñ–∞–π–ª –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω`,
    });
  };

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat("ru-RU", {
      style: "currency",
      currency: "RUB",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(value);
  };

  const filteredTransactions = mockTransactionData.filter(transaction =>
    transaction.id.toLowerCase().includes(searchTransaction.toLowerCase())
  );

  return (
    <div className="space-y-6">
      {/* Filters Panel */}
      <div className="bg-slate-800 border border-slate-600 rounded-lg">
        <div className="px-6 py-4">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
              <span className="text-white text-sm">‚öôÔ∏è</span>
            </div>
            <h2 className="text-lg font-semibold text-white">–§–∏–ª—å—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞</h2>
            <div className="text-sm text-slate-400">
              {isTradingPointSelected ? '–î–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏' : '–î–ª—è —Å–µ—Ç–∏'}
            </div>
          </div>
          
          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <div className={`grid gap-4 ${isMobile ? 'grid-cols-1' : 'grid-cols-4'}`}>
            {/* –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ */}
            <div>
              <Label htmlFor="dateFrom" className="text-sm text-slate-400 mb-2 block">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</Label>
              <Input
                id="dateFrom"
                type="date"
                value={dateFrom}
                onChange={(e) => setDateFrom(e.target.value)}
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
            
            {/* –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è */}
            <div>
              <Label htmlFor="dateTo" className="text-sm text-slate-400 mb-2 block">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</Label>
              <Input
                id="dateTo"
                type="date"
                value={dateTo}
                onChange={(e) => setDateTo(e.target.value)}
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
            
            {/* –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ */}
            <div>
              <Label className="text-sm text-slate-400 mb-2 block">–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞</Label>
              <Select value={groupBy} onValueChange={setGroupBy}>
                <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="days">–ü–æ –¥–Ω—è–º</SelectItem>
                  <SelectItem value="weeks">–ü–æ –Ω–µ–¥–µ–ª—è–º</SelectItem>
                  <SelectItem value="months">–ü–æ –º–µ—Å—è—Ü–∞–º</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            {/* –ü—Ä–∏–º–µ–Ω–∏—Ç—å */}
            <div>
              <Label className="text-sm text-slate-400 mb-2 block">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</Label>
              <Button 
                onClick={handleApplyFilters}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                –ü—Ä–∏–º–µ–Ω–∏—Ç—å
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* KPI Cards as Individual Tiles */}
      <div className={`grid gap-6 ${isMobile ? 'grid-cols-1' : 'md:grid-cols-2 lg:grid-cols-5'}`}>
        {/* –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ */}
        <div className="bg-slate-800 border border-slate-600 rounded-lg p-6 shadow-lg">
          <div className="flex items-center justify-between mb-4">
            <DollarSign className="h-8 w-8 text-green-400" />
          </div>
          <div className="space-y-2">
            <p className="text-sm text-slate-400">{isTradingPointSelected ? '–í—ã—Ä—É—á–∫–∞ —Ç–æ—á–∫–∏' : '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞'}</p>
            <p className="text-3xl font-bold text-white">
              {formatCurrency(isTradingPointSelected ? mockKpiData.totalRevenue / 5 : mockKpiData.totalRevenue)}
            </p>
            <p className="text-xs text-green-400">
              +12.5% –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
            </p>
          </div>
        </div>

        {/* –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
        <div className="bg-slate-800 border border-slate-600 rounded-lg p-6 shadow-lg">
          <div className="flex items-center justify-between mb-4">
            <Users className="h-8 w-8 text-blue-400" />
          </div>
          <div className="space-y-2">
            <p className="text-sm text-slate-400">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</p>
            <p className="text-3xl font-bold text-white">
              {(isTradingPointSelected ? Math.floor(mockKpiData.totalTransactions / 5) : mockKpiData.totalTransactions).toLocaleString()}
            </p>
            <p className="text-xs text-blue-400">
              +8.1% –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
            </p>
          </div>
        </div>

        {/* –¢–æ–ø–ª–∏–≤–∞ –æ—Ç–ø—É—â–µ–Ω–æ */}
        <div className="bg-slate-800 border border-slate-600 rounded-lg p-6 shadow-lg">
          <div className="flex items-center justify-between mb-4">
            <Fuel className="h-8 w-8 text-orange-400" />
          </div>
          <div className="space-y-2">
            <p className="text-sm text-slate-400">–¢–æ–ø–ª–∏–≤–∞ –æ—Ç–ø—É—â–µ–Ω–æ</p>
            <p className="text-3xl font-bold text-white">
              {(isTradingPointSelected ? Math.floor(mockKpiData.totalFuelLiters / 5) : mockKpiData.totalFuelLiters).toLocaleString()} –ª
            </p>
            <p className="text-xs text-orange-400">
              +5.3% –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
            </p>
          </div>
        </div>

        {/* –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ */}
        <div className="bg-slate-800 border border-slate-600 rounded-lg p-6 shadow-lg">
          <div className="flex items-center justify-between mb-4">
            <TrendingUp className="h-8 w-8 text-purple-400" />
          </div>
          <div className="space-y-2">
            <p className="text-sm text-slate-400">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</p>
            <p className="text-3xl font-bold text-white">
              {formatCurrency(mockKpiData.averageTicket)}
            </p>
            <p className="text-xs text-purple-400">
              +3.7% –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
            </p>
          </div>
        </div>

        {/* –î–æ–ª—è –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã—Ö */}
        <div className="bg-slate-800 border border-slate-600 rounded-lg p-6 shadow-lg">
          <div className="flex items-center justify-between mb-4">
            <CreditCard className="h-8 w-8 text-cyan-400" />
          </div>
          <div className="space-y-2">
            <p className="text-sm text-slate-400">–î–æ–ª—è –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã—Ö</p>
            <p className="text-3xl font-bold text-white">
              {mockKpiData.cashlessPercentage}%
            </p>
            <p className="text-xs text-cyan-400">
              +2.1% –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
            </p>
          </div>
        </div>
      </div>

      {/* Analysis Tabs */}
      <Tabs defaultValue="structure" className="space-y-4">
        {isMobile ? (
          <TabsList className="grid w-full grid-cols-2 h-auto gap-2 bg-slate-700 border border-slate-600 p-1">
            <TabsTrigger 
              value="structure" 
              className="text-white text-sm py-3 px-2 font-medium data-[state=active]:bg-blue-600 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-200 hover:bg-slate-600"
            >
              üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞
            </TabsTrigger>
            <TabsTrigger 
              value="trends"
              className="text-white text-sm py-3 px-2 font-medium data-[state=active]:bg-green-600 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-200 hover:bg-slate-600"
            >
              üìà –¢—Ä–µ–Ω–¥—ã
            </TabsTrigger>
            {isNetworkOnly && (
              <>
                <TabsTrigger 
                  value="stations"
                  className="text-white text-sm py-3 px-2 font-medium data-[state=active]:bg-purple-600 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-200 hover:bg-slate-600"
                >
                  üè™ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¢–¢
                </TabsTrigger>
                <TabsTrigger 
                  value="transactions"
                  className="text-white text-sm py-3 px-2 font-medium data-[state=active]:bg-orange-600 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-200 hover:bg-slate-600"
                >
                  üßæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                </TabsTrigger>
              </>
            )}
          </TabsList>
        ) : (
          <TabsList className="bg-slate-700 border border-slate-600 h-auto p-1">
            <TabsTrigger 
              value="structure" 
              className="text-white font-medium px-6 py-3 data-[state=active]:bg-blue-600 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-200 hover:bg-slate-600"
            >
              üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥–∞–∂
            </TabsTrigger>
            <TabsTrigger 
              value="trends" 
              className="text-white font-medium px-6 py-3 data-[state=active]:bg-green-600 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-200 hover:bg-slate-600"
            >
              üìà –î–∏–Ω–∞–º–∏–∫–∞ (–¢—Ä–µ–Ω–¥—ã)
            </TabsTrigger>
            {isNetworkOnly && (
              <TabsTrigger 
                value="stations" 
                className="text-white font-medium px-6 py-3 data-[state=active]:bg-purple-600 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-200 hover:bg-slate-600"
              >
                üè™ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
              </TabsTrigger>
            )}
            <TabsTrigger 
              value="transactions" 
              className="text-white font-medium px-6 py-3 data-[state=active]:bg-orange-600 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-200 hover:bg-slate-600"
            >
              üßæ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            </TabsTrigger>
          </TabsList>
        )}
        
        <TabsContent value="structure" className="space-y-4">
          <div className={`${isMobile ? 'flex flex-col gap-3' : 'flex justify-between items-center'}`}>
            <h3 className={`${isMobile ? 'text-lg' : 'text-xl'} font-semibold`}>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥–∞–∂</h3>
            <Button 
              variant="outline" 
              onClick={() => handleExport("—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–¥–∞–∂")}
              className={`transition-colors duration-200 flex items-center gap-2 ${isMobile ? 'w-full justify-center' : ''}`}
            >
              <Download className="w-4 h-4" />
              –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            </Button>
          </div>
          
          <div className={`grid gap-6 ${isMobile ? 'grid-cols-1' : 'md:grid-cols-2'}`}>
            {/* –†–∞–∑—Ä–µ–∑ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞ */}
            <Card className="bg-slate-800 border border-slate-600">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-white">
                  <Fuel className="h-5 w-5 text-orange-400" />
                  –†–∞–∑—Ä–µ–∑ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={isMobile ? 250 : 300}>
                  <PieChart>
                    <Pie
                      data={mockFuelData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ name, value }) => isMobile ? `${value}%` : `${name}: ${value}%`}
                      outerRadius={isMobile ? 60 : 80}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {mockFuelData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value, name) => [`${value}%`, name]} />
                  </PieChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
            
            {/* –†–∞–∑—Ä–µ–∑ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã */}
            <Card className="bg-slate-800 border border-slate-600">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-white">
                  <CreditCard className="h-5 w-5 text-blue-400" />
                  –†–∞–∑—Ä–µ–∑ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={isMobile ? 250 : 300}>
                  <PieChart>
                    <Pie
                      data={mockPaymentData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ name, value }) => isMobile ? `${value}%` : `${name}: ${value}%`}
                      outerRadius={isMobile ? 60 : 80}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {mockPaymentData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value, name) => [`${value}%`, name]} />
                  </PieChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="trends" className="space-y-4">
          <div className={`${isMobile ? 'flex flex-col gap-3' : 'flex justify-between items-center'}`}>
            <h3 className={`${isMobile ? 'text-lg' : 'text-xl'} font-semibold`}>
              –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ {isTradingPointSelected ? '—Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏' : '–ø–æ —Å–µ—Ç–∏'}
            </h3>
            <Button 
              variant="outline" 
              onClick={() => handleExport("–¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂")}
              className={`transition-colors duration-200 flex items-center gap-2 ${isMobile ? 'w-full justify-center' : ''}`}
            >
              <Download className="w-4 h-4" />
              –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            </Button>
          </div>
          
          <Card className="bg-slate-800 border border-slate-600">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-white">
                <TrendingUp className="h-5 w-5 text-green-400" />
                –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={isMobile ? 250 : 400}>
                <LineChart data={mockTrendData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="period" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="revenue" stroke="#3b82f6" name="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±)" />
                  <Line type="monotone" dataKey="transactions" stroke="#10b981" name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π" />
                </LineChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>

        {isNetworkOnly && (
          <TabsContent value="stations" className="space-y-4">
            <div className={`${isMobile ? 'flex flex-col gap-3' : 'flex justify-between items-center'}`}>
              <h3 className={`${isMobile ? 'text-lg' : 'text-xl'} font-semibold`}>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫</h3>
              <Button 
                variant="outline" 
                onClick={() => handleExport("—Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ—á–µ–∫")}
                className={`transition-colors duration-200 flex items-center gap-2 ${isMobile ? 'w-full justify-center' : ''}`}
              >
                <Download className="w-4 h-4" />
                –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
              </Button>
            </div>
            
            <Card className="bg-slate-800 border border-slate-600">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-white">
                  <Network className="h-5 w-5 text-purple-400" />
                  –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
                </CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞</TableHead>
                        <TableHead className="text-right">–í—ã—Ä—É—á–∫–∞</TableHead>
                        <TableHead className="text-right">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</TableHead>
                        <TableHead className="text-right">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {mockStationData.map((station) => (
                        <TableRow key={station.id}>
                          <TableCell className="font-medium">{station.name}</TableCell>
                          <TableCell className="text-right">{formatCurrency(station.revenue)}</TableCell>
                          <TableCell className="text-right">{station.transactions}</TableCell>
                          <TableCell className="text-right">{formatCurrency(station.averageTicket)}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        )}

        <TabsContent value="transactions" className="space-y-4">
          <div className={`${isMobile ? 'flex flex-col gap-3' : 'flex justify-between items-center'}`}>
            <h3 className={`${isMobile ? 'text-lg' : 'text-xl'} font-semibold`}>
              –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π {isTradingPointSelected ? '—Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏' : '–ø–æ —Å–µ—Ç–∏'}
            </h3>
            <div className={`${isMobile ? 'w-full' : 'flex gap-2'}`}>
              <Input
                placeholder="–ü–æ–∏—Å–∫ –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏..."
                value={searchTransaction}
                onChange={(e) => setSearchTransaction(e.target.value)}
                className={isMobile ? 'mb-2' : 'w-64'}
              />
              <Button 
                variant="outline" 
                onClick={() => handleExport("—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")}
                className={`transition-colors duration-200 flex items-center gap-2 ${isMobile ? 'w-full justify-center' : ''}`}
              >
                <Download className="w-4 h-4" />
                –≠–∫—Å–ø–æ—Ä—Ç
              </Button>
            </div>
          </div>
          
          <Card className="bg-slate-800 border border-slate-600">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-white">
                <FileText className="h-5 w-5 text-orange-400" />
                –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
              </CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</TableHead>
                      <TableHead>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</TableHead>
                      {isNetworkOnly && <TableHead>–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞</TableHead>}
                      <TableHead>–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞</TableHead>
                      <TableHead className="text-right">–û–±—ä–µ–º (–ª)</TableHead>
                      <TableHead className="text-right">–°—É–º–º–∞</TableHead>
                      <TableHead>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredTransactions.map((transaction) => (
                      <TableRow key={transaction.id}>
                        <TableCell className="font-mono text-sm">{transaction.id}</TableCell>
                        <TableCell>{transaction.date}</TableCell>
                        {isNetworkOnly && <TableCell>{transaction.station}</TableCell>}
                        <TableCell>{transaction.fuel}</TableCell>
                        <TableCell className="text-right">{transaction.volume}</TableCell>
                        <TableCell className="text-right">{formatCurrency(transaction.amount)}</TableCell>
                        <TableCell>{transaction.payment}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}