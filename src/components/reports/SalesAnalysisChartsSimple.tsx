import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { operationsSupabaseService } from "@/services/operationsSupabaseService";
import { tradingPointsService } from "@/services/tradingPointsService";
import { Network } from "@/types/network";
import { TradingPoint } from "@/types/tradingpoint";

interface FuelData {
  name: string;
  value: number;
  amount: number;
  color: string;
}

interface PaymentData {
  name: string;
  value: number;
  amount: number;
  color: string;
}

interface TrendData {
  period: string;
  revenue: number;
  transactions: number;
}

interface ChartsData {
  fuelData: FuelData[];
  paymentData: PaymentData[];
  trendData: TrendData[];
  loading: boolean;
}

// –ü—Ä–æ—Å—Ç–∞—è –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å CSS
const FuelChart = ({ data, loading }: { data: FuelData[], loading: boolean }) => {
  if (loading) {
    return (
      <div className="w-full h-64 flex items-center justify-center">
        <div className="animate-pulse space-y-3">
          <div className="w-32 h-32 bg-slate-600 rounded-full mx-auto"></div>
          <div className="space-y-2">
            <div className="h-4 bg-slate-600 rounded w-24"></div>
            <div className="h-4 bg-slate-600 rounded w-20"></div>
            <div className="h-4 bg-slate-600 rounded w-28"></div>
          </div>
        </div>
      </div>
    );
  }

  if (data.length === 0) {
    return (
      <div className="w-full h-64 flex items-center justify-center text-slate-400">
        <div className="text-center">
          <div className="text-lg mb-2">üìä</div>
          <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
        </div>
      </div>
    );
  }

  // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–ª—ã –¥–ª—è conic-gradient
  let currentAngle = 0;
  const gradientStops = data.map((item) => {
    const startAngle = currentAngle;
    const endAngle = currentAngle + (item.value * 3.6);
    currentAngle = endAngle;
    return `${item.color} ${startAngle}deg ${endAngle}deg`;
  }).join(', ');

  return (
    <div className="w-full h-64 flex flex-col items-center justify-center px-2">
      {/* –î–∏–∞–≥—Ä–∞–º–º–∞ */}
      <div className="flex items-center justify-center gap-4 flex-wrap">
        <div className="w-32 h-32 rounded-full relative overflow-hidden flex-shrink-0">
          {/* –°–µ–≥–º–µ–Ω—Ç—ã */}
          <div 
            className="absolute inset-0 rounded-full"
            style={{
              background: `conic-gradient(${gradientStops})`
            }}
          />
          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ */}
          <div className="absolute inset-5 bg-slate-800 rounded-full flex items-center justify-center border-2 border-slate-700">
            <div className="text-center text-white">
              <div className="text-base font-bold">100%</div>
              <div className="text-xs text-slate-400">–¢–æ–ø–ª–∏–≤–æ</div>
            </div>
          </div>
        </div>
        
        {/* –õ–µ–≥–µ–Ω–¥–∞ */}
        <div className="space-y-2 min-w-0 flex-1">
          {data.map((item, index) => (
            <div key={index} className="flex items-center gap-2">
              <div 
                className="w-3 h-3 rounded flex-shrink-0"
                style={{ backgroundColor: item.color }}
              ></div>
              <div className="min-w-0 flex-1">
                <div className="text-sm font-medium text-white truncate">{item.name}</div>
                <div className="text-xs text-slate-400 truncate">{item.value.toFixed(1)}% ‚Ä¢ {item.amount.toLocaleString()} ‚ÇΩ</div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
const PaymentChart = ({ data, loading }: { data: PaymentData[], loading: boolean }) => {
  if (loading) {
    return (
      <div className="w-full h-64 flex items-center justify-center">
        <div className="animate-pulse space-y-3">
          <div className="w-32 h-32 bg-slate-600 rounded-full mx-auto"></div>
          <div className="space-y-2">
            <div className="h-4 bg-slate-600 rounded w-24"></div>
            <div className="h-4 bg-slate-600 rounded w-20"></div>
            <div className="h-4 bg-slate-600 rounded w-28"></div>
          </div>
        </div>
      </div>
    );
  }

  if (data.length === 0) {
    return (
      <div className="w-full h-64 flex items-center justify-center text-slate-400">
        <div className="text-center">
          <div className="text-lg mb-2">üí≥</div>
          <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
        </div>
      </div>
    );
  }

  // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–ª—ã –¥–ª—è conic-gradient
  let currentAngle = 0;
  const gradientStops = data.map((item) => {
    const startAngle = currentAngle;
    const endAngle = currentAngle + (item.value * 3.6);
    currentAngle = endAngle;
    return `${item.color} ${startAngle}deg ${endAngle}deg`;
  }).join(', ');

  return (
    <div className="w-full h-64 flex flex-col items-center justify-center px-2">
      {/* –î–∏–∞–≥—Ä–∞–º–º–∞ */}
      <div className="flex items-center justify-center gap-4 flex-wrap">
        <div className="w-32 h-32 rounded-full relative overflow-hidden flex-shrink-0">
          {/* –°–µ–≥–º–µ–Ω—Ç—ã */}
          <div 
            className="absolute inset-0 rounded-full"
            style={{
              background: `conic-gradient(${gradientStops})`
            }}
          />
          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ */}
          <div className="absolute inset-5 bg-slate-800 rounded-full flex items-center justify-center border-2 border-slate-700">
            <div className="text-center text-white">
              <div className="text-base font-bold">100%</div>
              <div className="text-xs text-slate-400">–û–ø–ª–∞—Ç–∞</div>
            </div>
          </div>
        </div>
        
        {/* –õ–µ–≥–µ–Ω–¥–∞ */}
        <div className="space-y-2 min-w-0 flex-1">
          {data.map((item, index) => (
            <div key={index} className="flex items-center gap-2">
              <div 
                className="w-3 h-3 rounded flex-shrink-0"
                style={{ backgroundColor: item.color }}
              ></div>
              <div className="min-w-0 flex-1">
                <div className="text-sm font-medium text-white truncate">{item.name}</div>
                <div className="text-xs text-slate-400 truncate">{item.value.toFixed(1)}% ‚Ä¢ {item.amount.toLocaleString()} ‚ÇΩ</div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫
const TrendChart = ({ data, loading }: { data: TrendData[], loading: boolean }) => {
  if (loading) {
    return (
      <div className="w-full h-64 flex items-center justify-center">
        <div className="animate-pulse flex space-x-2">
          <div className="w-8 h-32 bg-slate-600 rounded"></div>
          <div className="w-8 h-24 bg-slate-600 rounded"></div>
          <div className="w-8 h-40 bg-slate-600 rounded"></div>
          <div className="w-8 h-28 bg-slate-600 rounded"></div>
          <div className="w-8 h-36 bg-slate-600 rounded"></div>
        </div>
      </div>
    );
  }

  if (data.length === 0) {
    return (
      <div className="w-full h-64 flex items-center justify-center text-slate-400">
        <div className="text-center">
          <div className="text-lg mb-2">üìä</div>
          <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
        </div>
      </div>
    );
  }

  const maxRevenue = Math.max(...data.map(d => d.revenue), 1);
  
  return (
    <div className="w-full h-64 p-4">
      <div className="h-48 flex items-end justify-between gap-1">
        {data.map((item, index) => (
          <div key={index} className="flex-1 flex flex-col items-center group">
            <div className="relative w-full max-w-8">
              <div 
                className="w-full bg-gradient-to-t from-blue-600 to-blue-400 rounded-t transition-all hover:from-blue-500 hover:to-blue-300 relative"
                style={{ 
                  height: `${(item.revenue / maxRevenue) * 180}px`,
                  minHeight: '10px'
                }}
              >
                {/* Tooltip */}
                <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 opacity-0 group-hover:opacity-100 transition-opacity bg-slate-900 text-white text-xs rounded px-2 py-1 whitespace-nowrap border border-slate-600 z-10">
                  <div>{item.revenue.toLocaleString()} ‚ÇΩ</div>
                  <div className="text-slate-400">{item.transactions} —Ç—Ä–∞–Ω–∑.</div>
                </div>
              </div>
              <div className="text-xs text-slate-400 mt-2 text-center">{item.period}</div>
            </div>
          </div>
        ))}
      </div>
      
      {/* –û—Å—å Y */}
      <div className="absolute left-0 top-4 h-48 flex flex-col justify-between text-xs text-slate-500">
        <span>{(maxRevenue / 1000).toFixed(0)}k</span>
        <span>{(maxRevenue / 2000).toFixed(0)}k</span>
        <span>0</span>
      </div>
    </div>
  );
};

// üö® –£–î–ê–õ–ï–ù: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º–∏
// ‚ùå –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ë–ª–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–ª —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–º–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
// - "–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã: 14:00-18:00" 
// - "–ö–æ–Ω–≤–µ—Ä—Å–∏—è: 78.5%" 
// - "–°—Ä–µ–¥–Ω—è—è –æ—á–µ—Ä–µ–¥—å: 3.2 –º–∏–Ω"
// - "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: 45%"
// 
// ‚úÖ FAIL-SECURE: –í —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞–∑ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
// –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–≤–µ—Ä–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏—è–º –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ø–æ—Ç–µ—Ä—è–º.
// –£–¥–∞–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ—Ç—Ä–∏–∫.

interface SalesAnalysisChartsSimpleProps {
  selectedNetwork?: Network | null;
  selectedTradingPoint?: string;
  dateFrom?: string;
  dateTo?: string;
  groupBy?: string;
}

export function SalesAnalysisChartsSimple({ selectedNetwork, selectedTradingPoint, dateFrom, dateTo, groupBy }: SalesAnalysisChartsSimpleProps) {
  const [chartsData, setChartsData] = useState<ChartsData>({
    fuelData: [],
    paymentData: [],
    trendData: [],
    loading: true
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  useEffect(() => {
    async function loadChartsData() {
      if (!selectedNetwork) {
        setChartsData(prev => ({ ...prev, loading: false }));
        return;
      }

      try {
        setChartsData(prev => ({ ...prev, loading: true }));

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        const filters: any = {};
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞
        if (selectedTradingPoint && selectedTradingPoint !== "all") {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
          filters.tradingPointId = selectedTradingPoint;
          console.log('üéØ Charts: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ (UUID):', { 
            selectedTradingPoint
          });
        } else {
          console.log('üìä Charts: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–π —Å–µ—Ç–∏');
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        let startDateValue, endDateValue;
        
        if (dateFrom && dateTo) {
          startDateValue = dateFrom;
          endDateValue = dateTo;
          console.log('üìÖ Charts using provided date range:', { dateFrom, dateTo });
        } else {
          const endDate = new Date();
          const startDate = new Date();
          startDate.setDate(startDate.getDate() - 7);
          startDateValue = startDate.toISOString().split('T')[0];
          endDateValue = endDate.toISOString().split('T')[0];
          console.log('üìÖ Charts using default 7-day range:', { startDateValue, endDateValue });
        }
        
        filters.status = 'completed';
        filters.startDate = startDateValue;
        filters.endDate = endDateValue;
        
        if (groupBy) {
          console.log('üìä Charts grouping by:', groupBy);
          filters.groupBy = groupBy;
        }

        console.log('üìä Charts: Loading operations with filters:', filters);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ Supabase
        const operations = await operationsSupabaseService.getOperations(filters);
        
        console.log('üìä Charts: Loaded operations:', operations.length);
        
        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (selectedTradingPoint && selectedTradingPoint !== "all") {
          const uniqueTradingPoints = [...new Set(operations.map(op => op.tradingPointId).filter(Boolean))];
          console.log('üìä Charts: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ:');
          console.log('   - –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞:', selectedTradingPoint);
          console.log('   - –û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', operations.length);
          console.log('   - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:', uniqueTradingPoints);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
        const fuelStats: Record<string, { count: number, amount: number }> = {};
        const paymentStats: Record<string, { count: number, amount: number }> = {};
        const dailyStats: Record<string, { revenue: number, transactions: number }> = {};

        operations.forEach(op => {
          const cost = op.totalCost || 0;
          
          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–ø–ª–∏–≤—É
          if (op.fuelType) {
            if (!fuelStats[op.fuelType]) {
              fuelStats[op.fuelType] = { count: 0, amount: 0 };
            }
            fuelStats[op.fuelType].count++;
            fuelStats[op.fuelType].amount += cost;
          }

          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–ª–∞—Ç–µ
          if (op.paymentMethod) {
            const paymentName = op.paymentMethod === 'bank_card' ? '–ë–∞–Ω–∫. –∫–∞—Ä—Ç—ã' :
                               op.paymentMethod === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' :
                               op.paymentMethod === 'corporate_card' ? '–ö–æ—Ä–ø. –∫–∞—Ä—Ç—ã' : '–î—Ä—É–≥–æ–µ';
            
            if (!paymentStats[paymentName]) {
              paymentStats[paymentName] = { count: 0, amount: 0 };
            }
            paymentStats[paymentName].count++;
            paymentStats[paymentName].amount += cost;
          }

          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
          const day = new Date(op.startTime).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
          if (!dailyStats[day]) {
            dailyStats[day] = { revenue: 0, transactions: 0 };
          }
          dailyStats[day].revenue += cost;
          dailyStats[day].transactions++;
        });

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const totalAmount = operations.reduce((sum, op) => sum + (op.totalCost || 0), 0);
        
        const fuelColors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];
        const fuelData: FuelData[] = Object.entries(fuelStats).map(([name, stats], index) => ({
          name,
          value: totalAmount > 0 ? (stats.amount / totalAmount) * 100 : 0,
          amount: stats.amount,
          color: fuelColors[index % fuelColors.length]
        }));

        const paymentColors = ['#3b82f6', '#10b981', '#6b7280'];
        const paymentData: PaymentData[] = Object.entries(paymentStats).map(([name, stats], index) => ({
          name,
          value: totalAmount > 0 ? (stats.amount / totalAmount) * 100 : 0,
          amount: stats.amount,
          color: paymentColors[index % paymentColors.length]
        }));

        const trendData: TrendData[] = Object.entries(dailyStats)
          .map(([period, stats]) => ({ period, ...stats }))
          .sort((a, b) => a.period.localeCompare(b.period));

        setChartsData({
          fuelData,
          paymentData,
          trendData,
          loading: false
        });

      } catch (error) {
        console.error('‚ùå Error loading charts data:', error);
        setChartsData(prev => ({ ...prev, loading: false }));
      }
    }

    loadChartsData();
  }, [selectedNetwork, selectedTradingPoint, dateFrom, dateTo, groupBy]);

  return (
    <div className="space-y-6">
      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ */}
      <div className="w-full">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="bg-slate-800 border-slate-700 overflow-hidden">
          <CardHeader className="pb-2">
            <CardTitle className="text-white flex items-center gap-2 text-base lg:text-lg">
              <span>‚õΩ</span>
              –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
            </CardTitle>
          </CardHeader>
          <CardContent className="p-4">
            <FuelChart data={chartsData.fuelData} loading={chartsData.loading} />
          </CardContent>
        </Card>

        <Card className="bg-slate-800 border-slate-700 overflow-hidden">
          <CardHeader className="pb-2">
            <CardTitle className="text-white flex items-center gap-2 text-base lg:text-lg">
              <span>üìä</span>
              –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
            </CardTitle>
          </CardHeader>
          <CardContent className="relative p-4">
            <TrendChart data={chartsData.trendData} loading={chartsData.loading} />
          </CardContent>
        </Card>

        <Card className="bg-slate-800 border-slate-700 overflow-hidden">
          <CardHeader className="pb-2">
            <CardTitle className="text-white flex items-center gap-2 text-base lg:text-lg">
              <span>üí≥</span>
              –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –≤–∏–¥–∞–º –æ–ø–ª–∞—Ç—ã
            </CardTitle>
          </CardHeader>
          <CardContent className="p-4">
            <PaymentChart data={chartsData.paymentData} loading={chartsData.loading} />
          </CardContent>
        </Card>
        </div>
      </div>

    </div>
  );
}