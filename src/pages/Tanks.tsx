/**
 * –°–¢–†–ê–ù–ò–¶–ê –†–ï–ó–ï–†–í–£–ê–†–û–í - –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï!
 * 
 * –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–¢ MOCK-–î–ê–ù–ù–´–• - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –≠—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–æ–º –Ω–∞ –º–∏–ª–ª–∏–æ–Ω—ã —Ä—É–±–ª–µ–π
 */

import React, { useState, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { EmptyState } from "@/components/ui/empty-state";
import { useSelection } from "@/context/SelectionContext";
import { HelpButton } from "@/components/help/HelpButton";
import { 
  Gauge, 
  RefreshCw,
  AlertTriangle,
  Thermometer, 
  Droplets, 
  CheckCircle, 
  XCircle,
  Fuel,
  AlertCircle
} from "lucide-react";

// –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´
import { tanksUnifiedService, TanksLoadResult } from "@/services/tanksUnifiedService";
import { Tank } from "@/services/tanksServiceSupabase";

export default function Tanks() {
  const { selectedTradingPoint } = useSelection();
  const [tanksData, setTanksData] = useState<TanksLoadResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
  useEffect(() => {
    if (selectedTradingPoint && selectedTradingPoint !== "all") {
      loadTanksData();
    } else {
      setTanksData(null);
      setError(null);
    }
  }, [selectedTradingPoint]);

  const loadTanksData = async () => {
    if (!selectedTradingPoint || selectedTradingPoint === "all") {
      setError("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      console.log('üè™ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', selectedTradingPoint);
      
      const result = await tanksUnifiedService.getTanksForTradingPoint(selectedTradingPoint);
      
      if (result.error) {
        throw new Error(result.error);
      }
      
      setTanksData(result);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.tanks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ ${result.source}`);
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', err);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤: ${err instanceof Error ? err.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setTanksData(null);
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = () => {
    loadTanksData();
  };

  const getTankStatus = (tank: Tank) => {
    const fillPercent = (tank.currentLevelLiters / tank.capacityLiters) * 100;
    
    if (tank.criticalLevelPercent > 0 && fillPercent <= tank.criticalLevelPercent) return { status: 'critical', color: 'red', text: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π' };
    if (tank.minLevelPercent > 0 && fillPercent <= tank.minLevelPercent) return { status: 'warning', color: 'yellow', text: '–ù–∏–∑–∫–∏–π' };
    if (fillPercent >= 95) return { status: 'full', color: 'blue', text: '–ü–æ–ª–Ω—ã–π' };
    return { status: 'normal', color: 'green', text: '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π' };
  };

  const formatVolume = (liters: number) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    return `${Math.round(liters).toLocaleString('ru-RU')} –ª`;
  };

  // –ï—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
  if (!selectedTradingPoint || selectedTradingPoint === "all") {
    return (
      <MainLayout>
        <div className="w-full px-4 md:px-6 lg:px-8">
          <div className="w-full space-y-6">
            <div className="mb-6 pt-4">
              <div className="flex items-start justify-between">
                <div>
                  <h1 className="text-2xl font-semibold text-white">–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã</h1>
                  <p className="text-slate-400 mt-2">
                    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
                  </p>
                </div>
                <HelpButton route="/tanks" variant="text" className="flex-shrink-0" />
              </div>
            </div>

            <EmptyState
              icon={<Fuel className="h-8 w-8" />}
              title="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É"
              description="–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —à–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
            />
          </div>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="w-full px-4 md:px-6 lg:px-8">
        <div className="w-full space-y-6">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="mb-6 pt-4">
            <div className="flex items-start justify-between">
              <div>
                <h1 className="text-2xl font-semibold text-white">–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã</h1>
                <p className="text-slate-400 mt-2">
                  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
                </p>
                {tanksData && (
                  <div className="flex items-center gap-2 mt-2">
                    <Badge variant={tanksData.source === 'database' ? 'default' : 'secondary'}>
                      {tanksData.source === 'database' ? '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö' : 
                       tanksData.source === 'api' ? '–í–Ω–µ—à–Ω–∏–π API' : '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
                    </Badge>
                    {tanksData.synchronized && (
                      <Badge variant="outline" className="text-green-400 border-green-400">
                        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
                      </Badge>
                    )}
                  </div>
                )}
              </div>
              <div className="flex items-center gap-2">
                <Button 
                  onClick={handleRefresh} 
                  disabled={loading}
                  variant="outline"
                  size="sm"
                >
                  <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                  –û–±–Ω–æ–≤–∏—Ç—å
                </Button>
                <HelpButton route="/tanks" variant="text" className="flex-shrink-0" />
              </div>
            </div>
          </div>

          {/* –û—à–∏–±–∫–∏ */}
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                <strong>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</strong> {error}
                <div className="mt-2">
                  <Button onClick={handleRefresh} variant="outline" size="sm">
                    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
                  </Button>
                </div>
              </AlertDescription>
            </Alert>
          )}

          {/* –ó–∞–≥—Ä—É–∑–∫–∞ */}
          {loading && (
            <Card className="bg-slate-800 border-slate-700">
              <CardContent className="p-6">
                <div className="flex items-center justify-center">
                  <RefreshCw className="h-6 w-6 animate-spin mr-3 text-blue-400" />
                  <span className="text-white">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤...</span>
                </div>
              </CardContent>
            </Card>
          )}

          {/* –î–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ */}
          {tanksData && !loading && !error && (
            <>
              {tanksData.tanks.length === 0 ? (
                <EmptyState
                  icon={<Fuel className="h-8 w-8" />}
                  title="–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                  description="–î–ª—è –¥–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                />
              ) : (
                <>
                  {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <Card className="bg-slate-800 border-slate-700">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-slate-400 text-sm">–í—Å–µ–≥–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤</p>
                            <p className="text-2xl font-bold text-white">
                              {tanksData.tanks.length}
                            </p>
                          </div>
                          <Fuel className="h-8 w-8 text-blue-400" />
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-slate-800 border-slate-700">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-slate-400 text-sm">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤</p>
                            <p className="text-2xl font-bold text-white">
                              {tanksData.tanks.filter(t => getTankStatus(t).status !== 'critical').length}
                            </p>
                          </div>
                          <CheckCircle className="h-8 w-8 text-green-400" />
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-slate-800 border-slate-700">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-slate-400 text-sm">–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è</p>
                            <p className="text-2xl font-bold text-white">
                              {tanksData.tanks.filter(t => ['critical', 'warning'].includes(getTankStatus(t).status)).length}
                            </p>
                          </div>
                          <AlertTriangle className="h-8 w-8 text-yellow-400" />
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-slate-800 border-slate-700">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-slate-400 text-sm">–û–±—â–∏–π –æ–±—ä–µ–º</p>
                            <p className="text-2xl font-bold text-white">
                              {formatVolume(tanksData.tanks.reduce((sum, tank) => sum + tank.currentLevelLiters, 0))}
                            </p>
                          </div>
                          <Droplets className="h-8 w-8 text-cyan-400" />
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  {/* –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ */}
                  <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                    {tanksData.tanks.map((tank) => {
                      const status = getTankStatus(tank);
                      const fillPercent = Math.round((tank.currentLevelLiters / tank.capacityLiters) * 100);
                      const minLevelPixels = tank.minLevelPercent || 0;
                      const criticalLevelPixels = tank.criticalLevelPercent || 0;
                      
                      console.log(`üîç –†–µ–∑–µ—Ä–≤—É–∞—Ä ${tank.name}: –∑–∞–ø–æ–ª–Ω–µ–Ω=${fillPercent.toFixed(1)}% –º–∏–Ω=${minLevelPixels}% –∫—Ä–∏—Ç=${criticalLevelPixels}%`);
                      console.log(`üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞:`, {
                        id: tank.id,
                        name: tank.name,
                        minLevelPercent: tank.minLevelPercent,
                        criticalLevelPercent: tank.criticalLevelPercent,
                        currentLevelLiters: tank.currentLevelLiters,
                        capacityLiters: tank.capacityLiters
                      });
                      

                      return (
                        <Card key={tank.id} className="bg-slate-800 border-slate-700">
                          <CardHeader className="pb-3">
                            <div className="flex items-start justify-between">
                              <div>
                                <div className="flex items-center gap-2">
                                  <p className="text-blue-300 text-lg font-bold">{tank.fuelType === '–î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ' ? '–î–¢' : tank.fuelType}</p>
                                  <span className="text-slate-400">‚Äî</span>
                                  <div className="text-green-300 font-bold text-xl">{formatVolume(tank.currentLevelLiters)}</div>
                                </div>
                                <CardTitle className="text-slate-400 text-base font-semibold leading-tight">{tank.name}</CardTitle>
                              </div>
                              <div className="text-right">
                                <p className="text-white text-base font-semibold">–∏–∑ {formatVolume(tank.capacityLiters)}</p>
                              </div>
                            </div>
                          </CardHeader>
                          
                          <CardContent className="space-y-6">

                            {/* –í—Ç–æ—Ä–æ–π –±–ª–æ–∫ - –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π */}
                            <div className="flex items-start gap-6 py-4 border-y border-slate-700">
                              {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è */}
                              <div className="w-20 flex flex-col items-center justify-center relative h-40">
                                <div 
                                  className="absolute text-center"
                                  style={{ bottom: `${fillPercent}%`, transform: 'translateY(50%)' }}
                                >
                                  <div className="text-white font-bold text-lg leading-tight">
                                    {fillPercent}%
                                  </div>
                                  <div className="text-slate-400 text-base leading-tight">
                                    {formatVolume(tank.currentLevelLiters)}
                                  </div>
                                </div>
                              </div>

                              {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ —É—Ä–æ–≤–Ω–µ–π */}
                              <div className="flex items-end h-40 w-16 relative">
                                <div className="w-full h-full bg-slate-700 relative">
                                  {/* –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ */}
                                  <div 
                                    className={`absolute bottom-0 left-0 right-0 transition-all duration-300 ${
                                      (tank.criticalLevelPercent > 0 && fillPercent <= tank.criticalLevelPercent) ? 'bg-gradient-to-t from-red-500 to-red-400' :
                                      (tank.minLevelPercent > 0 && fillPercent <= tank.minLevelPercent) ? 'bg-gradient-to-t from-yellow-500 to-yellow-400' :
                                      fillPercent >= 95 ? 'bg-gradient-to-t from-blue-600 to-blue-500' :
                                      'bg-gradient-to-t from-blue-500 to-blue-400'
                                    }`}
                                    style={{ height: `${fillPercent}%` }}
                                  ></div>
                                </div>
                                
                                {/* –û—Ç–º–µ—Ç–∫–∏ —É—Ä–æ–≤–Ω–µ–π –≤–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */}
                                {/* –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ - –ª–∏–Ω–∏—è –≤–ª–µ–≤–æ –∫ –ø—Ä–æ—Ü–µ–Ω—Ç—É */}
                                <div 
                                  className="absolute -left-8 right-0 border-t-4 border-green-400 z-30"
                                  style={{ bottom: `${fillPercent}%` }}
                                >
                                  <div className="absolute -left-3 -top-1 w-6 h-2 bg-green-400"></div>
                                </div>
                                
                                {/* –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 0 */}
                                {criticalLevelPixels > 0 && (
                                  <div 
                                    className="absolute left-0 -right-8 border-t-4 border-red-500 z-30"
                                    style={{ bottom: `${criticalLevelPixels}%` }}
                                  >
                                    <div className="absolute -right-3 -top-1 w-6 h-2 bg-red-500"></div>
                                  </div>
                                )}
                                
                                {/* –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 0 */}
                                {minLevelPixels > 0 && (
                                  <div 
                                    className="absolute left-0 -right-8 border-t-4 border-yellow-500 z-30"
                                    style={{ bottom: `${minLevelPixels}%` }}
                                  >
                                    <div className="absolute -right-3 -top-1 w-6 h-2 bg-yellow-500"></div>
                                  </div>
                                )}
                              </div>
                              
                              {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è */}
                              <div className="flex-1 pl-4 flex flex-col justify-center h-40 text-right">
                                <div className="space-y-3">
                                  <div className="text-sm">
                                    <div className="text-slate-400">–ú–∏–Ω. —É—Ä–æ–≤–µ–Ω—å</div>
                                    <div className="text-yellow-400 font-semibold">
                                      {tank.minLevelPercent > 0 ? `${tank.minLevelPercent}%` : '‚Äî'}
                                    </div>
                                    <div className="text-white text-base font-semibold">
                                      {tank.minLevelPercent > 0 ? formatVolume(Math.round(tank.capacityLiters * tank.minLevelPercent / 100)) : '‚Äî'}
                                    </div>
                                  </div>
                                  <div className="text-sm">
                                    <div className="text-slate-400">–ö—Ä–∏—Ç. —É—Ä–æ–≤–µ–Ω—å</div>
                                    <div className="text-red-400 font-semibold">
                                      {tank.criticalLevelPercent > 0 ? `${tank.criticalLevelPercent}%` : '‚Äî'}
                                    </div>
                                    <div className="text-white text-base font-semibold">
                                      {tank.criticalLevelPercent > 0 ? formatVolume(Math.round(tank.capacityLiters * tank.criticalLevelPercent / 100)) : '‚Äî'}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                              
                            {/* –¢—Ä–µ—Ç–∏–π –±–ª–æ–∫ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
                            <div className="flex justify-center py-2">
                              <div className="grid grid-cols-2 gap-6 max-w-md">
                              {tank.bookBalance && (
                                <div className="flex items-center gap-3">
                                  <Fuel className="h-5 w-5 text-slate-400" />
                                  <div>
                                    <p className="text-slate-400 text-sm">–ö–Ω–∏–∂–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫</p>
                                    <p className="text-white text-base font-semibold">{formatVolume(tank.bookBalance)}</p>
                                  </div>
                                </div>
                              )}

                              {tank.temperature && tank.temperature !== 20 && (
                                <div className="flex items-center gap-3">
                                  <Thermometer className="h-5 w-5 text-slate-400" />
                                  <div>
                                    <p className="text-slate-400 text-sm">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</p>
                                    <p className="text-white text-base font-semibold">{tank.temperature}¬∞C</p>
                                  </div>
                                </div>
                              )}
                              
                              {tank.waterLevelMm !== undefined && (
                                <div className="flex items-center gap-3">
                                  <Droplets className="h-5 w-5 text-slate-400" />
                                  <div>
                                    <p className="text-slate-400 text-sm">–ü–æ–¥—Ç–æ–≤–∞—Ä–Ω–∞—è –≤–æ–¥–∞</p>
                                    <p className="text-white text-base font-semibold">{tank.waterLevelMm} –º–º</p>
                                  </div>
                                </div>
                              )}
                              
                              {tank.density && (
                                <div className="flex items-center gap-3">
                                  <Gauge className="h-5 w-5 text-slate-400" />
                                  <div>
                                    <p className="text-slate-400 text-sm">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å</p>
                                    <p className="text-white text-base font-semibold">{tank.density.toFixed(2)} –∫–≥/–º¬≥</p>
                                  </div>
                                </div>
                              )}
                              </div>
                            </div>

                          </CardContent>
                        </Card>
                      );
                    })}
                  </div>
                </>
              )}
            </>
          )}
        </div>
      </div>
    </MainLayout>
  );
}