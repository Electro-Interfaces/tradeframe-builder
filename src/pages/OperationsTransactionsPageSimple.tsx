import React, { useState, useMemo, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Download, Activity, ChevronDown, Save, Mail, Send } from "lucide-react";
import { operationsSupabaseService } from "@/services/operationsSupabaseService";
import { telegramService } from "@/services/telegramService";
import { isGlobalTelegramConfigured } from "@/config/system";
import { isUserTelegramEnabled } from "@/config/userSettings";
import { useAuth } from "@/contexts/AuthContext";
import * as XLSX from 'xlsx';

export default function OperationsTransactionsPageSimple() {
  const { user } = useAuth();
  const [operations, setOperations] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  // –§–∏–ª—å—Ç—Ä—ã
  const [selectedFuelType, setSelectedFuelType] = useState("–í—Å–µ");
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState("–í—Å–µ");
  const [selectedStatus, setSelectedStatus] = useState("–í—Å–µ");
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥ —Å –¥–∞–Ω–Ω—ã–º–∏ (–∞–≤–≥—É—Å—Ç 2025)
  const [dateFrom, setDateFrom] = useState("2025-08-01");
  const [dateTo, setDateTo] = useState("2025-08-31");
  const [searchQuery, setSearchQuery] = useState("");
  
  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 50;

  const loadData = async () => {
    console.log('üîÑ loadData() –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...');
    setLoading(true);
    setError('');
    try {
      
      console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º operationsSupabaseService.getOperations() –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase...');
      const data = await operationsSupabaseService.getOperations({});
      
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
        dataType: typeof data,
        isArray: Array.isArray(data),
        length: data?.length || 'undefined',
        firstItem: data?.[0] || 'none'
      });
      
      console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º operations –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
      setOperations(data || []);
      
      console.log('‚úÖ loadData() –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ loadData():', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      setOperations([]);
    } finally {
      console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loading = false');
      setLoading(false);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üîÑ OperationsTransactionsPageSimple useEffect –∑–∞–ø—É—â–µ–Ω');
    loadData();
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
  const filteredOperations = useMemo(() => {
    return operations.filter(record => {
      // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
      const excludedPaymentMethods = ['supplier_delivery', 'corporate_card', 'mobile_payment'];
      if (record.paymentMethod && excludedPaymentMethods.includes(record.paymentMethod)) {
        return false;
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥—É —Ç–æ–ø–ª–∏–≤–∞
      if (selectedFuelType !== "–í—Å–µ" && record.fuelType !== selectedFuelType) return false;
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥—É –æ–ø–ª–∞—Ç—ã
      if (selectedPaymentMethod !== "–í—Å–µ" && record.paymentMethod !== selectedPaymentMethod) return false;
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (selectedStatus !== "–í—Å–µ" && record.status !== selectedStatus) return false;
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
      if (dateFrom || dateTo) {
        const recordDate = new Date(record.startTime);
        const recordDateStr = recordDate.toISOString().split('T')[0]; // YYYY-MM-DD format
        
        if (dateFrom && recordDateStr < dateFrom) {
          return false;
        }
        
        if (dateTo && recordDateStr > dateTo) {
          return false;
        }
      }
      
      // –ü–æ–∏—Å–∫
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        return (
          record.id.toLowerCase().includes(query) ||
          record.details.toLowerCase().includes(query) ||
          (record.tradingPointName && record.tradingPointName.toLowerCase().includes(query))
        );
      }
      
      return true;
    });
  }, [operations, selectedFuelType, selectedPaymentMethod, selectedStatus, dateFrom, dateTo, searchQuery]);

  // –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    setCurrentPage(1);
  }, [selectedFuelType, selectedPaymentMethod, selectedStatus, dateFrom, dateTo, searchQuery]);

  // –°–ø–∏—Å–∫–∏ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
  const fuelTypes = useMemo(() => {
    const types = new Set(operations.map(op => op.fuelType).filter(Boolean));
    return ["–í—Å–µ", ...Array.from(types).sort()];
  }, [operations]);

  const paymentMethods = useMemo(() => {
    const allowedMethods = ['cash', 'bank_card', 'fuel_card', 'online_order'];
    const methods = new Set(operations.filter(op => op.paymentMethod && allowedMethods.includes(op.paymentMethod)).map(op => op.paymentMethod));
    return ["–í—Å–µ", ...allowedMethods.filter(method => methods.has(method))];
  }, [operations]);

  const statusTypes = useMemo(() => {
    const statuses = new Set(operations.map(op => op.status).filter(Boolean));
    return ["–í—Å–µ", ...Array.from(statuses).sort()];
  }, [operations]);

  const getStatusBadge = (status) => {
    switch (status) {
      case 'completed':
        return <Badge className="bg-slate-600 text-slate-200">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</Badge>;
      case 'in_progress':
        return <Badge className="bg-slate-600 text-slate-200">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</Badge>;
      case 'failed':
        return <Badge className="bg-red-600 text-white">–û—à–∏–±–∫–∞</Badge>;
      case 'pending':
        return <Badge className="bg-yellow-600 text-white">–û–∂–∏–¥–∞–Ω–∏–µ</Badge>;
      case 'cancelled':
        return <Badge className="bg-slate-600 text-slate-200">–û—Ç–º–µ–Ω–µ–Ω–æ</Badge>;
      default:
        return <Badge variant="secondary">{status}</Badge>;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞
  const createExcelFile = (operations) => {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –æ–ø–µ—Ä–∞—Ü–∏–π:', operations.length);
      
      if (operations.length === 0) {
        alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
      }

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      const exportData = operations.map((operation, index) => ({
        '‚Ññ': index + 1,
        'ID –æ–ø–µ—Ä–∞—Ü–∏–∏': operation.id,
        'ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏': operation.transactionId || '',
        '–ù–æ–º–µ—Ä –¢–û': operation.toNumber || '',
        '–î–∞—Ç–∞': new Date(operation.startTime).toLocaleDateString('ru-RU'),
        '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞': new Date(operation.startTime).toLocaleTimeString('ru-RU'),
        '–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è': operation.endTime ? new Date(operation.endTime).toLocaleTimeString('ru-RU') : '',
        '–°—Ç–∞—Ç—É—Å': operation.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' :
                  operation.status === 'in_progress' ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' :
                  operation.status === 'failed' ? '–û—à–∏–±–∫–∞' :
                  operation.status === 'pending' ? '–û–∂–∏–¥–∞–Ω–∏–µ' :
                  operation.status === 'cancelled' ? '–û—Ç–º–µ–Ω–µ–Ω–æ' : operation.status,
        '–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞': operation.tradingPointName || '',
        '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': operation.deviceId || '',
        '–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞': operation.fuelType || '',
        '–§–∞–∫—Ç–∏—á. –æ—Ç–ø—É—Å–∫ (–ª)': operation.actualQuantity?.toFixed(2) || operation.quantity?.toFixed(2) || '',
        '–¶–µ–Ω–∞ (‚ÇΩ/–ª)': operation.price?.toFixed(2) || '',
        '–§–∞–∫—Ç–∏—á. –æ—Ç–ø—É—Å–∫ (‚ÇΩ)': operation.actualAmount?.toFixed(2) || operation.totalCost?.toFixed(2) || '',
        '–í–∏–¥ –æ–ø–ª–∞—Ç—ã': operation.paymentMethod ? ({
          'cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
          'bank_card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã',
          'fuel_card': '–¢–æ–ø–ª–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã',
          'online_order': '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã'
        }[operation.paymentMethod] || operation.paymentMethod) : '',
        '–ù–æ–º–µ—Ä POS': operation.posNumber || '',
        '–°–º–µ–Ω–∞': operation.shiftNumber || '',
        '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã': operation.cardNumber || '',
        '–ó–∞–∫–∞–∑ (–ª)': operation.orderedQuantity?.toFixed(2) || '',
        '–ó–∞–∫–∞–∑ (‚ÇΩ)': operation.orderedAmount?.toFixed(2) || '',
        '–û–ø–µ—Ä–∞—Ç–æ—Ä': operation.operatorName || '',
        '–î–µ—Ç–∞–ª–∏': operation.details || ''
      }));

      console.log('üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', exportData.length);

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ Excel
      const worksheet = XLSX.utils.json_to_sheet(exportData);
      const workbook = XLSX.utils.book_new();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
      const colWidths = [
        { wch: 5 },   // ‚Ññ
        { wch: 15 },  // ID –æ–ø–µ—Ä–∞—Ü–∏–∏
        { wch: 15 },  // ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        { wch: 10 },  // –ù–æ–º–µ—Ä –¢–û
        { wch: 12 },  // –î–∞—Ç–∞
        { wch: 12 },  // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        { wch: 12 },  // –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        { wch: 12 },  // –°—Ç–∞—Ç—É—Å
        { wch: 20 },  // –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞
        { wch: 12 },  // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        { wch: 12 },  // –í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞
        { wch: 15 },  // –§–∞–∫—Ç–∏—á. –æ—Ç–ø—É—Å–∫ (–ª)
        { wch: 12 },  // –¶–µ–Ω–∞
        { wch: 15 },  // –§–∞–∫—Ç–∏—á. –æ—Ç–ø—É—Å–∫ (‚ÇΩ)
        { wch: 15 },  // –í–∏–¥ –æ–ø–ª–∞—Ç—ã
        { wch: 10 },  // –ù–æ–º–µ—Ä POS
        { wch: 8 },   // –°–º–µ–Ω–∞
        { wch: 15 },  // –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
        { wch: 12 },  // –ó–∞–∫–∞–∑ (–ª)
        { wch: 12 },  // –ó–∞–∫–∞–∑ (‚ÇΩ)
        { wch: 15 },  // –û–ø–µ—Ä–∞—Ç–æ—Ä
        { wch: 30 }   // –î–µ—Ç–∞–ª–∏
      ];
      worksheet['!cols'] = colWidths;

      XLSX.utils.book_append_sheet(workbook, worksheet, '–û–ø–µ—Ä–∞—Ü–∏–∏');

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
      const now = new Date();
      const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
      const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
      const filename = `operations_${dateStr}_${timeStr}.xlsx`;

      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª:', filename);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      return { workbook, filename };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
      return null;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª—å–Ω–æ
  const saveFileLocally = (operations) => {
    const result = createExcelFile(operations);
    if (result) {
      XLSX.writeFile(result.workbook, result.filename);
      console.log('‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', result.filename);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
  const sendToTelegram = async (operations) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (!isGlobalTelegramConfigured()) {
        alert('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!isUserTelegramEnabled()) {
        alert('Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\n–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n2. –í–∫–ª—é—á–∏—Ç–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Chat ID');
        return;
      }

      const result = createExcelFile(operations);
      if (!result) return;

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const wbout = XLSX.write(result.workbook, { bookType: 'xlsx', type: 'array' });
      const blob = new Blob([wbout], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      
      // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞
      const caption = `üìä <b>–û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º</b>\n\n` +
                     `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n` +
                     `üìà –û–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}\n` +
                     `üìÑ –§–∞–π–ª: ${result.filename}\n\n` +
                     `ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π TradeFrame`;

      console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram...');
      
      await telegramService.sendDocument(blob, {
        filename: result.filename,
        caption: caption
      });

      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
      alert('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
      const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      if (errorMessage.includes('–Ω–∞—Å—Ç—Ä–æ–µ–Ω') || errorMessage.includes('—Ç–æ–∫–µ–Ω') || errorMessage.includes('chat_id')) {
        alert(`‚ùå ${errorMessage}\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞.`);
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:\n${errorMessage}`);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ email
  const sendToEmail = (operations) => {
    const userEmail = user?.email;
    
    if (!userEmail) {
      alert('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ email –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email –≤ –ø—Ä–æ—Ñ–∏–ª–µ.');
      return;
    }

    const result = createExcelFile(operations);
    if (result) {
      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è email
      const subject = `–û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º - ${new Date().toLocaleDateString('ru-RU')}`;
      const body = `üìä –û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º\n\n` +
                  `–ü–µ—Ä–∏–æ–¥: ${new Date().toLocaleDateString('ru-RU')}\n` +
                  `–û–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}\n` +
                  `–§–∞–π–ª: ${result.filename}\n\n` +
                  `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ –ø–∏—Å—å–º—É.`;
      
      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      XLSX.writeFile(result.workbook, result.filename);
      
      // –°–æ–∑–¥–∞–µ–º mailto —Å—Å—ã–ª–∫—É
      const mailtoUrl = `mailto:${userEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
      window.open(mailtoUrl);
      
      console.log('üìß –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      alert(`Email –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º –ø–∏—Å—å–º–æ–º –Ω–∞ –∞–¥—Ä–µ—Å ${userEmail}. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è.`);
    }
  };

  return (
    <MainLayout>
      <div className="p-6 space-y-6">
        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <Card className="bg-slate-900 border-slate-700">
          <CardHeader>
            <CardTitle className="text-slate-200 flex items-center justify-between">
              <span>–û–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</span>
              <div className="flex gap-2">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="flex-shrink-0">
                      <Download className="w-4 h-4 mr-2" />
                      –≠–∫—Å–ø–æ—Ä—Ç
                      <ChevronDown className="w-4 h-4 ml-2" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-48">
                    <DropdownMenuItem onClick={() => saveFileLocally(filteredOperations)}>
                      <Save className="w-4 h-4 mr-2" />
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => sendToTelegram(filteredOperations)}>
                      <Send className="w-4 h-4 mr-2" />
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => sendToEmail(filteredOperations)}>
                      <Mail className="w-4 h-4 mr-2" />
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ email
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
                <Button onClick={loadData} disabled={loading}>
                  {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
                </Button>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-7 gap-4 mb-4">
              <div>
                <Label htmlFor="status" className="text-slate-300">–°—Ç–∞—Ç—É—Å</Label>
                <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                  <SelectTrigger className="bg-slate-800 border-slate-700 text-slate-200">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å" />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-800 border-slate-700">
                    {statusTypes.map((status) => (
                      <SelectItem key={status} value={status} className="text-slate-200 focus:bg-slate-700">
                        {status === "–í—Å–µ" ? status : ({
                          'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
                          'in_progress': '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                          'failed': '–û—à–∏–±–∫–∞',
                          'pending': '–û–∂–∏–¥–∞–Ω–∏–µ',
                          'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ'
                        }[status] || status)}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="fuel-type" className="text-slate-300">–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞</Label>
                <Select value={selectedFuelType} onValueChange={setSelectedFuelType}>
                  <SelectTrigger className="bg-slate-800 border-slate-700 text-slate-200">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ç–æ–ø–ª–∏–≤–∞" />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-800 border-slate-700">
                    {fuelTypes.map((type) => (
                      <SelectItem key={type} value={type} className="text-slate-200 focus:bg-slate-700">
                        {type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="payment-method" className="text-slate-300">–í–∏–¥ –æ–ø–ª–∞—Ç—ã</Label>
                <Select value={selectedPaymentMethod} onValueChange={setSelectedPaymentMethod}>
                  <SelectTrigger className="bg-slate-800 border-slate-700 text-slate-200">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –æ–ø–ª–∞—Ç—ã" />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-800 border-slate-700">
                    {paymentMethods.map((method) => (
                      <SelectItem key={method} value={method} className="text-slate-200 focus:bg-slate-700">
                        {method === "–í—Å–µ" ? method : ({
                          'cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
                          'bank_card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã', 
                          'fuel_card': '–¢–æ–ø–ª–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã',
                          'online_order': '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã'
                        }[method] || method)}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="date-from" className="text-slate-300">–î–∞—Ç–∞ —Å</Label>
                <Input
                  id="date-from"
                  type="date"
                  value={dateFrom}
                  onChange={(e) => setDateFrom(e.target.value)}
                  className="bg-slate-800 border-slate-700 text-slate-200"
                />
              </div>
              
              <div>
                <Label htmlFor="date-to" className="text-slate-300">–î–∞—Ç–∞ –ø–æ</Label>
                <Input
                  id="date-to"
                  type="date"
                  value={dateTo}
                  onChange={(e) => setDateTo(e.target.value)}
                  className="bg-slate-800 border-slate-700 text-slate-200"
                />
              </div>
              
              <div className="md:col-span-2">
                <Label htmlFor="search" className="text-slate-300">–ü–æ–∏—Å–∫</Label>
                <Input
                  id="search"
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏, —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É, ID..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="bg-slate-800 border-slate-700 text-slate-200 placeholder-slate-400"
                />
              </div>
            </div>
            
            <div className="text-slate-300">
              {error ? (
                <div className="bg-red-900/50 border border-red-700 rounded p-4 mb-4">
                  <p className="text-red-200 font-semibold">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:</p>
                  <p className="text-red-300 mt-2">{error}</p>
                </div>
              ) : (
                <p>–û–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {operations.length} | –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filteredOperations.length}</p>
              )}
              {console.log('üîç Render debug:', {
                operationsLength: operations.length,
                filteredLength: filteredOperations.length,
                loading,
                error,
                operationsType: typeof operations,
                isOperationsArray: Array.isArray(operations)
              })}
            </div>
          </CardContent>
        </Card>

        {/* KPI –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞ */}
        {operations.length > 0 && (
          <Card className="bg-slate-900 border-slate-700">
            <CardHeader>
              <CardTitle className="text-slate-200">–°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {[...new Set(filteredOperations.map(op => op.fuelType).filter(Boolean))].map(fuel => {
                  const fuelOps = filteredOperations.filter(op => op.fuelType === fuel && op.status === 'completed');
                  const volume = fuelOps.reduce((sum, op) => sum + (op.quantity || 0), 0);
                  const revenue = fuelOps.reduce((sum, op) => sum + (op.totalCost || 0), 0);
                  
                  return (
                    <Card key={fuel} className="bg-slate-800 border-slate-700">
                      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                        <CardTitle className="text-sm font-medium text-slate-200">{fuel}</CardTitle>
                        <Activity className="h-4 w-4 text-slate-400" />
                      </CardHeader>
                      <CardContent>
                        <div className="text-2xl font-bold text-white">{volume.toFixed(0)} –ª</div>
                        <p className="text-sm text-slate-400">{revenue.toFixed(0)} ‚ÇΩ</p>
                        <p className="text-xs text-blue-400">{fuelOps.length} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        )}

        {/* KPI –ø–æ –≤–∏–¥–∞–º –æ–ø–ª–∞—Ç—ã */}
        {operations.length > 0 && (
          <Card className="bg-slate-900 border-slate-700">
            <CardHeader>
              <CardTitle className="text-slate-200">–°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º –æ–ø–ª–∞—Ç—ã</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {['cash', 'bank_card', 'fuel_card', 'online_order'].map(paymentMethod => {
                  const paymentOps = filteredOperations.filter(op => op.paymentMethod === paymentMethod && op.status === 'completed');
                  const revenue = paymentOps.reduce((sum, op) => sum + (op.totalCost || 0), 0);
                  
                  if (paymentOps.length === 0) return null;
                  
                  const displayName = {
                    'cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
                    'bank_card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã',
                    'fuel_card': '–¢–æ–ø–ª–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã',
                    'online_order': '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã'
                  }[paymentMethod];
                  
                  return (
                    <Card key={paymentMethod} className="bg-slate-800 border-slate-700">
                      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                        <CardTitle className="text-sm font-medium text-slate-200">{displayName}</CardTitle>
                        <Activity className="h-4 w-4 text-slate-400" />
                      </CardHeader>
                      <CardContent>
                        <div className="text-2xl font-bold text-white">{revenue.toFixed(0)} ‚ÇΩ</div>
                        <p className="text-xs text-blue-400">{paymentOps.length} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        )}

        {/* –¢–∞–±–ª–∏—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–π */}
        <Card className="bg-slate-900 border-slate-700">
          <CardHeader>
            <CardTitle className="text-slate-200">–¢–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</CardTitle>
            <p className="text-slate-400">{filteredOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow className="border-slate-700 hover:bg-slate-800">
                    <TableHead className="text-slate-300 min-w-[100px]">–°—Ç–∞—Ç—É—Å</TableHead>
                    <TableHead className="text-slate-300 min-w-[150px]">ID</TableHead>
                    <TableHead className="text-slate-300 min-w-[100px]">–ù–æ–º–µ—Ä –¢–û</TableHead>
                    <TableHead className="text-slate-300 min-w-[140px]">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</TableHead>
                    <TableHead className="text-slate-300 min-w-[140px]">–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è</TableHead>
                    <TableHead className="text-slate-300 min-w-[120px]">–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞</TableHead>
                    <TableHead className="text-slate-300 min-w-[140px]">–§–∞–∫—Ç–∏—á. –æ—Ç–ø—É—Å–∫ (–ª–∏—Ç—Ä—ã)</TableHead>
                    <TableHead className="text-slate-300 min-w-[100px]">–¶–µ–Ω–∞ –∑–∞ –ª</TableHead>
                    <TableHead className="text-slate-300 min-w-[140px]">–§–∞–∫—Ç–∏—á. –æ—Ç–ø—É—Å–∫ (—Å—É–º–º–∞)</TableHead>
                    <TableHead className="text-slate-300 min-w-[120px]">–í–∏–¥ –æ–ø–ª–∞—Ç—ã</TableHead>
                    <TableHead className="text-slate-300 min-w-[100px]">–ù–æ–º–µ—Ä POS</TableHead>
                    <TableHead className="text-slate-300 min-w-[80px]">–°–º–µ–Ω–∞</TableHead>
                    <TableHead className="text-slate-300 min-w-[120px]">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</TableHead>
                    <TableHead className="text-slate-300 min-w-[120px]">–ó–∞–∫–∞–∑ (–ª–∏—Ç—Ä—ã)</TableHead>
                    <TableHead className="text-slate-300 min-w-[120px]">–ó–∞–∫–∞–∑ (—Å—É–º–º–∞)</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredOperations
                    .slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)
                    .map((record) => (
                    <TableRow key={record.id} className="border-slate-700 hover:bg-slate-800">
                      <TableCell className="min-w-[100px]">{getStatusBadge(record.status)}</TableCell>
                      <TableCell className="text-slate-300 font-mono text-xs min-w-[150px]">{record.id}</TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[100px] text-center">
                        {record.toNumber || '-'}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[140px]">
                        {new Date(record.startTime).toLocaleString('ru-RU', {
                          day: '2-digit',
                          month: '2-digit',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[140px]">
                        {record.endTime ? new Date(record.endTime).toLocaleString('ru-RU', {
                          day: '2-digit',
                          month: '2-digit',
                          hour: '2-digit',
                          minute: '2-digit'
                        }) : '-'}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[120px]">
                        {record.fuelType || '-'}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[140px] text-right">
                        {record.actualQuantity ? `${record.actualQuantity.toFixed(2)} –ª` : 
                         record.quantity ? `${record.quantity.toFixed(2)} –ª` : '-'}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[100px] text-right">
                        {record.price ? `${record.price.toFixed(2)} ‚ÇΩ` : '-'}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[140px] text-right">
                        {record.actualAmount ? `${record.actualAmount.toFixed(2)} ‚ÇΩ` : 
                         record.totalCost ? `${record.totalCost.toFixed(2)} ‚ÇΩ` : '-'}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[120px]">
                        {{
                          'cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
                          'bank_card': '–ë–∞–Ω–∫. –∫–∞—Ä—Ç—ã',
                          'fuel_card': '–¢–æ–ø–ª. –∫–∞—Ä—Ç—ã', 
                          'online_order': '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã'
                        }[record.paymentMethod] || record.paymentMethod || '-'}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[100px] text-center">
                        {record.posNumber || '-'}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[80px] text-center">
                        {record.shiftNumber || '-'}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[120px] font-mono">
                        {record.cardNumber || '-'}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[120px] text-right">
                        {record.orderedQuantity ? `${record.orderedQuantity.toFixed(2)} –ª` : '-'}
                      </TableCell>
                      <TableCell className="text-slate-300 text-sm min-w-[120px] text-right">
                        {record.orderedAmount ? `${record.orderedAmount.toFixed(2)} ‚ÇΩ` : '-'}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              
              {filteredOperations.length === 0 && (
                <div className="text-center py-8 text-slate-400">
                  –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
                </div>
              )}
              
              {filteredOperations.length > itemsPerPage && (
                <div className="flex items-center justify-between py-4 px-4 bg-slate-800 border-t border-slate-700">
                  <div className="text-slate-400 text-sm">
                    –ü–æ–∫–∞–∑–∞–Ω—ã {((currentPage - 1) * itemsPerPage) + 1}-{Math.min(currentPage * itemsPerPage, filteredOperations.length)} –∏–∑ {filteredOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π
                  </div>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                      disabled={currentPage === 1}
                      className="text-slate-300 border-slate-600 hover:bg-slate-700"
                    >
                      ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                    </Button>
                    <span className="text-slate-300 text-sm px-3">
                      –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {Math.ceil(filteredOperations.length / itemsPerPage)}
                    </span>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setCurrentPage(prev => Math.min(Math.ceil(filteredOperations.length / itemsPerPage), prev + 1))}
                      disabled={currentPage >= Math.ceil(filteredOperations.length / itemsPerPage)}
                      className="text-slate-300 border-slate-600 hover:bg-slate-700"
                    >
                      –°–ª–µ–¥—É—é—â–∞—è ‚Üí
                    </Button>
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}