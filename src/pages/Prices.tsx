/**
 * Prices Page - –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º–∏
 * - –ù–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤ UUID
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–æ—Ä–≥–æ–≤—ã–º API
 * - –ñ—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
 */

import React, { useState, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  DollarSign, 
  History, 
  AlertCircle
} from "lucide-react";

import { EmptyState } from "@/components/ui/empty-state";
import { HelpButton } from "@/components/help/HelpButton";
import { useSelection } from "@/context/SelectionContext";

// –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import PricesManager from "@/components/prices/PricesManager";
import PriceHistoryJournal from "@/components/prices/PriceHistoryJournal";

// –ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
import { 
  pricesSupabaseService, 
  FuelPrice,
  FuelTypeInfo 
} from "@/services/pricesSupabaseService";

export default function Prices() {
  console.log('üî• [PRICES PAGE] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π!');
  
  const { selectedNetwork, selectedTradingPoint } = useSelection();
  const [currentPrices, setCurrentPrices] = useState<FuelPrice[]>([]);
  const [fuelTypesInfo, setFuelTypesInfo] = useState<FuelTypeInfo[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState("manage");
  const [tradingPointInfo, setTradingPointInfo] = useState<{id: string, name: string} | null>(null);

  console.log('üî• [PRICES PAGE] selectedTradingPoint:', selectedTradingPoint);
  console.log('üî• [PRICES PAGE] selectedNetwork:', selectedNetwork);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ
  useEffect(() => {
    async function loadTradingPointInfo() {
      if (selectedTradingPoint && selectedTradingPoint !== 'all') {
        try {
          const { tradingPointsService } = await import('@/services/tradingPointsService');
          const tradingPoint = await tradingPointsService.getById(selectedTradingPoint);
          if (tradingPoint) {
            setTradingPointInfo({ id: tradingPoint.id, name: tradingPoint.name });
          } else {
            setTradingPointInfo(null);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ:', error);
          setTradingPointInfo(null);
        }
      } else {
        setTradingPointInfo(null);
      }
    }
    
    loadTradingPointInfo();
  }, [selectedTradingPoint]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  useEffect(() => {
    if (selectedTradingPoint) {
      loadPricesData();
    }
  }, [selectedTradingPoint, selectedNetwork]);

  const loadPricesData = async () => {
    if (!selectedTradingPoint) return;

    console.log(`üî• [PRICES PAGE] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏: ${selectedTradingPoint}`);
    setLoading(true);
    setError(null);

    try {
      if (selectedTradingPoint === 'all') {
        // –î–ª—è "all" –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º —Å–µ—Ç–∏
        if (!selectedNetwork) {
          setError('–°–µ—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
          return;
        }

        console.log(`üåê [PRICES PAGE] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —Å–µ—Ç–∏`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Å–µ—Ç–∏
        const { tradingPointsService } = await import('@/services/tradingPointsService');
        const tradingPoints = await tradingPointsService.getByNetworkId(selectedNetwork.id);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
        const allPrices: FuelPrice[] = [];
        const allFuelInfo: FuelTypeInfo[] = [];
        
        for (const tp of tradingPoints) {
          try {
            const [prices, fuelInfo] = await Promise.all([
              pricesSupabaseService.getCurrentPrices(tp.id),
              pricesSupabaseService.getFuelTypesInfo(tp.id)
            ]);
            allPrices.push(...prices);
            allFuelInfo.push(...fuelInfo);
          } catch (err) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${tp.name}:`, err);
          }
        }
        
        setCurrentPrices(allPrices);
        setFuelTypesInfo(allFuelInfo);
        
        console.log(`‚úÖ [PRICES PAGE] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allPrices.length} —Ü–µ–Ω –∏ ${allFuelInfo.length} –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫`);
        
      } else {
        // –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
        const [prices, fuelInfo] = await Promise.all([
          pricesSupabaseService.getCurrentPrices(selectedTradingPoint),
          pricesSupabaseService.getFuelTypesInfo(selectedTradingPoint)
        ]);

        setCurrentPrices(prices);
        setFuelTypesInfo(fuelInfo);
        
        console.log(`‚úÖ [PRICES PAGE] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${prices.length} —Ü–µ–Ω –∏ ${fuelInfo.length} –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞`);
      }
      
    } catch (err) {
      console.error('‚ùå [PRICES PAGE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${err}`);
    } finally {
      setLoading(false);
    }
  };

  const handlePricesUpdate = (updatedPrices: FuelPrice[]) => {
    setCurrentPrices(updatedPrices);
    // –¢–∞–∫–∂–µ –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–∞—Ö —Ç–æ–ø–ª–∏–≤–∞
    if (selectedTradingPoint) {
      pricesSupabaseService.getFuelTypesInfo(selectedTradingPoint)
        .then(setFuelTypesInfo)
        .catch(console.error);
    }
  };

  const formatPrice = (priceKopecks: number) => {
    return (priceKopecks / 100).toFixed(2);
  };

  // –ï—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ
  if (!selectedTradingPoint || selectedTradingPoint === 'all') {
    return (
      <MainLayout>
        <div className="w-full px-4 md:px-6 lg:px-8">
          <div className="w-full space-y-6">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="mb-6 pt-4">
              <div className="flex items-start justify-between">
                <div>
                  <h1 className="text-2xl font-semibold text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏</h1>
                  <p className="text-slate-400 mt-2">
                    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
                  </p>
                </div>
                <HelpButton route="/prices" variant="text" className="flex-shrink-0" />
              </div>
            </div>

            {/* –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É */}
            <EmptyState
              icon={<DollarSign className="h-8 w-8" />}
              title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É"
              description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —à–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
            />
            
            {selectedTradingPoint === 'all' && (
              <Alert className="border-yellow-500 bg-yellow-950">
                <AlertCircle className="h-4 w-4 text-yellow-400" />
                <AlertDescription className="text-yellow-300">
                  <strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω—ã "–í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏". 
                  –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ –≤—ã—à–µ.
                </AlertDescription>
              </Alert>
            )}
          </div>
        </div>
      </MainLayout>
    );
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  const getTradingPointDisplayName = () => {
    if (selectedTradingPoint === 'all') {
      return selectedNetwork ? `–í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Å–µ—Ç–∏ "${selectedNetwork.name}"` : '–í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏';
    }
    
    // –ï—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∏–º—è
    if (tradingPointInfo) {
      return tradingPointInfo.name;
    }
    
    // –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (selectedTradingPoint && selectedTradingPoint !== 'all') {
      return '–ó–∞–≥—Ä—É–∑–∫–∞...';
    }
    
    return typeof selectedTradingPoint === 'object' 
      ? selectedTradingPoint.name 
      : selectedTradingPoint;
  };
  
  const tradingPointName = getTradingPointDisplayName();

  return (
    <MainLayout>
      <div className="w-full px-4 md:px-6 lg:px-8">
        <div className="w-full space-y-6">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="mb-6 pt-4">
            <div className="flex items-start justify-between">
              <div>
                <h1 className="text-2xl font-semibold text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏</h1>
                <p className="text-slate-400 mt-2">
                  {tradingPointName} ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ
                </p>
              </div>
              <HelpButton route="/prices" variant="text" className="flex-shrink-0" />
            </div>
          </div>

          {/* –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö */}
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}


          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          <PricesManager
            tradingPointId={selectedTradingPoint}
            tradingPointName={tradingPointName}
            onPricesUpdate={handlePricesUpdate}
          />
        </div>
      </div>
    </MainLayout>
  );
}