import React, { useState, useMemo, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import { useIsMobile } from "@/hooks/use-mobile";
import { useSelection } from "@/context/SelectionContext";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Activity, Download, Filter, Clock, CheckCircle, XCircle, PlayCircle, PauseCircle, AlertTriangle, RefreshCw, Loader2, Trash2 } from "lucide-react";
import { EmptyState } from "@/components/ui/empty-state";
import { HelpButton } from "@/components/help/HelpButton";
// import { operationsService, Operation } from "@/services/operationsService"; // –û–¢–ö–õ–Æ–ß–ï–ù - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Supabase —Å–µ—Ä–≤–∏—Å
import { operationsSupabaseService } from "@/services/operationsSupabaseService";
import { Operation } from "@/services/operationsTypes";
// import { nomenclatureService } from "@/services/nomenclatureService"; // –û–¢–ö–õ–Æ–ß–ï–ù –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
import { supabaseConfigManager } from "@/services/supabaseConfigManager";
import { tradingTransactionsSyncService } from "@/services/tradingTransactionsSyncService";
import { telegramService } from "@/services/telegramService";
import { emailService } from "@/services/emailService";
import { ExportChannelDialog, ExportChannels } from "@/components/dialogs/ExportChannelDialog";
import { ExportFormat, ExportFormatDialog } from "@/components/dialogs/ExportFormatDialog";
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
const operationTypeMap = {
  'sale': '–ü—Ä–æ–¥–∞–∂–∞',
  'refund': '–í–æ–∑–≤—Ä–∞—Ç',
  'correction': '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è',
  'maintenance': '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
  'tank_loading': '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞',
  'diagnostics': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
  'sensor_calibration': '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤'
};

const statusTypes = ["–í—Å–µ", "completed", "in_progress", "failed", "pending", "cancelled"];
const allowedPaymentMethods = ["cash", "bank_card", "fuel_card", "online_order"];

const paymentMethodMap = {
  'bank_card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã',
  'cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
  'fuel_card': '–¢–æ–ø–ª–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã',
  'online_order': '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã'
};


export default function OperationsTransactionsPage() {
  const isMobile = useIsMobile();
  const { selectedNetwork, selectedTradingPoint } = useSelection();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const [operations, setOperations] = useState<Operation[]>([]);
  const [loading, setLoading] = useState(true);
  const [syncLoading, setSyncLoading] = useState(false);
  const [clearLoading, setClearLoading] = useState(false);
  
  // –§–∏–ª—å—Ç—Ä—ã
  const [selectedStatus, setSelectedStatus] = useState("–í—Å–µ");
  const [selectedFuelType, setSelectedFuelType] = useState("–í—Å–µ");
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState("–í—Å–µ");
  const [searchQuery, setSearchQuery] = useState("");
  const [autoRefresh, setAutoRefresh] = useState(true);
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã —Å 2 —Å–µ–Ω—Ç—è–±—Ä—è - –∫–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–Ω—Ü–∏—è 4
  const [dateFrom, setDateFrom] = useState("2025-09-02");
  const [dateTo, setDateTo] = useState("2025-09-30");
  
  // –ü–ê–ì–ò–ù–ê–¶–ò–Ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(50);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
  const [exportDialogOpen, setExportDialogOpen] = useState(false);
  const [showFormatDialog, setShowFormatDialog] = useState(false);
  const [pendingExportOperations, setPendingExportOperations] = useState<Operation[]>([]);
  const [pendingChannels, setPendingChannels] = useState<ExportChannels | null>(null);

  const isNetworkOnly = selectedNetwork && (!selectedTradingPoint || selectedTradingPoint === "all");
  const isTradingPointSelected = selectedNetwork && selectedTradingPoint && selectedTradingPoint !== "all";

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
  useEffect(() => {
    const loadOperations = async () => {
      setLoading(true);
      
      try {
        
        // –¢–û–õ–¨–ö–û 100 –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        const response = await fetch('https://tohtryzyffcebtyvkxwh.supabase.co/rest/v1/operations?select=id,transaction_id,status,start_time,trading_point_id,trading_point_name,fuel_type,quantity,total_cost,payment_method&order=start_time.desc&limit=100', {
          headers: {
            'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY',
            'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY'
          }
        });
        
        console.log('üîç [OPERATIONS] Response status:', response.status, response.ok);
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error('‚ùå [OPERATIONS] Supabase error:', response.status, errorText);
          throw new Error(`Supabase error: ${response.status} - ${errorText}`);
        }
        
        const rawData = await response.json();
        console.log('üìä [OPERATIONS] Raw data type:', typeof rawData, 'Length:', Array.isArray(rawData) ? rawData.length : 'not array');
        console.log('üìã [OPERATIONS] Sample data:', rawData.length > 0 ? rawData[0] : 'empty');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ –º–∞—Å—Å–∏–≤
        if (!Array.isArray(rawData)) {
          console.error('‚ùå [OPERATIONS] Expected array, got:', typeof rawData, rawData);
          throw new Error('Expected array from Supabase operations endpoint');
        }
        
        // –ú–ì–ù–û–í–ï–ù–ù–û–ï –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const operations = rawData.map((op: any) => ({
          id: op.id,
          transactionId: op.transaction_id,
          status: op.status,
          startTime: op.start_time,
          tradingPointId: op.trading_point_id,
          tradingPointName: op.trading_point_name,
          fuelType: op.fuel_type,
          quantity: op.quantity || 0,
          totalCost: op.total_cost || 0,
          paymentMethod: op.payment_method
        }));
        
        console.log('‚úÖ [OPERATIONS] Processed operations:', operations.length);
        setOperations(operations);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        setOperations([]);
      } finally {
        setLoading(false);
      }
    };

    loadOperations();
  }, []); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
  const reloadOperations = async () => {
    setLoading(true);
    
    try {
      // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑ –≤—Å—è–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const response = await fetch('https://tohtryzyffcebtyvkxwh.supabase.co/rest/v1/operations?select=id,transaction_id,operation_type,status,start_time,trading_point_id,trading_point_name,fuel_type,quantity,price,total_cost,payment_method&order=start_time.desc&limit=500', {
        headers: {
          'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY',
          'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY'
        }
      });
      
      console.log('üîç [RELOAD] Response status:', response.status, response.ok);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå [RELOAD] Supabase error:', response.status, errorText);
        throw new Error(`Supabase error: ${response.status} - ${errorText}`);
      }
      
      const rawData = await response.json();
      console.log('üìä [RELOAD] Raw data type:', typeof rawData, 'Length:', Array.isArray(rawData) ? rawData.length : 'not array');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ –º–∞—Å—Å–∏–≤
      if (!Array.isArray(rawData)) {
        console.error('‚ùå [RELOAD] Expected array, got:', typeof rawData, rawData);
        throw new Error('Expected array from Supabase operations endpoint');
      }
      
      // –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      const operations = rawData.map((op: any) => ({
        id: op.id,
        transactionId: op.transaction_id,
        operationType: op.operation_type,
        status: op.status,
        startTime: op.start_time,
        tradingPointId: op.trading_point_id,
        tradingPointName: op.trading_point_name,
        fuelType: op.fuel_type,
        quantity: op.quantity || 0,
        price: op.price || 0,
        totalCost: op.total_cost || 0,
        paymentMethod: op.payment_method
      }));
      
      console.log('‚úÖ [RELOAD] Processed operations:', operations.length);
      setOperations(operations);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', error);
      setOperations([]);
    } finally {
      setLoading(false);
    }
  };


  // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
  const syncTransactionsFromTradingAPI = async () => {
    console.log('üöÄ [NEW-SYNC] –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞!');
    
    try {
      setSyncLoading(true);
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
      const systemId = 15; // –ù–æ—Ä–¥ –ª–∞–π–Ω —Å–∏—Å—Ç–µ–º–∞ 15
      let stationNumber = 4; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ê–ó–° ‚Ññ004
      
      // –ú–∞–ø–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤ –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏
      if (selectedTradingPoint === '9baf5375-9929-4774-8366-c0609b9f2a51') {
        stationNumber = 1; // –ê–ó–° ‚Ññ001
      } else if (selectedTradingPoint === 'f2566905-c748-4240-ac31-47b626ab625d') {
        stationNumber = 3; // –ê–ó–° ‚Ññ003
      } else if (selectedTradingPoint === '6969b08d-1cbe-45c2-ae9c-8002c7022b59') {
        stationNumber = 4; // –ê–ó–° ‚Ññ004
      } else if (selectedTradingPoint === 'f7963207-2732-4fae-988e-c73eef7645ca') {
        stationNumber = 5; // –ê–ó–° ‚Ññ005
      }
      
      console.log('üè™ [NEW-SYNC] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', {
        systemId,
        stationNumber,
        dateFrom,
        dateTo,
        selectedTradingPoint
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const result = await tradingTransactionsSyncService.syncTransactions({
        systemId,
        stationNumber,
        startDate: dateFrom,
        endDate: dateTo
      });
      
      console.log('‚úÖ [NEW-SYNC] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', result);
      
      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await reloadOperations();
        
        const totalFromAPI = result.totalFromAPI || 0;
        alert(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n` +
              `–ü–æ–ª—É—á–µ–Ω–æ —Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API: ${totalFromAPI} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n` +
              `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É: ${result.syncedTransactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n` +
              `–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–µ–π: ${result.skippedTransactions}`);
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n${result.errors.join('\n')}`);
      }
      
    } catch (error) {
      console.error('‚ùå [NEW-SYNC] –û—à–∏–±–∫–∞:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    } finally {
      setSyncLoading(false);
    }
  };

  // –ü–†–û–°–¢–ï–ô–®–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ç–∞–Ω—Ü–∏–∏ 4
  const clearStation4Operations = async () => {
    try {
      setClearLoading(true);
      console.log('üóëÔ∏è –ü–†–û–°–¢–û–ï –£–î–ê–õ–ï–ù–ò–ï –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ê–ó–° ‚Ññ004...');
      
      // –ü—Ä—è–º–æ–π HTTP DELETE –∑–∞–ø—Ä–æ—Å –∫ Supabase
      const response = await fetch('https://tohtryzyffcebtyvkxwh.supabase.co/rest/v1/operations?trading_point_id=eq.6969b08d-1cbe-45c2-ae9c-8002c7022b59', {
        method: 'DELETE',
        headers: {
          'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY',
          'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY',
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ –ê–ó–° ‚Ññ004 —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        alert('‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ê–ó–° ‚Ññ004 —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        await reloadOperations();
      } else {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
    } finally {
      setClearLoading(false);
    }
  };

  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  // useEffect(() => {
  //   if (!autoRefresh) return;
    
  //   const interval = setInterval(async () => {
  //     try {
  //       const data = await operationsService.getAll();
  //       setOperations(data);
  //     } catch (error) {
  //       console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
  //     }
  //   }, 5000);

  //   return () => clearInterval(interval);
  // }, [autoRefresh]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
  const filteredOperations = useMemo(() => {
    console.log('üîç [FILTER] Operations count:', operations.length);
    console.log('üîç [FILTER] Filters:', { selectedTradingPoint, selectedStatus, dateFrom, dateTo, searchQuery });
    
    if (operations.length === 0) {
      console.log('‚ö†Ô∏è [FILTER] No operations to filter');
      return operations;
    }
    
    // –ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
    let filtered = operations;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ
    if (selectedTradingPoint && selectedTradingPoint !== "all") {
      filtered = filtered.filter(op => op.tradingPointId === selectedTradingPoint);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (selectedStatus !== "–í—Å–µ") {
      filtered = filtered.filter(op => op.status === selectedStatus);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    if (dateFrom || dateTo) {
      filtered = filtered.filter(op => {
        if (!op.startTime) return true; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –¥–∞—Ç—ã
        
        const operationDate = new Date(op.startTime).toISOString().split('T')[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç –¥–∞—Ç—ã
        if (dateFrom && operationDate < dateFrom) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ –¥–∞—Ç—ã
        if (dateTo && operationDate > dateTo) return false;
        
        return true;
      });
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ transaction_id
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(op => 
        op.transactionId && op.transactionId.toLowerCase().includes(query)
      );
    }
    
    console.log('‚úÖ [FILTER] Filtered operations count:', filtered.length);
    return filtered;
  }, [operations, selectedTradingPoint, selectedStatus, searchQuery, dateFrom, dateTo]);

  // –ü–ê–ì–ò–ù–ê–¶–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const paginatedOperations = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return filteredOperations.slice(startIndex, endIndex);
  }, [filteredOperations, currentPage, itemsPerPage]);

  const totalPages = Math.ceil(filteredOperations.length / itemsPerPage);

  // –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    setCurrentPage(1);
  }, [selectedTradingPoint, selectedStatus, searchQuery, dateFrom, dateTo]);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è

  // –û–¢–ö–õ–Æ–ß–ï–ù–ê –º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
  const [fuelTypes] = useState(["–í—Å–µ", "–ê–ò-92", "–ê–ò-95", "–ê–ò-98", "–î–¢", "–ê–ò-100"]);

  // –£–ü–†–û–©–ï–ù - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã 
  const paymentMethods = ["–í—Å–µ", "cash", "bank_card", "fuel_card", "online_order"];

  // –û–¢–ö–õ–Æ–ß–ï–ù–´ —Ç—è–∂–µ–ª—ã–µ KPI —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const operationKpis = useMemo(() => {
    const totalOperations = filteredOperations.length;
    const completedOperations = filteredOperations.filter(op => op.status === 'completed').length;
    const totalRevenue = filteredOperations
      .filter(op => op.status === 'completed' && op.totalCost)
      .reduce((sum, op) => sum + op.totalCost, 0);
    
    return {
      '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': { revenue: totalRevenue, operations: totalOperations },
      '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ': { revenue: totalRevenue, operations: completedOperations }
    };
  }, [filteredOperations.length]);

  // –û–¢–ö–õ–Æ–ß–ï–ù–´ –≤—Å–µ —Ç—è–∂–µ–ª—ã–µ KPI —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
  const fuelKpis = {};
  const paymentKpis = {};


  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'completed':
        return <Badge className="bg-slate-600 text-slate-200">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</Badge>;
      case 'in_progress':
        return <Badge className="bg-slate-600 text-slate-200">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</Badge>;
      case 'failed':
        return <Badge className="bg-red-600 text-white">–û—à–∏–±–∫–∞</Badge>;
      case 'pending':
        return <Badge className="bg-yellow-600 text-white">–û–∂–∏–¥–∞–Ω–∏–µ</Badge>;
      case 'cancelled':
        return <Badge className="bg-slate-600 text-slate-200">–û—Ç–º–µ–Ω–µ–Ω–æ</Badge>;
      default:
        return <Badge variant="secondary">{status}</Badge>;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="w-4 h-4 text-slate-400" />;
      case 'in_progress':
        return <PlayCircle className="w-4 h-4 text-slate-400" />;
      case 'failed':
        return <XCircle className="w-4 h-4 text-slate-400" />;
      case 'pending':
        return <PauseCircle className="w-4 h-4 text-slate-400" />;
      case 'cancelled':
        return <XCircle className="w-4 h-4 text-slate-400" />;
      default:
        return <Clock className="w-4 h-4 text-slate-400" />;
    }
  };


  const formatDuration = (duration?: number) => {
    if (!duration) return '';
    if (duration < 1) {
      return `${Math.round(duration * 60)} —Å–µ–∫`;
    }
    return `${duration.toFixed(1)} –º–∏–Ω`;
  };

  // –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
  const exportToExcel = async (operations: Operation[], channels: ExportChannels) => {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –æ–ø–µ—Ä–∞—Ü–∏–π:', operations.length);
      
      if (operations.length === 0) {
        alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
      }

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      const exportData = operations.map((operation, index) => ({
        '‚Ññ': index + 1,
        'ID –æ–ø–µ—Ä–∞—Ü–∏–∏': operation.id,
        'ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏': operation.transactionId || '',
        '–î–∞—Ç–∞': new Date(operation.startTime).toLocaleDateString('ru-RU'),
        '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞': new Date(operation.startTime).toLocaleTimeString('ru-RU'),
        '–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è': operation.endTime ? new Date(operation.endTime).toLocaleTimeString('ru-RU') : '',
        '–°—Ç–∞—Ç—É—Å': operation.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' :
                  operation.status === 'in_progress' ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' :
                  operation.status === 'failed' ? '–û—à–∏–±–∫–∞' :
                  operation.status === 'pending' ? '–û–∂–∏–¥–∞–Ω–∏–µ' :
                  operation.status === 'cancelled' ? '–û—Ç–º–µ–Ω–µ–Ω–æ' : operation.status,
        '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏': operationTypeMap[operation.operationType] || operation.operationType,
        '–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞': operation.tradingPointName || '',
        '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': operation.deviceId || '',
        '–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞': operation.fuelType || '',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ª)': operation.quantity ? Number(operation.quantity) : 0,
        '–¶–µ–Ω–∞ (‚ÇΩ/–ª)': operation.price ? Number(operation.price) : 0,
        '–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)': operation.totalCost ? Number(operation.totalCost) : 0,
        '–í–∏–¥ –æ–ø–ª–∞—Ç—ã': operation.paymentMethod ? (paymentMethodMap[operation.paymentMethod] || operation.paymentMethod) : '',
        '–û–ø–µ—Ä–∞—Ç–æ—Ä': operation.operatorName || '',
        '–î–µ—Ç–∞–ª–∏': operation.details,
        '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)': operation.duration && operation.status !== 'in_progress' ? Number(operation.duration) : 0,
        '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ': operation.lastUpdated
      }));

      console.log('üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', exportData.length);

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ Excel
      const workbook = XLSX.utils.book_new();
      
      // === –õ–ò–°–¢ 1: –°–û–í–†–ï–ú–ï–ù–ù–´–ô KPI –î–ê–®–ë–û–†–î ===
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const dates = operations.map(op => new Date(op.startTime)).filter(date => !isNaN(date.getTime()));
      const minDate = dates.length > 0 ? new Date(Math.min(...dates)) : new Date();
      const maxDate = dates.length > 0 ? new Date(Math.max(...dates)) : new Date();
      const periodDays = Math.ceil((maxDate - minDate) / (1000 * 60 * 60 * 24)) + 1;
      
      // KPI —Ä–∞—Å—á—ë—Ç—ã
      let totalOperations = operations.length;
      let totalRevenue = 0;
      let totalLiters = 0;
      let completedOperations = 0;
      let failedOperations = 0;
      
      const fuelStats = {};
      const paymentStats = {};
      const dailyStats = {};
      const hourlyStats = {};
      
      operations.forEach(op => {
        totalRevenue += op.totalCost || 0;
        totalLiters += op.quantity || 0;
        
        if (op.status === 'completed') completedOperations++;
        if (op.status === 'failed') failedOperations++;
        
        // –ü–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
        if (op.fuelType) {
          if (!fuelStats[op.fuelType]) {
            fuelStats[op.fuelType] = { liters: 0, revenue: 0, operations: 0 };
          }
          fuelStats[op.fuelType].liters += op.quantity || 0;
          fuelStats[op.fuelType].revenue += op.totalCost || 0;
          fuelStats[op.fuelType].operations += 1;
        }
        
        // –ü–æ –≤–∏–¥–∞–º –æ–ø–ª–∞—Ç—ã
        if (op.paymentMethod && op.totalCost) {
          const method = paymentMethodMap[op.paymentMethod] || op.paymentMethod;
          if (!paymentStats[method]) {
            paymentStats[method] = { revenue: 0, operations: 0 };
          }
          paymentStats[method].revenue += op.totalCost;
          paymentStats[method].operations += 1;
        }
        
        // –ü–æ –¥–Ω—è–º
        const date = new Date(op.startTime).toLocaleDateString('ru-RU');
        if (!dailyStats[date]) {
          dailyStats[date] = { operations: 0, revenue: 0, liters: 0 };
        }
        dailyStats[date].operations += 1;
        dailyStats[date].revenue += op.totalCost || 0;
        dailyStats[date].liters += op.quantity || 0;
        
        // –ü–æ —á–∞—Å–∞–º
        const hour = new Date(op.startTime).getHours();
        const hourLabel = `${hour.toString().padStart(2, '0')}:00`;
        if (!hourlyStats[hourLabel]) {
          hourlyStats[hourLabel] = { operations: 0, revenue: 0 };
        }
        hourlyStats[hourLabel].operations += 1;
        hourlyStats[hourLabel].revenue += op.totalCost || 0;
      });
      
      // –†–∞—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
      const successRate = totalOperations > 0 ? ((completedOperations / totalOperations) * 100).toFixed(2) : '0.00';
      const failureRate = totalOperations > 0 ? ((failedOperations / totalOperations) * 100).toFixed(2) : '0.00';
      const avgOperationValue = totalOperations > 0 ? (totalRevenue / totalOperations).toFixed(2) : '0.00';
      const avgDailyOperations = periodDays > 0 ? (totalOperations / periodDays).toFixed(2) : '0.00';
      const avgDailyRevenue = periodDays > 0 ? (totalRevenue / periodDays).toFixed(2) : '0.00';
      
      // –°–æ–∑–¥–∞–Ω–∏–µ KPI –¥–∞—à–±–æ—Ä–¥–∞ –≤ —Å—Ç–∏–ª–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
      const dashboardData = [
        ['', '', '', '', '', '', '', '', '', '', '', ''],
        ['', '', '', '–û–ü–ï–†–ê–¶–ò–û–ù–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø', '', '', '', '', '', '', '', ''],
        ['', '', '', `–ü–µ—Ä–∏–æ–¥: ${minDate.toLocaleDateString('ru-RU')} - ${maxDate.toLocaleDateString('ru-RU')}`, '', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', '', '', '', '', ''],
        
        // KPI –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        ['', '–û–ë–©–ò–ï –û–ü–ï–†–ê–¶–ò–ò', '', '–í–´–†–£–ß–ö–ê', '', '–û–ë–™–ï–ú –¢–û–ü–õ–ò–í–ê', '', '–£–°–ü–ï–®–ù–û–°–¢–¨', '', '–°–†–ï–î–ù–ò–ô –ß–ï–ö', ''],
        ['', '', '', '', '', '', '', '', '', '', '', ''],
        
        // KPI –∑–Ω–∞—á–µ–Ω–∏—è (–≥–ª–∞–≤–Ω—ã–µ —á–∏—Å–ª–∞) - –¥–ª—è Excel –∫–∞–∫ —á–∏—Å–ª–∞
        ['', totalOperations, '', totalRevenue, '', totalLiters, '', parseFloat(successRate), '', parseFloat(avgOperationValue), ''],
        
        // KPI –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç—Ä–µ–Ω–¥—ã (—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
        ['–î–Ω–µ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:', parseFloat(avgDailyOperations), '', parseFloat(avgDailyRevenue), '', totalLiters / totalOperations, '', parseFloat(failureRate), '', parseFloat(avgOperationValue), ''],
        
        ['', '', '', '', '', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', '', '', '', '', ''],
        
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
        ['', '', '', '–î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú', '', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', '', '', '', '', ''],
        
        // –ê–Ω–∞–ª–∏–∑ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
        ['', '–ê–ù–ê–õ–ò–ó –ü–û –í–ò–î–ê–ú –¢–û–ü–õ–ò–í–ê', '', '', '', '', '', '', '', '', '', ''],
        ['', '–í–∏–¥', '–û–±—ä–µ–º (–ª)', '% –æ—Ç –æ–±—â–µ–≥–æ', '–û–ø–µ—Ä–∞—Ü–∏–π', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '', '', '', '', '', ''],
      ];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–ø–ª–∏–≤—É
      Object.entries(fuelStats)
        .sort(([,a], [,b]) => b.liters - a.liters) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—ä–µ–º—É
        .forEach(([fuel, fuelData]) => {
          const fuelPercent = totalLiters > 0 ? ((fuelData.liters / totalLiters) * 100).toFixed(2) : '0.00';
          dashboardData.push([
            '',
            fuel,
            fuelData.liters.toLocaleString(),
            fuelPercent + '%',
            fuelData.operations,
            fuelData.revenue.toLocaleString() + ' ‚ÇΩ',
            '', '', '', '', '', ''
          ]);
        });

      // –ò—Ç–æ–≥–∏ –ø–æ —Ç–æ–ø–ª–∏–≤—É
      dashboardData.push([
        '',
        '–ò–¢–û–ì–û:',
        totalLiters,
        100.00,
        totalOperations,
        totalRevenue,
        '', '', '', '', '', ''
      ]);
      
      dashboardData.push(['', '', '', '', '', '', '', '', '', '', '', '']);
      dashboardData.push(['', '', '', '', '', '', '', '', '', '', '', '']);
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
      dashboardData.push(['', '–ê–ù–ê–õ–ò–ó –ü–û –°–ü–û–°–û–ë–ê–ú –û–ü–õ–ê–¢–´', '', '', '', '', '', '', '', '', '', '']);
      dashboardData.push(['', '–°–ø–æ—Å–æ–±', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '% –æ—Ç –æ–±—â–µ–≥–æ', '–û–ø–µ—Ä–∞—Ü–∏–π', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '', '', '', '', '', '']);
      
      Object.entries(paymentStats)
        .sort(([,a], [,b]) => b.revenue - a.revenue) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ
        .forEach(([method, paymentData]) => {
          const methodPercent = totalRevenue > 0 ? ((paymentData.revenue / totalRevenue) * 100).toFixed(2) : '0.00';
          const avgCheck = paymentData.operations > 0 ? (paymentData.revenue / paymentData.operations).toFixed(2) : '0.00';
          dashboardData.push([
            '',
            method,
            paymentData.revenue.toLocaleString() + ' ‚ÇΩ',
            methodPercent + '%',
            paymentData.operations,
            avgCheck + ' ‚ÇΩ',
            '', '', '', '', '', ''
          ]);
        });

      // –ò—Ç–æ–≥–∏ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
      const totalPaymentOperations = Object.values(paymentStats).reduce((sum, stats) => sum + stats.operations, 0);
      const avgPaymentCheck = totalRevenue > 0 ? (totalRevenue / totalPaymentOperations).toFixed(2) : '0.00';
      dashboardData.push([
        '',
        '–ò–¢–û–ì–û:',
        totalRevenue,
        100.00,
        totalPaymentOperations,
        parseFloat(avgPaymentCheck),
        '', '', '', '', '', ''
      ]);
      
      dashboardData.push(['', '', '', '', '', '', '', '', '', '', '', '']);
      dashboardData.push(['', '', '', '', '', '', '', '', '', '', '', '']);
      
      // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
      const recentDays = Object.entries(dailyStats)
        .sort(([a], [b]) => new Date(a.split('.').reverse().join('-')) - new Date(b.split('.').reverse().join('-')))
        .slice(-7);
      
      dashboardData.push(['', '–î–ò–ù–ê–ú–ò–ö–ê –ü–û –î–ù–Ø–ú (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)', '', '', '', '', '', '', '', '', '', '']);
      dashboardData.push(['', '–î–∞—Ç–∞', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '–û–±—ä–µ–º (–ª)', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '', '', '', '', '', '']);
      
      recentDays.forEach(([date, dayData]) => {
        const avgCheck = dayData.operations > 0 ? (dayData.revenue / dayData.operations).toFixed(2) : '0.00';
        dashboardData.push([
          '',
          date,
          dayData.operations,
          dayData.revenue.toLocaleString() + ' ‚ÇΩ',
          dayData.liters.toLocaleString() + ' –ª',
          avgCheck + ' ‚ÇΩ',
          '', '', '', '', '', ''
        ]);
      });
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞
      const dashboardWorksheet = XLSX.utils.aoa_to_sheet(dashboardData);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è KPI –¥–∞—à–±–æ—Ä–¥–∞
      dashboardWorksheet['!cols'] = [
        { wch: 2 },  // –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
        { wch: 16 }, // KPI 1: –û–ø–µ—Ä–∞—Ü–∏–∏
        { wch: 3 },  // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        { wch: 16 }, // KPI 2: –í—ã—Ä—É—á–∫–∞
        { wch: 3 },  // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        { wch: 16 }, // KPI 3: –û–±—ä–µ–º
        { wch: 3 },  // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        { wch: 16 }, // KPI 4: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å
        { wch: 3 },  // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        { wch: 16 }, // KPI 5: –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
        { wch: 3 },  // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        { wch: 5 }   // –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞
      ];
      
      // –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ KPI –¥–∞—à–±–æ—Ä–¥–∞
      const titleStyle = {
        font: { color: { rgb: "1E3A8A" }, bold: true, size: 16 },
        alignment: { horizontal: "center", vertical: "center" }
      };
      
      const kpiHeaderStyle = {
        font: { color: { rgb: "64748B" }, bold: true, size: 11 },
        fill: { fgColor: { rgb: "F8FAFC" } },
        alignment: { horizontal: "center", vertical: "center" },
        border: {
          top: { style: "thin", color: { rgb: "E2E8F0" }},
          bottom: { style: "thin", color: { rgb: "E2E8F0" }},
          left: { style: "thin", color: { rgb: "E2E8F0" }},
          right: { style: "thin", color: { rgb: "E2E8F0" }}
        }
      };
      
      const kpiValueStyle = {
        font: { color: { rgb: "1E40AF" }, bold: true, size: 18 },
        fill: { fgColor: { rgb: "EFF6FF" } },
        alignment: { horizontal: "center", vertical: "center" },
        border: {
          top: { style: "medium", color: { rgb: "3B82F6" }},
          bottom: { style: "thin", color: { rgb: "E2E8F0" }},
          left: { style: "thin", color: { rgb: "E2E8F0" }},
          right: { style: "thin", color: { rgb: "E2E8F0" }}
        }
      };
      
      const kpiTrendStyle = {
        font: { color: { rgb: "059669" }, bold: false, size: 10 },
        fill: { fgColor: { rgb: "F0FDF4" } },
        alignment: { horizontal: "center", vertical: "center" },
        border: {
          top: { style: "thin", color: { rgb: "E2E8F0" }},
          bottom: { style: "medium", color: { rgb: "10B981" }},
          left: { style: "thin", color: { rgb: "E2E8F0" }},
          right: { style: "thin", color: { rgb: "E2E8F0" }}
        }
      };
      
      const sectionHeaderStyle = {
        font: { color: { rgb: "FFFFFF" }, bold: true, size: 12 },
        fill: { fgColor: { rgb: "1E40AF" } },
        alignment: { horizontal: "left", vertical: "center" }
      };
      
      const tableHeaderStyle = {
        font: { color: { rgb: "FFFFFF" }, bold: true, size: 11 },
        fill: { fgColor: { rgb: "3B82F6" } },
        alignment: { horizontal: "center", vertical: "center" }
      };
      
      const dataStyle = {
        font: { color: { rgb: "1F2937" }, size: 10 },
        fill: { fgColor: { rgb: "FFFFFF" } },
        alignment: { horizontal: "center", vertical: "center" },
        border: {
          top: { style: "thin", color: { rgb: "E5E7EB" }},
          bottom: { style: "thin", color: { rgb: "E5E7EB" }},
          left: { style: "thin", color: { rgb: "E5E7EB" }},
          right: { style: "thin", color: { rgb: "E5E7EB" }}
        }
      };
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —è—á–µ–π–∫–∞–º
      Object.keys(dashboardWorksheet).forEach(cellAddress => {
        if (cellAddress.startsWith('!')) return;
        
        const cell = dashboardWorksheet[cellAddress];
        if (!cell || !cell.v) return;
        
        const cellValue = cell.v.toString();
        const [, col, row] = cellAddress.match(/([A-Z]+)(\d+)/);
        const rowNum = parseInt(row);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        if (cellValue.includes('–û–ü–ï–†–ê–¶–ò–û–ù–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø')) {
          cell.s = titleStyle;
        }
        
        // KPI –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∞ 5)
        if (rowNum === 5 && ['B', 'D', 'F', 'H', 'J'].includes(col) && cellValue.length > 0) {
          cell.s = kpiHeaderStyle;
        }
        
        // KPI –∑–Ω–∞—á–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ 7)
        if (rowNum === 7 && ['B', 'D', 'F', 'H', 'J'].includes(col) && cellValue.length > 0) {
          cell.s = kpiValueStyle;
        }
        
        // KPI —Ç—Ä–µ–Ω–¥—ã (—Å—Ç—Ä–æ–∫–∞ 8)
        if (rowNum === 8 && ['B', 'D', 'F', 'H', 'J'].includes(col) && cellValue.length > 0) {
          cell.s = kpiTrendStyle;
        }
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
        if (cellValue.includes('–ê–ù–ê–õ–ò–ó –ü–û') || cellValue.includes('–î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê') || 
            cellValue.includes('–î–ò–ù–ê–ú–ò–ö–ê –ü–û –î–ù–Ø–ú')) {
          cell.s = sectionHeaderStyle;
        }
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü
        if ((cellValue === '–í–∏–¥' || cellValue === '–°–ø–æ—Å–æ–±' || cellValue === '–î–∞—Ç–∞') && col === 'B') {
          cell.s = tableHeaderStyle;
        }
        if (['–û–±—ä–µ–º (–ª)', '% –æ—Ç –æ–±—â–µ–≥–æ', '–û–ø–µ—Ä–∞—Ü–∏–π', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'].includes(cellValue)) {
          cell.s = tableHeaderStyle;
        }
        
        // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü
        if (rowNum > 12 && !cellValue.includes('–ê–ù–ê–õ–ò–ó') && !cellValue.includes('–î–ò–ù–ê–ú–ò–ö–ê') && 
            !cellValue.includes('–î–ï–¢–ê–õ–¨–ù–ê–Ø') && cellValue.length > 0 && cellValue !== '') {
          cell.s = dataStyle;
        }
      });
      
      XLSX.utils.book_append_sheet(workbook, dashboardWorksheet, 'KPI –î–∞—à–±–æ—Ä–¥');
      
      // === –õ–ò–°–¢ 3: –î–ê–ù–ù–´–ï –î–õ–Ø –ì–†–ê–§–ò–ö–û–í ===
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º
      const chartData = [
        ['', '', '', '', '', ''],
        ['üìâ –î–ê–ù–ù–´–ï –ü–û –î–ù–Ø–ú (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)', '', '', '', '', ''],
        ['–î–∞—Ç–∞', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '–û–±—ä—ë–º (–ª)', '', ''],
        ...Object.entries(dailyStats)
          .sort(([a], [b]) => new Date(a.split('.').reverse().join('-')) - new Date(b.split('.').reverse().join('-')))
          .map(([date, dayStats]) => [
            date,
            dayStats.operations,
            dayStats.revenue.toFixed(2),
            dayStats.liters.toFixed(2),
            '',
            ''
          ]),
        ['', '', '', '', '', ''],
        ['üï∞ –î–ê–ù–ù–´–ï –ü–û –ß–ê–°–ê–ú (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)', '', '', '', '', ''],
        ['–ß–∞—Å', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '', '', ''],
        ...Array.from({length: 24}, (_, i) => {
          const hour = `${i.toString().padStart(2, '0')}:00`;
          const hourData = hourlyStats[hour] || { operations: 0, revenue: 0 };
          return [hour, hourData.operations, hourData.revenue.toFixed(2), '', '', ''];
        }),
        ['', '', '', '', '', ''],
        ['üìä –î–ê–ù–ù–´–ï –ü–û –¢–û–ü–õ–ò–í–£ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)', '', '', '', '', ''],
        ['–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞', '–û–±—ä—ë–º (–ª)', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '', ''],
        ...Object.entries(fuelStats).map(([fuel, stats]) => [
          fuel,
          Number(stats.liters),
          stats.operations,
          Number(stats.revenue),
          '',
          ''
        ]),
        ['', '', '', '', '', ''],
        ['üí≥ –î–ê–ù–ù–´–ï –ü–û –û–ü–õ–ê–¢–ï (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)', '', '', '', '', ''],
        ['–í–∏–¥ –æ–ø–ª–∞—Ç—ã', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–î–æ–ª—è (%)', '', ''],
        ...Object.entries(paymentStats).map(([method, stats]) => [
          method,
          Number(stats.revenue),
          stats.operations,
          Math.round(stats.revenue / totalRevenue * 100),
          '',
          ''
        ])
      ];
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
      const chartWorksheet = XLSX.utils.aoa_to_sheet(chartData);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
      chartWorksheet['!cols'] = [
        { wch: 20 }, // –ù–∞–∑–≤–∞–Ω–∏–µ/–î–∞—Ç–∞
        { wch: 15 }, // –û–ø–µ—Ä–∞—Ü–∏–∏/–û–±—ä—ë–º
        { wch: 18 }, // –í—ã—Ä—É—á–∫–∞
        { wch: 15 }, // –û–±—ä—ë–º/–î–æ–ª—è
        { wch: 10 }, // –ü—É—Å—Ç–æ
        { wch: 10 }  // –ü—É—Å—Ç–æ
      ];
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–∏—Å—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
      const chartHeaderStyle = {
        font: { color: { rgb: "FFFFFF" }, bold: true, size: 14 },
        fill: { fgColor: { rgb: "1E40AF" } }, // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
        alignment: { horizontal: "center", vertical: "center" }
      };
      
      const chartDataStyle = {
        font: { color: { rgb: "1E3A8A" } }, // –°–∏–Ω–∏–π —à—Ä–∏—Ñ—Ç
        fill: { fgColor: { rgb: "EFF6FF" } }, // –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
        alignment: { horizontal: "center", vertical: "center" },
        border: {
          top: { style: "thin", color: { rgb: "BFDBFE" }},
          bottom: { style: "thin", color: { rgb: "BFDBFE" }},
          left: { style: "thin", color: { rgb: "BFDBFE" }},
          right: { style: "thin", color: { rgb: "BFDBFE" }}
        }
      };
      
      const chartColumnHeaderStyle = {
        font: { color: { rgb: "FFFFFF" }, bold: true },
        fill: { fgColor: { rgb: "3B82F6" } }, // –°—Ä–µ–¥–Ω–∏–π —Å–∏–Ω–∏–π
        alignment: { horizontal: "center", vertical: "center" }
      };
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ª–∏—Å—Ç—É –≥—Ä–∞—Ñ–∏–∫–æ–≤
      Object.keys(chartWorksheet).forEach(cellAddress => {
        if (cellAddress.startsWith('!')) return;
        
        const cell = chartWorksheet[cellAddress];
        if (!cell || !cell.v) return;
        
        const cellValue = cell.v.toString();
        
        // –°—Ç–∏–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
        if (cellValue.includes('–î–ê–ù–ù–´–ï –ü–û') || cellValue.includes('–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤')) {
          cell.s = chartHeaderStyle;
        }
        
        // –°—Ç–∏–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        if (cellValue === '–î–∞—Ç–∞' || cellValue === '–û–ø–µ—Ä–∞—Ü–∏–∏' || cellValue === '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)' ||
            cellValue === '–û–±—ä—ë–º (–ª)' || cellValue === '–ß–∞—Å' || cellValue === '–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞' ||
            cellValue === '–í–∏–¥ –æ–ø–ª–∞—Ç—ã' || cellValue === '–î–æ–ª—è (%)') {
          cell.s = chartColumnHeaderStyle;
        }
        
        // –°—Ç–∏–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ (—á–∏—Å–ª–∞, –¥–∞—Ç—ã, –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞)
        if (!cellValue.includes('–î–ê–ù–ù–´–ï') && !cellValue.includes('–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤') && 
            cellValue !== '–î–∞—Ç–∞' && cellValue !== '–û–ø–µ—Ä–∞—Ü–∏–∏' && cellValue !== '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)' &&
            cellValue !== '–û–±—ä—ë–º (–ª)' && cellValue !== '–ß–∞—Å' && cellValue !== '–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞' &&
            cellValue !== '–í–∏–¥ –æ–ø–ª–∞—Ç—ã' && cellValue !== '–î–æ–ª—è (%)' &&
            cellValue.trim() !== '') {
          cell.s = chartDataStyle;
        }
      });
      
      XLSX.utils.book_append_sheet(workbook, chartWorksheet, 'üìâ –ì—Ä–∞—Ñ–∏–∫–∏');
      
      // === –õ–ò–°–¢ 2: –ü–û–î–†–û–ë–ù–´–ï –î–ê–ù–ù–´–ï ===
      
      const detailsWorksheet = XLSX.utils.json_to_sheet(exportData);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      detailsWorksheet['!cols'] = [
        { wch: 5 },   // ‚Ññ
        { wch: 15 },  // ID –æ–ø–µ—Ä–∞—Ü–∏–∏
        { wch: 15 },  // ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        { wch: 12 },  // –î–∞—Ç–∞
        { wch: 12 },  // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        { wch: 12 },  // –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        { wch: 12 },  // –°—Ç–∞—Ç—É—Å
        { wch: 15 },  // –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        { wch: 20 },  // –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞
        { wch: 12 },  // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        { wch: 12 },  // –í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞
        { wch: 12 },  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        { wch: 12 },  // –¶–µ–Ω–∞
        { wch: 12 },  // –°—Ç–æ–∏–º–æ—Å—Ç—å
        { wch: 15 },  // –í–∏–¥ –æ–ø–ª–∞—Ç—ã
        { wch: 15 },  // –û–ø–µ—Ä–∞—Ç–æ—Ä
        { wch: 30 },  // –î–µ—Ç–∞–ª–∏
        { wch: 12 },  // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        { wch: 15 }   // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      ];

      XLSX.utils.book_append_sheet(workbook, detailsWorksheet, 'üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
      const now = new Date();
      const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
      const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
      const filename = `operations_${dateStr}_${timeStr}.xlsx`;

      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª:', filename);

      // –°–æ–∑–¥–∞–µ–º Blob –¥–ª—è —Ñ–∞–π–ª–∞ Excel
      const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
      const blob = new Blob([excelBuffer], { 
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
      });

      const results = [];
      
      // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª "local")
      if (channels.local) {
        XLSX.writeFile(workbook, filename);
        console.log('üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', filename);
        results.push('‚Ä¢ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
      }
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
      if (channels.telegram) {
        try {
          await telegramService.initialize();
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
          const summary = `üìä <b>–û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º</b>\n\n` +
            `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}\n` +
            `üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}\n` +
            `üè™ –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞: ${operations[0]?.tradingPointName || '–í—Å–µ —Ç–æ—á–∫–∏'}\n` +
            `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${operations.reduce((sum, op) => sum + (op.totalCost || 0), 0).toFixed(2)} ‚ÇΩ`;

          await telegramService.sendDocument(blob, {
            filename: filename,
            caption: summary
          });
          
          console.log('‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
          results.push('‚Ä¢ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
        } catch (telegramError) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram:', telegramError);
          results.push('‚ö†Ô∏è Telegram: ' + telegramError.message);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Email (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
      if (channels.email) {
        try {
          const downloadLink = channels.local ? emailService.generateDownloadLink(blob, filename) : '';
          const emailMessage = `üìä –ì–æ—Ç–æ–≤ –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º TradeFrame\n\n` +
            `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}\n` +
            `üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}\n` +
            `üè™ –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞: ${operations[0]?.tradingPointName || '–í—Å–µ —Ç–æ—á–∫–∏'}\n` +
            `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${operations.reduce((sum, op) => sum + (op.totalCost || 0), 0).toFixed(2)} ‚ÇΩ\n\n` +
            `üìé –§–∞–π–ª –æ—Ç—á–µ—Ç–∞: ${filename}` +
            (downloadLink ? `\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${downloadLink}` : '');

          await emailService.sendReportNotification({
            to: '', // –ë–µ—Ä–µ—Ç—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            subject: `üìä TradeFrame: –û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º ${new Date().toLocaleDateString('ru-RU')}`,
            message: emailMessage
          });
          
          console.log('‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
          results.push('‚Ä¢ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
          
        } catch (emailError) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email:', emailError);
          results.push('‚ö†Ô∏è Email: ' + emailError.message);
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const successMessage = '‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n' + results.join('\n');
      alert(successMessage);
      
      console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è HTML –æ—Ç—á–µ—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
  const exportToHTML = async (operations: any[]) => {
    console.log('üìä –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏');
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    const fuelStats = {};
    const paymentStats = {};
    const hourlyStats = {};
    
    let totalRevenue = 0;
    let totalLiters = 0;
    let completedOps = 0;
    
    // –†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è HTML
    const periodStart = new Date(dateFrom);
    const periodEnd = new Date(dateTo);
    const periodDays = Math.max(1, Math.ceil((periodEnd - periodStart) / (1000 * 60 * 60 * 24)) + 1);
    
    operations.forEach(op => {
      totalRevenue += op.totalCost || 0;
      totalLiters += op.quantity || 0;
      if (op.status === 'completed') completedOps++;
      
      // –ü–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
      if (op.fuelType) {
        if (!fuelStats[op.fuelType]) fuelStats[op.fuelType] = { liters: 0, revenue: 0, ops: 0 };
        fuelStats[op.fuelType].liters += op.quantity || 0;
        fuelStats[op.fuelType].revenue += op.totalCost || 0;
        fuelStats[op.fuelType].ops += 1;
      }
      
      // –ü–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
      if (op.paymentMethod && op.totalCost) {
        const method = paymentMethodMap[op.paymentMethod] || op.paymentMethod;
        if (!paymentStats[method]) paymentStats[method] = { revenue: 0, ops: 0 };
        paymentStats[method].revenue += op.totalCost;
        paymentStats[method].ops += 1;
      }
      
      // –ü–æ —á–∞—Å–∞–º
      const hour = new Date(op.startTime).getHours();
      if (!hourlyStats[hour]) hourlyStats[hour] = 0;
      hourlyStats[hour] += 1;
    });
    
    const htmlContent = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º - ${new Date().toLocaleDateString('ru-RU')}</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Arial, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh; padding: 20px;
        }
        .container { 
            max-width: 1400px; margin: 0 auto; background: white;
            border-radius: 20px; box-shadow: 0 20px 40px rgba(0,0,0,0.1); overflow: hidden;
        }
        .header { 
            background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
            color: white; padding: 40px; text-align: center;
        }
        .header h1 { font-size: 3rem; margin-bottom: 10px; }
        .header p { font-size: 1.2rem; opacity: 0.9; }
        
        .kpi-grid { 
            display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
            gap: 30px; padding: 40px; background: #f8fafc;
        }
        .kpi-card { 
            background: white; padding: 30px; border-radius: 15px; text-align: center;
            box-shadow: 0 10px 25px rgba(0,0,0,0.08); border-left: 5px solid #3b82f6;
            transition: transform 0.3s ease;
        }
        .kpi-card:hover { transform: translateY(-5px); }
        .kpi-card h3 { color: #64748b; font-size: 0.9rem; text-transform: uppercase; margin-bottom: 10px; }
        .kpi-card .value { color: #1e40af; font-size: 2.5rem; font-weight: bold; margin-bottom: 5px; }
        .kpi-card .trend { color: #059669; font-size: 0.9rem; }
        
        .charts-grid { 
            display: grid; grid-template-columns: 1fr 1fr; gap: 40px; padding: 40px;
        }
        .chart-container { 
            background: white; padding: 30px; border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.08); position: relative;
        }
        .chart-container h3 { 
            color: #1e40af; margin-bottom: 20px; font-size: 1.3rem;
            border-bottom: 2px solid #e2e8f0; padding-bottom: 10px;
        }
        .chart-wrapper { position: relative; height: 300px; }
        .daily-chart { grid-column: 1 / -1; }
        .daily-chart .chart-wrapper { height: 400px; }
        
        @media (max-width: 768px) {
            .charts-grid { grid-template-columns: 1fr; }
            .header h1 { font-size: 2rem; }
            .kpi-grid { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä –û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º</h1>
            <p>–ü–µ—Ä–∏–æ–¥: ${new Date(dateFrom).toLocaleDateString('ru-RU')} - ${new Date(dateTo).toLocaleDateString('ru-RU')} | –û–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}</p>
        </div>
        
        <div class="kpi-grid">
            <div class="kpi-card">
                <h3>–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π</h3>
                <div class="value">${operations.length}</div>
                <div class="trend">${(operations.length / periodDays).toFixed(2)} –æ–ø–µ—Ä–∞—Ü–∏–π/–¥–µ–Ω—å</div>
            </div>
            <div class="kpi-card">
                <h3>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</h3>
                <div class="value">${totalRevenue.toFixed(2)} ‚ÇΩ</div>
                <div class="trend">${(totalRevenue / operations.length).toFixed(2)} ‚ÇΩ/–æ–ø–µ—Ä–∞—Ü–∏—è</div>
            </div>
            <div class="kpi-card">
                <h3>–û–±—ä–µ–º —Ç–æ–ø–ª–∏–≤–∞</h3>
                <div class="value">${totalLiters.toFixed(2)} –ª</div>
                <div class="trend">${(totalLiters / operations.length).toFixed(2)} –ª/–æ–ø–µ—Ä–∞—Ü–∏—è</div>
            </div>
            <div class="kpi-card">
                <h3>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</h3>
                <div class="value">${((completedOps / operations.length) * 100).toFixed(2)}%</div>
                <div class="trend">–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedOps} –∏–∑ ${operations.length}</div>
            </div>
        </div>
        
        <div class="charts-grid">
            <div class="chart-container">
                <h3>üõ¢Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–æ–ø–ª–∏–≤—É</h3>
                <div class="chart-wrapper"><canvas id="fuelChart"></canvas></div>
            </div>
            
            <div class="chart-container">
                <h3>üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</h3>
                <div class="chart-wrapper"><canvas id="paymentChart"></canvas></div>
            </div>
            
            <div class="chart-container daily-chart">
                <h3>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º</h3>
                <div class="chart-wrapper"><canvas id="hourlyChart"></canvas></div>
            </div>
        </div>
    </div>

    <script>
        const chartColors = {
            primary: '#3b82f6', secondary: '#1e40af', accent: '#06b6d4',
            success: '#10b981', warning: '#f59e0b', danger: '#ef4444'
        };
        
        const fuelData = ${JSON.stringify(Object.entries(fuelStats).map(([fuel, stats]) => ({
          label: fuel, value: stats.liters
        })))};
        
        new Chart(document.getElementById('fuelChart'), {
            type: 'doughnut',
            data: {
                labels: fuelData.map(item => item.label),
                datasets: [{
                    data: fuelData.map(item => item.value),
                    backgroundColor: [chartColors.primary, chartColors.accent, chartColors.success, chartColors.warning, chartColors.danger],
                    borderWidth: 0, hoverBorderWidth: 3, hoverBorderColor: '#fff'
                }]
            },
            options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom', labels: { padding: 20, usePointStyle: true }}}}
        });
        
        const paymentData = ${JSON.stringify(Object.entries(paymentStats).map(([method, stats]) => ({
          label: method, value: stats.revenue
        })))};
        
        new Chart(document.getElementById('paymentChart'), {
            type: 'doughnut',
            data: {
                labels: paymentData.map(item => item.label),
                datasets: [{
                    data: paymentData.map(item => item.value),
                    backgroundColor: [chartColors.success, chartColors.primary, chartColors.accent, chartColors.warning],
                    borderWidth: 0, hoverBorderWidth: 3, hoverBorderColor: '#fff'
                }]
            },
            options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom', labels: { padding: 20, usePointStyle: true }}}}
        });
        
        const hourlyData = ${JSON.stringify(Array.from({length: 24}, (_, i) => ({
          hour: `${i.toString().padStart(2, '0')}:00`, operations: hourlyStats[i] || 0
        })))};
        
        new Chart(document.getElementById('hourlyChart'), {
            type: 'bar',
            data: {
                labels: hourlyData.map(item => item.hour),
                datasets: [{
                    label: '–û–ø–µ—Ä–∞—Ü–∏–∏', data: hourlyData.map(item => item.operations),
                    backgroundColor: chartColors.primary, borderColor: chartColors.secondary,
                    borderWidth: 1, borderRadius: 8, borderSkipped: false,
                }]
            },
            options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, grid: { color: '#f1f5f9' }}, x: { grid: { display: false }}}, plugins: { legend: { display: false }}}
        });
    </script>
</body>
</html>`;

    const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `operations-report-${new Date().toLocaleDateString('ru-RU').replace(/\./g, '-')}.html`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
    
    console.log('‚úÖ HTML –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Å–æ–∑–¥–∞–Ω');
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ PDF –æ—Ç—á–µ—Ç–∞
  const exportToPDF = async (operations: any[]) => {
    console.log('üìÑ –°–æ–∑–¥–∞–µ–º PDF –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π div –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    const tempDiv = document.createElement('div');
    tempDiv.style.position = 'absolute';
    tempDiv.style.left = '-9999px';
    tempDiv.style.width = '800px';
    tempDiv.style.background = 'white';
    tempDiv.style.padding = '20px';
    document.body.appendChild(tempDiv);
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const fuelStats = {};
    const paymentStats = {};
    let totalRevenue = 0;
    let totalLiters = 0;
    let completedOps = 0;
    
    // –†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞
    const periodStart = new Date(dateFrom);
    const periodEnd = new Date(dateTo);
    const periodDays = Math.max(1, Math.ceil((periodEnd - periodStart) / (1000 * 60 * 60 * 24)) + 1);
    
    operations.forEach(op => {
      totalRevenue += op.totalCost || 0;
      totalLiters += op.quantity || 0;
      if (op.status === 'completed') completedOps++;
      
      if (op.fuelType) {
        if (!fuelStats[op.fuelType]) fuelStats[op.fuelType] = { liters: 0, revenue: 0 };
        fuelStats[op.fuelType].liters += op.quantity || 0;
        fuelStats[op.fuelType].revenue += op.totalCost || 0;
      }
      
      if (op.paymentMethod && op.totalCost) {
        const method = paymentMethodMap[op.paymentMethod] || op.paymentMethod;
        if (!paymentStats[method]) paymentStats[method] = { revenue: 0 };
        paymentStats[method].revenue += op.totalCost;
      }
    });

    // HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è PDF
    tempDiv.innerHTML = `
      <div style="font-family: Arial, sans-serif;">
        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
        <div style="background: linear-gradient(135deg, #1e40af, #3b82f6); color: white; padding: 30px; text-align: center; border-radius: 10px; margin-bottom: 20px;">
          <h1 style="margin: 0; font-size: 36px;">üìä –û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º</h1>
          <p style="margin: 10px 0 0 0; font-size: 18px; opacity: 0.9;">
            –ü–µ—Ä–∏–æ–¥: ${new Date(dateFrom).toLocaleDateString('ru-RU')} - ${new Date(dateTo).toLocaleDateString('ru-RU')} | –û–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}
          </p>
        </div>

        <!-- KPI Cards -->
        <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px; margin-bottom: 30px;">
          <div style="background: white; border: 2px solid #3b82f6; padding: 20px; text-align: center; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
            <h3 style="color: #374151; font-size: 12px; margin: 0 0 8px 0; text-transform: uppercase;">–í–°–ï–ì–û –û–ü–ï–†–ê–¶–ò–ô</h3>
            <div style="color: #1e40af; font-size: 32px; font-weight: bold; margin: 0;">${operations.length.toFixed(2)}</div>
            <div style="color: #16a34a; font-size: 12px; margin: 5px 0 0 0;">${(operations.length / periodDays).toFixed(2)} –æ–ø–µ—Ä–∞—Ü–∏–π/–¥–µ–Ω—å</div>
          </div>
          
          <div style="background: white; border: 2px solid #10b981; padding: 20px; text-align: center; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
            <h3 style="color: #374151; font-size: 12px; margin: 0 0 8px 0; text-transform: uppercase;">–û–ë–©–ê–Ø –í–´–†–£–ß–ö–ê</h3>
            <div style="color: #16a34a; font-size: 32px; font-weight: bold; margin: 0;">${totalRevenue.toFixed(2)} ‚ÇΩ</div>
            <div style="color: #16a34a; font-size: 12px; margin: 5px 0 0 0;">${(totalRevenue / operations.length).toFixed(2)} ‚ÇΩ/–æ–ø–µ—Ä–∞—Ü–∏—è</div>
          </div>
          
          <div style="background: white; border: 2px solid #f59e0b; padding: 20px; text-align: center; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
            <h3 style="color: #374151; font-size: 12px; margin: 0 0 8px 0; text-transform: uppercase;">–û–ë–™–ï–ú –¢–û–ü–õ–ò–í–ê</h3>
            <div style="color: #dc2626; font-size: 32px; font-weight: bold; margin: 0;">${totalLiters.toFixed(2)} –ª</div>
            <div style="color: #16a34a; font-size: 12px; margin: 5px 0 0 0;">${(totalLiters / operations.length).toFixed(2)} –ª/–æ–ø–µ—Ä–∞—Ü–∏—è</div>
          </div>
          
          <div style="background: white; border: 2px solid #8b5cf6; padding: 20px; text-align: center; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
            <h3 style="color: #374151; font-size: 12px; margin: 0 0 8px 0; text-transform: uppercase;">–£–°–ü–ï–®–ù–û–°–¢–¨</h3>
            <div style="color: #7c3aed; font-size: 32px; font-weight: bold; margin: 0;">${((completedOps / operations.length) * 100).toFixed(2)}%</div>
            <div style="color: #16a34a; font-size: 12px; margin: 5px 0 0 0;">–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedOps} –∏–∑ ${operations.length}</div>
          </div>
        </div>

        <!-- –ì—Ä–∞—Ñ–∏–∫–∏ -->
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
          <div style="background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
            <h3 style="color: #1e40af; margin: 0 0 15px 0; font-size: 18px; border-bottom: 2px solid #e2e8f0; padding-bottom: 8px;">üõ¢Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–æ–ø–ª–∏–≤—É</h3>
            <canvas id="fuelChartPDF" width="350" height="250"></canvas>
          </div>
          
          <div style="background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
            <h3 style="color: #1e40af; margin: 0 0 15px 0; font-size: 18px; border-bottom: 2px solid #e2e8f0; padding-bottom: 8px;">üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</h3>
            <canvas id="paymentChartPDF" width="350" height="250"></canvas>
          </div>
        </div>

        <!-- –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ -->
        <div style="margin-top: 30px;">
          <h3 style="color: #1e40af; font-size: 18px; margin-bottom: 15px;">üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
          
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
            <div>
              <h4 style="color: #374151; font-size: 14px; margin-bottom: 10px;">–ü–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞:</h4>
              <div style="background: #f9fafb; padding: 15px; border-radius: 8px;">
                ${Object.entries(fuelStats).map(([fuel, stats]) => 
                  `<div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                    <span style="color: #374151; font-weight: 500;">${fuel}:</span>
                    <span style="color: #1f2937; font-weight: 600;">${stats.liters.toFixed(2)} –ª (${stats.revenue.toFixed(2)} ‚ÇΩ)</span>
                  </div>`
                ).join('')}
                <hr style="margin: 12px 0; border: none; border-top: 2px solid #e5e7eb;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                  <span style="color: #1f2937; font-weight: 700;">–ò–¢–û–ì–û:</span>
                  <span style="color: #1f2937; font-weight: 700;">${totalLiters.toFixed(2)} –ª (${totalRevenue.toFixed(2)} ‚ÇΩ)</span>
                </div>
              </div>
            </div>
            
            <div>
              <h4 style="color: #374151; font-size: 14px; margin-bottom: 10px;">–ü–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã:</h4>
              <div style="background: #f9fafb; padding: 15px; border-radius: 8px;">
                ${Object.entries(paymentStats).map(([method, stats]) => 
                  `<div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                    <span style="color: #374151; font-weight: 500;">${method}:</span>
                    <span style="color: #1f2937; font-weight: 600;">${stats.revenue.toFixed(2)} ‚ÇΩ</span>
                  </div>`
                ).join('')}
                <hr style="margin: 12px 0; border: none; border-top: 2px solid #e5e7eb;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                  <span style="color: #1f2937; font-weight: 700;">–ò–¢–û–ì–û:</span>
                  <span style="color: #1f2937; font-weight: 700;">${totalRevenue.toFixed(2)} ‚ÇΩ</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;

    // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    await new Promise(resolve => setTimeout(resolve, 100));

    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è PDF
    const createChartForPDF = (canvasId, type, chartData, colors) => {
      return new Promise((resolve) => {
        const canvas = document.getElementById(canvasId);
        if (canvas) {
          new (window as any).Chart(canvas, {
            type,
            data: chartData,
            options: {
              responsive: false,
              plugins: {
                legend: {
                  position: 'bottom',
                  labels: { padding: 15, usePointStyle: true, font: { size: 11 }}
                }
              }
            }
          });
          setTimeout(resolve, 500); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        } else {
          resolve(true);
        }
      });
    };

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    const fuelChartData = Object.entries(fuelStats).map(([fuel, stats]) => ({ label: fuel, value: stats.liters }));
    const paymentChartData = Object.entries(paymentStats).map(([method, stats]) => ({ label: method, value: stats.revenue }));

    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –µ—Å–ª–∏ Chart.js –¥–æ—Å—Ç—É–ø–µ–Ω
    if ((window as any).Chart) {
      await createChartForPDF('fuelChartPDF', 'doughnut', {
        labels: fuelChartData.map(item => item.label),
        datasets: [{
          data: fuelChartData.map(item => item.value),
          backgroundColor: ['#3b82f6', '#06b6d4', '#10b981', '#f59e0b', '#ef4444'],
          borderWidth: 0
        }]
      });

      await createChartForPDF('paymentChartPDF', 'doughnut', {
        labels: paymentChartData.map(item => item.label),
        datasets: [{
          data: paymentChartData.map(item => item.value),
          backgroundColor: ['#10b981', '#3b82f6', '#06b6d4', '#f59e0b'],
          borderWidth: 0
        }]
      });
    }

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const canvas = await html2canvas(tempDiv, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff'
      });

      // –°–æ–∑–¥–∞–µ–º PDF
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgData = canvas.toDataURL('image/png');
      
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const imgWidth = pdfWidth - 20; // –æ—Ç—Å—Ç—É–ø—ã
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF
      pdf.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);
      
      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
      if (imgHeight > pdfHeight - 20) {
        let remainingHeight = imgHeight;
        let currentY = 0;
        
        while (remainingHeight > 0) {
          const pageHeight = Math.min(remainingHeight, pdfHeight - 20);
          pdf.addImage(imgData, 'PNG', 10, 10 - currentY, imgWidth, imgHeight);
          
          remainingHeight -= pageHeight;
          currentY += pageHeight;
          
          if (remainingHeight > 0) {
            pdf.addPage();
          }
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
      const fileName = `operations-report-${new Date().toLocaleDateString('ru-RU').replace(/\./g, '-')}.pdf`;
      pdf.save(fileName);
      
      console.log('‚úÖ PDF –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF:', error);
      throw error;
    } finally {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
      document.body.removeChild(tempDiv);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
  const handleExportConfirm = async (channels: ExportChannels) => {
    try {
      if (channels.local) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        setPendingChannels(channels);
        setExportDialogOpen(false);
        setShowFormatDialog(true);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º Excel –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await exportToExcel(pendingExportOperations, channels);
        console.log('‚úÖ Excel —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        setPendingExportOperations([]);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: ${error.message}`);
    }
  };

  const handleFormatConfirm = async (format: ExportFormat) => {
    try {
      switch (format) {
        case 'html':
          await exportToHTML(pendingExportOperations);
          console.log('‚úÖ HTML —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
          break;
        case 'pdf':
          await exportToPDF(pendingExportOperations);
          console.log('‚úÖ PDF —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
          break;
        case 'excel':
        default:
          await exportToExcel(pendingExportOperations, pendingChannels!);
          console.log('‚úÖ Excel —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
          break;
      }
      setPendingExportOperations([]);
      setPendingChannels(null);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: ${error.message}`);
    }
  };

  // –û–ø–µ—Ä–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–æ—Ä–≥–æ–≤—ã–º API)
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ —É–±—Ä–∞–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ–≥–¥–∞

  return (
    <>
    <MainLayout fullWidth={true}>
      <div className="w-full space-y-6 report-full-width">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className="mb-6 pl-4 md:pl-6 lg:pl-8 pr-4 md:pr-6 lg:pr-8">
          <div className="flex items-start justify-between">
            <div>
              <h1 className="text-2xl font-semibold text-white">–û–ø–µ—Ä–∞—Ü–∏–∏</h1>
              <p className="text-slate-400 mt-2">
                {selectedNetwork && selectedTradingPoint && selectedTradingPoint !== "all" 
                  ? `Real-time –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ —Å–µ—Ç–∏ "${selectedNetwork.name}"`
                  : selectedNetwork 
                  ? `Real-time –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —Å–µ—Ç–∏ "${selectedNetwork.name}"`
                  : "Real-time –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–µ–º–æ —Å–µ—Ç–∏"}
              </p>
            </div>
            <div className="flex items-center gap-2">
              <Button
                onClick={reloadOperations}
                disabled={loading}
                variant="outline"
                size="sm"
                className="text-xs"
              >
                {loading ? (
                  <>
                    <Loader2 className="w-3 h-3 mr-1 animate-spin" />
                    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                  </>
                ) : (
                  <>
                    <RefreshCw className="w-3 h-3 mr-1" />
                    –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                  </>
                )}
              </Button>
              <HelpButton route="/network/operations-transactions" variant="text" className="flex-shrink-0" />
            </div>
          </div>
          <div className="flex items-center gap-4 mt-4">
            <Button
              variant={autoRefresh ? "default" : "outline"}
              onClick={() => setAutoRefresh(!autoRefresh)}
            >
              <RefreshCw className={`w-4 h-4 mr-2 ${autoRefresh ? 'animate-spin' : ''}`} />
              {autoRefresh ? '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' : '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'}
            </Button>
            <Button
              variant="outline"
              onClick={reloadOperations}
              disabled={loading}
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </Button>
            <Button
              variant="default"
              onClick={syncTransactionsFromTradingAPI}
              disabled={syncLoading}
              className="bg-blue-600 hover:bg-blue-700"
            >
              {syncLoading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...
                </>
              ) : (
                <>
                  <Download className="w-4 h-4 mr-2" />
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ API
                </>
              )}
            </Button>
            <Button
              variant="destructive"
              onClick={() => {
                if (confirm('‚ùì –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ê–ó–° ‚Ññ004 –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
                  clearStation4Operations();
                }
              }}
              disabled={clearLoading}
              className="bg-red-600 hover:bg-red-700"
            >
              {clearLoading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  –û—á–∏—Å—Ç–∫–∞...
                </>
              ) : (
                <>
                  <Trash2 className="w-4 h-4 mr-2" />
                  –û—á–∏—Å—Ç–∏—Ç—å –ê–ó–° ‚Ññ004
                </>
              )}
            </Button>
          </div>
        </div>

        <>
          {/* –§–∏–ª—å—Ç—Ä—ã */}
            <div className="mx-4 md:mx-6 lg:mx-8">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Filter className="w-5 h-5" />
                  –§–∏–ª—å—Ç—Ä—ã
                  <div className="ml-auto flex gap-2">
                    <Button 
                      variant="outline" 
                      className="flex-shrink-0"
                      onClick={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log('üîÑ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–∂–∞—Ç–∞!');
                        console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', filteredOperations.length);
                        
                        if (filteredOperations.length === 0) {
                          alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
                          return;
                        }
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                        setPendingExportOperations(filteredOperations);
                        setExportDialogOpen(true);
                      }}
                    >
                      <Download className="w-4 h-4 mr-2" />
                      –≠–∫—Å–ø–æ—Ä—Ç
                    </Button>
                    <Button 
                      variant="destructive" 
                      className="flex-shrink-0"
                      onClick={async () => {
                        if (confirm('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?')) {
                          await reloadOperations();
                        }
                      }}
                    >
                      –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    </Button>
                  </div>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className={`grid ${isMobile ? 'grid-cols-1 gap-3' : 'grid-cols-2 lg:grid-cols-6 gap-4'}`}>

                  <div>
                    <Label className="text-slate-300">–°—Ç–∞—Ç—É—Å</Label>
                    <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                      <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="–í—Å–µ">–í—Å–µ</SelectItem>
                        <SelectItem value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</SelectItem>
                        <SelectItem value="in_progress">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</SelectItem>
                        <SelectItem value="failed">–û—à–∏–±–∫–∞</SelectItem>
                        <SelectItem value="pending">–û–∂–∏–¥–∞–Ω–∏–µ</SelectItem>
                        <SelectItem value="cancelled">–û—Ç–º–µ–Ω–µ–Ω–æ</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label className="text-slate-300">–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞</Label>
                    <Select value={selectedFuelType} onValueChange={setSelectedFuelType}>
                      <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {fuelTypes.map(type => (
                          <SelectItem key={type} value={type}>{type}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label className="text-slate-300">–í–∏–¥ –æ–ø–ª–∞—Ç—ã</Label>
                    <Select value={selectedPaymentMethod} onValueChange={setSelectedPaymentMethod}>
                      <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {paymentMethods.map(method => (
                          <SelectItem key={method} value={method}>
                            {method === "–í—Å–µ" ? "–í—Å–µ" : (paymentMethodMap[method] || method)}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label className="text-slate-300">–î–∞—Ç–∞ —Å</Label>
                    <Input
                      type="date"
                      value={dateFrom}
                      onChange={(e) => setDateFrom(e.target.value)}
                      className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                    />
                  </div>

                  <div>
                    <Label className="text-slate-300">–î–∞—Ç–∞ –ø–æ</Label>
                    <Input
                      type="date"
                      value={dateTo}
                      onChange={(e) => setDateTo(e.target.value)}
                      className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                    />
                  </div>

                  <div>
                    <Label className="text-slate-300">–ü–æ–∏—Å–∫</Label>
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏, —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É, ID..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
            </div>

            {/* KPI - –°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π */}
            <div className="mx-4 md:mx-6 lg:mx-8">
              <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <Activity className="w-5 h-5" />
                –°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
              </h3>
              <div className={`grid ${isMobile ? 'grid-cols-1 gap-3' : 'grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4'}`}>
                {Object.entries(operationKpis).map(([operationType, stats]) => (
                  <Card key={operationType} className="bg-slate-800 border-slate-700">
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium text-slate-200">{operationType}</CardTitle>
                      <Activity className="h-4 w-4 text-slate-400" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold text-white">{stats.revenue.toFixed(0)} ‚ÇΩ</div>
                      <p className="text-xs text-slate-400">{stats.operations} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* KPI - –°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º –æ–ø–ª–∞—Ç—ã */}
            <div className="mx-4 md:mx-6 lg:mx-8">
              <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <Activity className="w-5 h-5" />
                –°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º –æ–ø–ª–∞—Ç—ã
              </h3>
              <div className={`grid ${isMobile ? 'grid-cols-1 gap-3' : 'grid-cols-2 md:grid-cols-4 gap-4'}`}>
                {Object.entries(paymentKpis).map(([paymentMethod, stats]) => (
                  <Card key={paymentMethod} className="bg-slate-800 border-slate-700">
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium text-slate-200">{paymentMethod}</CardTitle>
                      <Activity className="h-4 w-4 text-slate-400" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold text-white">{stats.revenue.toFixed(0)} ‚ÇΩ</div>
                      <p className="text-xs text-slate-400">{stats.operations} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* KPI - –û–±—ä–µ–º—ã —Ç–æ–ø–ª–∏–≤–∞ */}
            <div className="mx-4 md:mx-6 lg:mx-8">
              <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <Activity className="w-5 h-5" />
                –°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
              </h3>
              <div className={`grid ${isMobile ? 'grid-cols-1 gap-3' : 'grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4'}`}>
                {Object.entries(fuelKpis).map(([fuelType, stats]) => (
                  <Card key={fuelType} className="bg-slate-800 border-slate-700">
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium text-slate-200">{fuelType}</CardTitle>
                      <Activity className="h-4 w-4 text-slate-400" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold text-white">{stats.volume.toFixed(0)} –ª</div>
                      <p className="text-sm text-slate-400">{stats.revenue.toFixed(0)} ‚ÇΩ</p>
                      <p className="text-xs text-blue-400">{stats.operations} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>


            {/* –¢–∞–±–ª–∏—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–π */}
            <div className="mx-4 md:mx-6 lg:mx-8">
            <Card className="bg-slate-800 border-slate-700 w-full max-w-none">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Activity className="w-5 h-5" />
                  –¢–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                  <Badge variant="secondary" className="ml-auto">
                    {filteredOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                {isMobile ? (
                  // Mobile card layout
                  <div className="space-y-4 p-4">
                    {paginatedOperations.map((record) => (
                      <Card key={record.id} className="bg-slate-700 border-slate-600">
                        <CardHeader className="pb-3">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              {getStatusIcon(record.status)}
                              <span className="font-medium text-white">{operationTypeMap[record.operationType] || record.operationType}</span>
                            </div>
                            {getStatusBadge(record.status)}
                          </div>
                          {record.transactionId && (
                            <div className="text-xs text-slate-400 mt-1">{record.transactionId}</div>
                          )}
                        </CardHeader>
                        <CardContent className="pt-0 space-y-3">
                          <div className="flex items-center justify-between">
                            <Badge variant="outline" className="text-blue-400 border-blue-400">
                              {record.deviceId || 'N/A'}
                            </Badge>
                            <span className="text-xs text-slate-400 font-mono">{record.lastUpdated}</span>
                          </div>
                          
                          <div className="grid grid-cols-3 gap-2 text-sm">
                            <div>
                              <span className="text-slate-400">–î–∞—Ç–∞:</span>
                              <span className="text-white font-mono ml-1">{new Date(record.startTime).toLocaleDateString('ru-RU')}</span>
                            </div>
                            <div>
                              <span className="text-slate-400">–ù–∞—á–∞–ª–æ:</span>
                              <span className="text-white font-mono ml-1">{new Date(record.startTime).toLocaleTimeString('ru-RU')}</span>
                            </div>
                            <div>
                              <span className="text-slate-400">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:</span>
                              <span className="text-white font-mono ml-1">{record.endTime ? new Date(record.endTime).toLocaleTimeString('ru-RU') : '‚Äî'}</span>
                            </div>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-2 text-sm">
                            <div>
                              <span className="text-slate-400">–¢–∏–ø –∑–∞–ø–∏—Å–∏:</span>
                              <Badge className="ml-1 bg-slate-600 text-slate-200">
                                {record.status === 'completed' ? '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è' : '–û–ø–µ—Ä–∞—Ü–∏—è'}
                              </Badge>
                            </div>
                            <div>
                              <span className="text-slate-400">–¢–æ–ø–ª–∏–≤–æ:</span>
                              <span className="text-white ml-1">{record.fuelType || '‚Äî'}</span>
                            </div>
                          </div>
                          
                          {(record.quantity || record.price || record.totalCost) && (
                            <div className="grid grid-cols-3 gap-2 text-sm">
                              <div>
                                <span className="text-slate-400">–ö–æ–ª-–≤–æ:</span>
                                <div className="text-white font-mono">
                                  {record.quantity ? `${record.quantity.toFixed(2)} –ª` : '‚Äî'}
                                </div>
                              </div>
                              <div>
                                <span className="text-slate-400">–¶–µ–Ω–∞:</span>
                                <div className="text-white font-mono">
                                  {record.price ? `${record.price.toFixed(2)} ‚ÇΩ/–ª` : '‚Äî'}
                                </div>
                              </div>
                              <div>
                                <span className="text-slate-400">–°—É–º–º–∞:</span>
                                <div className="text-white font-mono">
                                  {record.totalCost ? `${record.totalCost.toFixed(2)} ‚ÇΩ` : '‚Äî'}
                                </div>
                              </div>
                            </div>
                          )}

                          {record.paymentMethod && (
                            <div className="text-sm">
                              <span className="text-slate-400">–í–∏–¥ –æ–ø–ª–∞—Ç—ã:</span>
                              <span className="text-white ml-1">
                                {paymentMethodMap[record.paymentMethod] || record.paymentMethod}
                              </span>
                            </div>
                          )}

                          {record.status === 'in_progress' && record.progress !== undefined && (
                            <div className="space-y-1">
                              <div className="flex justify-between items-center">
                                <span className="text-sm text-slate-400">–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                                <span className="text-sm text-blue-400">{Math.round(record.progress)}%</span>
                              </div>
                              <div className="w-full bg-slate-600 rounded-full h-2 overflow-hidden">
                                <div 
                                  className="h-full bg-blue-500"
                                  style={{ width: `${record.progress}%` }}
                                />
                              </div>
                            </div>
                          )}

                          {record.duration && record.status !== 'in_progress' && (
                            <div className="text-sm">
                              <span className="text-slate-400">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                              <span className="text-white font-mono ml-1">{formatDuration(record.duration)}</span>
                            </div>
                          )}
                          
                          <div className="text-sm border-t border-slate-600 pt-2">
                            <div className="flex items-start gap-1">
                              <span className="text-slate-400">–î–µ—Ç–∞–ª–∏:</span>
                              <span className="text-slate-300 flex-1">
                                {record.details}
                                {record.status === 'failed' && <AlertTriangle className="w-4 h-4 text-red-400 inline ml-1" />}
                              </span>
                            </div>
                          </div>
                          
                          {isNetworkOnly && record.tradingPointName && (
                            <div className="text-sm border-t border-slate-600 pt-2">
                              <span className="text-slate-400">–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞:</span>
                              <div className="text-slate-300 font-medium">{record.tradingPointName}</div>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    ))}
                    
                    {loading ? (
                      <div className="text-center py-8 text-slate-400">
                        <div className="flex items-center justify-center gap-2">
                          <div className="animate-spin w-4 h-4 border-2 border-slate-400 border-t-transparent rounded-full"></div>
                          –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π...
                        </div>
                      </div>
                    ) : filteredOperations.length === 0 ? (
                      <div className="text-center py-8 text-slate-400">
                        <div>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º</div>
                        {operations.length === 0 && (
                          <div className="mt-2 text-sm">
                            <button 
                              onClick={reloadOperations}
                              className="text-blue-400 hover:text-blue-300 underline"
                            >
                              –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
                            </button>
                          </div>
                        )}
                      </div>
                    ) : null}
                  </div>
                ) : (
                  // Desktop table layout
                  <div className="overflow-x-auto w-full">
                    <Table className="min-w-full table-fixed">
                      <TableHeader>
                        <TableRow className="border-slate-700">
                          {isNetworkOnly && <TableHead className="text-slate-300">–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞</TableHead>}
                          <TableHead className="text-slate-300">–°—Ç–∞—Ç—É—Å</TableHead>
                          <TableHead className="text-slate-300">–¢–∏–ø –∑–∞–ø–∏—Å–∏</TableHead>
                          <TableHead className="text-slate-300">–î–∞—Ç–∞</TableHead>
                          <TableHead className="text-slate-300">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</TableHead>
                          <TableHead className="text-slate-300">–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</TableHead>
                          <TableHead className="text-slate-300">–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞</TableHead>
                          <TableHead className="text-slate-300">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</TableHead>
                          <TableHead className="text-slate-300">–¶–µ–Ω–∞</TableHead>
                          <TableHead className="text-slate-300">–°—Ç–æ–∏–º–æ—Å—Ç—å</TableHead>
                          <TableHead className="text-slate-300 min-w-[120px]">–í–∏–¥ –æ–ø–ª–∞—Ç—ã</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {paginatedOperations.map((record) => (
                          <TableRow key={record.id} className="border-slate-700 hover:bg-slate-700/50">
                            {isNetworkOnly && (
                              <TableCell className="text-slate-300 max-w-xs">
                                <div className="truncate" title={record.tradingPointName}>
                                  {record.tradingPointName}
                                </div>
                              </TableCell>
                            )}
                            <TableCell>
                              <div className="flex items-center gap-2">
                                {getStatusIcon(record.status)}
                                {getStatusBadge(record.status)}
                              </div>
                            </TableCell>
                            <TableCell className="text-slate-300">
                              <Badge className="bg-slate-600 text-slate-200">
                                {record.status === 'completed' ? '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è' : '–û–ø–µ—Ä–∞—Ü–∏—è'}
                              </Badge>
                            </TableCell>
                            <TableCell className="text-white font-mono text-sm">
                              {new Date(record.startTime).toLocaleDateString('ru-RU')}
                            </TableCell>
                            <TableCell className="text-white font-mono text-sm">
                              {new Date(record.startTime).toLocaleTimeString('ru-RU')}
                            </TableCell>
                            <TableCell className="text-white font-mono text-sm">
                              {record.endTime ? new Date(record.endTime).toLocaleTimeString('ru-RU') : '‚Äî'}
                            </TableCell>
                            <TableCell className="text-slate-300">
                              {record.fuelType || '‚Äî'}
                            </TableCell>
                            <TableCell className="text-white font-mono">
                              {record.quantity ? `${record.quantity.toFixed(2)} –ª` : '‚Äî'}
                            </TableCell>
                            <TableCell className="text-white font-mono">
                              {record.price ? `${record.price.toFixed(2)} ‚ÇΩ/–ª` : '‚Äî'}
                            </TableCell>
                            <TableCell className="text-white font-mono">
                              {record.totalCost ? `${record.totalCost.toFixed(2)} ‚ÇΩ` : '‚Äî'}
                            </TableCell>
                            <TableCell className="text-slate-300 min-w-[120px] whitespace-nowrap">
                              <div className="truncate" title={record.paymentMethod ? (paymentMethodMap[record.paymentMethod] || record.paymentMethod) : '‚Äî'}>
                                {record.paymentMethod ? (paymentMethodMap[record.paymentMethod] || record.paymentMethod) : '‚Äî'}
                              </div>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                    
                    {loading ? (
                      <div className="text-center py-8 text-slate-400">
                        <div className="flex items-center justify-center gap-2">
                          <div className="animate-spin w-4 h-4 border-2 border-slate-400 border-t-transparent rounded-full"></div>
                          –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π...
                        </div>
                      </div>
                    ) : filteredOperations.length === 0 ? (
                      <div className="text-center py-8 text-slate-400">
                        <div>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º</div>
                        {operations.length === 0 && (
                          <div className="mt-2 text-sm">
                            <button 
                              onClick={reloadOperations}
                              className="text-blue-400 hover:text-blue-300 underline"
                            >
                              –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
                            </button>
                          </div>
                        )}
                      </div>
                    ) : null}
                  </div>
                )}
                
                {/* –ü–ê–ì–ò–ù–ê–¶–ò–Ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                {totalPages > 1 && (
                  <div className="flex items-center justify-between px-4 py-3 border-t border-slate-600">
                    <div className="text-sm text-slate-400">
                      –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages} ({filteredOperations.length} –≤—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π, –ø–æ–∫–∞–∑–∞–Ω–æ {paginatedOperations.length})
                    </div>
                    <div className="flex gap-2">
                      <Button
                        onClick={() => setCurrentPage(1)}
                        disabled={currentPage === 1}
                        variant="outline"
                        size="sm"
                        className="text-xs"
                      >
                        –ü–µ—Ä–≤–∞—è
                      </Button>
                      <Button
                        onClick={() => setCurrentPage(currentPage - 1)}
                        disabled={currentPage === 1}
                        variant="outline"
                        size="sm"
                        className="text-xs"
                      >
                        –ù–∞–∑–∞–¥
                      </Button>
                      <Button
                        onClick={() => setCurrentPage(currentPage + 1)}
                        disabled={currentPage === totalPages}
                        variant="outline"
                        size="sm"
                        className="text-xs"
                      >
                        –í–ø–µ—Ä—ë–¥
                      </Button>
                      <Button
                        onClick={() => setCurrentPage(totalPages)}
                        disabled={currentPage === totalPages}
                        variant="outline"
                        size="sm"
                        className="text-xs"
                      >
                        –ü–æ—Å–ª–µ–¥–Ω—è—è
                      </Button>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
            </div>
        </>
      </div>
    </MainLayout>
    
    {/* –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
    <ExportChannelDialog
      open={exportDialogOpen}
      onOpenChange={setExportDialogOpen}
      onConfirm={handleExportConfirm}
      operationsCount={pendingExportOperations.length}
    />
    
    <ExportFormatDialog
      open={showFormatDialog}
      onOpenChange={setShowFormatDialog}
      onConfirm={handleFormatConfirm}
    />
    </>
  );
}