import React, { useState, useMemo, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import { useIsMobile } from "@/hooks/use-mobile";
import { useSelection } from "@/context/SelectionContext";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Activity, Download, Filter, Clock, CheckCircle, XCircle, PlayCircle, PauseCircle, AlertTriangle, RefreshCw, Loader2 } from "lucide-react";
import { HelpButton } from "@/components/help/HelpButton";
import { operationsService, Operation } from "@/services/operationsService";
import { operationsSupabaseService } from "@/services/operationsSupabaseService";
import { nomenclatureService } from "@/services/nomenclatureService";

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
const operationTypeMap = {
  'sale': '–ü—Ä–æ–¥–∞–∂–∞',
  'refund': '–í–æ–∑–≤—Ä–∞—Ç',
  'correction': '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è',
  'maintenance': '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
  'tank_loading': '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞',
  'diagnostics': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
  'sensor_calibration': '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤'
};

const statusTypes = ["–í—Å–µ", "completed", "in_progress", "failed", "pending", "cancelled"];
const allowedPaymentMethods = ["cash", "bank_card", "fuel_card", "online_order"];

const paymentMethodMap = {
  'bank_card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã',
  'cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
  'fuel_card': '–¢–æ–ø–ª–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã',
  'online_order': '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã'
};

export default function OperationsTransactionsPage() {
  const isMobile = useIsMobile();
  
  // Debug: –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–±–∏–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
  console.log('üì± isMobile:', isMobile, 'window.innerWidth:', typeof window !== 'undefined' ? window.innerWidth : 'undefined');
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const isMobileForced = true;
  const { selectedNetwork, selectedTradingPoint } = useSelection();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const [operations, setOperations] = useState<Operation[]>([]);
  const [loading, setLoading] = useState(true);
  
  // –§–∏–ª—å—Ç—Ä—ã
  const [selectedStatus, setSelectedStatus] = useState("–í—Å–µ");
  const [selectedFuelType, setSelectedFuelType] = useState("–í—Å–µ");
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState("–í—Å–µ");
  const [searchQuery, setSearchQuery] = useState("");
  const [autoRefresh, setAutoRefresh] = useState(true);
  const [dateFrom, setDateFrom] = useState("2025-08-01");
  const [dateTo, setDateTo] = useState("2025-08-31");

  const isNetworkOnly = selectedNetwork && (!selectedTradingPoint || selectedTradingPoint === "all");
  const isTradingPointSelected = selectedNetwork && selectedTradingPoint && selectedTradingPoint !== "all";

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ Supabase –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const loadOperations = async () => {
      try {
        setLoading(true);
        console.log('üîÑ Loading operations from Supabase...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Supabase
        const supabaseOperations = await operationsSupabaseService.getOperations();
        setOperations(supabaseOperations);
        
        console.log('‚úÖ Loaded operations:', supabaseOperations.length);
      } catch (error) {
        console.error('‚ùå Error loading operations:', error);
        
        // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try {
          const data = await operationsService.getAll();
          setOperations(data);
        } catch (fallbackError) {
          console.error('‚ùå Fallback also failed:', fallbackError);
          setOperations([]);
        }
      } finally {
        setLoading(false);
      }
    };

    loadOperations();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
  const reloadOperations = async () => {
    try {
      setLoading(true);
      console.log('üîÑ Reloading operations from Supabase...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Supabase
      const supabaseOperations = await operationsSupabaseService.getOperations();
      setOperations(supabaseOperations);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statusStats = await operationsSupabaseService.getStatusStatistics();
      console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:', statusStats);
      console.log('‚úÖ Reloaded operations:', supabaseOperations.length);
    } catch (error) {
      console.error('‚ùå Error reloading operations:', error);
      
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–∏—Å
      try {
        await operationsService.forceReload();
        const data = await operationsService.getAll();
        setOperations(data);
      } catch (fallbackError) {
        console.error('‚ùå Fallback reload also failed:', fallbackError);
      }
    } finally {
      setLoading(false);
    }
  };

  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  // useEffect(() => {
  //   if (!autoRefresh) return;
    
  //   const interval = setInterval(async () => {
  //     try {
  //       const data = await operationsService.getAll();
  //       setOperations(data);
  //     } catch (error) {
  //       console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
  //     }
  //   }, 5000);

  //   return () => clearInterval(interval);
  // }, [autoRefresh]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const filteredOperations = useMemo(() => {
    return operations.filter(record => {
      // –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
      const excludedPaymentMethods = ['supplier_delivery', 'corporate_card', 'mobile_payment'];
      if (record.paymentMethod && excludedPaymentMethods.includes(record.paymentMethod)) {
        return false;
      }
      
      // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù –§–ò–õ–¨–¢–† –ü–û –¢–û–†–ì–û–í–´–ú –¢–û–ß–ö–ê–ú - –ü–û–ö–ê–ó–´–í–ê–ï–ú –í–°–ï –û–ü–ï–†–ê–¶–ò–ò
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—á–∫–∞)
      // if (selectedTradingPoint && selectedTradingPoint !== "all") {
      //   // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
      //   // point1 -> station_01, point2 -> station_02, etc.
      //   let stationId;
      //   if (selectedTradingPoint === 'point1') stationId = 'station_01';
      //   else if (selectedTradingPoint === 'point2') stationId = 'station_02';
      //   else if (selectedTradingPoint === 'point3') stationId = 'station_03';
      //   else if (selectedTradingPoint === 'point4') stationId = 'station_04';
      //   else if (selectedTradingPoint === 'point5') stationId = 'station_05';
      //   else if (selectedTradingPoint === 'point6') stationId = 'station_06';
      //   else stationId = selectedTradingPoint;
      //   console.log('üîç –§–∏–ª—å—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫:', { selectedTradingPoint, stationId, recordTradingPointId: record.tradingPointId });
      //   if (record.tradingPointId !== stationId) return false;
      // }
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
      
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (selectedStatus !== "–í—Å–µ" && record.status !== selectedStatus) return false;
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥—É —Ç–æ–ø–ª–∏–≤–∞
      if (selectedFuelType !== "–í—Å–µ" && record.fuelType !== selectedFuelType) return false;
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥—É –æ–ø–ª–∞—Ç—ã - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ —Ñ–∏–ª—å—Ç—Ä–µ —Ç–∏–ø–æ–≤
      if (selectedPaymentMethod !== "–í—Å–µ") {
        if (record.paymentMethod !== selectedPaymentMethod) return false;
      }
      
      // –ù–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
      if (dateFrom || dateTo) {
        const recordDate = new Date(record.startTime);
        const recordDateStr = recordDate.toISOString().split('T')[0]; // YYYY-MM-DD format
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–ø–∏—Å–µ–π
        if (filteredOperations.length < 3) {
          console.log('üóìÔ∏è Date filter debug:', {
            recordId: record.id,
            startTime: record.startTime,
            recordDateStr,
            dateFrom,
            dateTo,
            fromCheck: dateFrom ? `${recordDateStr} < ${dateFrom} = ${recordDateStr < dateFrom}` : 'skip',
            toCheck: dateTo ? `${recordDateStr} > ${dateTo} = ${recordDateStr > dateTo}` : 'skip'
          });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if (dateFrom && recordDateStr < dateFrom) {
          return false;
        }
        
        if (dateTo && recordDateStr > dateTo) {
          return false;
        }
      }
      
      // –ü–æ–∏—Å–∫
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        return (
          record.id.toLowerCase().includes(query) ||
          record.details.toLowerCase().includes(query) ||
          (record.deviceId && record.deviceId.toLowerCase().includes(query)) ||
          (record.transactionId && record.transactionId.toLowerCase().includes(query)) ||
          (record.tradingPointName && record.tradingPointName.toLowerCase().includes(query)) ||
          (record.operatorName && record.operatorName.toLowerCase().includes(query))
        );
      }
      
      return true;
    });
  }, [operations, selectedStatus, selectedFuelType, selectedPaymentMethod, searchQuery, dateFrom, dateTo, selectedNetwork, selectedTradingPoint]);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
  const [fuelTypes, setFuelTypes] = useState<string[]>(["–í—Å–µ"]);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
  useEffect(() => {
    const loadFuelTypes = async () => {
      try {
        const nomenclature = await nomenclatureService.getNomenclature();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
        const networkId = selectedNetwork?.id || '1'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ–º–æ —Å–µ—Ç—å
        const activeFuelTypes = nomenclature
          .filter(item => 
            item.status === 'active' && 
            item.networkId === networkId
          )
          .map(item => item.name)
          .sort();
          
        console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', activeFuelTypes);
        setFuelTypes(["–í—Å–µ", ...activeFuelTypes]);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', error);
        // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
        setFuelTypes(["–í—Å–µ", "–ê–ò-92", "–ê–ò-95", "–ê–ò-98", "–î–¢", "–ê–ò-100"]);
      }
    };

    loadFuelTypes();
  }, [selectedNetwork]);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ (–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
  const paymentMethods = useMemo(() => {
    const methods = new Set(operations.filter(op => op.paymentMethod && allowedPaymentMethods.includes(op.paymentMethod)).map(op => op.paymentMethod));
    return ["–í—Å–µ", ...allowedPaymentMethods.filter(method => methods.has(method))];
  }, [operations]);

  // KPI –¥–∞–Ω–Ω—ã–µ - –ø–æ –≤–∏–¥–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π (—Å—É–º–º—ã –¥–µ–Ω–µ–≥)
  const operationKpis = useMemo(() => {
    const operationStats: Record<string, { revenue: number; operations: number }> = {};
    
    filteredOperations.forEach(op => {
      if (op.operationType && op.status === 'completed' && op.totalCost) {
        const displayType = operationTypeMap[op.operationType] || op.operationType;
        if (!operationStats[displayType]) {
          operationStats[displayType] = { revenue: 0, operations: 0 };
        }
        operationStats[displayType].revenue += op.totalCost;
        operationStats[displayType].operations += 1;
      }
    });
    
    return operationStats;
  }, [filteredOperations]);

  // KPI –¥–∞–Ω–Ω—ã–µ - –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
  const fuelKpis = useMemo(() => {
    const fuelStats: Record<string, { volume: number; revenue: number; operations: number }> = {};
    
    filteredOperations.forEach(op => {
      if (op.fuelType && op.status === 'completed' && op.quantity) {
        if (!fuelStats[op.fuelType]) {
          fuelStats[op.fuelType] = { volume: 0, revenue: 0, operations: 0 };
        }
        fuelStats[op.fuelType].volume += op.quantity;
        fuelStats[op.fuelType].revenue += op.totalCost || 0;
        fuelStats[op.fuelType].operations += 1;
      }
    });
    
    return fuelStats;
  }, [filteredOperations]);

  // –û—Ç–ª–∞–¥–∫–∞ KPI —É–±—Ä–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è

  // KPI –¥–∞–Ω–Ω—ã–µ - –ø–æ –≤–∏–¥–∞–º –æ–ø–ª–∞—Ç—ã
  const paymentKpis = useMemo(() => {
    const paymentStats: Record<string, { revenue: number; operations: number }> = {};
    
    filteredOperations.forEach(op => {
      if (op.paymentMethod && op.status === 'completed' && op.totalCost) {
        const displayMethod = paymentMethodMap[op.paymentMethod] || op.paymentMethod;
        if (!paymentStats[displayMethod]) {
          paymentStats[displayMethod] = { revenue: 0, operations: 0 };
        }
        paymentStats[displayMethod].revenue += op.totalCost;
        paymentStats[displayMethod].operations += 1;
      }
    });
    
    return paymentStats;
  }, [filteredOperations]);


  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'completed':
        return <Badge className="bg-slate-700 border-slate-600 text-slate-200">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</Badge>;
      case 'in_progress':
        return <Badge className="bg-slate-700 border-slate-600 text-slate-200">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</Badge>;
      case 'failed':
        return <Badge className="bg-red-600 text-white">–û—à–∏–±–∫–∞</Badge>;
      case 'pending':
        return <Badge className="bg-yellow-600 text-white">–û–∂–∏–¥–∞–Ω–∏–µ</Badge>;
      case 'cancelled':
        return <Badge className="bg-slate-700 border-slate-600 text-slate-200">–û—Ç–º–µ–Ω–µ–Ω–æ</Badge>;
      default:
        return <Badge variant="secondary">{status}</Badge>;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="w-4 h-4 text-slate-400" />;
      case 'in_progress':
        return <PlayCircle className="w-4 h-4 text-slate-400" />;
      case 'failed':
        return <XCircle className="w-4 h-4 text-slate-400" />;
      case 'pending':
        return <PauseCircle className="w-4 h-4 text-slate-400" />;
      case 'cancelled':
        return <XCircle className="w-4 h-4 text-slate-400" />;
      default:
        return <Clock className="w-4 h-4 text-slate-400" />;
    }
  };


  const formatDuration = (duration?: number) => {
    if (!duration) return '';
    if (duration < 1) {
      return `${Math.round(duration * 60)} —Å–µ–∫`;
    }
    return `${duration.toFixed(1)} –º–∏–Ω`;
  };

  return (
    <MainLayout fullWidth={true}>
      <div className={`w-full ${isMobileForcedForced ? 'space-y-3' : 'space-y-6'} report-full-width`}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className={`${isMobileForcedForced ? 'mb-3 px-0' : 'mb-6 pl-4 md:pl-6 lg:pl-8 pr-4 md:pr-6 lg:pr-8'}`}>
          <div className={`flex ${isMobileForced ? 'flex-col gap-1' : 'items-start justify-between'}`}>
            <div>
              <h1 className={`${isMobileForced ? 'text-lg' : 'text-2xl'} font-semibold text-white`}>–û–ø–µ—Ä–∞—Ü–∏–∏</h1>
              <p className={`text-slate-400 ${isMobileForced ? 'text-xs' : 'mt-2'}`}>
                {isNetworkOnly && selectedNetwork && `Real-time —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–µ—Ç–∏ "${selectedNetwork.name}"`}
                {isTradingPointSelected && `Real-time —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏`}
                {!selectedNetwork && "Real-time —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–µ–º–æ —Å–µ—Ç–∏ –ê–ó–°"}
              </p>
            </div>
            <div className={`flex items-center ${isMobileForced ? 'gap-1 self-start mt-1' : 'gap-2'}`}>
              {!isMobileForced && (
                <Button
                  onClick={reloadOperations}
                  disabled={loading}
                  variant="outline"
                  size="sm"
                  className="text-xs"
                >
                  {loading ? (
                    <>
                      <Loader2 className="w-3 h-3 mr-1 animate-spin" />
                      –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                    </>
                  ) : (
                    <>
                      <RefreshCw className="w-3 h-3 mr-1" />
                      –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    </>
                  )}
                </Button>
              )}
              {isMobileForced && (
                <HelpButton route="/network/operations-transactions" variant="icon" size="sm" className="flex-shrink-0" />
              )}
              {!isMobileForced && <HelpButton route="/network/operations-transactions" variant="text" className="flex-shrink-0" />}
            </div>
          </div>
          {!isMobileForced && (
            <div className="flex items-center gap-4 mt-4">
              <Button
                variant={autoRefresh ? "default" : "outline"}
                onClick={() => setAutoRefresh(!autoRefresh)}
                size="default"
              >
                <RefreshCw className={`w-4 h-4 mr-2 ${autoRefresh ? 'animate-spin' : ''}`} />
                {autoRefresh ? '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' : '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'}
              </Button>
              <Button
                variant="outline"
                size="default"
                onClick={async () => {
                  localStorage.removeItem('tradeframe_operations');
                  setOperations([]);
                  await reloadOperations();
                  console.log('–î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Supabase');
                }}
              >
                <RefreshCw className="w-4 h-4 mr-2" />
                –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
              </Button>
            </div>
          )}
        </div>

        <>
          {/* –§–∏–ª—å—Ç—Ä—ã */}
            <div className={`${isMobileForced ? 'mx-0' : 'mx-4 md:mx-6 lg:mx-8'}`}>
            <Card className="bg-slate-800 border border-slate-700 rounded-lg hover:shadow-xl transition-all duration-200">
              <CardHeader>
                <CardTitle className={`text-white flex ${isMobileForced ? 'flex-col gap-3' : 'items-center gap-2'}`}>
                  <div className="flex items-center gap-2">
                    <Filter className={`${isMobileForced ? 'w-4 h-4' : 'w-5 h-5'}`} />
                    <span className={isMobileForced ? 'text-lg' : ''}>–§–∏–ª—å—Ç—Ä—ã</span>
                  </div>
                  <div className={`${isMobileForced ? 'flex gap-1 self-start' : 'ml-auto flex gap-2'}`}>
                    {!isMobileForced && (
                      <Button variant="outline" className="flex-shrink-0">
                        <Download className="w-4 h-4 mr-2" />
                        –≠–∫—Å–ø–æ—Ä—Ç
                      </Button>
                    )}
                    <Button 
                      variant="destructive" 
                      size={isMobileForced ? "sm" : "default"}
                      className={`flex-shrink-0 ${isMobileForced ? 'text-xs' : ''}`}
                      onClick={async () => {
                        if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º?')) {
                          localStorage.removeItem('tradeframe_operations');
                          await reloadOperations();
                          
                          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞
                          try {
                            const nomenclature = await nomenclatureService.getNomenclature();
                            const networkId = selectedNetwork?.id || '1';
                            const activeFuelTypes = nomenclature
                              .filter(item => 
                                item.status === 'active' && 
                                item.networkId === networkId
                              )
                              .map(item => item.name)
                              .sort();
                            setFuelTypes(["–í—Å–µ", ...activeFuelTypes]);
                          } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', error);
                            setFuelTypes(["–í—Å–µ", "–ê–ò-92", "–ê–ò-95", "–ê–ò-98", "–î–¢", "–ê–ò-100"]);
                          }
                        }
                      }}
                    >
                      {isMobileForced ? "–û—á–∏—Å—Ç–∏—Ç—å" : "–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"}
                    </Button>
                  </div>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className={`grid ${isMobileForced ? 'grid-cols-1 gap-3' : 'grid-cols-2 lg:grid-cols-6 gap-4'}`}>

                  <div>
                    <Label className="text-slate-300">–°—Ç–∞—Ç—É—Å</Label>
                    <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                      <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="–í—Å–µ">–í—Å–µ</SelectItem>
                        <SelectItem value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</SelectItem>
                        <SelectItem value="in_progress">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</SelectItem>
                        <SelectItem value="failed">–û—à–∏–±–∫–∞</SelectItem>
                        <SelectItem value="pending">–û–∂–∏–¥–∞–Ω–∏–µ</SelectItem>
                        <SelectItem value="cancelled">–û—Ç–º–µ–Ω–µ–Ω–æ</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label className="text-slate-300">–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞</Label>
                    <Select value={selectedFuelType} onValueChange={setSelectedFuelType}>
                      <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {fuelTypes.map(type => (
                          <SelectItem key={type} value={type}>{type}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label className="text-slate-300">–í–∏–¥ –æ–ø–ª–∞—Ç—ã</Label>
                    <Select value={selectedPaymentMethod} onValueChange={setSelectedPaymentMethod}>
                      <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {paymentMethods.map(method => (
                          <SelectItem key={method} value={method}>
                            {method === "–í—Å–µ" ? "–í—Å–µ" : (paymentMethodMap[method] || method)}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label className="text-slate-300">–î–∞—Ç–∞ —Å</Label>
                    <Input
                      type="date"
                      value={dateFrom}
                      onChange={(e) => setDateFrom(e.target.value)}
                      className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                    />
                  </div>

                  <div>
                    <Label className="text-slate-300">–î–∞—Ç–∞ –ø–æ</Label>
                    <Input
                      type="date"
                      value={dateTo}
                      onChange={(e) => setDateTo(e.target.value)}
                      className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                    />
                  </div>

                  <div>
                    <Label className="text-slate-300">–ü–æ–∏—Å–∫</Label>
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏, —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É, ID..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
            </div>

            {/* KPI - –°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π */}
            <div className={`${isMobileForced ? 'mx-0' : 'mx-4 md:mx-6 lg:mx-8'}`}>
              <h3 className={`${isMobileForced ? 'text-sm' : 'text-lg'} font-semibold text-white ${isMobileForced ? 'mb-2' : 'mb-4'} flex items-center gap-2`}>
                <Activity className={`${isMobileForced ? 'w-4 h-4' : 'w-5 h-5'}`} />
                {isMobileForced ? '–°—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–π' : '–°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π'}
              </h3>
              <div className={`grid ${isMobileForced ? 'grid-cols-2 gap-2' : 'grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4'}`}>
                {Object.entries(operationKpis).map(([operationType, stats]) => (
                  <Card key={operationType} className="bg-slate-800 border border-slate-700 rounded-lg hover:shadow-xl transition-all duration-200">
                    <CardHeader className={`flex flex-row items-center justify-between space-y-0 ${isMobileForced ? 'pb-1 px-3 pt-2' : 'pb-2'}`}>
                      <CardTitle className={`${isMobileForced ? 'text-xs' : 'text-sm'} font-medium text-slate-200`}>{operationType}</CardTitle>
                      <Activity className={`${isMobileForced ? 'h-3 w-3' : 'h-4 w-4'} text-slate-400`} />
                    </CardHeader>
                    <CardContent className={isMobileForced ? 'px-3 pb-2 pt-0' : ''}>
                      <div className={`${isMobileForced ? 'text-sm' : 'text-2xl'} font-bold text-white`}>{stats.revenue.toFixed(0)} ‚ÇΩ</div>
                      <p className="text-xs text-slate-400">{stats.operations} –æ–ø.</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* KPI - –°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º –æ–ø–ª–∞—Ç—ã */}
            <div className={`${isMobileForced ? 'mx-0' : 'mx-4 md:mx-6 lg:mx-8'}`}>
              <h3 className={`${isMobileForced ? 'text-sm' : 'text-lg'} font-semibold text-white ${isMobileForced ? 'mb-2' : 'mb-4'} flex items-center gap-2`}>
                <Activity className={`${isMobileForced ? 'w-4 h-4' : 'w-5 h-5'}`} />
                {isMobileForced ? '–°—É–º–º—ã –æ–ø–ª–∞—Ç' : '–°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º –æ–ø–ª–∞—Ç—ã'}
              </h3>
              <div className={`grid ${isMobileForced ? 'grid-cols-2 gap-2' : 'grid-cols-2 md:grid-cols-4 gap-4'}`}>
                {Object.entries(paymentKpis).map(([paymentMethod, stats]) => (
                  <Card key={paymentMethod} className="bg-slate-800 border border-slate-700 rounded-lg hover:shadow-xl transition-all duration-200">
                    <CardHeader className={`flex flex-row items-center justify-between space-y-0 ${isMobileForced ? 'pb-1 px-3 pt-2' : 'pb-2'}`}>
                      <CardTitle className={`${isMobileForced ? 'text-xs' : 'text-sm'} font-medium text-slate-200`}>{paymentMethod}</CardTitle>
                      <Activity className={`${isMobileForced ? 'h-3 w-3' : 'h-4 w-4'} text-slate-400`} />
                    </CardHeader>
                    <CardContent className={isMobileForced ? 'px-3 pb-2 pt-0' : ''}>
                      <div className={`${isMobileForced ? 'text-sm' : 'text-2xl'} font-bold text-white`}>{stats.revenue.toFixed(0)} ‚ÇΩ</div>
                      <p className="text-xs text-slate-400">{stats.operations} –æ–ø.</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* KPI - –û–±—ä–µ–º—ã —Ç–æ–ø–ª–∏–≤–∞ */}
            <div className={`${isMobileForced ? 'mx-0' : 'mx-4 md:mx-6 lg:mx-8'}`}>
              <h3 className={`${isMobileForced ? 'text-sm' : 'text-lg'} font-semibold text-white ${isMobileForced ? 'mb-2' : 'mb-4'} flex items-center gap-2`}>
                <Activity className={`${isMobileForced ? 'w-4 h-4' : 'w-5 h-5'}`} />
                {isMobileForced ? '–û–±—ä–µ–º—ã —Ç–æ–ø–ª–∏–≤–∞' : '–°—É–º–º—ã –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞'}
              </h3>
              <div className={`grid ${isMobileForced ? 'grid-cols-2 gap-2' : 'grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4'}`}>
                {Object.entries(fuelKpis).map(([fuelType, stats]) => (
                  <Card key={fuelType} className="bg-slate-800 border border-slate-700 rounded-lg hover:shadow-xl transition-all duration-200">
                    <CardHeader className={`flex flex-row items-center justify-between space-y-0 ${isMobileForced ? 'pb-1 px-3 pt-2' : 'pb-2'}`}>
                      <CardTitle className={`${isMobileForced ? 'text-xs' : 'text-sm'} font-medium text-slate-200`}>{fuelType}</CardTitle>
                      <Activity className={`${isMobileForced ? 'h-3 w-3' : 'h-4 w-4'} text-slate-400`} />
                    </CardHeader>
                    <CardContent className={isMobileForced ? 'px-3 pb-2 pt-0' : ''}>
                      <div className={`${isMobileForced ? 'text-sm' : 'text-2xl'} font-bold text-white`}>{stats.volume.toFixed(0)} –ª</div>
                      <p className={`${isMobileForced ? 'text-xs' : 'text-sm'} text-slate-400`}>{stats.revenue.toFixed(0)} ‚ÇΩ</p>
                      <p className="text-xs text-blue-400">{stats.operations} –æ–ø.</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>


            {/* –¢–∞–±–ª–∏—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–π */}
            <div className={`${isMobileForced ? 'mx-0' : 'mx-4 md:mx-6 lg:mx-8'}`}>
            <Card className={`bg-slate-800 border border-slate-700 rounded-lg w-full max-w-none ${isMobileForced ? 'mx-0' : ''}`}>
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Activity className="w-5 h-5" />
                  –¢–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                  <Badge variant="secondary" className="ml-auto">
                    {filteredOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                {isMobileForced ? (
                  // Mobile card layout
                  <div className={`${isMobileForced ? 'space-y-1 -mx-4 px-4' : 'space-y-3 p-0'}`}>
                    {filteredOperations.map((record) => (
                      <Card key={record.id} className="bg-slate-800 border border-slate-700 rounded-lg w-full mx-0 hover:bg-slate-700 transition-colors">
                        <CardHeader className={`${isMobileForced ? 'pb-0 px-3 pt-1' : 'pb-2'}`}>
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2 min-w-0 flex-1">
                              {getStatusIcon(record.status)}
                              <span className="font-medium text-white text-xs truncate">{operationTypeMap[record.operationType] || record.operationType}</span>
                            </div>
                            <div className="flex-shrink-0">
                              {getStatusBadge(record.status)}
                            </div>
                          </div>
                          {record.transactionId && (
                            <div className="text-xs text-slate-400 mt-0.5 truncate">{record.transactionId}</div>
                          )}
                        </CardHeader>
                        <CardContent className={`${isMobileForced ? 'pt-1 px-3 pb-1 space-y-0.5' : 'pt-0 space-y-2'}`}>
                          <div className="flex items-center justify-between">
                            <Badge variant="outline" className={`text-blue-400 border-blue-400 ${isMobileForced ? 'text-xs px-1 py-0' : 'text-xs'}`}>
                              {record.deviceId || 'N/A'}
                            </Badge>
                            <span className={`text-slate-400 font-mono ${isMobileForced ? 'text-xs' : 'text-xs'}`}>{record.lastUpdated}</span>
                          </div>
                          
                          <div className={`${isMobileForced ? 'space-y-0' : 'space-y-1'} text-xs`}>
                            <div className={`flex justify-between ${isMobileForced ? 'py-0' : ''}`}>
                              <span className="text-slate-400">–î–∞—Ç–∞:</span>
                              <span className="text-white font-mono">{new Date(record.startTime).toLocaleDateString('ru-RU')}</span>
                            </div>
                            <div className={`flex justify-between ${isMobileForced ? 'py-0' : ''}`}>
                              <span className="text-slate-400">–ù–∞—á–∞–ª–æ:</span>
                              <span className="text-white font-mono">{new Date(record.startTime).toLocaleTimeString('ru-RU')}</span>
                            </div>
                            <div className={`flex justify-between ${isMobileForced ? 'py-0' : ''}`}>
                              <span className="text-slate-400">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:</span>
                              <span className="text-white font-mono">{record.endTime ? new Date(record.endTime).toLocaleTimeString('ru-RU') : '‚Äî'}</span>
                            </div>
                          </div>
                          
                          <div className={`${isMobileForced ? 'space-y-0' : 'space-y-1'} text-xs`}>
                            <div className={`flex justify-between items-center ${isMobileForced ? 'py-0' : ''}`}>
                              <span className="text-slate-400">–¢–∏–ø –∑–∞–ø–∏—Å–∏:</span>
                              <Badge className="bg-slate-700 border-slate-600 text-slate-200 text-xs">
                                {record.status === 'completed' ? '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è' : '–û–ø–µ—Ä–∞—Ü–∏—è'}
                              </Badge>
                            </div>
                            <div className={`flex justify-between ${isMobileForced ? 'py-0' : ''}`}>
                              <span className="text-slate-400">–¢–æ–ø–ª–∏–≤–æ:</span>
                              <span className="text-white">{record.fuelType || '‚Äî'}</span>
                            </div>
                          </div>
                          
                          {(record.quantity || record.price || record.totalCost) && (
                            <div className={`${isMobileForced ? 'space-y-0' : 'space-y-1'} text-xs`}>
                              <div className={`flex justify-between ${isMobileForced ? 'py-0' : ''}`}>
                                <span className="text-slate-400">–ö–æ–ª-–≤–æ:</span>
                                <span className="text-white font-mono">
                                  {record.quantity ? `${record.quantity.toFixed(2)} –ª` : '‚Äî'}
                                </span>
                              </div>
                              <div className={`flex justify-between ${isMobileForced ? 'py-0' : ''}`}>
                                <span className="text-slate-400">–¶–µ–Ω–∞:</span>
                                <span className="text-white font-mono">
                                  {record.price ? `${record.price.toFixed(2)} ‚ÇΩ/–ª` : '‚Äî'}
                                </span>
                              </div>
                              <div className={`flex justify-between ${isMobileForced ? 'py-0' : ''}`}>
                                <span className="text-slate-400">–°—É–º–º–∞:</span>
                                <span className="text-white font-mono font-bold">
                                  {record.totalCost ? `${record.totalCost.toFixed(2)} ‚ÇΩ` : '‚Äî'}
                                </span>
                              </div>
                            </div>
                          )}

                          {record.paymentMethod && (
                            <div className="flex justify-between text-xs">
                              <span className="text-slate-400">–í–∏–¥ –æ–ø–ª–∞—Ç—ã:</span>
                              <span className="text-white">
                                {paymentMethodMap[record.paymentMethod] || record.paymentMethod}
                              </span>
                            </div>
                          )}

                          {record.status === 'in_progress' && record.progress !== undefined && (
                            <div className="space-y-1">
                              <div className="flex justify-between items-center">
                                <span className="text-sm text-slate-400">–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                                <span className="text-sm text-blue-400">{Math.round(record.progress)}%</span>
                              </div>
                              <div className="w-full bg-slate-600 rounded-full h-2 overflow-hidden">
                                <div 
                                  className="h-full bg-blue-500"
                                  style={{ width: `${record.progress}%` }}
                                />
                              </div>
                            </div>
                          )}

                          {record.duration && record.status !== 'in_progress' && (
                            <div className="flex justify-between text-xs">
                              <span className="text-slate-400">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                              <span className="text-white font-mono">{formatDuration(record.duration)}</span>
                            </div>
                          )}
                          
                          <div className="text-xs border-t border-slate-600 pt-2">
                            <div className="space-y-1">
                              <span className="text-slate-400 text-xs">–î–µ—Ç–∞–ª–∏:</span>
                              <div className="text-slate-300 text-xs leading-relaxed">
                                {record.details}
                                {record.status === 'failed' && <AlertTriangle className="w-4 h-4 text-red-400 inline ml-1" />}
                              </div>
                            </div>
                          </div>
                          
                          {isNetworkOnly && record.tradingPointName && (
                            <div className="text-xs border-t border-slate-600 pt-2">
                              <div className="flex justify-between">
                                <span className="text-slate-400">–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞:</span>
                                <span className="text-slate-300 font-medium text-right truncate max-w-[150px]">{record.tradingPointName}</span>
                              </div>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    ))}
                    
                    {loading ? (
                      <div className="text-center py-8 text-slate-400">
                        <div className="flex items-center justify-center gap-2">
                          <div className="animate-spin w-4 h-4 border-2 border-slate-400 border-t-transparent rounded-full"></div>
                          –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π...
                        </div>
                      </div>
                    ) : filteredOperations.length === 0 ? (
                      <div className="text-center py-8 text-slate-400">
                        <div>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º</div>
                        {operations.length === 0 && (
                          <div className="mt-2 text-sm">
                            <button 
                              onClick={() => {
                                localStorage.removeItem('tradeframe_operations');
                                window.location.reload();
                              }}
                              className="text-blue-400 hover:text-blue-300 underline"
                            >
                              –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
                            </button>
                          </div>
                        )}
                      </div>
                    ) : null}
                  </div>
                ) : (
                  // Desktop table layout
                  <div className="overflow-x-auto w-full">
                    <Table>
                      <TableHeader>
                        <TableRow className="border-b border-slate-600">
                          {isNetworkOnly && <TableHead className="text-slate-300">–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞</TableHead>}
                          <TableHead className="text-slate-300">–°—Ç–∞—Ç—É—Å</TableHead>
                          <TableHead className="text-slate-300">–¢–∏–ø –∑–∞–ø–∏—Å–∏</TableHead>
                          <TableHead className="text-slate-300">–î–∞—Ç–∞</TableHead>
                          <TableHead className="text-slate-300">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</TableHead>
                          <TableHead className="text-slate-300">–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</TableHead>
                          <TableHead className="text-slate-300">–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞</TableHead>
                          <TableHead className="text-slate-300">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</TableHead>
                          <TableHead className="text-slate-300">–¶–µ–Ω–∞</TableHead>
                          <TableHead className="text-slate-300">–°—Ç–æ–∏–º–æ—Å—Ç—å</TableHead>
                          <TableHead className="text-slate-300">–í–∏–¥ –æ–ø–ª–∞—Ç—ã</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {filteredOperations.map((record) => (
                          <TableRow key={record.id} className="border-b border-slate-600 hover:bg-slate-700 transition-colors">
                            {isNetworkOnly && (
                              <TableCell className="text-slate-300 max-w-xs">
                                <div className="truncate" title={record.tradingPointName}>
                                  {record.tradingPointName}
                                </div>
                              </TableCell>
                            )}
                            <TableCell>
                              <div className="flex items-center gap-2">
                                {getStatusIcon(record.status)}
                                {getStatusBadge(record.status)}
                              </div>
                            </TableCell>
                            <TableCell className="text-slate-300">
                              <Badge className="bg-slate-700 border-slate-600 text-slate-200">
                                {record.status === 'completed' ? '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è' : '–û–ø–µ—Ä–∞—Ü–∏—è'}
                              </Badge>
                            </TableCell>
                            <TableCell className="text-white font-mono text-sm">
                              {new Date(record.startTime).toLocaleDateString('ru-RU')}
                            </TableCell>
                            <TableCell className="text-white font-mono text-sm">
                              {new Date(record.startTime).toLocaleTimeString('ru-RU')}
                            </TableCell>
                            <TableCell className="text-white font-mono text-sm">
                              {record.endTime ? new Date(record.endTime).toLocaleTimeString('ru-RU') : '‚Äî'}
                            </TableCell>
                            <TableCell className="text-slate-300">
                              {record.fuelType || '‚Äî'}
                            </TableCell>
                            <TableCell className="text-white font-mono">
                              {record.quantity ? `${record.quantity.toFixed(2)} –ª` : '‚Äî'}
                            </TableCell>
                            <TableCell className="text-white font-mono">
                              {record.price ? `${record.price.toFixed(2)} ‚ÇΩ/–ª` : '‚Äî'}
                            </TableCell>
                            <TableCell className="text-white font-mono">
                              {record.totalCost ? `${record.totalCost.toFixed(2)} ‚ÇΩ` : '‚Äî'}
                            </TableCell>
                            <TableCell className="text-slate-300">
                              {record.paymentMethod ? (paymentMethodMap[record.paymentMethod] || record.paymentMethod) : '‚Äî'}
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                    
                    {loading ? (
                      <div className="text-center py-8 text-slate-400">
                        <div className="flex items-center justify-center gap-2">
                          <div className="animate-spin w-4 h-4 border-2 border-slate-400 border-t-transparent rounded-full"></div>
                          –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π...
                        </div>
                      </div>
                    ) : filteredOperations.length === 0 ? (
                      <div className="text-center py-8 text-slate-400">
                        <div>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º</div>
                        {operations.length === 0 && (
                          <div className="mt-2 text-sm">
                            <button 
                              onClick={() => {
                                localStorage.removeItem('tradeframe_operations');
                                window.location.reload();
                              }}
                              className="text-blue-400 hover:text-blue-300 underline"
                            >
                              –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
                            </button>
                          </div>
                        )}
                      </div>
                    ) : null}
                  </div>
                )}
              </CardContent>
            </Card>
            </div>
        </>
      </div>
    </MainLayout>
  );
}