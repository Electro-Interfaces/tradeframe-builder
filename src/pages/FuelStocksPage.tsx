import React, { useState, useMemo, useEffect } from "react";

// –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
console.log('üöÄ FuelStocksPage: –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è!');
console.log('üìÖ FuelStocksPage: –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è:', new Date().toISOString());
import { MainLayout } from "@/components/layout/MainLayout";
import { useIsMobile } from "@/hooks/use-mobile";
import { useSelection } from "@/context/SelectionContext";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Fuel, Download, AlertTriangle, Droplets, Gauge, Calendar } from "lucide-react";
import { fuelStocksHistoryService, FuelStockSnapshot } from "@/services/fuelStocksHistoryService";
import { nomenclatureService } from "@/services/nomenclatureService";
import { FuelStocksChart } from "@/components/charts/FuelStocksChart";
import { HelpButton } from "@/components/help/HelpButton";
import { errorLogService } from "@/services/errorLogService";

interface FuelStockRecord {
  id: string;
  tankNumber: string;
  fuelType: string;
  capacity: number;
  currentLevel: number;
  percentage: number;
  lastUpdated: string;
  tradingPoint?: string;
  status: 'normal' | 'low' | 'critical' | 'overfill';
  temperature: number;
  density: number;
  operationMode?: string;
  consumptionRate?: number;
  fillRate?: number;
}

// ‚ùå MOCK –î–ê–ù–ù–´–ï –£–î–ê–õ–ï–ù–´ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π
const statusTypes = ["–í—Å–µ", "normal", "low", "critical", "overfill"];

export default function FuelStocksPage() {
  console.log('üî• FuelStocksPage: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è!');
  console.log('üåê –¢–µ–∫—É—â–∏–π URL:', window.location.href);
  console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:', new Date().toISOString());
  
  const isMobile = useIsMobile();
  const { selectedNetwork, selectedTradingPoint } = useSelection();
  
  console.log('üìä FuelStocksPage: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', {
    selectedNetworkExists: !!selectedNetwork,
    selectedNetworkId: selectedNetwork?.id,
    selectedNetworkName: selectedNetwork?.name,
    selectedTradingPoint,
    isMobile
  });
  
  // –î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  console.log('üîç FuelStocksPage: –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    hasSelectedNetwork: selectedNetwork !== null,
    networkId: selectedNetwork?.id || '–ù–ï–¢',
    networkName: selectedNetwork?.name || '–ù–ï–¢',
    tradingPoint: selectedTradingPoint || '–ù–ï–¢',
    shouldLoadData: !!selectedNetwork
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const [historicalData, setHistoricalData] = useState<FuelStockSnapshot[]>([]);
  const [loading, setLoading] = useState(false);
  const [selectedDateTime, setSelectedDateTime] = useState(() => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –∫–æ–Ω–µ—Ü –∞–≤–≥—É—Å—Ç–∞ 2025, 16:00 –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    return '2025-08-30T16:00'; // –§–æ—Ä–º–∞—Ç –¥–ª—è datetime-local
  });
  const [lastRefreshTime, setLastRefreshTime] = useState<Date | null>(null);
  const [nextRefreshTime, setNextRefreshTime] = useState<Date | null>(null);
  
  // –§–∏–ª—å—Ç—Ä—ã (—É–±—Ä–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É)
  const [selectedFuelType, setSelectedFuelType] = useState("–í—Å–µ");
  const [searchQuery, setSearchQuery] = useState("");
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
  const [fuelTypes, setFuelTypes] = useState<string[]>(["–í—Å–µ"]);

  const isNetworkOnly = selectedNetwork && !selectedTradingPoint;
  const isTradingPointSelected = selectedNetwork && selectedTradingPoint;

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏
  // –ò–∑–º–µ–Ω—è–µ–º: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞, –Ω–µ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å–µ—Ç—å –≤—ã–±—Ä–∞–Ω–∞
  useEffect(() => {
    loadHistoricalData();
  }, [selectedDateTime, selectedNetwork, selectedTradingPoint]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
  // –ò–∑–º–µ–Ω—è–µ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞, –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
  useEffect(() => {
    const REFRESH_INTERVAL = 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    const now = new Date();
    setLastRefreshTime(now);
    setNextRefreshTime(new Date(now.getTime() + REFRESH_INTERVAL));
    
    const intervalId = setInterval(() => {
      console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–ø–ª–∏–≤–∞...');
      const refreshTime = new Date();
      setLastRefreshTime(refreshTime);
      setNextRefreshTime(new Date(refreshTime.getTime() + REFRESH_INTERVAL));
      loadHistoricalData();
    }, REFRESH_INTERVAL);

    return () => {
      clearInterval(intervalId);
      setLastRefreshTime(null);
      setNextRefreshTime(null);
    };
  }, [selectedTradingPoint]); // –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–µ–∑ selectedDateTime –∏ selectedNetwork

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
  useEffect(() => {
    const loadFuelTypes = async () => {
      try {
        const nomenclature = await nomenclatureService.getAll();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
        const networkId = selectedNetwork?.id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Ç—å
        const activeFuelTypes = nomenclature
          .filter(item => 
            item.status === 'active' && 
            (networkId ? item.networkId === networkId : true)
          )
          .map(item => item.name)
          .sort();
          
        console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è FuelStocksPage:', activeFuelTypes);
        setFuelTypes(["–í—Å–µ", ...activeFuelTypes]);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', error);
        // ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É
        await errorLogService.logCriticalError(
          'FuelStocksPage',
          'loadFuelTypes',
          error instanceof Error ? error : new Error(String(error)),
          {
            user_id: selectedNetwork?.id,
            trading_point_id: selectedTradingPoint,
            metadata: { component: 'FuelStocksPage', action: 'loadNomenclature' }
          }
        );
        throw new Error('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ —Ç–æ–ø–ª–∏–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
    };

    loadFuelTypes();
  }, [selectedNetwork]);

  const loadHistoricalData = async () => {
    console.log('üîÑ FuelStocksPage: –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...', selectedDateTime);
    try {
      setLoading(true);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –∫—ç—à –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
      fuelStocksHistoryService.clearCache();
      
      console.log('üìä FuelStocksPage: –ü–æ–ª—É—á–∞–µ–º —Å–Ω–∏–º–∫–∏ –Ω–∞', selectedDateTime);
      // Try to get historical snapshots
      let snapshots = await fuelStocksHistoryService.getSnapshotAtDateTime(selectedDateTime);
      console.log('üìä FuelStocksPage: –ü–æ–ª—É—á–µ–Ω–æ —Å–Ω–∏–º–∫–æ–≤:', snapshots.length);
      
      if (snapshots.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–µ —Å–Ω–∏–º–∫–∏:', snapshots.slice(0, 3).map(s => ({
          id: s.id,
          tankName: s.tankName,
          fuelType: s.fuelType,
          tradingPointId: s.tradingPointId,
          currentLevel: s.currentLevelLiters
        })));
      }
      
      // ‚ùå –ë–ï–ó FALLBACK: –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (snapshots.length === 0) {
        throw new Error(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ ${selectedDateTime}`);
      }
      
      console.log('üìä FuelStocksPage: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ:', snapshots.length, '—Å–Ω–∏–º–∫–æ–≤');
      setHistoricalData(snapshots);
    } catch (error) {
      // ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–ø–ª–∏–≤–∞
      await errorLogService.logCriticalError(
        'FuelStocksPage',
        'loadHistoricalData', 
        error instanceof Error ? error : new Error(String(error)),
        {
          user_id: selectedNetwork?.id,
          trading_point_id: selectedTradingPoint,
          metadata: { 
            component: 'FuelStocksPage', 
            action: 'loadHistoricalData',
            selectedDateTime,
            networkId: selectedNetwork?.id
          }
        }
      );
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–ø–ª–∏–≤–∞: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç FuelStockRecord
  const convertToFuelStockRecords = (snapshots: FuelStockSnapshot[]): FuelStockRecord[] => {
    return snapshots
      .filter(snapshot => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ
        // –ï—Å–ª–∏ selectedTradingPoint –ø—É—Å—Ç –∏–ª–∏ —Ä–∞–≤–µ–Ω 'all', –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        if (selectedTradingPoint && selectedTradingPoint !== 'all') {
          return snapshot.tradingPointId === selectedTradingPoint;
        }
        return true;
      })
      .map(snapshot => {
        const status = getStatusFromPercentage(snapshot.levelPercent);
        return {
          id: snapshot.id,
          tankNumber: snapshot.tankName,
          fuelType: snapshot.fuelType,
          capacity: snapshot.capacityLiters,
          currentLevel: snapshot.currentLevelLiters,
          percentage: snapshot.levelPercent,
          lastUpdated: new Date(snapshot.timestamp).toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit', 
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          }),
          tradingPoint: getPointNameById(snapshot.tradingPointId),
          status,
          temperature: snapshot.temperature,
          density: snapshot.density,
          operationMode: snapshot.operationMode,
          consumptionRate: snapshot.consumptionRate,
          fillRate: snapshot.fillRate
        };
      });
  };

  const getStatusFromPercentage = (percentage: number): 'normal' | 'low' | 'critical' | 'overfill' => {
    if (percentage >= 95) return 'overfill';
    if (percentage >= 20) return 'normal';
    if (percentage >= 10) return 'low';
    return 'critical';
  };

  const getPointNameById = (pointId: string): string => {
    const pointNames: Record<string, string> = {
      'point1': '–ê–ó–° ‚Ññ001 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è',
      'point2': '–ê–ó–° ‚Ññ002 - –°–µ–≤–µ—Ä–Ω–∞—è', 
      'point3': '–ê–ó–° ‚Ññ003 - –Æ–∂–Ω–∞—è',
      'point4': '–ê–ó–° ‚Ññ004 - –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ',
      'point5': '–ê–ó–° ‚Ññ005 - –ü—Ä–æ–º–∑–æ–Ω–∞'
    };
    return pointNames[pointId] || `–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ ${pointId}`;
  };

  // ‚úÖ –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ë–ï–ó mock fallback
  const currentFuelStocks = convertToFuelStockRecords(historicalData);
    
  // ‚úÖ –û—Ç–ª–∞–¥–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  console.log('üîç FuelStocksPage - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
    selectedNetworkId: selectedNetwork?.id,
    historicalDataCount: historicalData.length,
    currentFuelStocksCount: currentFuelStocks.length,
    loading: loading
  });


  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (—É–±—Ä–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É)
  const filteredStocks = useMemo(() => {
    return currentFuelStocks.filter(record => {
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç–æ–ø–ª–∏–≤–∞
      if (selectedFuelType !== "–í—Å–µ" && record.fuelType !== selectedFuelType) return false;
      
      // –ü–æ–∏—Å–∫
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        return (
          record.tankNumber.toLowerCase().includes(query) ||
          record.fuelType.toLowerCase().includes(query) ||
          (record.tradingPoint && record.tradingPoint.toLowerCase().includes(query))
        );
      }
      
      return true;
    });
  }, [currentFuelStocks, selectedFuelType, searchQuery]);

  // KPI –¥–∞–Ω–Ω—ã–µ - —Å—É–º–º–∞ –æ–±—ä–µ–º–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Ç–æ–ø–ª–∏–≤–∞
  const fuelKpis = useMemo(() => {
    const totals: Record<string, number> = {};
    
    filteredStocks.forEach(record => {
      if (!totals[record.fuelType]) {
        totals[record.fuelType] = 0;
      }
      totals[record.fuelType] += record.currentLevel;
    });

    return Object.entries(totals).map(([fuelType, volume]) => ({
      fuelType,
      volume
    }));
  }, [filteredStocks]);

  const getStatusBadge = (status: string, percentage: number) => {
    switch (status) {
      case 'normal':
        return <Badge className="bg-slate-600 text-slate-200">–ù–æ—Ä–º–∞</Badge>;
      case 'low':
        return <Badge className="bg-slate-600 text-slate-200">–ù–∏–∑–∫–∏–π</Badge>;
      case 'critical':
        return <Badge className="bg-slate-700 text-slate-300">–ö—Ä–∏—Ç–∏—á–Ω—ã–π</Badge>;
      case 'overfill':
        return <Badge className="bg-slate-700 text-slate-300">–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ</Badge>;
      default:
        return <Badge variant="secondary">{status}</Badge>;
    }
  };

  const getPercentageColor = (percentage: number) => {
    if (percentage >= 50) return "text-slate-300";
    if (percentage >= 20) return "text-slate-300";
    return "text-slate-400";
  };

  const formatVolume = (volume: number) => volume.toLocaleString('ru-RU') + " –ª";

  return (
    <MainLayout fullWidth={true}>
      <div className="w-full space-y-6 pb-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className="mb-6 px-4 md:px-6 lg:px-8">
          <div className="flex items-start justify-between">
            <div>
              <h1 className="text-2xl font-semibold text-white">–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–ø–ª–∏–≤–∞</h1>
              <p className="text-slate-400 mt-2">
                {isNetworkOnly && "–û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º —Ç–æ–ø–ª–∏–≤–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏"}
                {isTradingPointSelected && "–û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º —Ç–æ–ø–ª–∏–≤–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏"}
                {!selectedNetwork && "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–ø–ª–∏–≤–∞"}
              </p>
              
              {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="mt-3 p-2 bg-blue-900/20 rounded-lg text-xs text-blue-300">
                <div>üîç –û—Ç–ª–∞–¥–∫–∞: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω</div>
                <div>üìä –°–µ—Ç—å: {selectedNetwork?.name || '–ù–ï–¢'} (ID: {selectedNetwork?.id || '–ù–ï–¢'})</div>
                <div>üè™ –¢–æ—á–∫–∞: {selectedTradingPoint || '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}</div>
                <div>üìÖ –í—Ä–µ–º—è: {selectedDateTime}</div>
                <div>üìà –ò—Å—Ç–æ—Ä. –¥–∞–Ω–Ω—ã–µ: {historicalData.length} —Å–Ω–∏–º–∫–æ–≤</div>
                <div>üè™ –¢–µ–∫. –æ—Å—Ç–∞—Ç–∫–∏: {currentFuelStocks.length} –∑–∞–ø–∏—Å–µ–π</div>
                <div>üìÅ Mock –¥–∞–Ω–Ω—ã–µ: {mockFuelStocks.length} –∑–∞–ø–∏—Å–µ–π</div>
                <div>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞: {loading ? '–î–∞' : '–ù–µ—Ç'}</div>
                <div>‚úÖ –ï—Å—Ç—å —Å–µ—Ç—å: {selectedNetwork ? '–î–∞' : '–ù–ï–¢'}</div>
                <div>üéõÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {historicalData.length > 0 ? '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ' : 'Mock'}</div>
                <div>üìä –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {filteredStocks.length} –∑–∞–ø–∏—Å–µ–π</div>
              </div>
              

            </div>
            <HelpButton helpKey="fuel-stocks" />
          </div>
        </div>

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—Å–µ–≥–¥–∞, –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ */}
        <>
          {/* –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ */}
          <div className="report-margins">
            <div className="grid grid-cols-1 gap-4">
              <FuelStocksChart 
                selectedNetwork={selectedNetwork?.id || null}
                selectedTradingPoint={selectedTradingPoint}
              />
              
              {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã */}
                <Card className="bg-slate-800 border-slate-700">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-white flex items-center gap-2 text-lg">
                      <Calendar className="w-4 h-4" />
                      –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ –≤—Ä–µ–º—è
                      <Button variant="outline" className="ml-auto flex-shrink-0 text-sm">
                        <Download className="w-3 h-3 mr-1" />
                        –≠–∫—Å–ø–æ—Ä—Ç
                      </Button>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <div className={`grid ${isMobile ? 'grid-cols-1 gap-2' : 'grid-cols-3 gap-3'}`}>
                      {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ */}
                      <div>
                        <Label className="text-slate-300 flex items-center gap-1 mb-1 text-sm">
                          <Calendar className="w-3 h-3" />
                          –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                          {loading && <span className="text-xs text-slate-500">(–∑–∞–≥—Ä—É–∑–∫–∞...)</span>}
                        </Label>
                        <Input
                          type="datetime-local"
                          value={selectedDateTime}
                          onChange={(e) => setSelectedDateTime(e.target.value)}
                          min="2025-08-01T00:00"
                          max="2025-08-31T23:59"
                          className="bg-slate-700 border-slate-600 text-white text-sm h-9 [&::-webkit-datetime-edit-text]:text-white [&::-webkit-datetime-edit-month-field]:text-white [&::-webkit-datetime-edit-day-field]:text-white [&::-webkit-datetime-edit-year-field]:text-white [&::-webkit-datetime-edit-hour-field]:text-white [&::-webkit-datetime-edit-minute-field]:text-white"
                        />
                        <div className="text-xs mt-1 space-y-0.5">
                          <p className="text-slate-300">–ê–≤–≥—É—Å—Ç 2025, —à–∞–≥ 4—á</p>
                          {lastRefreshTime && (
                            <p className="text-green-400">
                              ‚Üª –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastRefreshTime.toLocaleTimeString('ru-RU')}
                            </p>
                          )}
                          {nextRefreshTime && (
                            <p className="text-blue-400">
                              ‚è∞ –°–ª–µ–¥—É—é—â–µ–µ: {nextRefreshTime.toLocaleTimeString('ru-RU')}
                            </p>
                          )}
                        </div>
                      </div>
                      <div>
                        <Label className="text-slate-300 text-sm">–§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–ø–ª–∏–≤—É</Label>
                        <Select value={selectedFuelType} onValueChange={setSelectedFuelType}>
                          <SelectTrigger className="bg-slate-700 border-slate-600 text-white h-9">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            {fuelTypes.map(type => (
                              <SelectItem key={type} value={type}>{type}</SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label className="text-slate-300 text-sm">–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º</Label>
                        <Input
                          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞..."
                          value={searchQuery}
                          onChange={(e) => setSearchQuery(e.target.value)}
                          className="bg-slate-700 border-slate-600 text-white placeholder-slate-400 text-sm h-9"
                        />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>

            {/* KPI - –û–±—ä–µ–º—ã —Ç–æ–ø–ª–∏–≤–∞ */}
            <div className="report-margins">
            <div className={`grid ${isMobile ? 'grid-cols-2 gap-2' : 'grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3'}`}>
              {fuelKpis.map(({ fuelType, volume }) => (
                <Card key={fuelType} className="bg-slate-800 border-slate-700">
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-1 px-3 pt-3">
                    <CardTitle className="text-xs font-medium text-slate-200">
                      {fuelType}
                    </CardTitle>
                    <Fuel className="h-3 w-3 text-slate-400" />
                  </CardHeader>
                  <CardContent className="px-3 pb-3">
                    <div className="text-lg font-bold text-white">
                      {formatVolume(volume)}
                    </div>
                    <p className="text-xs text-slate-400">
                      –û–±—â–∏–π –æ–±—ä–µ–º
                    </p>
                  </CardContent>
                </Card>
              ))}
              {fuelKpis.length === 0 && (
                <Card className="bg-slate-800 border-slate-700 col-span-full">
                  <CardContent className="p-4 text-center">
                    <div className="text-sm text-slate-400">
                      –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>
            </div>

            {/* –¢–∞–±–ª–∏—Ü–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ */}
            <div className="report-margins">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Fuel className="w-5 h-5" />
                  –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–ø–ª–∏–≤–∞
                  <Badge variant="secondary" className="ml-auto">
                    {filteredStocks.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                {isMobile ? (
                  // Mobile card layout
                  <div className="space-y-4 p-4">
                    {filteredStocks.map((record) => (
                      <Card key={record.id} className="bg-slate-700 border-slate-600">
                        <CardHeader className="pb-3">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <Gauge className="w-4 h-4 text-slate-400" />
                              <span className="font-medium text-white">{record.tankNumber}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              {record.status === 'critical' && <AlertTriangle className="w-4 h-4 text-slate-400" />}
                              {record.status === 'low' && <Droplets className="w-4 h-4 text-slate-400" />}
                              {getStatusBadge(record.status, record.percentage)}
                            </div>
                          </div>
                        </CardHeader>
                        <CardContent className="pt-0 space-y-3">
                          <div className="flex items-center justify-between">
                            <Badge className="bg-slate-600 text-slate-200">
                              {record.fuelType}
                            </Badge>
                            <span className="text-xs text-slate-400">{record.lastUpdated}</span>
                          </div>
                          
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span className="text-sm text-slate-400">–û–±—ä–µ–º:</span>
                              <span className="text-white font-mono">
                                {formatVolume(record.currentLevel)} / {formatVolume(record.capacity)}
                              </span>
                            </div>
                            
                            <div className="space-y-1">
                              <div className="flex justify-between items-center">
                                <span className="text-sm text-slate-400">–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:</span>
                                <span className={`font-mono text-sm ${getPercentageColor(record.percentage)}`}>
                                  {record.percentage}%
                                </span>
                              </div>
                              <div className="w-full bg-slate-600 rounded-full h-2 overflow-hidden">
                                <div 
                                  className={`h-full ${
                                    record.percentage >= 50 ? 'bg-slate-400' :
                                    record.percentage >= 20 ? 'bg-slate-500' : 'bg-slate-600'
                                  }`}
                                  style={{ width: `${Math.min(record.percentage, 100)}%` }}
                                />
                              </div>
                            </div>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-2 text-sm">
                            <div>
                              <span className="text-slate-400">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</span>
                              <span className="text-white font-mono ml-1">{record.temperature}¬∞C</span>
                            </div>
                            <div>
                              <span className="text-slate-400">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å:</span>
                              <span className="text-white font-mono ml-1">{record.density} –≥/—Å–º¬≥</span>
                            </div>
                            {record.operationMode && (
                              <div className="col-span-2">
                                <span className="text-slate-400">–†–µ–∂–∏–º:</span>
                                <Badge variant="outline" className="ml-2 text-xs">
                                  {record.operationMode === 'normal' ? '–ù–æ—Ä–º.' :
                                   record.operationMode === 'filling' ? '–ó–∞–ø—Ä–∞–≤–∫–∞' :
                                   record.operationMode === 'draining' ? '–°–ª–∏–≤' : 
                                   record.operationMode === 'maintenance' ? '–¢–û' : record.operationMode}
                                </Badge>
                              </div>
                            )}
                          </div>
                          
                          {isNetworkOnly && record.tradingPoint && (
                            <div className="text-sm border-t border-slate-600 pt-2">
                              <span className="text-slate-400">–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞:</span>
                              <div className="text-slate-300 font-medium">{record.tradingPoint}</div>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    ))}
                    
                    {filteredStocks.length === 0 && (
                      <div className="text-center py-8 text-slate-400">
                        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
                      </div>
                    )}
                  </div>
                ) : (
                  // Desktop table layout
                  <div className="overflow-x-auto w-full">
                    <Table>
                      <TableHeader>
                        <TableRow className="border-slate-700">
                          <TableHead className="text-slate-300">–†–µ–∑–µ—Ä–≤—É–∞—Ä</TableHead>
                          <TableHead className="text-slate-300">–¢–æ–ø–ª–∏–≤–æ</TableHead>
                          <TableHead className="text-slate-300">–ï–º–∫–æ—Å—Ç—å</TableHead>
                          <TableHead className="text-slate-300">–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º</TableHead>
                          <TableHead className="text-slate-300">–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</TableHead>
                          <TableHead className="text-slate-300">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</TableHead>
                          <TableHead className="text-slate-300">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å</TableHead>
                          <TableHead className="text-slate-300">–†–µ–∂–∏–º</TableHead>
                          {isNetworkOnly && <TableHead className="text-slate-300">–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞</TableHead>}
                          <TableHead className="text-slate-300">–°—Ç–∞—Ç—É—Å</TableHead>
                          <TableHead className="text-slate-300">–í—Ä–µ–º—è —Å–Ω–∏–º–∫–∞</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {filteredStocks.map((record) => (
                          <TableRow key={record.id} className="border-slate-700 hover:bg-slate-700/50">
                            <TableCell className="text-white font-medium">
                              <div className="flex items-center gap-2">
                                <Gauge className="w-4 h-4 text-slate-400" />
                                {record.tankNumber}
                              </div>
                            </TableCell>
                            <TableCell>
                              <Badge variant="outline" className="text-blue-400 border-blue-400">
                                {record.fuelType}
                              </Badge>
                            </TableCell>
                            <TableCell className="text-white font-mono">
                              {formatVolume(record.capacity)}
                            </TableCell>
                            <TableCell className="text-white font-mono">
                              {formatVolume(record.currentLevel)}
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                <div className="w-16 bg-slate-600 rounded-full h-2 overflow-hidden">
                                  <div 
                                    className={`h-full ${
                                      record.percentage >= 50 ? 'bg-green-500' :
                                      record.percentage >= 20 ? 'bg-yellow-500' : 'bg-red-500'
                                    }`}
                                    style={{ width: `${Math.min(record.percentage, 100)}%` }}
                                  />
                                </div>
                                <span className={`font-mono text-sm ${getPercentageColor(record.percentage)}`}>
                                  {record.percentage}%
                                </span>
                              </div>
                            </TableCell>
                            <TableCell className="text-slate-300 font-mono">
                              {record.temperature}¬∞C
                            </TableCell>
                            <TableCell className="text-slate-300 font-mono">
                              {record.density} –≥/—Å–º¬≥
                            </TableCell>
                            <TableCell>
                              {record.operationMode && (
                                <Badge variant="outline" className="text-xs">
                                  {record.operationMode === 'normal' ? '–ù–æ—Ä–º–∞' :
                                   record.operationMode === 'filling' ? '–ó–∞–ø—Ä–∞–≤–∫–∞' :
                                   record.operationMode === 'draining' ? '–°–ª–∏–≤' :
                                   record.operationMode === 'maintenance' ? '–¢–û' : record.operationMode}
                                </Badge>
                              )}
                            </TableCell>
                            {isNetworkOnly && (
                              <TableCell className="text-slate-300 max-w-xs">
                                <div className="truncate" title={record.tradingPoint}>
                                  {record.tradingPoint}
                                </div>
                              </TableCell>
                            )}
                            <TableCell>
                              <div className="flex items-center gap-2">
                                {record.status === 'critical' && <AlertTriangle className="w-4 h-4 text-red-400" />}
                                {record.status === 'low' && <Droplets className="w-4 h-4 text-yellow-400" />}
                                {getStatusBadge(record.status, record.percentage)}
                              </div>
                            </TableCell>
                            <TableCell className="text-slate-300 text-sm">
                              {record.lastUpdated}
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                    
                    {filteredStocks.length === 0 && (
                      <div className="text-center py-8 text-slate-400">
                        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
            </div>
        </>

        {/* –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö */}
        {!selectedNetwork && (
          <div className="report-margins">
          <Card className="bg-red-900/20 border-red-700">
            <CardContent className="p-8 text-center">
              <AlertTriangle className="w-12 h-12 text-red-500 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-red-400 mb-2">–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h3>
              <p className="text-red-300">–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å</p>
            </CardContent>
          </Card>
          </div>
        )}
        
        {currentFuelStocks.length === 0 && selectedNetwork && (
          <div className="report-margins">
          <Card className="bg-red-900/20 border-red-700">
            <CardContent className="p-8 text-center">
              <AlertTriangle className="w-12 h-12 text-red-500 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-red-400 mb-2">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–ø–ª–∏–≤–∞</h3>
              <p className="text-red-300">–î–∞–Ω–Ω—ã–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ</p>
            </CardContent>
          </Card>
          </div>
        )}
      </div>
    </MainLayout>
  );
}