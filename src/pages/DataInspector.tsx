import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { MainLayout } from '@/components/layout/MainLayout';
import { Database, RefreshCw, Search } from 'lucide-react';

interface StorageData {
  key: string;
  data: any[];
  count: number;
}

export default function DataInspector() {
  const [storageData, setStorageData] = useState<StorageData[]>([]);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());

  const clearAndResetData = () => {
    if (!confirm('‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
      return;
    }
    
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º localStorage...');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ localStorage (–Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏)
    localStorage.clear();
    
    console.log('‚úÖ localStorage –æ—á–∏—â–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    window.location.reload();
  };

  const clearDataOnly = () => {
    if (!confirm('‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –ë–ï–ó –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏! –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –ø–æ–∫–∞–∂–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º.')) {
      return;
    }
    
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ localStorage...');
    localStorage.clear();
    console.log('‚úÖ localStorage –æ—á–∏—â–µ–Ω');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    loadStorageData();
    setLastUpdate(new Date());
  };

  const recalculateNetworkCounts = async () => {
    console.log('üìä –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫...');
    
    try {
      const { networksService } = await import('@/services/networksService');
      const { tradingPointsService } = await import('@/services/tradingPointsService');
      
      const networks = await networksService.getAll();
      const points = await tradingPointsService.getAll();
      
      console.log('–ù–∞–π–¥–µ–Ω–æ —Å–µ—Ç–µ–π:', networks.length, '—Ç–æ—á–µ–∫:', points.length);
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
      for (const network of networks) {
        const pointsCount = points.filter(p => p.networkId === network.id).length;
        console.log(`–°–µ—Ç—å "${network.name}" (ID: ${network.id}): ${pointsCount} —Ç–æ—á–µ–∫`);
        
        await networksService.updatePointsCount(network.id, pointsCount);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      loadStorageData();
      
      alert('‚úÖ –°—á–µ—Ç—á–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Å—á–µ—Ç—á–∏–∫–æ–≤: ' + error.message);
    }
  };

  const forceLoadInitialData = async () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const { networksService } = await import('@/services/networksService');
      const { tradingPointsService } = await import('@/services/tradingPointsService');
      const { usersSupabaseService } = await import('@/services/usersSupabaseService');
      const { currentEquipmentAPI } = await import('@/services/equipment');
      const { currentComponentsAPI } = await import('@/services/components');
      const { commandsService } = await import('@/services/commandsService');
      const { componentStatusService } = await import('@/services/componentStatusSupabaseService');
      const { pricesService } = await import('@/services/pricesSupabaseService');
      const { tanksService } = await import('@/services/tanksServiceSupabase');
      const { operationsService } = await import('@/services/operationsSupabaseService');
      
      console.log('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã...');
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
      const { equipmentTypesAPI, convertToEquipmentTemplate } = await import('@/services/equipmentTypes');
      const { componentsSupabaseAPI } = await import('@/services/componentsSupabase');
      
      // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
      const [networks, points, users, equipment, components, commands, workflows, componentStatuses, fuelTypes, currentPrices, tanks, operations] = await Promise.all([
        networksService.getAll(),
        tradingPointsService.getAll(),
        usersSupabaseService.getAllUsers(),
        currentEquipmentAPI.list({ trading_point_id: '1' }),
        currentComponentsAPI.list({ }),
        commandsService.getAllCommands(),
        commandsService.getAllWorkflows(),
        componentStatusService.getAll(),
        pricesService.getFuelTypes(),
        pricesService.getCurrentPrices(),
        tanksService.getTanks(), // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: getAll -> getTanks
        operationsService.getAll() // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: getAllOperations -> getAll
      ]);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      const equipmentTypes = await equipmentTypesAPI.list();
      const equipmentTemplates = equipmentTypes.map(convertToEquipmentTemplate);
      localStorage.setItem('tradeframe_equipmentTemplates', JSON.stringify(equipmentTemplates));
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const componentTemplates = await componentsSupabaseAPI.getTemplates();
      localStorage.setItem('tradeframe_componentTemplates', JSON.stringify(componentTemplates));
      
      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
        networks: networks.length,
        points: points.length,
        users: users.length,
        equipment: equipment.data?.length || 0,
        components: components.data?.length || 0,
        commands: commands.length,
        workflows: workflows.length,
        componentStatuses: componentStatuses.length,
        fuelTypes: fuelTypes.length,
        currentPrices: currentPrices.length,
        tanks: tanks.length,
        operations: operations.length
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      loadStorageData();
      
      const totalRecords = networks.length + points.length + users.length + 
        (equipment.data?.length || 0) + (components.data?.length || 0) + 
        commands.length + workflows.length + componentStatuses.length + 
        fuelTypes.length + currentPrices.length + tanks.length + operations.length +
        equipmentTemplates.length + componentTemplates.length;
      
      alert(`‚úÖ –í—Å–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! (${totalRecords} –∑–∞–ø–∏—Å–µ–π)\n` +
        `–°–µ—Ç–∏: ${networks.length}\n` +
        `–¢–æ—á–∫–∏: ${points.length}\n` +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}\n` +
        `–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${equipment.data?.length || 0}\n` +
        `–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${components.data?.length || 0}\n` +
        `–®–∞–±–ª–æ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${equipmentTemplates.length}\n` +
        `–®–∞–±–ª–æ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${componentTemplates.length}\n` +
        `–ö–æ–º–∞–Ω–¥—ã: ${commands.length}\n` +
        `–ü—Ä–æ—Ü–µ—Å—Å—ã: ${workflows.length}\n` +
        `–°—Ç–∞—Ç—É—Å—ã: ${componentStatuses.length}\n` +
        `–¢–æ–ø–ª–∏–≤–æ: ${fuelTypes.length}\n` +
        `–¶–µ–Ω—ã: ${currentPrices.length}\n` +
        `–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã: ${tanks.length}\n` +
        `–û–ø–µ—Ä–∞—Ü–∏–∏: ${operations.length}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    }
  };

  const addTestNetwork = async () => {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏...');
    
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const { networksService } = await import('@/services/networksService');
      const { tradingPointsService } = await import('@/services/tradingPointsService');
      
      console.log('üì¶ –°–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏
      const existingNetworks = await networksService.getAll();
      const existingTestNetwork = existingNetworks.find(n => 
        n.name.includes('–¢–µ—Å—Ç–æ–≤–∞—è') || n.name.includes('—Ç–µ—Å—Ç')
      );
      
      if (existingTestNetwork) {
        console.log('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingTestNetwork);
        alert('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ' + existingTestNetwork.name);
        loadStorageData();
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
      console.log('üè¢ –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å...');
      const testNetwork = await networksService.create({
        name: "–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å 1",
        description: "–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
        type: "–ê–ó–°"
      });
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å —Å–æ–∑–¥–∞–Ω–∞:', testNetwork);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ê–ó–° –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏
      console.log('‚õΩ –°–æ–∑–¥–∞—ë–º –ê–ó–°...');
      const testStation = await tradingPointsService.create({
        name: "–ê–ó–° ‚Ññ3 –¢–µ—Å—Ç–æ–≤–∞—è",
        description: "–¢–µ—Å—Ç–æ–≤–∞—è –ê–ó–° –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
        networkId: testNetwork.id,
        phone: "+7 (999) 123-45-67",
        email: "test@demo-azs.ru",
        isBlocked: false,
        geolocation: {
          latitude: 55.7558,
          longitude: 37.6176,
          region: "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω",
          city: "–≥. –¢–µ—Å—Ç",
          address: "–≥. –¢–µ—Å—Ç, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 3"
        },
        schedule: {
          monday: "00:00-23:59",
          tuesday: "00:00-23:59", 
          wednesday: "00:00-23:59",
          thursday: "00:00-23:59",
          friday: "00:00-23:59",
          saturday: "00:00-23:59",
          sunday: "00:00-23:59",
          isAlwaysOpen: true
        },
        services: {
          selfServiceTerminal: true,
          airPump: true,
          carWash: false,
          shop: true,
          cafe: false,
          lubricants: false,
          waterService: false,
          gasBottleExchange: false,
          electricCharging: false,
          truckParking: false
        },
        externalCodes: []
      });
      
      console.log('‚úÖ –ê–ó–° —Å–æ–∑–¥–∞–Ω–∞:', testStation);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
      loadStorageData();
      
      console.log('‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ!');
      alert('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å –∏ –ê–ó–° –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n\n–°–µ—Ç—å: ' + testNetwork.name + '\n–ê–ó–°: ' + testStation.name);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    }
  };

  const loadStorageData = () => {
    const keys = [
      'networks',
      'tradingPoints',
      'users',
      'operations',
      'equipment',
      'components',
      'equipmentTemplates',
      'componentTemplates',
      'shiftReports',
      'chatMessages',
      'supportTickets',
      'notifications',
      'notificationRules',
      'tanks',
      'prices',
      'commands',
      'workflows',
      'componentStatuses'
    ];

    const data: StorageData[] = [];

    keys.forEach(key => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º PersistentStorage
        const prefixedKey = `tradeframe_${key}`;
        let stored = localStorage.getItem(prefixedKey);
        let isPrefixed = true;
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ (—Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
        if (!stored) {
          stored = localStorage.getItem(key);
          isPrefixed = false;
        }
        
        if (stored) {
          const parsed = JSON.parse(stored);
          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º, –æ–Ω–∏ –∏–º–µ—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É {data: [...], metadata: {...}}
          const actualData = isPrefixed && parsed.data ? parsed.data : (Array.isArray(parsed) ? parsed : [parsed]);
          
          data.push({
            key,
            data: actualData,
            count: actualData.length
          });
        } else {
          data.push({
            key,
            data: [],
            count: 0
          });
        }
      } catch (error) {
        console.error(`Error parsing ${key}:`, error);
        data.push({
          key,
          data: [],
          count: 0
        });
      }
    });

    setStorageData(data);
    setLastUpdate(new Date());
  };

  useEffect(() => {
    loadStorageData();
  }, []);

  const findTestNetwork = () => {
    const networksData = storageData.find(d => d.key === 'networks');
    const testNetwork = networksData?.data.find((network: any) => 
      network.name?.toLowerCase().includes('—Ç–µ—Å—Ç') || 
      network.name?.toLowerCase().includes('test')
    );
    return testNetwork;
  };

  const findAllNetworks = () => {
    const networksData = storageData.find(d => d.key === 'networks');
    return networksData?.data || [];
  };

  const findRelatedTradingPoints = (networkId: string) => {
    const tradingPointsData = storageData.find(d => d.key === 'tradingPoints');
    return tradingPointsData?.data.filter((point: any) => 
      point.networkId === networkId || point.network_id === networkId
    ) || [];
  };

  const testNetwork = findTestNetwork();
  const allNetworks = findAllNetworks();
  const relatedPoints = testNetwork ? findRelatedTradingPoints(testNetwork.id) : [];

  return (
    <MainLayout>
      <div className="container mx-auto p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold flex items-center gap-2">
              <Database className="h-8 w-8 text-blue-500" />
              –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            </h1>
            <p className="text-muted-foreground">
              –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
            </p>
            <p className="text-sm text-slate-400">
              –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdate.toLocaleTimeString()}
            </p>
          </div>
          
          <div className="flex gap-2">
            <Button onClick={loadStorageData} size="lg">
              <RefreshCw className="mr-2 h-4 w-4" />
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
            <Button 
              onClick={addTestNetwork} 
              variant="outline"
              size="lg"
            >
              ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
            </Button>
            <Button 
              onClick={clearAndResetData} 
              variant="destructive"
              size="lg"
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
            </Button>
            <Button 
              onClick={clearDataOnly} 
              variant="destructive"
              size="lg"
            >
              üóëÔ∏è –¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∏—Ç—å
            </Button>
            <Button 
              onClick={forceLoadInitialData} 
              variant="secondary"
              size="lg"
            >
              üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            </Button>
            <Button 
              onClick={recalculateNetworkCounts} 
              variant="outline"
              size="lg"
            >
              üìä –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
            </Button>
          </div>
        </div>

        {/* –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ */}
        {testNetwork && (
          <Card className="mb-6 border-green-500/20 bg-green-500/5">
            <CardHeader>
              <CardTitle className="text-green-600 flex items-center gap-2">
                <Search className="h-5 w-5" />
                –ù–∞–π–¥–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å!
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <h3 className="font-medium">–°–µ—Ç—å:</h3>
                  <pre className="bg-slate-800 p-3 rounded text-sm overflow-auto">
{JSON.stringify(testNetwork, null, 2)}
                  </pre>
                </div>
                
                {relatedPoints.length > 0 && (
                  <div>
                    <h3 className="font-medium mb-2">–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ ({relatedPoints.length}):</h3>
                    {relatedPoints.map((point: any, index: number) => (
                      <div key={index} className="bg-slate-800 p-3 rounded text-sm mb-2 border border-slate-700">
                        <div className="flex items-center justify-between mb-2">
                          <strong className="text-white">{point.name}</strong>
                          <div className="flex gap-2">
                            <span className="text-xs bg-green-600 px-2 py-1 rounded">ID: {point.id}</span>
                            <span className="text-xs bg-orange-600 px-2 py-1 rounded">NetID: {point.networkId}</span>
                          </div>
                        </div>
                        <div className="text-slate-400 text-xs">
                          {point.geolocation?.address || point.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                        </div>
                        {point.phone && <div className="text-slate-500 text-xs mt-1">üìû {point.phone}</div>}
                      </div>
                    ))}
                  </div>
                )}

                {relatedPoints.length === 0 && (
                  <div className="text-amber-600">
                    ‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å networkId.
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {!testNetwork && (
          <Card className="mb-6 border-amber-500/20 bg-amber-500/5">
            <CardHeader>
              <CardTitle className="text-amber-600">
                ‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <p>–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å (—Å–æ–¥–µ—Ä–∂–∞—â–∞—è "—Ç–µ—Å—Ç" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ localStorage</p>
                
                <div>
                  <h4 className="font-medium mb-2">–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏ ({allNetworks.length}):</h4>
                  {allNetworks.map((network: any, index: number) => (
                    <div key={index} className="bg-slate-800 p-3 rounded text-sm mb-2 border border-slate-700">
                      <div className="flex items-center justify-between mb-2">
                        <strong className="text-white">{network.name}</strong>
                        <span className="text-xs bg-blue-600 px-2 py-1 rounded">ID: {network.id}</span>
                      </div>
                      {network.description && <div className="text-slate-400 mb-2">{network.description}</div>}
                      <div className="text-xs text-slate-500">
                        –°–æ–∑–¥–∞–Ω–∞: {network.created_at ? new Date(network.created_at).toLocaleString() : '–Ω/–¥'}
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="mt-4 p-3 bg-blue-900/20 rounded border border-blue-500/20">
                  <h4 className="text-blue-400 font-medium mb-2">üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</h4>
                  <ul className="text-sm space-y-1 text-blue-300">
                    <li>‚Ä¢ –°–µ—Ç—å –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ localStorage</li>
                    <li>‚Ä¢ –°–µ—Ç—å –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ</li>
                    <li>‚Ä¢ localStorage –±—ã–ª –æ—á–∏—â–µ–Ω</li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* –í—Å–µ —Å–µ—Ç–∏ */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>üè¢ –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <p className="text-sm text-slate-400">–ù–∞–π–¥–µ–Ω–æ —Å–µ—Ç–µ–π: {allNetworks.length}</p>
              {allNetworks.map((network: any, index: number) => (
                <div key={index} className="bg-slate-800 p-3 rounded text-sm border border-slate-700">
                  <div className="flex items-center justify-between mb-2">
                    <strong className="text-white">{network.name}</strong>
                    <span className="text-xs bg-blue-600 px-2 py-1 rounded">ID: {network.id}</span>
                  </div>
                  {network.description && <div className="text-slate-400 mb-2">{network.description}</div>}
                  <div className="text-xs text-slate-500 space-y-1">
                    <div>–¢–∏–ø: {network.type}</div>
                    <div>–¢–æ—á–µ–∫: {network.pointsCount || 0}</div>
                    <div>–°–æ–∑–¥–∞–Ω–∞: {network.created_at ? new Date(network.created_at).toLocaleString() : '–Ω/–¥'}</div>
                  </div>
                </div>
              ))}
              {allNetworks.length === 0 && (
                <div className="text-amber-600 text-center py-4">
                  ‚ö†Ô∏è –°–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {storageData.find(d => d.key === 'tradingPoints')?.data.map((point: any, index: number) => (
                <div key={index} className="bg-slate-800 p-3 rounded text-sm border border-slate-700">
                  <div className="flex items-center justify-between mb-2">
                    <strong className="text-white">{point.name}</strong>
                    <div className="flex gap-2">
                      <span className="text-xs bg-green-600 px-2 py-1 rounded">ID: {point.id}</span>
                      <span className="text-xs bg-orange-600 px-2 py-1 rounded">NetID: {point.networkId}</span>
                    </div>
                  </div>
                  <div className="text-slate-400 text-xs">
                    {point.geolocation?.address || point.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                  </div>
                  <div className="text-slate-500 text-xs mt-1">
                    –°–µ—Ç—å: {storageData.find(d => d.key === 'networks')?.data.find((n: any) => n.id === point.networkId)?.name || '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}
                  </div>
                </div>
              )) || []}
            </div>
          </CardContent>
        </Card>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          {/* –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ */}
          <Card className="border-blue-500/20 bg-blue-500/5">
            <CardHeader>
              <CardTitle className="text-blue-600 flex items-center gap-2">
                ‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-slate-800 p-3 rounded border border-slate-700">
                    <h4 className="text-slate-300 text-sm mb-2">–ï–¥–∏–Ω–∏—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h4>
                    <div className="text-2xl font-bold text-blue-400">
                      {storageData.find(d => d.key === 'equipment')?.count || 0}
                    </div>
                  </div>
                  <div className="bg-slate-800 p-3 rounded border border-slate-700">
                    <h4 className="text-slate-300 text-sm mb-2">–®–∞–±–ª–æ–Ω–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h4>
                    <div className="text-2xl font-bold text-blue-400">
                      {storageData.find(d => d.key === 'equipmentTemplates')?.count || 0}
                    </div>
                  </div>
                </div>
                
                {storageData.find(d => d.key === 'equipment')?.data?.length > 0 && (
                  <div>
                    <h4 className="text-slate-300 text-sm mb-2">–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</h4>
                    <div className="space-y-1 text-xs">
                      {(() => {
                        const equipment = storageData.find(d => d.key === 'equipment')?.data || [];
                        const statusCounts = equipment.reduce((acc: any, eq: any) => {
                          acc[eq.status] = (acc[eq.status] || 0) + 1;
                          return acc;
                        }, {});
                        return Object.entries(statusCounts).map(([status, count]) => (
                          <div key={status} className="flex justify-between">
                            <span className="text-slate-400 capitalize">{status}:</span>
                            <span className="text-white font-mono">{count}</span>
                          </div>
                        ));
                      })()} 
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã */}
          <Card className="border-green-500/20 bg-green-500/5">
            <CardHeader>
              <CardTitle className="text-green-600 flex items-center gap-2">
                üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-slate-800 p-3 rounded border border-slate-700">
                    <h4 className="text-slate-300 text-sm mb-2">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</h4>
                    <div className="text-2xl font-bold text-green-400">
                      {storageData.find(d => d.key === 'components')?.count || 0}
                    </div>
                  </div>
                  <div className="bg-slate-800 p-3 rounded border border-slate-700">
                    <h4 className="text-slate-300 text-sm mb-2">–®–∞–±–ª–æ–Ω–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</h4>
                    <div className="text-2xl font-bold text-green-400">
                      {storageData.find(d => d.key === 'componentTemplates')?.count || 0}
                    </div>
                  </div>
                </div>
                
                {storageData.find(d => d.key === 'components')?.data?.length > 0 && (
                  <div>
                    <h4 className="text-slate-300 text-sm mb-2">–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</h4>
                    <div className="space-y-1 text-xs">
                      {(() => {
                        const components = storageData.find(d => d.key === 'components')?.data || [];
                        const statusCounts = components.reduce((acc: any, comp: any) => {
                          acc[comp.status] = (acc[comp.status] || 0) + 1;
                          return acc;
                        }, {});
                        return Object.entries(statusCounts).map(([status, count]) => (
                          <div key={status} className="flex justify-between">
                            <span className="text-slate-400 capitalize">{status}:</span>
                            <span className="text-white font-mono">{count}</span>
                          </div>
                        ));
                      })()}
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6">
          {storageData.map((item) => (
            <Card key={item.key}>
              <CardContent className="pt-4">
                <div className="flex flex-col items-center text-center">
                  <h3 className="font-medium text-sm mb-2">{item.key}</h3>
                  <Badge variant={item.count > 0 ? "default" : "secondary"}>
                    {item.count} –∑–∞–ø–∏—Å–µ–π
                  </Badge>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* –ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
        <div className="space-y-6">
          {storageData.map((item) => (
            <Card key={item.key}>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  {item.key}
                  <Badge variant={item.count > 0 ? "default" : "secondary"}>
                    {item.count} –∑–∞–ø–∏—Å–µ–π
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent>
                {item.count > 0 ? (
                  <pre className="bg-slate-800 p-3 rounded text-xs overflow-auto max-h-64">
{JSON.stringify(item.data, null, 2)}
                  </pre>
                ) : (
                  <div className="text-slate-500 text-sm">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </MainLayout>
  );
}