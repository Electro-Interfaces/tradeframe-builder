import React, { useState } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { EmptyState } from "@/components/ui/empty-state";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Plus, Edit, Trash2, Copy, History, Play, Pause, Mail, MessageSquare, Webhook, Filter, X } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { NotificationRuleForm } from "@/components/notifications/NotificationRuleForm";
import { NotificationHistory } from "@/components/notifications/NotificationHistory";

interface NotificationChannel {
  type: 'email' | 'telegram' | 'webhook';
  enabled: boolean;
}

interface NotificationRule {
  id: string;
  name: string;
  description: string;
  isActive: boolean;
  priority: 'info' | 'warning' | 'critical';
  trigger: {
    type: 'equipment_status' | 'tank_level' | 'transaction' | 'workflow_completed';
    label: string;
  };
  conditions: Record<string, any>;
  channels: NotificationChannel[];
  recipients: string[];
  messageTemplate: string;
  userId: string; // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  userName: string; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  createdAt: string;
  updatedAt: string;
  lastTriggered?: {
    date: string;
    status: 'sent' | 'failed';
  };
}

// Mock –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const mockUsers = [
  { id: "1", name: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", email: "ivan.petrov@azs.com", role: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" },
  { id: "2", name: "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", email: "anna.sidorova@azs.com", role: "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ç–∏" },
  { id: "3", name: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤", email: "dmitry.kozlov@azs.com", role: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" },
  { id: "4", name: "–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞", email: "elena.morozova@azs.com", role: "–û–ø–µ—Ä–∞—Ç–æ—Ä" },
];

const mockNotificationRules: NotificationRule[] = [
  {
    id: "1",
    name: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞",
    description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º —É—Ä–æ–≤–Ω–µ —Ç–æ–ø–ª–∏–≤–∞ –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö",
    isActive: true,
    priority: "critical",
    trigger: {
      type: "tank_level",
      label: "–£—Ä–æ–≤–µ–Ω—å –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–µ: –ú–µ–Ω—å—à–µ 15%"
    },
    conditions: {
      condition: "less_than",
      value: 15,
      fuelType: "–ê–ò-95"
    },
    channels: [
      { type: "email", enabled: true },
      { type: "telegram", enabled: true },
      { type: "webhook", enabled: false }
    ],
    recipients: ["manager@azs.com", "operator@azs.com"],
    messageTemplate: "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨! –ù–∞ —Ç–æ—á–∫–µ {{point.name}} –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–µ {{tank.name}} –æ—Å—Ç–∞–ª–æ—Å—å {{tank.level}}% —Ç–æ–ø–ª–∏–≤–∞ {{tank.fuelType}}",
    userId: "2",
    userName: "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
    createdAt: "2024-08-15T10:00:00Z",
    updatedAt: "2024-08-20T14:30:00Z",
    lastTriggered: {
      date: "2024-08-29T08:30:00Z",
      status: "sent"
    }
  },
  {
    id: "2",
    name: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –æ—Ñ–ª–∞–π–Ω–µ",
    description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å",
    isActive: true,
    priority: "warning",
    trigger: {
      type: "equipment_status",
      label: "–°—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: –û—Ñ–ª–∞–π–Ω"
    },
    conditions: {
      equipmentType: "–¢–†–ö",
      newStatus: "offline"
    },
    channels: [
      { type: "email", enabled: true },
      { type: "telegram", enabled: false },
      { type: "webhook", enabled: true }
    ],
    recipients: ["tech@azs.com"],
    messageTemplate: "‚ö†Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ {{equipment.name}} ({{equipment.type}}) –Ω–∞ —Ç–æ—á–∫–µ {{point.name}} –ø–µ—Ä–µ—à–ª–æ –≤ —Å—Ç–∞—Ç—É—Å '–û—Ñ–ª–∞–π–Ω'",
    userId: "3",
    userName: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
    createdAt: "2024-08-10T12:00:00Z",
    updatedAt: "2024-08-25T16:45:00Z",
    lastTriggered: {
      date: "2024-08-28T14:15:00Z",
      status: "sent"
    }
  },
  {
    id: "3",
    name: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞",
    description: "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–æ—á–Ω—ã—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤",
    isActive: false,
    priority: "info",
    trigger: {
      type: "workflow_completed",
      label: "–†–µ–≥–ª–∞–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã"
    },
    conditions: {
      workflowId: "workflow_1",
      status: "success"
    },
    channels: [
      { type: "email", enabled: true },
      { type: "telegram", enabled: false },
      { type: "webhook", enabled: false }
    ],
    recipients: ["manager@azs.com"],
    messageTemplate: "‚úÖ –†–µ–≥–ª–∞–º–µ–Ω—Ç '{{workflow.name}}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {{workflow.duration}}",
    userId: "2",
    userName: "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
    createdAt: "2024-08-05T09:00:00Z",
    updatedAt: "2024-08-28T08:15:00Z"
  }
];

export default function NotificationRules() {
  const [rules, setRules] = useState<NotificationRule[]>(mockNotificationRules);
  const [selectedRule, setSelectedRule] = useState<NotificationRule | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isHistoryDialogOpen, setIsHistoryDialogOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [showFilters, setShowFilters] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [filters, setFilters] = useState({
    status: "all", // all, active, inactive
    priority: "all", // all, info, warning, critical
    userId: "all", // all, user1, user2, etc
    triggerType: "all", // all, equipment_status, tank_level, etc
    hasTriggered: "all" // all, yes, no
  });
  const { toast } = useToast();

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –ø–æ –ø–æ–∏—Å–∫—É –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º
  const filteredRules = rules.filter(rule => {
    // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    const matchesSearch = searchQuery === "" || 
      rule.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      rule.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      rule.trigger.label.toLowerCase().includes(searchQuery.toLowerCase()) ||
      rule.userName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      rule.recipients.some(r => r.toLowerCase().includes(searchQuery.toLowerCase()));

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const matchesStatus = filters.status === "all" || 
      (filters.status === "active" && rule.isActive) ||
      (filters.status === "inactive" && !rule.isActive);

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const matchesPriority = filters.priority === "all" || rule.priority === filters.priority;

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const matchesUser = filters.userId === "all" || rule.userId === filters.userId;

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç—Ä–∏–≥–≥–µ—Ä–∞
    const matchesTrigger = filters.triggerType === "all" || rule.trigger.type === filters.triggerType;

    // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
    const matchesTriggered = filters.hasTriggered === "all" ||
      (filters.hasTriggered === "yes" && rule.lastTriggered) ||
      (filters.hasTriggered === "no" && !rule.lastTriggered);

    return matchesSearch && matchesStatus && matchesPriority && matchesUser && matchesTrigger && matchesTriggered;
  });

  // –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const activeFiltersCount = Object.values(filters).filter(value => value !== "all").length;

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  const updateFilter = (key: keyof typeof filters, value: string) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  const clearAllFilters = () => {
    setFilters({
      status: "all",
      priority: "all", 
      userId: "all",
      triggerType: "all",
      hasTriggered: "all"
    });
  };

  const formatLastTriggered = (lastTriggered?: NotificationRule['lastTriggered']) => {
    if (!lastTriggered) return "–ù–∏–∫–æ–≥–¥–∞";
    
    const date = new Date(lastTriggered.date);
    const formattedDate = date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    return `${formattedDate} (${lastTriggered.status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–û—à–∏–±–∫–∞'})`;
  };

  const getChannelIcons = (channels: NotificationChannel[]) => {
    const enabledChannels = channels.filter(c => c.enabled);
    
    return (
      <div className="flex gap-1">
        {enabledChannels.map((channel) => {
          const Icon = channel.type === 'email' ? Mail : 
                      channel.type === 'telegram' ? MessageSquare : Webhook;
          return <Icon key={channel.type} className="w-4 h-4 text-muted-foreground" />;
        })}
        {enabledChannels.length === 0 && (
          <span className="text-xs text-muted-foreground">–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤</span>
        )}
      </div>
    );
  };

  const getPriorityBadge = (priority: NotificationRule['priority']) => {
    const variants = {
      info: { label: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", color: "bg-blue-600 text-blue-200" },
      warning: { label: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", color: "bg-yellow-600 text-yellow-200" },
      critical: { label: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ", color: "bg-red-600 text-red-200" }
    };
    
    const config = variants[priority];
    return <Badge variant="secondary" className={`${config.color} border-slate-600`}>{config.label}</Badge>;
  };

  const handleCreate = () => {
    setSelectedRule(null);
    setIsCreateDialogOpen(true);
  };

  const handleEdit = (rule: NotificationRule) => {
    setSelectedRule(rule);
    setIsEditDialogOpen(true);
  };

  const handleClone = (rule: NotificationRule) => {
    const newRule: NotificationRule = {
      ...rule,
      id: Date.now().toString(),
      name: `${rule.name} (–∫–æ–ø–∏—è)`,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      lastTriggered: undefined
    };
    
    setRules(prev => [...prev, newRule]);
    toast({
      title: "–ü—Ä–∞–≤–∏–ª–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
      description: `–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è –ø—Ä–∞–≤–∏–ª–∞ "${rule.name}".`,
    });
  };

  const handleDeleteConfirm = (ruleId: string) => {
    const rule = rules.find(r => r.id === ruleId);
    setRules(prev => prev.filter(r => r.id !== ruleId));
    toast({
      title: "–ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ",
      description: `–ü—Ä–∞–≤–∏–ª–æ "${rule?.name}" –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.`,
    });
  };

  const toggleRuleStatus = (ruleId: string) => {
    setRules(prev => prev.map(r => 
      r.id === ruleId 
        ? { ...r, isActive: !r.isActive }
        : r
    ));
    
    const rule = rules.find(r => r.id === ruleId);
    toast({
      title: rule?.isActive ? "–ü—Ä–∞–≤–∏–ª–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" : "–ü—Ä–∞–≤–∏–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ",
      description: `–ü—Ä–∞–≤–∏–ª–æ "${rule?.name}" ${rule?.isActive ? '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'}.`,
    });
  };

  const handleCreateRule = (ruleData: Partial<NotificationRule>) => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ (—Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const selectedUser = mockUsers.find(u => u.id === ruleData.userId) || mockUsers[0];
    
    const newRule: NotificationRule = {
      id: Date.now().toString(),
      name: ruleData.name!,
      description: ruleData.description!,
      isActive: ruleData.isActive ?? true,
      priority: ruleData.priority!,
      trigger: ruleData.trigger!,
      conditions: ruleData.conditions ?? {},
      channels: ruleData.channels ?? [],
      recipients: ruleData.recipients ?? [],
      messageTemplate: ruleData.messageTemplate!,
      userId: selectedUser.id,
      userName: selectedUser.name,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    setRules(prev => [...prev, newRule]);
    setIsCreateDialogOpen(false);
    toast({
      title: "–ü—Ä–∞–≤–∏–ª–æ —Å–æ–∑–¥–∞–Ω–æ",
      description: `–ü—Ä–∞–≤–∏–ª–æ "${newRule.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è ${selectedUser.name}.`,
    });
  };

  const handleEditRule = (ruleData: Partial<NotificationRule>) => {
    if (!selectedRule) return;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const selectedUser = mockUsers.find(u => u.id === ruleData.userId);
    const updatedRule = {
      ...ruleData,
      userId: selectedUser?.id || selectedRule.userId,
      userName: selectedUser?.name || selectedRule.userName,
      updatedAt: new Date().toISOString()
    };
    
    setRules(prev => prev.map(r => 
      r.id === selectedRule.id 
        ? { ...r, ...updatedRule }
        : r
    ));
    
    setIsEditDialogOpen(false);
    setSelectedRule(null);
    toast({
      title: "–ü—Ä–∞–≤–∏–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      description: `–ü—Ä–∞–≤–∏–ª–æ "${ruleData.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.`,
    });
  };

  return (
    <MainLayout>
      <div className="w-full h-full px-4 md:px-6 lg:px-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className="mb-6 pt-4">
          <h1 className="text-2xl font-semibold text-white">–ü—Ä–∞–≤–∏–ª–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π</h1>
          <p className="text-slate-400 mt-2">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–µ–π</p>
        </div>

        {/* –ü–∞–Ω–µ–ª—å –ø—Ä–∞–≤–∏–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–π */}
        <div className="bg-slate-800 mb-6 w-full">
          <div className="px-4 md:px-6 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                  <span className="text-white text-sm">üîî</span>
                </div>
                <h2 className="text-lg font-semibold text-white">–ü—Ä–∞–≤–∏–ª–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π</h2>
              </div>
              <Button 
                onClick={handleCreate}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium flex-shrink-0"
              >
                + –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ
              </Button>
            </div>
            
            {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
            <div className="mt-4 space-y-4">
              <div className="flex gap-3">
                <div className="flex-1">
                  <Input
                    placeholder="–ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–π..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                  />
                </div>
                <Button
                  variant="outline"
                  onClick={() => setShowFilters(!showFilters)}
                  className="border-slate-600 text-white hover:bg-slate-700"
                >
                  <Filter className="h-4 w-4 mr-2" />
                  –§–∏–ª—å—Ç—Ä—ã
                  {activeFiltersCount > 0 && (
                    <Badge variant="secondary" className="ml-2 bg-blue-600 text-blue-200">
                      {activeFiltersCount}
                    </Badge>
                  )}
                </Button>
              </div>

              {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
              {showFilters && (
                <Card className="bg-slate-700 border-slate-600">
                  <CardContent className="pt-6">
                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <h3 className="text-sm font-medium text-white">–§–∏–ª—å—Ç—Ä—ã</h3>
                        {activeFiltersCount > 0 && (
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={clearAllFilters}
                            className="text-slate-400 hover:text-white"
                          >
                            <X className="h-4 w-4 mr-1" />
                            –û—á–∏—Å—Ç–∏—Ç—å
                          </Button>
                        )}
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
                        {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
                        <div>
                          <label className="text-xs font-medium text-slate-300 mb-2 block">
                            –°—Ç–∞—Ç—É—Å
                          </label>
                          <Select
                            value={filters.status}
                            onValueChange={(value) => updateFilter("status", value)}
                          >
                            <SelectTrigger className="bg-slate-600 border-slate-500 text-white">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="all">–í—Å–µ</SelectItem>
                              <SelectItem value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</SelectItem>
                              <SelectItem value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        {/* –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É */}
                        <div>
                          <label className="text-xs font-medium text-slate-300 mb-2 block">
                            –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                          </label>
                          <Select
                            value={filters.priority}
                            onValueChange={(value) => updateFilter("priority", value)}
                          >
                            <SelectTrigger className="bg-slate-600 border-slate-500 text-white">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="all">–í—Å–µ</SelectItem>
                              <SelectItem value="info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</SelectItem>
                              <SelectItem value="warning">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</SelectItem>
                              <SelectItem value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        {/* –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é */}
                        <div>
                          <label className="text-xs font-medium text-slate-300 mb-2 block">
                            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                          </label>
                          <Select
                            value={filters.userId}
                            onValueChange={(value) => updateFilter("userId", value)}
                          >
                            <SelectTrigger className="bg-slate-600 border-slate-500 text-white">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="all">–í—Å–µ</SelectItem>
                              {mockUsers.map((user) => (
                                <SelectItem key={user.id} value={user.id}>
                                  {user.name}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>

                        {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç—Ä–∏–≥–≥–µ—Ä–∞ */}
                        <div>
                          <label className="text-xs font-medium text-slate-300 mb-2 block">
                            –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
                          </label>
                          <Select
                            value={filters.triggerType}
                            onValueChange={(value) => updateFilter("triggerType", value)}
                          >
                            <SelectTrigger className="bg-slate-600 border-slate-500 text-white">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="all">–í—Å–µ</SelectItem>
                              <SelectItem value="equipment_status">–°—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</SelectItem>
                              <SelectItem value="tank_level">–£—Ä–æ–≤–µ–Ω—å –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–µ</SelectItem>
                              <SelectItem value="transaction">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</SelectItem>
                              <SelectItem value="workflow_completed">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è–º */}
                        <div>
                          <label className="text-xs font-medium text-slate-300 mb-2 block">
                            –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                          </label>
                          <Select
                            value={filters.hasTriggered}
                            onValueChange={(value) => updateFilter("hasTriggered", value)}
                          >
                            <SelectTrigger className="bg-slate-600 border-slate-500 text-white">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="all">–í—Å–µ</SelectItem>
                              <SelectItem value="yes">–ë—ã–ª–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è</SelectItem>
                              <SelectItem value="no">–ë–µ–∑ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
            {(searchQuery || activeFiltersCount > 0) && (
              <div className="px-6 py-2 text-sm text-slate-400 border-t border-slate-600">
                –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {filteredRules.length} –∏–∑ {rules.length}
                {searchQuery && (
                  <span> –ø–æ –∑–∞–ø—Ä–æ—Å—É "{searchQuery}"</span>
                )}
              </div>
            )}
          </div>

        {rules.length === 0 ? (
          <div className="px-4 md:px-6 pb-6">
            <EmptyState 
              title="–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–π" 
              description="–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
              cta={
                <Button 
                  onClick={handleCreate}
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                >
                  + –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ
                </Button>
              }
              className="py-16"
            />
          </div>
        ) : filteredRules.length === 0 ? (
          <div className="px-4 md:px-6 pb-6">
            <EmptyState 
              title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" 
              description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞"
              className="py-16"
            />
          </div>
        ) : (
          <>
            {/* –î–µ—Å–∫—Ç–æ–ø: —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
            <div className="hidden md:block w-full">
          <div className="overflow-x-auto w-full rounded-lg border border-slate-600">
            <table className="w-full text-sm min-w-full table-fixed">
              <thead className="bg-slate-700">
                <tr>
                  <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '22%'}}>–ù–ê–ó–í–ê–ù–ò–ï –ü–†–ê–í–ò–õ–ê</th>
                  <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '18%'}}>–¢–†–ò–ì–ì–ï–†</th>
                  <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '15%'}}>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨</th>
                  <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '12%'}}>–ö–ê–ù–ê–õ–´</th>
                  <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '10%'}}>–°–¢–ê–¢–£–°</th>
                  <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '13%'}}>–ü–û–°–õ–ï–î–ù–ï–ï –°–†–ê–ë–ê–¢–´–í–ê–ù–ò–ï</th>
                  <th className="px-6 py-4 text-right text-slate-200 font-medium" style={{width: '10%'}}>–î–ï–ô–°–¢–í–ò–Ø</th>
                </tr>
              </thead>
              <tbody className="bg-slate-800">
                {filteredRules.map((rule) => (
                  <tr
                    key={rule.id}
                    className="border-b border-slate-600 cursor-pointer hover:bg-slate-700 transition-colors"
                  >
                    <td className="px-4 md:px-6 py-4">
                      <div>
                        <div className="font-medium text-white text-base">{rule.name}</div>
                        <div className="text-sm text-slate-400 mb-1">{rule.description}</div>
                        <div className="mt-1">{getPriorityBadge(rule.priority)}</div>
                      </div>
                    </td>
                    <td className="px-4 md:px-6 py-4">
                      <span className="text-slate-200 text-sm">{rule.trigger.label}</span>
                    </td>
                    <td className="px-4 md:px-6 py-4">
                      <div className="flex items-center gap-2">
                        <div className="w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                          <span className="text-white text-xs font-medium">
                            {rule.userName.split(' ').map(n => n[0]).join('')}
                          </span>
                        </div>
                        <span className="text-slate-200 text-sm">{rule.userName}</span>
                      </div>
                    </td>
                    <td className="px-4 md:px-6 py-4">
                      {getChannelIcons(rule.channels)}
                    </td>
                    <td className="px-4 md:px-6 py-4">
                      <Badge variant={rule.isActive ? "default" : "secondary"}>
                        {rule.isActive ? "–ê–∫—Ç–∏–≤–Ω–æ" : "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}
                      </Badge>
                    </td>
                    <td className="px-4 md:px-6 py-4">
                      <div className="flex items-center gap-2">
                        {rule.lastTriggered && (
                          <div className={`w-2 h-2 rounded-full ${
                            rule.lastTriggered.status === 'sent' ? 'bg-green-500' : 'bg-red-500'
                          }`} />
                        )}
                        <span className="text-sm text-slate-200">{formatLastTriggered(rule.lastTriggered)}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 text-right">
                      <div className="flex items-center justify-end gap-2">
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-8 w-8 p-0 text-slate-400 hover:text-white"
                          onClick={() => handleEdit(rule)}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-8 w-8 p-0 text-slate-400 hover:text-white"
                          onClick={() => handleClone(rule)}
                        >
                          <Copy className="h-4 w-4" />
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-8 w-8 p-0 text-slate-400 hover:text-white"
                          onClick={() => toggleRuleStatus(rule.id)}
                        >
                          {rule.isActive ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-8 w-8 p-0 text-slate-400 hover:text-white"
                          onClick={() => {
                            setSelectedRule(rule);
                            setIsHistoryDialogOpen(true);
                          }}
                        >
                          <History className="h-4 w-4" />
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-8 w-8 p-0 text-slate-400 hover:text-red-400"
                          onClick={() => handleDeleteConfirm(rule.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

            {/* –ú–æ–±–∞–π–ª: –∫–∞—Ä—Ç–æ—á–∫–∏ */}
            <div className="md:hidden space-y-3 px-6 pb-6">
              {filteredRules.map((rule) => (
                <div
                  key={rule.id}
                  className="bg-slate-700 rounded-lg p-4 hover:bg-slate-600 transition-colors"
                >
                  <div className="flex items-start justify-between gap-3">
                    <div className="flex-1 min-w-0">
                      <div className="font-medium text-white text-base mb-1">{rule.name}</div>
                      <div className="text-sm text-slate-400 mb-2">{rule.description}</div>
                      <div className="flex flex-col gap-2 text-sm">
                        <div className="flex items-center gap-2">
                          <span className="text-slate-400">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</span>
                          <div className="flex items-center gap-2">
                            <div className="w-5 h-5 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                              <span className="text-white text-xs font-medium">
                                {rule.userName.split(' ').map(n => n[0]).join('')}
                              </span>
                            </div>
                            <span className="text-slate-200">{rule.userName}</span>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <span className="text-slate-400">–¢—Ä–∏–≥–≥–µ—Ä:</span>
                          <span className="text-slate-200">{rule.trigger.label}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <span className="text-slate-400">–ö–∞–Ω–∞–ª—ã:</span>
                          {getChannelIcons(rule.channels)}
                        </div>
                        <div className="flex items-center gap-2">
                          <span className="text-slate-400">–°—Ç–∞—Ç—É—Å:</span>
                          <Badge variant={rule.isActive ? "default" : "secondary"}>
                            {rule.isActive ? "–ê–∫—Ç–∏–≤–Ω–æ" : "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}
                          </Badge>
                        </div>
                        <div className="flex items-center gap-2">
                          <span className="text-slate-400">–ü–æ—Å–ª–µ–¥–Ω–µ–µ:</span>
                          <span className="text-slate-200">{formatLastTriggered(rule.lastTriggered)}</span>
                        </div>
                        <div className="mt-1">{getPriorityBadge(rule.priority)}</div>
                      </div>
                    </div>
                    <div className="flex flex-col gap-2 ml-2">
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="h-9 w-9 p-0 text-slate-400 hover:text-white"
                        onClick={() => handleEdit(rule)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="h-9 w-9 p-0 text-slate-400 hover:text-white"
                        onClick={() => handleClone(rule)}
                      >
                        <Copy className="h-4 w-4" />
                      </Button>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="h-9 w-9 p-0 text-slate-400 hover:text-white"
                        onClick={() => toggleRuleStatus(rule.id)}
                      >
                        {rule.isActive ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                      </Button>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="h-9 w-9 p-0 text-slate-400 hover:text-red-400"
                        onClick={() => handleDeleteConfirm(rule.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </>
        )}
        </div>

        {/* Create/Edit Dialog */}
        <Dialog open={isCreateDialogOpen || isEditDialogOpen} onOpenChange={(open) => {
          if (!open) {
            setIsCreateDialogOpen(false);
            setIsEditDialogOpen(false);
            setSelectedRule(null);
          }
        }}>
          <DialogContent className="bg-slate-800 border-slate-700 w-[95vw] max-w-4xl max-h-[90vh] overflow-y-auto sm:w-full">
            <DialogHeader>
              <DialogTitle>
                {selectedRule ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è" : "–°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"}
              </DialogTitle>
            </DialogHeader>
            <NotificationRuleForm 
              initialData={selectedRule || undefined}
              users={mockUsers}
              onSubmit={selectedRule ? handleEditRule : handleCreateRule} 
              onCancel={() => {
                setIsCreateDialogOpen(false);
                setIsEditDialogOpen(false);
                setSelectedRule(null);
              }} 
            />
          </DialogContent>
        </Dialog>

        {/* History Dialog */}
        <Dialog open={isHistoryDialogOpen} onOpenChange={setIsHistoryDialogOpen}>
          <DialogContent className="bg-slate-800 border-slate-700 w-[95vw] max-w-4xl max-h-[90vh] overflow-y-auto sm:w-full">
            <DialogHeader>
              <DialogTitle>–ò—Å—Ç–æ—Ä–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {selectedRule?.name}</DialogTitle>
            </DialogHeader>
            {selectedRule && (
              <NotificationHistory 
                ruleId={selectedRule.id}
                onClose={() => {
                  setIsHistoryDialogOpen(false);
                  setSelectedRule(null);
                }} 
              />
            )}
          </DialogContent>
        </Dialog>
      </div>
    </MainLayout>
  );
}