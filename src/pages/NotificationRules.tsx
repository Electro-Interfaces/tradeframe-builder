import React, { useState } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { MoreHorizontal, Plus, Edit, Trash2, Copy, History, Play, Pause, Mail, MessageSquare, Webhook } from "lucide-react";
import { toast } from "@/hooks/use-toast";
import { NotificationRuleForm } from "@/components/notifications/NotificationRuleForm";
import { NotificationHistory } from "@/components/notifications/NotificationHistory";

interface NotificationChannel {
  type: 'email' | 'telegram' | 'webhook';
  enabled: boolean;
}

interface NotificationRule {
  id: string;
  name: string;
  description: string;
  isActive: boolean;
  priority: 'info' | 'warning' | 'critical';
  trigger: {
    type: 'equipment_status' | 'tank_level' | 'transaction' | 'workflow_completed';
    label: string;
  };
  conditions: Record<string, any>;
  channels: NotificationChannel[];
  recipients: string[];
  messageTemplate: string;
  createdAt: string;
  updatedAt: string;
  lastTriggered?: {
    date: string;
    status: 'sent' | 'failed';
  };
}

const mockNotificationRules: NotificationRule[] = [
  {
    id: "1",
    name: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞",
    description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º —É—Ä–æ–≤–Ω–µ —Ç–æ–ø–ª–∏–≤–∞ –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö",
    isActive: true,
    priority: "critical",
    trigger: {
      type: "tank_level",
      label: "–£—Ä–æ–≤–µ–Ω—å –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–µ: –ú–µ–Ω—å—à–µ 15%"
    },
    conditions: {
      condition: "less_than",
      value: 15,
      fuelType: "–ê–ò-95"
    },
    channels: [
      { type: "email", enabled: true },
      { type: "telegram", enabled: true },
      { type: "webhook", enabled: false }
    ],
    recipients: ["manager@azs.com", "operator@azs.com"],
    messageTemplate: "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨! –ù–∞ —Ç–æ—á–∫–µ {{point.name}} –≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–µ {{tank.name}} –æ—Å—Ç–∞–ª–æ—Å—å {{tank.level}}% —Ç–æ–ø–ª–∏–≤–∞ {{tank.fuelType}}",
    createdAt: "2024-08-15T10:00:00Z",
    updatedAt: "2024-08-20T14:30:00Z",
    lastTriggered: {
      date: "2024-08-29T08:30:00Z",
      status: "sent"
    }
  },
  {
    id: "2",
    name: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –æ—Ñ–ª–∞–π–Ω–µ",
    description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å",
    isActive: true,
    priority: "warning",
    trigger: {
      type: "equipment_status",
      label: "–°—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: –û—Ñ–ª–∞–π–Ω"
    },
    conditions: {
      equipmentType: "–¢–†–ö",
      newStatus: "offline"
    },
    channels: [
      { type: "email", enabled: true },
      { type: "telegram", enabled: false },
      { type: "webhook", enabled: true }
    ],
    recipients: ["tech@azs.com"],
    messageTemplate: "‚ö†Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ {{equipment.name}} ({{equipment.type}}) –Ω–∞ —Ç–æ—á–∫–µ {{point.name}} –ø–µ—Ä–µ—à–ª–æ –≤ —Å—Ç–∞—Ç—É—Å '–û—Ñ–ª–∞–π–Ω'",
    createdAt: "2024-08-10T12:00:00Z",
    updatedAt: "2024-08-25T16:45:00Z",
    lastTriggered: {
      date: "2024-08-28T14:15:00Z",
      status: "sent"
    }
  },
  {
    id: "3",
    name: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞",
    description: "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–æ—á–Ω—ã—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤",
    isActive: false,
    priority: "info",
    trigger: {
      type: "workflow_completed",
      label: "–†–µ–≥–ª–∞–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã"
    },
    conditions: {
      workflowId: "workflow_1",
      status: "success"
    },
    channels: [
      { type: "email", enabled: true },
      { type: "telegram", enabled: false },
      { type: "webhook", enabled: false }
    ],
    recipients: ["manager@azs.com"],
    messageTemplate: "‚úÖ –†–µ–≥–ª–∞–º–µ–Ω—Ç '{{workflow.name}}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {{workflow.duration}}",
    createdAt: "2024-08-05T09:00:00Z",
    updatedAt: "2024-08-28T08:15:00Z"
  }
];

export default function NotificationRules() {
  const [rules, setRules] = useState<NotificationRule[]>(mockNotificationRules);
  const [selectedRule, setSelectedRule] = useState<NotificationRule | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isHistoryDialogOpen, setIsHistoryDialogOpen] = useState(false);

  const formatLastTriggered = (lastTriggered?: NotificationRule['lastTriggered']) => {
    if (!lastTriggered) return "–ù–∏–∫–æ–≥–¥–∞";
    
    const date = new Date(lastTriggered.date);
    const formattedDate = date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    return `${formattedDate} (${lastTriggered.status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–û—à–∏–±–∫–∞'})`;
  };

  const getChannelIcons = (channels: NotificationChannel[]) => {
    const enabledChannels = channels.filter(c => c.enabled);
    
    return (
      <div className="flex gap-1">
        {enabledChannels.map((channel) => {
          const Icon = channel.type === 'email' ? Mail : 
                      channel.type === 'telegram' ? MessageSquare : Webhook;
          return <Icon key={channel.type} className="w-4 h-4 text-muted-foreground" />;
        })}
        {enabledChannels.length === 0 && (
          <span className="text-xs text-muted-foreground">–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤</span>
        )}
      </div>
    );
  };

  const getPriorityBadge = (priority: NotificationRule['priority']) => {
    const variants = {
      info: { variant: "default" as const, label: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", color: "bg-blue-100 text-blue-800 border-blue-200" },
      warning: { variant: "secondary" as const, label: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", color: "bg-yellow-100 text-yellow-800 border-yellow-200" },
      critical: { variant: "destructive" as const, label: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ", color: "bg-red-100 text-red-800 border-red-200" }
    };
    
    const config = variants[priority];
    return <Badge className={config.color}>{config.label}</Badge>;
  };

  const toggleRuleStatus = (ruleId: string) => {
    setRules(prev => prev.map(r => 
      r.id === ruleId 
        ? { ...r, isActive: !r.isActive }
        : r
    ));
    
    const rule = rules.find(r => r.id === ruleId);
    toast({
      title: rule?.isActive ? "–ü—Ä–∞–≤–∏–ª–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" : "–ü—Ä–∞–≤–∏–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ",
      description: `–ü—Ä–∞–≤–∏–ª–æ "${rule?.name}" ${rule?.isActive ? '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'}.`,
    });
  };

  const duplicateRule = (rule: NotificationRule) => {
    const newRule: NotificationRule = {
      ...rule,
      id: Date.now().toString(),
      name: `${rule.name} (–∫–æ–ø–∏—è)`,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      lastTriggered: undefined
    };
    
    setRules(prev => [...prev, newRule]);
    toast({
      title: "–ü—Ä–∞–≤–∏–ª–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
      description: `–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è –ø—Ä–∞–≤–∏–ª–∞ "${rule.name}".`,
    });
  };

  const deleteRule = (ruleId: string) => {
    const rule = rules.find(r => r.id === ruleId);
    setRules(prev => prev.filter(r => r.id !== ruleId));
    toast({
      title: "–ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ",
      description: `–ü—Ä–∞–≤–∏–ª–æ "${rule?.name}" –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.`,
    });
  };

  const handleCreateRule = (ruleData: Partial<NotificationRule>) => {
    const newRule: NotificationRule = {
      id: Date.now().toString(),
      name: ruleData.name!,
      description: ruleData.description!,
      isActive: ruleData.isActive ?? true,
      priority: ruleData.priority!,
      trigger: ruleData.trigger!,
      conditions: ruleData.conditions ?? {},
      channels: ruleData.channels ?? [],
      recipients: ruleData.recipients ?? [],
      messageTemplate: ruleData.messageTemplate!,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    setRules(prev => [...prev, newRule]);
    setIsCreateDialogOpen(false);
    toast({
      title: "–ü—Ä–∞–≤–∏–ª–æ —Å–æ–∑–¥–∞–Ω–æ",
      description: `–ü—Ä–∞–≤–∏–ª–æ "${newRule.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.`,
    });
  };

  const handleEditRule = (ruleData: Partial<NotificationRule>) => {
    if (!selectedRule) return;
    
    setRules(prev => prev.map(r => 
      r.id === selectedRule.id 
        ? { ...r, ...ruleData, updatedAt: new Date().toISOString() }
        : r
    ));
    
    setIsEditDialogOpen(false);
    setSelectedRule(null);
    toast({
      title: "–ü—Ä–∞–≤–∏–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      description: `–ü—Ä–∞–≤–∏–ª–æ "${ruleData.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.`,
    });
  };

  return (
    <MainLayout>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold text-foreground">–ü—Ä–∞–≤–∏–ª–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π</h1>
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="w-4 h-4 mr-2" />
                –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</DialogTitle>
              </DialogHeader>
              <NotificationRuleForm onSubmit={handleCreateRule} onCancel={() => setIsCreateDialogOpen(false)} />
            </DialogContent>
          </Dialog>
        </div>

        <div className="border rounded-lg">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞</TableHead>
                <TableHead>–¢—Ä–∏–≥–≥–µ—Ä</TableHead>
                <TableHead>–ö–∞–Ω–∞–ª—ã</TableHead>
                <TableHead>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏</TableHead>
                <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                <TableHead>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ</TableHead>
                <TableHead className="w-[100px]">–î–µ–π—Å—Ç–≤–∏—è</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {rules.map((rule) => (
                <TableRow key={rule.id}>
                  <TableCell>
                    <div>
                      <div className="font-medium">{rule.name}</div>
                      <div className="text-sm text-muted-foreground">{rule.description}</div>
                      <div className="mt-1">{getPriorityBadge(rule.priority)}</div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <span className="text-sm">{rule.trigger.label}</span>
                  </TableCell>
                  <TableCell>
                    {getChannelIcons(rule.channels)}
                  </TableCell>
                  <TableCell>
                    <div className="text-sm">
                      {rule.recipients.length > 0 ? (
                        <>
                          <div>{rule.recipients[0]}</div>
                          {rule.recipients.length > 1 && (
                            <div className="text-muted-foreground">+{rule.recipients.length - 1} –µ—â—ë</div>
                          )}
                        </>
                      ) : (
                        <span className="text-muted-foreground">–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π</span>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge variant={rule.isActive ? "default" : "secondary"}>
                      {rule.isActive ? "–ê–∫—Ç–∏–≤–Ω–æ" : "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      {rule.lastTriggered && (
                        <div className={`w-2 h-2 rounded-full ${
                          rule.lastTriggered.status === 'sent' ? 'bg-green-500' : 'bg-red-500'
                        }`} />
                      )}
                      <span className="text-sm">{formatLastTriggered(rule.lastTriggered)}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem
                          onClick={() => {
                            setSelectedRule(rule);
                            setIsEditDialogOpen(true);
                          }}
                        >
                          <Edit className="w-4 h-4 mr-2" />
                          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </DropdownMenuItem>
                        <DropdownMenuItem
                          onClick={() => toggleRuleStatus(rule.id)}
                        >
                          {rule.isActive ? (
                            <>
                              <Pause className="w-4 h-4 mr-2" />
                              –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                            </>
                          ) : (
                            <>
                              <Play className="w-4 h-4 mr-2" />
                              –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                            </>
                          )}
                        </DropdownMenuItem>
                        <DropdownMenuItem
                          onClick={() => duplicateRule(rule)}
                        >
                          <Copy className="w-4 h-4 mr-2" />
                          –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                        </DropdownMenuItem>
                        <DropdownMenuItem
                          onClick={() => {
                            setSelectedRule(rule);
                            setIsHistoryDialogOpen(true);
                          }}
                        >
                          <History className="w-4 h-4 mr-2" />
                          –ò—Å—Ç–æ—Ä–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
                        </DropdownMenuItem>
                        <DropdownMenuItem
                          onClick={() => deleteRule(rule.id)}
                          className="text-destructive"
                        >
                          <Trash2 className="w-4 h-4 mr-2" />
                          –£–¥–∞–ª–∏—Ç—å
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>

        {/* Edit Dialog */}
        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
          <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</DialogTitle>
            </DialogHeader>
            {selectedRule && (
              <NotificationRuleForm 
                initialData={selectedRule}
                onSubmit={handleEditRule} 
                onCancel={() => {
                  setIsEditDialogOpen(false);
                  setSelectedRule(null);
                }} 
              />
            )}
          </DialogContent>
        </Dialog>

        {/* History Dialog */}
        <Dialog open={isHistoryDialogOpen} onOpenChange={setIsHistoryDialogOpen}>
          <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>–ò—Å—Ç–æ—Ä–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {selectedRule?.name}</DialogTitle>
            </DialogHeader>
            {selectedRule && (
              <NotificationHistory 
                ruleId={selectedRule.id}
                onClose={() => {
                  setIsHistoryDialogOpen(false);
                  setSelectedRule(null);
                }} 
              />
            )}
          </DialogContent>
        </Dialog>
      </div>
    </MainLayout>
  );
}