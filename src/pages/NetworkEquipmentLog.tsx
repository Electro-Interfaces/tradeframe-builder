/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ñ—É—Ä–Ω–∞–ª –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è" –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
 * –°–æ–¥–µ—Ä–∂–∏—Ç 3 –≤–∫–ª–∞–¥–∫–∏: –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –ö–æ–º–∞–Ω–¥—ã
 */

import React, { useState, useEffect, useMemo } from 'react';
import { MainLayout } from "@/components/layout/MainLayout";
import { useSelection } from "@/context/SelectionContext";
import { EmptyState } from "@/components/ui/empty-state";
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table';
import { 
  Settings, 
  Layers3, 
  Command, 
  Search, 
  Network,
  MapPin,
  CheckCircle2,
  AlertCircle,
  XCircle,
  PowerOff,
  Archive,
  RefreshCw
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useIsMobile } from '@/hooks/use-mobile';
import { HelpButton } from "@/components/help/HelpButton";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
import { currentEquipmentAPI } from '@/services/equipment';
import { currentComponentsAPI } from '@/services/components';
import { commandsService } from '@/services/commandsService';
import { tradingPointsService } from '@/services/tradingPointsService';
import { networksService } from '@/services/networksService';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface NetworkEquipmentItem {
  id: string;
  name: string;
  type: string;
  serialNumber?: string;
  status: string;
  tradingPointId: string;
  tradingPointName: string;
  lastUpdate: string;
  componentsCount?: number;
}

interface NetworkComponentItem {
  id: string;
  name: string;
  type: string;
  equipmentId: string;
  equipmentName: string;
  tradingPointId: string;
  tradingPointName: string;
  status: string;
  lastUpdate: string;
}

interface NetworkCommandItem {
  id: string;
  name: string;
  targetType: 'equipment' | 'component';
  targetId: string;
  targetName: string;
  tradingPointId: string;
  tradingPointName: string;
  status: 'pending' | 'executing' | 'completed' | 'failed';
  createdAt: string;
  executedAt?: string;
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
const getStatusIcon = (status: string) => {
  switch (status) {
    case 'online': return <CheckCircle2 className="w-4 h-4 text-slate-400" />;
    case 'offline': return <AlertCircle className="w-4 h-4 text-slate-400" />;
    case 'error': return <XCircle className="w-4 h-4 text-slate-400" />;
    case 'disabled': return <PowerOff className="w-4 h-4 text-slate-400" />;
    case 'archived': return <Archive className="w-4 h-4 text-slate-400" />;
    case 'pending': return <AlertCircle className="w-4 h-4 text-slate-400" />;
    case 'executing': return <RefreshCw className="w-4 h-4 text-slate-400 animate-spin" />;
    case 'completed': return <CheckCircle2 className="w-4 h-4 text-slate-400" />;
    case 'failed': return <XCircle className="w-4 h-4 text-slate-400" />;
    default: return <Settings className="w-4 h-4 text-slate-400" />;
  }
};

const getStatusColor = (status: string) => {
  switch (status) {
    case 'online':
    case 'completed': return 'bg-slate-600 text-slate-200';
    case 'offline':
    case 'pending': return 'bg-slate-600 text-slate-200';
    case 'error':
    case 'failed': return 'bg-slate-700 text-slate-300';
    case 'executing': return 'bg-slate-600 text-slate-200';
    case 'disabled': return 'bg-slate-700 text-slate-300';
    case 'archived': return 'bg-slate-700 text-slate-300';
    default: return 'bg-slate-600 text-slate-200';
  }
};

const getStatusText = (status: string) => {
  switch (status) {
    case 'online': return '–û–Ω–ª–∞–π–Ω';
    case 'offline': return '–û—Ñ–ª–∞–π–Ω';
    case 'error': return '–û—à–∏–±–∫–∞';
    case 'disabled': return '–û—Ç–∫–ª—é—á–µ–Ω–æ';
    case 'archived': return '–ê—Ä—Ö–∏–≤';
    case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
    case 'executing': return '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è';
    case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
    case 'failed': return '–û—à–∏–±–∫–∞';
    default: return status;
  }
};

export default function NetworkEquipmentLog() {
  const { selectedNetwork, selectedTradingPoint } = useSelection();
  const { toast } = useToast();
  const isMobile = useIsMobile();

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîç NetworkEquipmentLog: selectedNetwork =', selectedNetwork);
  console.log('üîç NetworkEquipmentLog: selectedTradingPoint =', selectedTradingPoint);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const [equipment, setEquipment] = useState<NetworkEquipmentItem[]>([]);
  const [components, setComponents] = useState<NetworkComponentItem[]>([]);
  const [commands, setCommands] = useState<NetworkCommandItem[]>([]);
  const [tradingPoints, setTradingPoints] = useState<any[]>([]);
  const [networkInfo, setNetworkInfo] = useState<any>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–∏—Å–∫–∞
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [activeTab, setActiveTab] = useState('equipment');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏
  useEffect(() => {
    console.log('üîç UseEffect networkInfo: selectedNetwork =', selectedNetwork);
    if (selectedNetwork?.id) {
      console.log('‚úÖ Setting networkInfo');
      setNetworkInfo(selectedNetwork);
    }
  }, [selectedNetwork]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Å–µ—Ç–∏
  useEffect(() => {
    console.log('üîç UseEffect loadTradingPoints: selectedNetwork =', selectedNetwork);
    if (selectedNetwork?.id) {
      console.log('‚úÖ Calling loadTradingPoints');
      loadTradingPoints();
    }
  }, [selectedNetwork]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
  useEffect(() => {
    console.log('üîç UseEffect loadAllData: selectedNetwork?.id =', selectedNetwork?.id, 'tradingPoints.length =', tradingPoints.length);
    if (selectedNetwork?.id && tradingPoints.length > 0) {
      console.log('‚úÖ Loading ALL data');
      loadAllData();
    } else {
      console.log('‚ùå Not loading data: selectedNetwork?.id =', selectedNetwork?.id, 'tradingPoints.length =', tradingPoints.length);
    }
  }, [selectedNetwork, tradingPoints]);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –µ—ë —Å–º–µ–Ω–µ
  useEffect(() => {
    if (selectedNetwork?.id && tradingPoints.length > 0) {
      loadData();
    }
  }, [activeTab]);

  const loadTradingPoints = async () => {
    try {
      console.log('üîç LoadTradingPoints: selectedNetwork.id =', selectedNetwork?.id);
      const points = await tradingPointsService.getByNetworkId(selectedNetwork?.id!);
      console.log('üîç LoadTradingPoints: loaded points =', points);
      setTradingPoints(points);
    } catch (error) {
      console.error('Failed to load trading points:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏",
        variant: "destructive"
      });
    }
  };

  const loadAllData = async () => {
    console.log('üîç LoadAllData: loading ALL data types');
    setLoading(true);
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [equipmentData, componentData] = await Promise.all([
        loadEquipment(),
        loadComponents()
      ]);
      
      // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
      await loadCommands(equipmentData, componentData);
      
      console.log('‚úÖ All data loaded successfully');
    } catch (error) {
      console.error('Failed to load all data:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const loadData = async () => {
    console.log('üîç LoadData: activeTab =', activeTab, 'tradingPoints =', tradingPoints);
    setLoading(true);
    try {
      switch (activeTab) {
        case 'equipment':
          await loadEquipment();
          break;
        case 'components':
          await loadComponents();
          break;
        case 'commands':
          await loadCommands();
          break;
      }
    } catch (error) {
      console.error(`Failed to load ${activeTab}:`, error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const loadEquipment = async (): Promise<NetworkEquipmentItem[]> => {
    console.log('üîç LoadEquipment: starting, tradingPoints =', tradingPoints);
    const equipmentItems: NetworkEquipmentItem[] = [];
    
    for (const point of tradingPoints) {
      try {
        console.log('üîç LoadEquipment: loading for point =', point.id, point.name);
        const response = await currentEquipmentAPI.list({
          trading_point_id: point.id
        });
        console.log('üîç LoadEquipment: response for', point.id, '=', response);
        
        for (const eq of response.data) {
          equipmentItems.push({
            id: eq.id,
            name: eq.display_name || eq.name,
            type: eq.name || eq.system_type,
            serialNumber: eq.serial_number,
            status: eq.status,
            tradingPointId: point.id,
            tradingPointName: point.name,
            lastUpdate: eq.updated_at,
            componentsCount: eq.componentsCount || 0
          });
        }
      } catch (error) {
        console.warn(`Failed to load equipment for point ${point.id}:`, error);
      }
    }
    
    console.log('üîç LoadEquipment: final equipmentItems =', equipmentItems);
    setEquipment(equipmentItems);
    return equipmentItems;
  };

  const loadComponents = async (): Promise<NetworkComponentItem[]> => {
    const componentItems: NetworkComponentItem[] = [];
    
    for (const point of tradingPoints) {
      try {
        const response = await currentComponentsAPI.list({
          trading_point_id: point.id
        });
        
        for (const comp of response.data) {
          componentItems.push({
            id: comp.id,
            name: comp.name,
            type: comp.template?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø',
            equipmentId: comp.equipment_id,
            equipmentName: comp.equipment?.display_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
            tradingPointId: point.id,
            tradingPointName: point.name,
            status: comp.status,
            lastUpdate: comp.updated_at
          });
        }
      } catch (error) {
        console.warn(`Failed to load components for point ${point.id}:`, error);
      }
    }
    
    setComponents(componentItems);
    return componentItems;
  };

  const loadCommands = async (equipmentData?: NetworkEquipmentItem[], componentData?: NetworkComponentItem[]) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const equipmentToUse = equipmentData || equipment;
    const componentsToUse = componentData || components;
    
    console.log('üîç LoadCommands: starting, equipmentToUse.length =', equipmentToUse.length, 'componentsToUse.length =', componentsToUse.length);
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const mockCommands: NetworkCommandItem[] = [];
    
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    for (const point of tradingPoints) {
      const pointEquipment = equipmentToUse.filter(eq => eq.tradingPointId === point.id);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      pointEquipment.forEach((eq, eqIndex) => {
        // –ö–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        for (let dayOffset = 0; dayOffset < 30; dayOffset += Math.floor(Math.random() * 7) + 1) {
          const commandDate = new Date();
          commandDate.setDate(commandDate.getDate() - dayOffset);
          
          // –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
          let commandTypes: string[] = [];
          const commandStatuses: ('completed' | 'failed' | 'pending' | 'executing')[] = ['completed', 'completed', 'completed', 'failed', 'pending'];
          
          if (eq.type.includes('fuel_tank') || eq.name.includes('–†–µ–∑–µ—Ä–≤—É–∞—Ä')) {
            commandTypes = [
              '–ó–∞–ø—Ä–æ—Å —É—Ä–æ–≤–Ω—è —Ç–æ–ø–ª–∏–≤–∞',
              '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤',
              '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ—Ä–º–µ—Ç–∏—á–Ω–æ—Å—Ç–∏',
              '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
              '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã'
            ];
          } else if (eq.type.includes('pos') || eq.name.includes('–¢–µ—Ä–º–∏–Ω–∞–ª')) {
            commandTypes = [
              '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
              '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û',
              '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
              '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏',
              '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
            ];
          } else if (eq.type.includes('control') || eq.name.includes('–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')) {
            commandTypes = [
              '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ê–ó–°',
              '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω',
              '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥',
              '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
              '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤'
            ];
          } else {
            commandTypes = [
              '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞',
              '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
              '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫',
              '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏',
              '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏'
            ];
          }
          
          const randomCommandType = commandTypes[Math.floor(Math.random() * commandTypes.length)];
          const randomStatus = commandStatuses[Math.floor(Math.random() * commandStatuses.length)];
          
          // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥)
          let executedAt = undefined;
          if (randomStatus === 'completed' || randomStatus === 'failed') {
            const execDate = new Date(commandDate);
            execDate.setMinutes(execDate.getMinutes() + Math.floor(Math.random() * 30) + 5);
            executedAt = execDate.toISOString();
          }
          
          mockCommands.push({
            id: `cmd_${point.id}_${eq.id}_${dayOffset}_${eqIndex}`,
            name: randomCommandType,
            targetType: 'equipment',
            targetId: eq.id,
            targetName: eq.name,
            tradingPointId: point.id,
            tradingPointName: point.name,
            status: randomStatus,
            createdAt: commandDate.toISOString(),
            executedAt
          });
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const pointComponents = componentsToUse.filter(comp => comp.tradingPointId === point.id);
      pointComponents.slice(0, 2).forEach((comp, compIndex) => {
        for (let i = 0; i < 3; i++) {
          const commandDate = new Date();
          commandDate.setDate(commandDate.getDate() - Math.floor(Math.random() * 14));
          
          const componentCommands = [
            '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞',
            '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', 
            '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
            '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç',
            '–°–±—Ä–æ—Å –æ—à–∏–±–æ–∫'
          ];
          
          const randomCommand = componentCommands[Math.floor(Math.random() * componentCommands.length)];
          const randomStatus = (['completed', 'completed', 'failed', 'pending'] as const)[Math.floor(Math.random() * 4)];
          
          let executedAt = undefined;
          if (randomStatus === 'completed' || randomStatus === 'failed') {
            const execDate = new Date(commandDate);
            execDate.setMinutes(execDate.getMinutes() + Math.floor(Math.random() * 15) + 2);
            executedAt = execDate.toISOString();
          }
          
          mockCommands.push({
            id: `cmd_comp_${point.id}_${comp.id}_${i}_${compIndex}`,
            name: randomCommand,
            targetType: 'component',
            targetId: comp.id,
            targetName: comp.name,
            tradingPointId: point.id,
            tradingPointName: point.name,
            status: randomStatus,
            createdAt: commandDate.toISOString(),
            executedAt
          });
        }
      });
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    mockCommands.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
    
    console.log('üîç LoadCommands: final mockCommands.length =', mockCommands.length);
    setCommands(mockCommands);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
  const filteredEquipment = useMemo(() => 
    equipment.filter(item => 
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.tradingPointName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (item.serialNumber && item.serialNumber.toLowerCase().includes(searchTerm.toLowerCase()))
    ), [equipment, searchTerm]
  );

  const filteredComponents = useMemo(() => 
    components.filter(item => 
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.equipmentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.tradingPointName.toLowerCase().includes(searchTerm.toLowerCase())
    ), [components, searchTerm]
  );

  const filteredCommands = useMemo(() => 
    commands.filter(item => 
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.targetName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.tradingPointName.toLowerCase().includes(searchTerm.toLowerCase())
    ), [commands, searchTerm]
  );

  // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
  if (!selectedNetwork?.id) {
    return (
      <MainLayout fullWidth={true}>
        <EmptyState
          icon={Network}
          title="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å" 
          description="–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂—É—Ä–Ω–∞–ª–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ."
          className="py-16"
        />
      </MainLayout>
    );
  }

  return (
    <MainLayout fullWidth={true}>
      <div className="w-full space-y-6 report-full-width">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className="mb-6 pt-4 pl-4 md:pl-6 lg:pl-8 pr-4 md:pr-6 lg:pr-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-semibold text-white">–ñ—É—Ä–Ω–∞–ª –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h1>
              <p className="text-slate-400 mt-2">
                {networkInfo ? `${networkInfo.name} - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∫–æ–º–∞–Ω–¥ –ø–æ –≤—Å–µ–º —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º` : '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏...'}
              </p>
            </div>
            <HelpButton route="/network/equipment-log" variant="text" className="flex-shrink-0" />
          </div>
        </div>

        <div className="mx-4 md:mx-6 lg:mx-8">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            <TabsList className={`grid w-full grid-cols-3 ${isMobile ? 'h-10' : 'h-12'}`}>
            <TabsTrigger value="equipment" className={isMobile ? 'text-sm' : ''}>
              <Settings className="w-4 h-4 mr-2" />
              –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ({equipment.length})
            </TabsTrigger>
            <TabsTrigger value="components" className={isMobile ? 'text-sm' : ''}>
              <Layers3 className="w-4 h-4 mr-2" />
              –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ({components.length})
            </TabsTrigger>
            <TabsTrigger value="commands" className={isMobile ? 'text-sm' : ''}>
              <Command className="w-4 h-4 mr-2" />
              –ö–æ–º–∞–Ω–¥—ã ({commands.length})
            </TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
        
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          {/* –í–∫–ª–∞–¥–∫–∞ "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ" */}
          <TabsContent value="equipment" className="space-y-6 mx-4 md:mx-6 lg:mx-8">
            <div className="bg-slate-800 mb-6 w-full">
              <div className="px-4 md:px-6 py-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                      <Settings className="w-4 h-4 text-white" />
                    </div>
                    <div>
                      <h2 className="text-lg font-semibold text-white">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º</h2>
                      <p className="text-sm text-slate-400">–û–±—â–∏–π –æ–±–∑–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* –¢–∞–±–ª–∏—Ü–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
            <div className="bg-slate-800 border-0 border-t border-slate-600 w-full">
              <div className="px-6 py-4 border-b border-slate-700">
                <div className="flex items-center justify-between gap-4">
                  <div>
                    <h3 className="text-lg font-semibold text-white">–°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h3>
                    <p className="text-sm text-slate-400">–ù–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {filteredEquipment.length}</p>
                  </div>
                  <div className="relative flex-1 w-full max-w-sm ml-auto">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 bg-slate-700 border-slate-600 text-white"
                    />
                  </div>
                </div>
              </div>

              {loading ? (
                <div className="flex items-center justify-center py-16">
                  <RefreshCw className="w-8 h-8 animate-spin text-slate-400" />
                  <span className="ml-2 text-slate-400">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </div>
              ) : isMobile ? (
                <div className="p-6 space-y-4">
                  {filteredEquipment.map((item) => (
                    <Card key={item.id} className="bg-slate-700 border-slate-600">
                      <CardContent className="pt-4">
                        <div className="space-y-3">
                          <div className="flex justify-between items-start">
                            <div>
                              <h3 className="font-semibold text-white">{item.name}</h3>
                              <p className="text-sm text-slate-300">{item.type}</p>
                            </div>
                            {getStatusIcon(item.status)}
                          </div>
                          <div className="space-y-1">
                            <div className="flex items-center text-sm text-slate-400">
                              <MapPin className="w-4 h-4 mr-1" />
                              {item.tradingPointName}
                            </div>
                            {item.serialNumber && (
                              <p className="text-xs text-slate-400">S/N: {item.serialNumber}</p>
                            )}
                            {item.componentsCount > 0 && (
                              <div className="flex items-center text-sm text-slate-400">
                                <Layers3 className="w-4 h-4 mr-1" />
                                –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {item.componentsCount}
                              </div>
                            )}
                          </div>
                          <div className="flex items-center justify-between">
                            <Badge className={getStatusColor(item.status)}>
                              {getStatusText(item.status)}
                            </Badge>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="text-slate-300">–ù–∞–∑–≤–∞–Ω–∏–µ</TableHead>
                        <TableHead className="text-slate-300">–¢–∏–ø</TableHead>
                        <TableHead className="text-slate-300">–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä</TableHead>
                        <TableHead className="text-slate-300">–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞</TableHead>
                        <TableHead className="text-slate-300">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</TableHead>
                        <TableHead className="text-slate-300">–°—Ç–∞—Ç—É—Å</TableHead>
                        <TableHead className="text-slate-300">–û–±–Ω–æ–≤–ª–µ–Ω–æ</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredEquipment.map((item) => (
                        <TableRow key={item.id} className="border-slate-700 hover:bg-slate-700/50">
                          <TableCell className="font-medium text-white">{item.name}</TableCell>
                          <TableCell className="text-slate-300">{item.type}</TableCell>
                          <TableCell className="text-slate-400">{item.serialNumber || "‚Äî"}</TableCell>
                          <TableCell className="text-slate-300">
                            <div className="flex items-center">
                              <MapPin className="w-4 h-4 mr-1 text-slate-400" />
                              {item.tradingPointName}
                            </div>
                          </TableCell>
                          <TableCell className="text-slate-400">
                            {item.componentsCount > 0 ? (
                              <div className="flex items-center">
                                <Layers3 className="w-4 h-4 mr-1" />
                                {item.componentsCount}
                              </div>
                            ) : (
                              "‚Äî"
                            )}
                          </TableCell>
                          <TableCell>
                            <Badge className={getStatusColor(item.status)}>
                              {getStatusText(item.status)}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-sm text-slate-400">
                            {new Date(item.lastUpdate).toLocaleDateString('ru-RU')}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
            </div>
          </TabsContent>

          {/* –í–∫–ª–∞–¥–∫–∞ "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã" */}
          <TabsContent value="components" className="space-y-6 mx-4 md:mx-6 lg:mx-8">
            <div className="bg-slate-800 mb-6 w-full">
              <div className="px-4 md:px-6 py-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                      <Layers3 className="w-4 h-4 text-white" />
                    </div>
                    <div>
                      <h2 className="text-lg font-semibold text-white">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h2>
                      <p className="text-sm text-slate-400">–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ */}
            <div className="bg-slate-800 border-0 border-t border-slate-600 w-full">
              <div className="px-6 py-4 border-b border-slate-700">
                <div className="flex items-center justify-between gap-4">
                  <div>
                    <h3 className="text-lg font-semibold text-white">–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</h3>
                    <p className="text-sm text-slate-400">–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {filteredComponents.length}</p>
                  </div>
                  <div className="relative flex-1 w-full max-w-sm ml-auto">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 bg-slate-700 border-slate-600 text-white"
                    />
                  </div>
                </div>
              </div>

              {loading ? (
                <div className="flex items-center justify-center py-16">
                  <RefreshCw className="w-8 h-8 animate-spin text-slate-400" />
                  <span className="ml-2 text-slate-400">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </div>
              ) : isMobile ? (
                <div className="p-6 space-y-4">
                  {filteredComponents.map((item) => (
                    <Card key={item.id} className="bg-slate-700 border-slate-600">
                      <CardContent className="pt-4">
                        <div className="space-y-3">
                          <div className="flex justify-between items-start">
                            <div>
                              <h3 className="font-semibold text-white">{item.name}</h3>
                              <p className="text-sm text-slate-300">{item.type}</p>
                            </div>
                            {getStatusIcon(item.status)}
                          </div>
                          <div className="space-y-1">
                            <div className="flex items-center text-sm text-slate-400">
                              <Settings className="w-4 h-4 mr-1" />
                              {item.equipmentName}
                            </div>
                            <div className="flex items-center text-sm text-slate-400">
                              <MapPin className="w-4 h-4 mr-1" />
                              {item.tradingPointName}
                            </div>
                          </div>
                          <div className="flex items-center justify-between">
                            <Badge className={getStatusColor(item.status)}>
                              {getStatusText(item.status)}
                            </Badge>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="text-slate-300">–ù–∞–∑–≤–∞–Ω–∏–µ</TableHead>
                        <TableHead className="text-slate-300">–¢–∏–ø</TableHead>
                        <TableHead className="text-slate-300">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</TableHead>
                        <TableHead className="text-slate-300">–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞</TableHead>
                        <TableHead className="text-slate-300">–°—Ç–∞—Ç—É—Å</TableHead>
                        <TableHead className="text-slate-300">–û–±–Ω–æ–≤–ª–µ–Ω–æ</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredComponents.map((item) => (
                        <TableRow key={item.id} className="border-slate-700 hover:bg-slate-700/50">
                          <TableCell className="font-medium text-white">{item.name}</TableCell>
                          <TableCell className="text-slate-300">{item.type}</TableCell>
                          <TableCell className="text-slate-400">
                            <div className="flex items-center">
                              <Settings className="w-4 h-4 mr-1" />
                              {item.equipmentName}
                            </div>
                          </TableCell>
                          <TableCell className="text-slate-300">
                            <div className="flex items-center">
                              <MapPin className="w-4 h-4 mr-1 text-slate-400" />
                              {item.tradingPointName}
                            </div>
                          </TableCell>
                          <TableCell>
                            <Badge className={getStatusColor(item.status)}>
                              {getStatusText(item.status)}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-sm text-slate-400">
                            {new Date(item.lastUpdate).toLocaleDateString('ru-RU')}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
            </div>
          </TabsContent>

          {/* –í–∫–ª–∞–¥–∫–∞ "–ö–æ–º–∞–Ω–¥—ã" */}
          <TabsContent value="commands" className="space-y-6 mx-4 md:mx-6 lg:mx-8">
            <div className="bg-slate-800 mb-6 w-full">
              <div className="px-4 md:px-6 py-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                      <Command className="w-4 h-4 text-white" />
                    </div>
                    <div>
                      <h2 className="text-lg font-semibold text-white">–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
                      <p className="text-sm text-slate-400">–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ –≤—Å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥ */}
            <div className="bg-slate-800 border-0 border-t border-slate-600 w-full">
              <div className="px-6 py-4 border-b border-slate-700">
                <div className="flex items-center justify-between gap-4">
                  <div>
                    <h3 className="text-lg font-semibold text-white">–ñ—É—Ä–Ω–∞–ª –∫–æ–º–∞–Ω–¥</h3>
                    <p className="text-sm text-slate-400">–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {filteredCommands.length}</p>
                  </div>
                  <div className="relative flex-1 w-full max-w-sm ml-auto">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 bg-slate-700 border-slate-600 text-white"
                    />
                  </div>
                </div>
              </div>

              {loading ? (
                <div className="flex items-center justify-center py-16">
                  <RefreshCw className="w-8 h-8 animate-spin text-slate-400" />
                  <span className="ml-2 text-slate-400">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </div>
              ) : isMobile ? (
                <div className="p-6 space-y-4">
                  {filteredCommands.map((item) => (
                    <Card key={item.id} className="bg-slate-700 border-slate-600">
                      <CardContent className="pt-4">
                        <div className="space-y-3">
                          <div className="flex justify-between items-start">
                            <div>
                              <h3 className="font-semibold text-white">{item.name}</h3>
                              <p className="text-sm text-slate-300">
                                {item.targetType === 'equipment' ? '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' : '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç'}: {item.targetName}
                              </p>
                            </div>
                            {getStatusIcon(item.status)}
                          </div>
                          <div className="space-y-1">
                            <div className="flex items-center text-sm text-slate-400">
                              <MapPin className="w-4 h-4 mr-1" />
                              {item.tradingPointName}
                            </div>
                            <p className="text-xs text-slate-400">
                              –°–æ–∑–¥–∞–Ω–∞: {new Date(item.createdAt).toLocaleString('ru-RU')}
                            </p>
                            {item.executedAt && (
                              <p className="text-xs text-slate-400">
                                –í—ã–ø–æ–ª–Ω–µ–Ω–∞: {new Date(item.executedAt).toLocaleString('ru-RU')}
                              </p>
                            )}
                          </div>
                          <div className="flex items-center justify-between">
                            <Badge className={getStatusColor(item.status)}>
                              {getStatusText(item.status)}
                            </Badge>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="text-slate-300">–ö–æ–º–∞–Ω–¥–∞</TableHead>
                        <TableHead className="text-slate-300">–¢–∏–ø —Ü–µ–ª–∏</TableHead>
                        <TableHead className="text-slate-300">–¶–µ–ª—å</TableHead>
                        <TableHead className="text-slate-300">–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞</TableHead>
                        <TableHead className="text-slate-300">–°—Ç–∞—Ç—É—Å</TableHead>
                        <TableHead className="text-slate-300">–°–æ–∑–¥–∞–Ω–∞</TableHead>
                        <TableHead className="text-slate-300">–í—ã–ø–æ–ª–Ω–µ–Ω–∞</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredCommands.map((item) => (
                        <TableRow key={item.id} className="border-slate-700 hover:bg-slate-700/50">
                          <TableCell className="font-medium text-white">{item.name}</TableCell>
                          <TableCell className="text-slate-300">
                            <div className="flex items-center">
                              {item.targetType === 'equipment' ? (
                                <Settings className="w-4 h-4 mr-1 text-slate-400" />
                              ) : (
                                <Layers3 className="w-4 h-4 mr-1 text-slate-400" />
                              )}
                              {item.targetType === 'equipment' ? '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' : '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç'}
                            </div>
                          </TableCell>
                          <TableCell className="text-slate-400">{item.targetName}</TableCell>
                          <TableCell className="text-slate-300">
                            <div className="flex items-center">
                              <MapPin className="w-4 h-4 mr-1 text-slate-400" />
                              {item.tradingPointName}
                            </div>
                          </TableCell>
                          <TableCell>
                            <Badge className={getStatusColor(item.status)}>
                              {getStatusText(item.status)}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-sm text-slate-400">
                            {new Date(item.createdAt).toLocaleDateString('ru-RU', {
                              day: '2-digit',
                              month: '2-digit',
                              hour: '2-digit',
                              minute: '2-digit'
                            })}
                          </TableCell>
                          <TableCell className="text-sm text-slate-400">
                            {item.executedAt ? new Date(item.executedAt).toLocaleDateString('ru-RU', {
                              day: '2-digit',
                              month: '2-digit',
                              hour: '2-digit',
                              minute: '2-digit'
                            }) : '‚Äî'}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
              
              {!loading && filteredCommands.length === 0 && (
                <div className="p-6 text-center">
                  <Command className="w-12 h-12 text-slate-600 mb-3 mx-auto" />
                  <h3 className="text-lg font-semibold text-white mb-2">–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                  <p className="text-slate-400">
                    {searchTerm ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞' : '–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞'}
                  </p>
                </div>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </MainLayout>
  );
}