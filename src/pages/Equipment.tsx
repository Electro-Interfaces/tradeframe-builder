import React, { useState, useEffect, useRef } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import { useSelection } from "@/context/SelectionContext";
import { useIsMobile } from "@/hooks/use-mobile";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { stsApiService, TerminalInfo, Tank } from "@/services/stsApi";
import { MobileButton } from "@/components/ui/mobile-button";
import { MobileTable } from "@/components/ui/mobile-table";
import { HelpButton } from "@/components/help/HelpButton";
import { 
  Settings, 
  AlertCircle, 
  CheckCircle2, 
  Loader2, 
  RefreshCw,
  Thermometer,
  Gauge,
  Fuel,
  Database,
  Banknote,
  CreditCard,
  HelpCircle
} from "lucide-react";

interface TerminalEquipmentItem {
  id: string;
  name: string;
  code: string;
  location: string;
  status: 'online' | 'offline' | 'error';
  statusText: string;
  billCount?: number;
  billAmount?: number;
}

const getStatusIcon = (status: string, className: string = "w-4 h-4") => {
  switch (status) {
    case 'online':
    case 'normal':
      return <CheckCircle2 className={`${className} text-green-500`} />;
    case 'warning':
      return <AlertCircle className={`${className} text-yellow-500`} />;
    case 'offline':
    case 'error':
      return <AlertCircle className={`${className} text-red-500`} />;
    default:
      return <Settings className={`${className} text-gray-500`} />;
  }
};

const getStatusColor = (status: string) => {
  switch (status) {
    case 'online':
    case 'normal':
      return 'text-green-500';
    case 'warning':
      return 'text-yellow-500';
    case 'offline':
    case 'error':
      return 'text-red-500';
    default:
      return 'text-gray-500';
  }
};

const getFillLevelColor = (level: number) => {
  if (level <= 10) return 'bg-red-500';
  if (level <= 30) return 'bg-yellow-500';
  return 'bg-green-500';
};

export default function Equipment() {
  const { selectedNetwork, selectedTradingPoint } = useSelection();
  const { toast } = useToast();
  const isMobile = useIsMobile();
  const [loading, setLoading] = useState(false);
  const [terminalEquipment, setTerminalEquipment] = useState<TerminalEquipmentItem[]>([]);
  const [tanks, setTanks] = useState<Tank[]>([]);
  const [terminalInfo, setTerminalInfo] = useState<TerminalInfo | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è pull-to-refresh
  const [pullState, setPullState] = useState<'idle' | 'pulling' | 'canRefresh' | 'refreshing'>('idle');
  const [pullDistance, setPullDistance] = useState(0);
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const startTouchRef = useRef<{ y: number; time: number } | null>(null);
  const rafId = useRef<number | null>(null);

  const PULL_THRESHOLD = 80; // –ü–æ—Ä–æ–≥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const MAX_PULL_DISTANCE = 120; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
  const INDICATOR_APPEAR_THRESHOLD = 30; // –ü–æ—Ä–æ–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...');
    
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É STS API
    ensureSTSApiConfigured();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    if (selectedTradingPoint && selectedTradingPoint !== 'all' && selectedNetwork?.external_id) {
      console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', selectedTradingPoint);
      loadEquipmentData();
    }
  }, [selectedTradingPoint, selectedNetwork]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ STS API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const ensureSTSApiConfigured = () => {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º STS API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
    
    const correctConfig = {
      url: 'https://pos.autooplata.ru/tms',
      username: 'UserApi',
      password: 'lHQfLZHzB3tn',
      enabled: true,
      timeout: 30000,
      retryAttempts: 3,
      refreshInterval: 20 * 60 * 1000 // 20 –º–∏–Ω—É—Ç
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const currentConfig = localStorage.getItem('sts-api-config');
    let needsUpdate = false;
    
    if (currentConfig) {
      try {
        const parsed = JSON.parse(currentConfig);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if (parsed.url !== correctConfig.url || 
            parsed.username !== correctConfig.username || 
            parsed.password !== correctConfig.password ||
            !parsed.enabled) {
          needsUpdate = true;
        }
      } catch {
        needsUpdate = true;
      }
    } else {
      needsUpdate = true;
    }
    
    if (needsUpdate) {
      console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é STS API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');
      localStorage.setItem('sts-api-config', JSON.stringify(correctConfig));
    }
    
    return correctConfig;
  };

  const loadEquipmentData = async () => {
    if (!selectedTradingPoint || !selectedNetwork?.external_id) return;
    
    setLoading(true);
    try {
      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É STS API
      ensureSTSApiConfigured();
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
      const contextParams = {
        networkId: selectedNetwork.external_id,
        tradingPointId: selectedTradingPoint
      };

      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ STS API...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (stsApiService —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)
      const [terminalInfoData, tanksData] = await Promise.all([
        stsApiService.getTerminalInfo(contextParams),
        stsApiService.getTanks(contextParams)
      ]);

      setTerminalInfo(terminalInfoData);
      setTanks(tanksData);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const equipmentItems = mapTerminalInfoToEquipment(terminalInfoData);
      setTerminalEquipment(equipmentItems);

      // –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.",
        variant: "destructive"
      });
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      setTerminalEquipment(getMockTerminalEquipment());
      setTanks(getMockTanks());
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    await loadEquipmentData();
  };

  // Pull-to-refresh —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
  const handleRefreshData = async () => {
    if (selectedTradingPoint) {
      console.log('üîÑ Pull-to-refresh: –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...');
      await loadEquipmentData();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–∏ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
  const triggerHapticFeedback = () => {
    if ('vibrate' in navigator && isMobile) {
      navigator.vibrate(50);
    }
  };

  // –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å throttling —á–µ—Ä–µ–∑ RAF
  const updatePullDistance = (distance: number) => {
    if (rafId.current) {
      cancelAnimationFrame(rafId.current);
    }

    rafId.current = requestAnimationFrame(() => {
      const clampedDistance = Math.min(distance, MAX_PULL_DISTANCE);
      setPullDistance(clampedDistance);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
      if (clampedDistance >= PULL_THRESHOLD && pullState !== 'canRefresh' && pullState !== 'refreshing') {
        setPullState('canRefresh');
        triggerHapticFeedback();
      } else if (clampedDistance < PULL_THRESHOLD && pullState === 'canRefresh') {
        setPullState('pulling');
      }
    });
  };

  const handleTouchStart = (e: React.TouchEvent) => {
    if (!isMobile || pullState === 'refreshing') return;

    const container = scrollContainerRef.current;
    if (!container || container.scrollTop > 0) return;

    startTouchRef.current = {
      y: e.touches[0].clientY,
      time: Date.now()
    };
    setPullState('pulling');
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (!isMobile || !startTouchRef.current || pullState === 'refreshing') return;

    const container = scrollContainerRef.current;
    if (!container) return;

    const currentY = e.touches[0].clientY;
    const deltaY = currentY - startTouchRef.current.y;

    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑ –∏ –º—ã –≤ –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (deltaY > 0 && container.scrollTop === 0) {
      e.preventDefault();

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å (—á–µ–º –±–æ–ª—å—à–µ —Ç—è–Ω–µ–º, —Ç–µ–º –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
      const elasticity = Math.max(0.5, 1 - (deltaY / MAX_PULL_DISTANCE) * 0.5);
      const adjustedDistance = deltaY * elasticity;

      updatePullDistance(adjustedDistance);
    } else if (deltaY <= 0 || container.scrollTop > 0) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –∏–ª–∏ –Ω–∞—á–∞–ª—Å—è —Å–∫—Ä–æ–ª–ª
      resetPull();
    }
  };

  const handleTouchEnd = async () => {
    if (!isMobile || !startTouchRef.current) return;

    const shouldRefresh = pullState === 'canRefresh';

    if (shouldRefresh) {
      setPullState('refreshing');
      triggerHapticFeedback();

      try {
        await handleRefreshData();
      } finally {
        setTimeout(() => {
          resetPull();
        }, 300);
      }
    } else {
      resetPull();
    }
  };

  const resetPull = () => {
    setPullState('idle');
    setPullDistance(0);
    startTouchRef.current = null;
    if (rafId.current) {
      cancelAnimationFrame(rafId.current);
      rafId.current = null;
    }
  };

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (rafId.current) {
        cancelAnimationFrame(rafId.current);
      }
    };
  }, []);

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ TerminalInfo –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const mapTerminalInfoToEquipment = (info: TerminalInfo): TerminalEquipmentItem[] => {
    const equipment: TerminalEquipmentItem[] = [];

    // –ê–ó–° (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª)
    equipment.push({
      id: 'azs',
      name: '–ê–ó–°',
      code: info.terminal.name || '–ê–ó–°',
      location: '',
      status: info.terminal.status,
      statusText: info.terminal.status === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'
    });

    // POS —Ç–µ—Ä–º–∏–Ω–∞–ª
    equipment.push({
      id: 'pos',
      name: 'POS',
      code: info.pos.version || 'POS 1',
      location: '',
      status: info.pos.status,
      statusText: info.pos.status === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'
    });

    // QR (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã)
    equipment.push({
      id: 'qr',
      name: 'QR',
      code: '–ì–æ—Ç–æ–≤',
      location: info.shift ? `–°–º–µ–Ω–∞ ‚Ññ${info.shift.number}` : '',
      status: info.shift?.state === '–û—Ç–∫—Ä—ã—Ç–∞—è' ? 'online' : 'offline',
      statusText: '–ì–æ—Ç–æ–≤'
    });

    // –ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫—É–ø—é—Ä–∞—Ö
    if (info.devices?.billAcceptor) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ STS API —Å–µ—Ä–≤–∏—Å–∞
      const deviceStatus = info.devices.billAcceptor.status; // 'online' –∏–ª–∏ 'error'
      const isOnline = deviceStatus === 'online';
      
      console.log('üéØ –°—Ç–∞—Ç—É—Å –∫—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π):', {
        status: deviceStatus,
        isOnline: isOnline,
        billCount: info.devices.billAcceptor.billCount,
        billAmount: info.devices.billAcceptor.billAmount,
        name: info.devices.billAcceptor.name
      });
      
      equipment.push({
        id: 'bill-acceptor',
        name: '–ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫',
        code: `ID: ${info.devices.billAcceptor.name}`,
        location: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${info.devices.billAcceptor.name}`,
        status: deviceStatus, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        statusText: isOnline ? '–ì–æ—Ç–æ–≤' : '–û—à–∏–±–∫–∞',
        billCount: info.devices.billAcceptor.billCount,
        billAmount: info.devices.billAcceptor.billAmount
      });
    }

    // –ö–∞—Ä—Ç—Ä–∏–¥–µ—Ä
    if (info.devices?.cardReader) {
      equipment.push({
        id: 'card-reader',
        name: '–ö–∞—Ä—Ç—Ä–∏–¥–µ—Ä',
        code: info.devices.cardReader.status === 'online' ? '–ì–æ—Ç–æ–≤' : '–û—à–∏–±–∫–∞',
        location: `ID: ${info.devices.cardReader.name}`,
        status: info.devices.cardReader.status,
        statusText: info.devices.cardReader.status === 'online' ? '–ì–æ—Ç–æ–≤' : '–û—à–∏–±–∫–∞'
      });
    }

    // –ú–ü–°-—Ä–∏–¥–µ—Ä
    if (info.devices?.mpsReader) {
      equipment.push({
        id: 'mps-reader',
        name: '–ú–ü–°-—Ä–∏–¥–µ—Ä',
        code: info.devices.mpsReader.status === 'online' ? '–ì–æ—Ç–æ–≤' : '–û—à–∏–±–∫–∞',
        location: `ID: ${info.devices.mpsReader.name}`,
        status: info.devices.mpsReader.status,
        statusText: info.devices.mpsReader.status === 'online' ? '–ì–æ—Ç–æ–≤' : '–û—à–∏–±–∫–∞'
      });
    }

    return equipment;
  };

  // Fallback mock –¥–∞–Ω–Ω—ã–µ
  const getMockTerminalEquipment = (): TerminalEquipmentItem[] => [
    { id: 'azs-1', name: '–ê–ó–°', code: '–ê–ó–ö 4', location: '–¢–ö –¢-4', status: 'offline', statusText: '–û—Ñ–ª–∞–π–Ω' },
    { id: 'pos-1', name: 'POS', code: 'POS 1', location: '', status: 'online', statusText: '–û–Ω–ª–∞–π–Ω' },
    { id: 'qr-1', name: 'QR', code: '–ì–æ—Ç–æ–≤', location: '–°–º–µ–Ω–∞ ‚Ññ13', status: 'online', statusText: '–ì–æ—Ç–æ–≤' },
    { id: 'inspector-1', name: '–ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫', code: 'ID: 10', location: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 10', status: 'online', statusText: '–ì–æ—Ç–æ–≤', billCount: 341, billAmount: 153450 },
    { id: 'card-reader-1', name: '–ö–∞—Ä—Ç—Ä–∏–¥–µ—Ä', code: '–ì–æ—Ç–æ–≤', location: 'ID: 11', status: 'online', statusText: '–ì–æ—Ç–æ–≤' },
    { id: 'mps-river-1', name: '–ú–ü–°-—Ä–∏–≤–µ—Ä', code: '–ì–æ—Ç–æ–≤', location: 'ID: 15', status: 'online', statusText: '–ì–æ—Ç–æ–≤' }
  ];

  const getMockTanks = (): Tank[] => [
    {
      id: 1, name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ1', fuelType: '–î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ',
      currentLevelLiters: 7595.83, capacityLiters: 10129.88, minLevelPercent: 20, criticalLevelPercent: 10,
      temperature: 19.0, waterLevelMm: 0, sensors: [], lastCalibration: '', linkedPumps: [],
      notifications: { enabled: true, drainAlerts: true, levelAlerts: true },
      thresholds: { criticalTemp: { min: -10, max: 40 }, maxWaterLevel: 10, notifications: { critical: true, minimum: true, temperature: true, water: true } }
    },
    {
      id: 2, name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ2', fuelType: '–ê–ò-95',
      currentLevelLiters: 4287.96, capacityLiters: 10303.61, minLevelPercent: 20, criticalLevelPercent: 10,
      temperature: 18.6, waterLevelMm: 0.58, sensors: [], lastCalibration: '', linkedPumps: [],
      notifications: { enabled: true, drainAlerts: true, levelAlerts: true },
      thresholds: { criticalTemp: { min: -10, max: 40 }, maxWaterLevel: 10, notifications: { critical: true, minimum: true, temperature: true, water: true } }
    },
    {
      id: 3, name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ3', fuelType: '–ê–ò-92',
      currentLevelLiters: 6266.36, capacityLiters: 10489.90, minLevelPercent: 20, criticalLevelPercent: 10,
      temperature: 19.0, waterLevelMm: 0, sensors: [], lastCalibration: '', linkedPumps: [],
      notifications: { enabled: true, drainAlerts: true, levelAlerts: true },
      thresholds: { criticalTemp: { min: -10, max: 40 }, maxWaterLevel: 10, notifications: { critical: true, minimum: true, temperature: true, water: true } }
    }
  ];

  if (!selectedTradingPoint) {
    return (
      <MainLayout fullWidth={true}>
        <div className="w-full space-y-6 px-4 md:px-6 lg:px-8">
          <div className="mb-6 pt-4">
            <h1 className="text-2xl font-semibold text-white">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h1>
            <p className="text-slate-400 mt-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</p>
          </div>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout fullWidth={true}>
      <div
        ref={scrollContainerRef}
        className={`w-full space-y-6 px-4 md:px-6 lg:px-8 relative overflow-hidden ${isMobile ? 'pt-4' : ''}`}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
        style={{
          transform: isMobile && pullState !== 'idle' ? `translateY(${pullDistance * 0.5}px)` : 'translateY(0)',
          transition: pullState === 'idle' ? 'transform 0.3s ease-out' : 'none'
        }}
      >
        {/* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π pull-to-refresh –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
        {isMobile && pullState !== 'idle' && pullDistance >= INDICATOR_APPEAR_THRESHOLD && (
          <div
            className="absolute top-0 left-0 right-0 flex justify-center items-center z-50"
            style={{
              transform: `translateY(-${Math.max(0, 80 - pullDistance)}px)`,
              opacity: Math.min(1, (pullDistance - INDICATOR_APPEAR_THRESHOLD) / 40)
            }}
          >
            <div className="bg-white/95 backdrop-blur-sm text-slate-700 px-4 py-2 rounded-full shadow-lg border border-slate-200/50 flex items-center gap-2">
              {pullState === 'refreshing' ? (
                <>
                  <RefreshCw className="w-4 h-4 text-blue-600 animate-spin" />
                  <span className="text-sm font-medium">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</span>
                </>
              ) : pullState === 'canRefresh' ? (
                <>
                  <RefreshCw className="w-4 h-4 text-green-600" />
                  <span className="text-sm font-medium">–û—Ç–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</span>
                </>
              ) : (
                <>
                  <RefreshCw
                    className="w-4 h-4 text-slate-500"
                    style={{
                      transform: `rotate(${pullDistance * 2}deg)`
                    }}
                  />
                  <span className="text-sm font-medium">–ü–æ—Ç—è–Ω–∏—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</span>
                </>
              )}
            </div>
          </div>
        )}
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <Card className={`bg-gradient-to-br from-slate-800 to-slate-850 border border-slate-600/50 rounded-xl shadow-2xl backdrop-blur-sm ${isMobile ? 'mx-0' : ''} overflow-hidden`}>
          <CardHeader className={`${isMobile ? 'px-4 py-4' : 'px-8 py-6'} bg-gradient-to-r from-slate-800/90 via-slate-750/90 to-slate-800/90 border-b border-slate-600/30`}>
            <CardTitle className={`text-slate-100 flex ${isMobile ? 'flex-col gap-3' : 'items-center justify-between'}`}>
              <div className="flex items-center justify-between flex-1">
                <div className="flex items-center gap-3">
                  <div className="w-1.5 h-10 bg-gradient-to-b from-blue-400 to-blue-600 rounded-full shadow-lg"></div>
                  <div className="flex flex-col">
                    <span className={`${isMobile ? 'text-xl font-bold' : 'text-3xl font-bold'} text-white leading-tight`}>–°–∏—Å—Ç–µ–º—ã</span>
                    {!isMobile && (
                      <span className="text-slate-400 text-sm font-medium">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏</span>
                    )}
                  </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ */}
                <div className="flex items-center gap-2">
                  <Button
                    onClick={() => window.open('/help/equipment.html', '_blank')}
                    variant="outline"
                    size="sm"
                    className="bg-slate-700/50 border-slate-600/50 text-slate-300 hover:text-white hover:bg-slate-600/80 hover:border-slate-500 shadow-lg transition-all duration-300 px-3 py-2 rounded-lg"
                    title="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
                  >
                    <HelpCircle className="w-4 h-4" />
                  </Button>
                </div>
              </div>

              <div className={`flex ${isMobile ? 'gap-2 self-start flex-wrap' : 'gap-4'} items-center`}>

                {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö */}
                {!isMobile && (
                  <Button
                    onClick={handleRefresh}
                    disabled={loading}
                    size="sm"
                    className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-300 px-5 py-2.5 rounded-lg font-medium disabled:opacity-50"
                  >
                    <div className="w-4 h-4 mr-2 flex items-center justify-center">
                      {loading ? (
                        <Loader2 className="w-4 h-4 animate-spin" />
                      ) : (
                        <RefreshCw className="w-4 h-4" />
                      )}
                    </div>
                    {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å STS –¥–∞–Ω–Ω—ã–µ'}
                  </Button>
                )}
              </div>
            </CardTitle>
          </CardHeader>
        </Card>

        <div>
          <div className="space-y-6">
          {/* –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ */}
          <Card className="bg-slate-800 border border-slate-700 rounded-lg shadow-lg">
            <CardHeader className={`${isMobile ? 'px-3 py-2' : 'px-6 py-2'}`}>
              <CardTitle className={`text-slate-200 flex items-center gap-2 ${isMobile ? 'text-sm' : 'text-xl'}`}>
                <Settings className={`${isMobile ? 'w-5 h-5' : 'w-6 h-6'} text-blue-400`} />
                –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
              </CardTitle>
            </CardHeader>
          <CardContent>
            {/* –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: –∫—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫ –æ—Ç–¥–µ–ª—å–Ω–æ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ —Å–µ—Ç–∫–µ */}
            {(() => {
              const billAcceptor = terminalEquipment.find(eq => eq.name === '–ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫');
              const otherEquipment = terminalEquipment.filter(eq => eq.name !== '–ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫');
              
              return (
                <div className="space-y-6">
                  {/* –ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –±–æ–ª—å—à–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
                  {billAcceptor && (
                    <div className={`bg-slate-700 rounded-lg ${isMobile ? "p-4" : "p-6"} border border-slate-600 hover:border-slate-500 transition-colors`}>
                      <div className={`flex ${isMobile ? "flex-col gap-4" : "items-center justify-between"}`}>
                        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ ID */}
                        <div className="flex items-center gap-3">
                          <Banknote className={`${isMobile ? "w-5 h-5" : "w-6 h-6"} text-green-400`} />
                          <div>
                            <h3 className={`${isMobile ? "text-base" : "text-lg"} font-semibold text-white`}>{billAcceptor.name}</h3>
                            <p className={`${isMobile ? "text-xs" : "text-sm"} text-slate-400`}>{billAcceptor.location}</p>
                          </div>
                        </div>
                        
                        {/* –î–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç—É—Å */}
                        <div className={`flex items-center ${isMobile ? "justify-between" : "gap-8"}`}>
                          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø—é—Ä */}
                          <div className="text-center">
                            <div className={`${isMobile ? "text-xl" : "text-3xl"} font-bold text-green-400`}>
                              {billAcceptor.billCount || 0}
                            </div>
                            <div className={`${isMobile ? "text-xs" : "text-sm"} text-slate-300`}>–∫—É–ø—é—Ä</div>
                          </div>
                          
                          {/* –°—É–º–º–∞ */}
                          <div className="text-center">
                            <div className={`${isMobile ? "text-xl" : "text-3xl"} font-bold text-blue-400`}>
                              {(billAcceptor.billAmount || 0).toLocaleString()}
                            </div>
                            <div className={`${isMobile ? "text-xs" : "text-sm"} text-slate-300`}>‚ÇΩ</div>
                          </div>
                          
                          {/* –°—Ç–∞—Ç—É—Å */}
                          <div className="flex flex-col items-center gap-2">
                            {getStatusIcon(billAcceptor.status, isMobile ? "w-4 h-4" : "w-5 h-5")}
                            <Badge 
                              className={`${
                                billAcceptor.status === 'online' 
                                  ? `bg-green-600 text-white hover:bg-green-700 ${isMobile ? "text-xs px-2 py-1" : "text-base px-3 py-1"} font-semibold` 
                                  : `bg-red-600 text-white hover:bg-red-700 ${isMobile ? "text-xs px-2 py-1" : "text-base px-3 py-1"} font-semibold`
                              }`}
                            >
                              {billAcceptor.statusText}
                            </Badge>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* –û—Å—Ç–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ —Å–µ—Ç–∫–µ */}
                  <div className={`grid gap-4 ${isMobile ? 'grid-cols-2' : 'grid-cols-2 md:grid-cols-3 lg:grid-cols-5'}`}>
                    {otherEquipment.map((equipment) => (
                      <div
                        key={equipment.id}
                        className={`bg-slate-700 rounded-lg ${isMobile ? "p-3" : "p-4"} border border-slate-600 hover:border-slate-500 transition-colors cursor-pointer`}
                      >
                        <div className="flex items-center justify-between mb-2">
                          <span className={`${isMobile ? "text-xs" : "text-sm"} font-medium text-white`}>{equipment.name}</span>
                          {getStatusIcon(equipment.status, isMobile ? "w-3 h-3" : "w-4 h-4")}
                        </div>
                        
                        <div className="space-y-1">
                          <div className={`${isMobile ? "text-xs" : "text-xs"} text-slate-300`}>{equipment.code}</div>
                          {equipment.location && (
                            <div className={`${isMobile ? "text-xs" : "text-xs"} text-slate-400 truncate`}>{equipment.location}</div>
                          )}
                        </div>
                        
                        <div className={`${isMobile ? "mt-2" : "mt-3"}`}>
                          <Badge 
                            className={`${isMobile ? "text-xs px-1.5 py-0.5" : "text-xs px-2 py-1"} font-semibold ${
                              equipment.status === 'online' && equipment.statusText === '–ì–æ—Ç–æ–≤'
                                ? 'bg-green-600 text-white hover:bg-green-700'
                                : equipment.status === 'online'
                                ? 'bg-blue-600 text-white hover:bg-blue-700' 
                                : 'bg-red-600 text-white hover:bg-red-700'
                            }`}
                          >
                            {equipment.statusText}
                          </Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })()}
          </CardContent>
        </Card>

          {/* –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã */}
          <Card className="bg-slate-800 border border-slate-700 rounded-lg shadow-lg">
            <CardHeader className={`${isMobile ? 'px-3 py-2' : 'px-6 py-2'}`}>
              <CardTitle className={`text-slate-200 flex items-center gap-2 ${isMobile ? 'text-sm' : 'text-xl'}`}>
                <Database className={`${isMobile ? 'w-5 h-5' : 'w-6 h-6'} text-green-400`} />
                –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã
              </CardTitle>
            </CardHeader>
          <CardContent>
            {/* Desktop Table */}
            <div className="hidden md:block">
              <MobileTable showScrollHint={true}>
                <table className="w-full text-sm min-w-[600px]">
                  <thead className="text-left border-b border-slate-600">
                    <tr>
                      <th className="pb-3 text-slate-300 font-medium">–†–µ–∑–µ—Ä–≤—É–∞—Ä</th>
                      <th className="pb-3 text-slate-300 font-medium">–¢–æ–ø–ª–∏–≤–æ</th>
                      <th className="pb-3 text-slate-300 font-medium">–û–±—ä–µ–º –µ–º–∫–æ—Å—Ç–∏</th>
                      <th className="pb-3 text-slate-300 font-medium">–£—Ä–æ–≤–µ–Ω—å</th>
                      <th className="pb-3 text-slate-300 font-medium">–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</th>
                      <th className="pb-3 text-slate-300 font-medium">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</th>
                      <th className="pb-3 text-slate-300 font-medium">–í–æ–¥–∞</th>
                      <th className="pb-3 text-slate-300 font-medium">–î–∞—Ç—á–∏–∫–∏</th>
                      <th className="pb-3 text-slate-300 font-medium">–°—Ç–∞—Ç—É—Å</th>
                    </tr>
                  </thead>
                  <tbody>
                    {tanks.map((tank) => {
                      const fillLevel = tank.capacityLiters > 0 ? (tank.currentLevelLiters / tank.capacityLiters) * 100 : 0;
                      const tankStatus = fillLevel < tank.criticalLevelPercent ? 'critical' : fillLevel < tank.minLevelPercent ? 'warning' : 'normal';
                      
                      return (
                        <tr key={tank.id} className="border-b border-slate-700 hover:bg-slate-700/30">
                          <td className="py-4">
                            <div className="flex items-center gap-2">
                              <Database className="w-4 h-4 text-green-500" />
                              <span className="text-white font-medium">{tank.name}</span>
                            </div>
                          </td>
                          <td className="py-4 text-slate-300">{tank.fuelType}</td>
                          <td className="py-4 text-slate-300">{tank.capacityLiters.toLocaleString()} –ª</td>
                          <td className="py-4 text-slate-300">{tank.currentLevelLiters.toLocaleString()} –ª</td>
                          <td className="py-4">
                            <div className="flex items-center gap-3">
                              <div className="flex-1 bg-slate-600 rounded-full h-2 min-w-[60px]">
                                <div
                                  className={`h-2 rounded-full ${getFillLevelColor(fillLevel)}`}
                                  style={{ width: `${Math.max(fillLevel, 2)}%` }}
                                />
                              </div>
                              <span className="text-sm text-slate-300 min-w-[35px]">{Math.round(fillLevel)}%</span>
                            </div>
                          </td>
                          <td className="py-4 text-slate-300">
                            <div className="flex items-center gap-1">
                              <Thermometer className="w-4 h-4 text-blue-400" />
                              {tank.temperature}¬∞C
                            </div>
                          </td>
                          <td className="py-4 text-slate-300">{tank.waterLevelMm} –º–º</td>
                          <td className="py-4">
                            <div className="flex items-center gap-2">
                              <div className="flex items-center gap-1">
                                <div className="w-2 h-2 bg-blue-400 rounded-full" />
                                <span className="text-xs text-slate-400">–£—Ä–æ–≤–µ–Ω—å</span>
                              </div>
                              <div className="flex items-center gap-1">
                                <div className="w-2 h-2 bg-red-400 rounded-full" />
                                <span className="text-xs text-slate-400">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</span>
                              </div>
                              {tank.waterLevelMm > 0 && (
                                <div className="flex items-center gap-1">
                                  <div className="w-2 h-2 bg-green-400 rounded-full" />
                                  <span className="text-xs text-slate-400">–ü–æ–¥—Ç–æ–≤–∞—Ä–Ω–∞—è –≤–æ–¥–∞</span>
                                </div>
                              )}
                            </div>
                          </td>
                          <td className="py-4">
                            <Badge 
                              variant={tankStatus === 'normal' ? 'default' : 'secondary'}
                              className={`${
                                tankStatus === 'normal' 
                                  ? 'bg-blue-600 text-white hover:bg-blue-700' 
                                  : tankStatus === 'warning'
                                  ? 'bg-yellow-600 text-white hover:bg-yellow-700'
                                  : 'bg-red-600 text-white hover:bg-red-700'
                              }`}
                            >
                              {tankStatus === 'normal' ? '–ù–æ—Ä–º–∞' : tankStatus === 'warning' ? '–ú–∞–ª–æ' : '–ö—Ä–∏—Ç–∏—á–Ω–æ'}
                            </Badge>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </MobileTable>
            </div>

            {/* Mobile Cards */}
            <div className="md:hidden space-y-4">
              {tanks.map((tank) => {
                const fillLevel = tank.capacityLiters > 0 ? (tank.currentLevelLiters / tank.capacityLiters) * 100 : 0;
                const tankStatus = fillLevel < tank.criticalLevelPercent ? 'critical' : fillLevel < tank.minLevelPercent ? 'warning' : 'normal';
                
                return (
                  <div key={tank.id} className="bg-slate-700/50 rounded-lg p-3 border border-slate-600">
                    {/* Tank Header */}
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <Database className="w-4 h-4 text-green-500" />
                        <span className="text-white font-medium text-base">{tank.name}</span>
                      </div>
                      <Badge 
                        variant={tankStatus === 'normal' ? 'default' : 'secondary'}
                        className={`text-xs px-2 py-1 ${
                          tankStatus === 'normal' 
                            ? 'bg-blue-600 text-white hover:bg-blue-700' 
                            : tankStatus === 'warning'
                            ? 'bg-yellow-600 text-white hover:bg-yellow-700'
                            : 'bg-red-600 text-white hover:bg-red-700'
                        }`}
                      >
                        {tankStatus === 'normal' ? '–ù–æ—Ä–º–∞' : tankStatus === 'warning' ? '–ú–∞–ª–æ' : '–ö—Ä–∏—Ç–∏—á–Ω–æ'}
                      </Badge>
                    </div>

                    {/* Fuel Type */}
                    <div className="flex items-center gap-2 mb-2">
                      <Fuel className="w-3 h-3 text-blue-400" />
                      <span className="text-slate-300 font-medium text-sm">{tank.fuelType}</span>
                    </div>

                    {/* Fill Level Progress */}
                    <div className="mb-3">
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-xs text-slate-400">–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</span>
                        <span className="text-xs text-white font-medium">{Math.round(fillLevel)}%</span>
                      </div>
                      <div className="w-full bg-slate-600 rounded-full h-2">
                        <div 
                          className={`h-2 rounded-full transition-all ${getFillLevelColor(fillLevel)}`}
                          style={{ width: `${Math.max(fillLevel, 2)}%` }}
                        />
                      </div>
                      <div className="flex justify-between text-xs text-slate-400 mt-1">
                        <span>{tank.currentLevelLiters.toLocaleString()} –ª</span>
                        <span>{tank.capacityLiters.toLocaleString()} –ª</span>
                      </div>
                    </div>

                    {/* Temperature and Water */}
                    <div className="grid grid-cols-2 gap-3 mb-2">
                      <div className="flex items-center gap-2">
                        <Thermometer className="w-3 h-3 text-blue-400" />
                        <div>
                          <div className="text-xs text-slate-400">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</div>
                          <div className="text-xs text-white font-medium">{tank.temperature}¬∞C</div>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 bg-blue-400 rounded-full" />
                        <div>
                          <div className="text-xs text-slate-400">–í–æ–¥–∞</div>
                          <div className="text-xs text-white font-medium">{tank.waterLevelMm} –º–º</div>
                        </div>
                      </div>
                    </div>

                    {/* Sensors */}
                    <div>
                      <div className="text-xs text-slate-400 mb-2">–î–∞—Ç—á–∏–∫–∏</div>
                      <div className="flex flex-wrap gap-2">
                        <div className="flex items-center gap-1 bg-slate-600/50 rounded px-2 py-1">
                          <div className="w-2 h-2 bg-blue-400 rounded-full" />
                          <span className="text-xs text-slate-300">–£—Ä–æ–≤–µ–Ω—å</span>
                        </div>
                        <div className="flex items-center gap-1 bg-slate-600/50 rounded px-2 py-1">
                          <div className="w-2 h-2 bg-red-400 rounded-full" />
                          <span className="text-xs text-slate-300">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</span>
                        </div>
                        {tank.waterLevelMm > 0 && (
                          <div className="flex items-center gap-1 bg-slate-600/50 rounded px-2 py-1">
                            <div className="w-2 h-2 bg-green-400 rounded-full" />
                            <span className="text-xs text-slate-300">–ü–æ–¥—Ç–æ–≤–∞—Ä–Ω–∞—è –≤–æ–¥–∞</span>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
          </div>
        </div>
      </div>
    </MainLayout>
  );
}