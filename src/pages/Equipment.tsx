import { useState, useEffect, useMemo, useCallback } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import { EmptyState } from "@/components/ui/empty-state";
import { useSelection } from "@/context/SelectionContext";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { useIsMobile } from "@/hooks/use-mobile";
import { 
  Plus, 
  Edit, 
  Settings, 
  AlertCircle, 
  CheckCircle2, 
  XCircle, 
  PowerOff, 
  Archive, 
  Loader2, 
  MapPin,
  ChevronDown,
  ChevronRight,
  Power,
  Trash2,
  Layers3,
  Scan
} from "lucide-react";
import { cn } from "@/lib/utils";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
import { EquipmentWizard } from "@/components/equipment/EquipmentWizard";
import { HelpButton } from "@/components/help/HelpButton";
import { EquipmentDetailCard } from "@/components/equipment/EquipmentDetailCard";
import { EquipmentComponentsList } from "@/components/equipment/EquipmentComponentsList";
import { EquipmentCommandsPanel } from "@/components/equipment/EquipmentCommandsPanel";
import { EquipmentCommandsEditor } from "@/components/equipment/EquipmentCommandsEditor";

// –¢–∏–ø—ã –∏ API
import { 
  Equipment, 
  EquipmentTemplate,
  CreateEquipmentRequest, 
  UpdateEquipmentRequest,
  EquipmentStatusAction,
  EquipmentStatus,
  EquipmentEvent
} from "@/types/equipment";
import {
  getEquipmentComponentsHealth,
  ComponentHealthStatus
} from "@/services/equipment";
import { Component } from "@/types/component";

// –ù–û–í–´–ï –ö–õ–ò–ï–ù–¢–´ - –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å Supabase –∏ –≤–Ω–µ—à–Ω–∏–º–∏ API
import { httpClient } from "@/services/universalHttpClient";
import { createSupabaseClient } from "@/services/supabaseClient";

// –ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
import { 
  supabaseEquipmentAPI, 
  supabaseEquipmentTemplatesAPI 
} from "@/services/equipmentSupabase";

// –°–µ—Ä–≤–∏—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
import { tanksService } from "@/services/tanksServiceSupabase";
import { tanksApiIntegrationService } from "@/services/tanksApiIntegrationService";
import { tanksUnifiedService } from "@/services/tanksUnifiedService";
import ComponentHealthIndicator from "@/components/ui/ComponentHealthIndicator";

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
const getStatusIcon = (status: EquipmentStatus) => {
  switch (status) {
    case 'online': return <CheckCircle2 className="w-4 h-4 text-green-600" />;
    case 'offline': return <AlertCircle className="w-4 h-4 text-yellow-600" />;
    case 'error': return <XCircle className="w-4 h-4 text-red-600" />;
    case 'disabled': return <PowerOff className="w-4 h-4 text-gray-600" />;
    case 'archived': return <Archive className="w-4 h-4 text-slate-600" />;
    default: return <Settings className="w-4 h-4 text-gray-600" />;
  }
};

const getStatusText = (status: EquipmentStatus) => {
  switch (status) {
    case 'online': return '–û–Ω–ª–∞–π–Ω';
    case 'offline': return '–û—Ñ–ª–∞–π–Ω';
    case 'error': return '–û—à–∏–±–∫–∞';
    case 'disabled': return '–û—Ç–∫–ª—é—á–µ–Ω–æ';
    case 'archived': return '–ê—Ä—Ö–∏–≤';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
};

const getStatusColor = (status: EquipmentStatus) => {
  switch (status) {
    case 'online': return 'bg-green-500';
    case 'offline': return 'bg-yellow-500';
    case 'error': return 'bg-red-500';
    case 'disabled': return 'bg-gray-500';
    case 'archived': return 'bg-slate-500';
    default: return 'bg-gray-500';
  }
};

export default function Equipment() {
  const { selectedTradingPoint } = useSelection();
  const { toast } = useToast();
  const isMobile = useIsMobile();
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π
  const [tradingPointInfo, setTradingPointInfo] = useState(null);
  
  useEffect(() => {
    const loadTradingPointInfo = async () => {
      try {
        if (selectedTradingPoint && selectedTradingPoint !== "all") {
          console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ:', selectedTradingPoint);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
          const response = await httpClient.getTradingPointById(selectedTradingPoint);
          if (response.success) {
            console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', response.data);
            setTradingPointInfo(response.data);
          } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ');
          }
        } else {
          console.log('üìù –°–±—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ');
          setTradingPointInfo(null);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ:', error);
        setTradingPointInfo(null);
      }
    };

    loadTradingPointInfo();
  }, [selectedTradingPoint]);
    
  
  // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [equipment, setEquipment] = useState<Equipment[]>([]);
  const [templates, setTemplates] = useState<EquipmentTemplate[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [scanningTradingPoint, setScanningTradingPoint] = useState(false);
  const [editingCommandsEquipmentId, setEditingCommandsEquipmentId] = useState<string | null>(null);
  
  
  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [isWizardOpen, setIsWizardOpen] = useState(false);
  const [selectedEquipment, setSelectedEquipment] = useState<Equipment | null>(null);
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä—è–¥—ã —Ç–∞–±–ª–∏—Ü—ã
  const [expandedRows, setExpandedRows] = useState<string[]>([]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const [componentHealths, setComponentHealths] = useState<Record<string, {
    aggregatedStatus: ComponentHealthStatus;
    componentCount: number;
    statusBreakdown: Record<string, number>;
  }>>({});
  
  // ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  const selectedTradingPointId = useMemo(() => selectedTradingPoint, [selectedTradingPoint]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadTemplates();
  }, []);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    if (selectedTradingPointId) {
      loadEquipment();
    } else {
      setEquipment([]);
    }
  }, [selectedTradingPointId]);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π Supabase –∫–ª–∏–µ–Ω—Ç
  const loadTemplates = useCallback(async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...');
      const templatesData = await supabaseEquipmentTemplatesAPI.list();
      console.log('‚úÖ –®–∞–±–ª–æ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', templatesData.length);
      setTemplates(templatesData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        variant: "destructive"
      });
    }
  }, [toast]);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  const loadComponentHealths = useCallback(async (equipmentList: Equipment[]) => {
    const healthPromises = equipmentList.map(async (eq) => {
      try {
        const health = await getEquipmentComponentsHealth(eq.id);
        return { equipmentId: eq.id, health };
      } catch (error) {
        console.warn(`Failed to load component health for equipment ${eq.id}:`, error);
        return { 
          equipmentId: eq.id, 
          health: { 
            aggregatedStatus: 'healthy' as ComponentHealthStatus, 
            componentCount: 0, 
            statusBreakdown: {} 
          } 
        };
      }
    });

    const results = await Promise.all(healthPromises);
    const healthMap: Record<string, any> = {};
    
    results.forEach(({ equipmentId, health }) => {
      healthMap[equipmentId] = health;
    });
    
    setComponentHealths(healthMap);
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π Supabase API
  const loadEquipment = useCallback(async () => {
    if (!selectedTradingPointId) {
      console.log('üìù –ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', selectedTradingPointId);
    setLoading(true);
    setError(null);
    
    try {
      let response;
      if (selectedTradingPointId === "all") {
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫');
        response = await supabaseEquipmentAPI.list({});
      } else {
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', selectedTradingPointId);
        response = await supabaseEquipmentAPI.list({
          trading_point_id: selectedTradingPointId
        });
      }
      
      console.log('‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', response.data?.length, '–µ–¥–∏–Ω–∏—Ü');
      setEquipment(response.data || []);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
      await loadComponentHealths(response.data || []);
      console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ');
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${error.message}`,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  }, [selectedTradingPointId, toast, loadComponentHealths]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π Supabase API
  const handleCreateEquipment = async (data: CreateEquipmentRequest) => {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', data);
      await supabaseEquipmentAPI.create(data);
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ"
      });
      loadEquipment();
      setIsWizardOpen(false);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
        variant: "destructive"
      });
      throw error;
    }
  };
  
  const handleUpdateEquipment = async (id: string, data: UpdateEquipmentRequest) => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', id, data);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      const currentEquipment = equipment?.find(eq => eq.id === id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π Supabase API
      await supabaseEquipmentAPI.update(id, data);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ø–ª–∏–≤–Ω—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä –∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º–∏
      if (currentEquipment?.system_type === "fuel_tank" && data.params) {
        try {
          console.log('üõ¢Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤...');
          // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
          const tanks = await tanksService.getTanks();
          const linkedTank = tanks.find(tank => 
            tank.name === (data.display_name || currentEquipment.display_name)
          );
          
          if (linkedTank) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º:', linkedTank.id);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤—É–∞—Ä —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            await tanksService.updateTank(linkedTank.id, {
              name: data.display_name || linkedTank.name,
              fuelType: data.params.fuelType || linkedTank.fuelType,
              currentLevelLiters: data.params.currentLevelLiters || linkedTank.currentLevelLiters,
              capacityLiters: data.params.capacityLiters || linkedTank.capacityLiters,
              minLevelPercent: data.params.minLevelPercent || linkedTank.minLevelPercent,
              criticalLevelPercent: data.params.criticalLevelPercent || linkedTank.criticalLevelPercent,
              temperature: data.params.temperature || linkedTank.temperature,
              waterLevelMm: data.params.waterLevelMm || linkedTank.waterLevelMm,
              density: data.params.density || linkedTank.density,
              material: data.params.material || linkedTank.material,
              status: data.params.status || linkedTank.status,
              location: data.params.location || linkedTank.location,
              supplier: data.params.supplier || linkedTank.supplier,
              lastCalibration: data.params.lastCalibration || linkedTank.lastCalibration
            });
          }
        } catch (tankError) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞:', tankError);
          // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        }
      }
      
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
      });
      loadEquipment();
      setSelectedEquipment(null);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
        variant: "destructive"
      });
      throw error;
    }
  };
  
  const handleStatusChange = async (id: string, action: EquipmentStatusAction) => {
    try {
      console.log('üîÑ –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', id, action);
      await supabaseEquipmentAPI.setStatus(id, action);
      const actionText = {
        enable: '–≤–∫–ª—é—á–µ–Ω–æ',
        disable: '–æ—Ç–∫–ª—é—á–µ–Ω–æ',
        archive: '–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'
      }[action];
      
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: `–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ${actionText}`
      });
      loadEquipment();
      setSelectedEquipment(null);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
        variant: "destructive"
      });
      throw error;
    }
  };
  
  const handleLoadEvents = async (equipmentId: string): Promise<EquipmentEvent[]> => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', equipmentId);
      return await supabaseEquipmentAPI.getEvents(equipmentId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è",
        variant: "destructive"
      });
      return [];
    }
  };
  
  const toggleRowExpansion = (equipmentId: string) => {
    setExpandedRows(prev => 
      prev.includes(equipmentId) 
        ? prev.filter(id => id !== equipmentId)
        : [...prev, equipmentId]
    );
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const handleEditComponent = (component: Component) => {
    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', component);
    toast({
      title: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞",
      description: `–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ "${component.display_name}" –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.`
    });
  };

  const handleDeleteEquipment = async (equipmentId: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) {
      return;
    }

    try {
      setLoading(true);
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', equipmentId);
      await supabaseEquipmentAPI.delete(equipmentId);
      
      toast({
        title: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
        description: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
      });
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      await loadEquipment();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteComponent = async (component: Component) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç "${component.display_name}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`)) {
      return;
    }

    try {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:', component.id);
      
      // TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π API –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å –Ω–æ–≤—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏');
      
      toast({
        title: "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        description: "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
        variant: "default"
      });
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      // await loadEquipment();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        variant: "destructive"
      });
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–µ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ API
  const handleScanTradingPoint = async () => {
    if (!selectedTradingPointId) return;
    
    try {
      setScanningTradingPoint(true);
      console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', selectedTradingPointId);

      toast({
        title: "–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤",
        description: "–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API...",
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º API
      // –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç httpClient –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω–µ—à–Ω–µ–º—É API
      const syncResult = await tanksUnifiedService.syncIfEmpty(selectedTradingPointId);
      
      if (syncResult.error) {
        if (syncResult.error.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç')) {
          // –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã —É–∂–µ –µ—Å—Ç—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
          console.log('‚ÑπÔ∏è –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
          toast({
            title: "–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç",
            description: "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –¥–ª—è —ç—Ç–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏. –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤.",
            variant: "default",
          });
        } else {
          // –†–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          throw new Error(syncResult.error);
        }
      } else if (syncResult.synchronized) {
        // –£—Å–ø–µ—à–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const stats = tanksUnifiedService.getStatistics(syncResult.tanks);
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–æ–∑–¥–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', stats.total);
        toast({
          title: "–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã",
          description: `–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${stats.total} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API.`,
        });
      } else {
        // –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        console.log('‚ÑπÔ∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î');
        toast({
          title: "–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
          description: "–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      loadEquipment();

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–æ—Å–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É",
        variant: "destructive",
      });
    } finally {
      setScanningTradingPoint(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
  const handleEditCommands = (equipmentId: string) => {
    setEditingCommandsEquipmentId(equipmentId);
  };

  const handleCloseCommandsEditor = () => {
    setEditingCommandsEquipmentId(null);
  };

  const handleCommandsSaved = () => {
    loadEquipment(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  };

  // –ï—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
  if (!selectedTradingPoint || selectedTradingPoint === "all") {
    return (
      <MainLayout fullWidth={true}>
        <EmptyState
          icon={MapPin}
          title="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É" 
          description="–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ."
          className="py-16"
        />
      </MainLayout>
    );
  }

  // –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∫–∞—Ä—Ç–æ—á–∫–∏
  if (isMobile) {
    return (
      <MainLayout fullWidth={true}>
        <div className="px-4 pt-4">
          <div className="flex items-center justify-between mb-4">
            <div className="flex-1">
              <h1 className="text-xl font-bold text-white">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h1>
              <p className="text-sm text-slate-400">
                {selectedTradingPoint === "all" ? "–í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏" : (tradingPointInfo ? tradingPointInfo.name : '–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}
              </p>
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={handleScanTradingPoint}
                disabled={scanningTradingPoint || loading}
                className="border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white text-xs"
              >
                {scanningTradingPoint ? (
                  <>
                    <Loader2 className="w-3 h-3 animate-spin mr-1" />
                    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...
                  </>
                ) : (
                  <>
                    <Scan className="w-3 h-3 mr-1" />
                    –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –∏–∑ API
                  </>
                )}
              </Button>
              <Button 
                size="sm" 
                onClick={() => setIsWizardOpen(true)} 
                disabled={loading}
                className="bg-blue-600 hover:bg-blue-700"
              >
                <Plus className="w-4 h-4" />
              </Button>
            </div>
          </div>
          

          {loading && (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="w-8 h-8 animate-spin text-muted-foreground" />
            </div>
          )}

          {error && (
            <div className="bg-destructive/10 text-destructive rounded-lg p-4 mb-4">
              {error}
            </div>
          )}

          {!loading && !error && equipment && equipment.length === 0 && (
            <EmptyState
              icon={Settings}
              title="–ù–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
              description="–ù–∞ —ç—Ç–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
              className="py-8"
            />
          )}

          {!loading && !error && equipment && equipment.length > 0 && (
            <div className="space-y-3">
              {equipment.map(item => {
                const template = templates.find(t => t.id === item.template_id);
                return (
                  <div
                    key={item.id}
                    className="bg-slate-800 rounded-lg p-4 border border-slate-700"
                    onClick={() => setSelectedEquipment(item)}
                  >
                    <div className="flex items-start justify-between mb-2">
                      <div>
                        <h3 className="font-medium text-white">{item.display_name}</h3>
                        <p className="text-sm text-slate-400">
                          {template?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"}
                        </p>
                      </div>
                      {getStatusIcon(item.status)}
                    </div>
                    
                    {item.serial_number && (
                      <p className="text-xs text-slate-400">
                        S/N: {item.serial_number}
                      </p>
                    )}
                    
                    {componentHealths[item.id] && (
                      <div className="mt-2">
                        <ComponentHealthIndicator
                          status={componentHealths[item.id].aggregatedStatus}
                          componentCount={componentHealths[item.id].componentCount}
                          statusBreakdown={componentHealths[item.id].statusBreakdown}
                          size="sm"
                        />
                      </div>
                    )}
                    
                    <div className="flex items-center justify-between mt-3">
                      <Badge variant="secondary" className="text-xs bg-slate-600 text-slate-200">
                        {getStatusText(item.status)}
                      </Badge>
                      
                      <div className="flex items-center gap-1">
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-8 w-8 p-0 text-slate-400 hover:text-white"
                          onClick={() => setSelectedEquipment(item)}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        {item.status !== 'archived' && item.status === 'disabled' && (
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-8 w-8 p-0 text-slate-400 hover:text-green-400"
                            onClick={() => handleStatusChange(item.id, 'enable')}
                          >
                            <Power className="h-4 w-4" />
                          </Button>
                        )}
                        {item.status !== 'archived' && item.status !== 'disabled' && (
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-8 w-8 p-0 text-slate-400 hover:text-yellow-400"
                            onClick={() => handleStatusChange(item.id, 'disable')}
                          >
                            <PowerOff className="h-4 w-4" />
                          </Button>
                        )}
                        {item.status !== 'archived' && (
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-8 w-8 p-0 text-slate-400 hover:text-red-400"
                            onClick={() => handleStatusChange(item.id, 'archive')}
                          >
                            <Archive className="h-4 w-4" />
                          </Button>
                        )}
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-8 w-8 p-0 text-slate-400 hover:text-red-600"
                          onClick={() => handleDeleteEquipment(item.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>

        {/* Wizard –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è */}
        <EquipmentWizard
          open={isWizardOpen}
          onOpenChange={setIsWizardOpen}
          tradingPointId={selectedTradingPointId}
          templates={templates}
          onSubmit={handleCreateEquipment}
          loading={loading}
        />

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
        <EquipmentDetailCard
          open={!!selectedEquipment}
          onOpenChange={(open) => !open && setSelectedEquipment(null)}
          equipment={selectedEquipment}
          onUpdate={handleUpdateEquipment}
          onStatusChange={handleStatusChange}
          onLoadEvents={handleLoadEvents}
        />

        {/* –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
        <EquipmentCommandsEditor
          open={!!editingCommandsEquipmentId}
          onClose={handleCloseCommandsEditor}
          equipment={equipment?.find(eq => eq.id === editingCommandsEquipmentId)}
          onSave={handleCommandsSaved}
        />
      </MainLayout>
    );
  }

  // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–∞–±–ª–∏—Ü–∞
  return (
    <MainLayout fullWidth={true}>
      <div className="w-full space-y-6 px-4 md:px-6 lg:px-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className="mb-6 pt-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-semibold text-white">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h1>
              <p className="text-slate-400 mt-1">
                {selectedTradingPoint === "all" ? "–í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏" : (tradingPointInfo ? tradingPointInfo.name : '–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}
              </p>
            </div>
            <div className="flex items-center gap-3">
              <HelpButton helpKey="equipment" />
              <Button
                variant="outline"
                onClick={handleScanTradingPoint}
                disabled={scanningTradingPoint || loading}
                className="border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white"
              >
                {scanningTradingPoint ? (
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <Scan className="w-4 h-4 mr-2" />
                )}
                –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã
              </Button>
            </div>
          </div>
        </div>

        {/* –°–µ–∫—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
        <div className="bg-slate-800 border border-slate-600 rounded-lg w-full">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
          <div className="px-6 py-4 border-b border-slate-700">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                  <span className="text-white text-sm">‚öôÔ∏è</span>
                </div>
                <div>
                  <h2 className="text-lg font-semibold text-white">–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h2>
                  {!loading && equipment && equipment && equipment.length > 0 && (
                    <p className="text-sm text-slate-400">
                      –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {equipment && equipment.length}
                    </p>
                  )}
                </div>
              </div>
              <Button 
                onClick={() => setIsWizardOpen(true)} 
                disabled={loading}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium flex-shrink-0"
              >
                <Plus className="w-4 h-4 mr-2" />
                –î–æ–±–∞–≤–∏—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–∞
              </Button>
            </div>
          </div>

          {/* –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏, –æ—à–∏–±–∫–∏ –∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ */}
          {loading && (
            <div className="flex items-center justify-center py-16">
              <Loader2 className="w-8 h-8 animate-spin text-slate-400" />
              <span className="ml-2 text-slate-400">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...</span>
            </div>
          )}

          {error && (
            <div className="px-6 py-8 text-center">
              <div className="text-red-400 mb-2">{error}</div>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => loadEquipment()}
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </Button>
            </div>
          )}

          {!loading && !error && equipment && equipment.length === 0 && (
            <div className="px-6 py-16 text-center">
              <Settings className="w-12 h-12 text-slate-600 mx-auto mb-3" />
              <h3 className="text-lg font-semibold text-white mb-2">–ù–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h3>
              <p className="text-slate-400 mb-4">
                –ù–∞ —ç—Ç–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.
              </p>
              <Button 
                onClick={() => setIsWizardOpen(true)}
                className="bg-blue-600 hover:bg-blue-700 text-white"
              >
                <Plus className="w-4 h-4 mr-2" />
                –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
              </Button>
            </div>
          )}

          {/* –¢–∞–±–ª–∏—Ü–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º */}
          {!loading && !error && equipment && equipment.length > 0 && (
            <div className="overflow-x-auto w-full">
              <table className="w-full text-sm min-w-full table-fixed">
                <thead className="bg-slate-700">
                  <tr>
                    <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '5%'}}></th>
                    <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '30%'}}>–ù–ê–ó–í–ê–ù–ò–ï</th>
                    <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '20%'}}>–¢–ò–ü</th>
                    <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '15%'}}>–°–ï–†–ò–ô–ù–´–ô –ù–û–ú–ï–†</th>
                    <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '10%'}}>–ö–û–ú–ü–û–ù–ï–ù–¢–´</th>
                    <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '10%'}}>–°–¢–ê–¢–£–°</th>
                    <th className="px-6 py-4 text-right text-slate-200 font-medium" style={{width: '10%'}}>–î–ï–ô–°–¢–í–ò–Ø</th>
                  </tr>
                </thead>
                <tbody className="bg-slate-800">
                  {equipment.map((item) => {
                    const template = templates.find(t => t.id === item.template_id);
                    const isExpanded = expandedRows.includes(item.id);
                    const componentsCount = item.componentsCount || 0;
                    
                    return (
                      <>
                        <tr
                          key={item.id}
                          className="border-b border-slate-600 hover:bg-slate-700 transition-colors"
                        >
                          <td className="px-4 md:px-6 py-4">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => toggleRowExpansion(item.id)}
                              className="p-0 h-6 w-6 text-slate-400 hover:text-white"
                            >
                              {isExpanded ? (
                                <ChevronDown className="w-4 h-4" />
                              ) : (
                                <ChevronRight className="w-4 h-4" />
                              )}
                            </Button>
                          </td>
                          <td 
                            className="px-6 py-4 font-medium text-white cursor-pointer"
                            onClick={() => setSelectedEquipment(item)}
                          >
                            {item.display_name}
                          </td>
                          <td className="px-6 py-4 text-slate-400">
                            {template?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"}
                          </td>
                          <td className="px-6 py-4 text-slate-400">
                            {item.serial_number || "‚Äî"}
                          </td>
                          <td className="px-4 md:px-6 py-4">
                            {componentHealths[item.id] ? (
                              <ComponentHealthIndicator
                                status={componentHealths[item.id].aggregatedStatus}
                                componentCount={componentHealths[item.id].componentCount}
                                statusBreakdown={componentHealths[item.id].statusBreakdown}
                                size="sm"
                              />
                            ) : (
                              <div className="flex items-center gap-2">
                                <div className="rounded-full p-1 bg-slate-700 border border-slate-600">
                                  <div className="h-3 w-3 rounded-full bg-slate-600 animate-pulse" />
                                </div>
                                <span className="text-xs font-medium text-slate-500">...</span>
                              </div>
                            )}
                          </td>
                          <td className="px-4 md:px-6 py-4">
                            <Badge variant="secondary" className="bg-slate-600 text-slate-200 flex items-center gap-2 w-fit">
                              <div className={cn("w-2 h-2 rounded-full", getStatusColor(item.status))} />
                              {getStatusText(item.status)}
                            </Badge>
                          </td>
                          <td className="px-6 py-4 text-right">
                            <div className="flex items-center justify-end gap-1">
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="h-8 w-8 p-0 text-slate-400 hover:text-white"
                                onClick={() => setSelectedEquipment(item)}
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                              {item.status !== 'archived' && item.status === 'disabled' && (
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="h-8 w-8 p-0 text-slate-400 hover:text-green-400"
                                  onClick={() => handleStatusChange(item.id, 'enable')}
                                >
                                  <Power className="h-4 w-4" />
                                </Button>
                              )}
                              {item.status !== 'archived' && item.status !== 'disabled' && (
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="h-8 w-8 p-0 text-slate-400 hover:text-yellow-400"
                                  onClick={() => handleStatusChange(item.id, 'disable')}
                                >
                                  <PowerOff className="h-4 w-4" />
                                </Button>
                              )}
                              {item.status !== 'archived' && (
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="h-8 w-8 p-0 text-slate-400 hover:text-red-400"
                                  onClick={() => handleStatusChange(item.id, 'archive')}
                                >
                                  <Archive className="h-4 w-4" />
                                </Button>
                              )}
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="h-8 w-8 p-0 text-slate-400 hover:text-red-600"
                                onClick={() => handleDeleteEquipment(item.id)}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </td>
                        </tr>
                        
                        {/* –†–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ */}
                        {isExpanded && (
                          <tr>
                            <td colSpan={7} className="p-0">
                              <div className="bg-slate-900/50 border-l-4 border-blue-500/20 ml-6 mr-2 mb-2">
                                <div className="space-y-4 p-6">
                                  {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º */}
                                  <EquipmentCommandsPanel 
                                    equipment={item}
                                    onRefresh={() => loadEquipment()}
                                    onEditCommands={handleEditCommands}
                                  />
                                  
                                  {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
                                  <div className="border-t border-slate-700"></div>
                                  
                                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ */}
                                  <div className="flex items-center gap-2">
                                    <Layers3 className="w-5 h-5 text-slate-400" />
                                    <h4 className="font-medium text-slate-100">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h4>
                                  </div>
                                  
                                  {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ */}
                                  <EquipmentComponentsList 
                                    equipmentId={item.id}
                                    onEditComponent={handleEditComponent}
                                    onDeleteComponent={handleDeleteComponent}
                                  />
                                </div>
                              </div>
                            </td>
                          </tr>
                        )}
                      </>
                    );
                  })}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Wizard –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è */}
      <EquipmentWizard
        open={isWizardOpen}
        onOpenChange={setIsWizardOpen}
        tradingPointId={selectedTradingPointId}
        templates={templates}
        onSubmit={handleCreateEquipment}
        loading={loading}
      />

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
      <EquipmentDetailCard
        open={!!selectedEquipment}
        onOpenChange={(open) => !open && setSelectedEquipment(null)}
        equipment={selectedEquipment}
        onUpdate={handleUpdateEquipment}
        onStatusChange={handleStatusChange}
        onLoadEvents={handleLoadEvents}
      />

      {/* –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
      <EquipmentCommandsEditor
        open={!!editingCommandsEquipmentId}
        onClose={handleCloseCommandsEditor}
        equipment={equipment?.find(eq => eq.id === editingCommandsEquipmentId)}
        onSave={handleCommandsSaved}
      />
    </MainLayout>
  );
}