import React, { useState, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import { useSelection } from "@/context/SelectionContext";
import { useIsMobile } from "@/hooks/use-mobile";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { stsApiService, TerminalInfo, Tank } from "@/services/stsApi";
import { MobileButton } from "@/components/ui/mobile-button";
import { MobileTable } from "@/components/ui/mobile-table";
import { 
  Settings, 
  AlertCircle, 
  CheckCircle2, 
  Loader2, 
  RefreshCw,
  Thermometer,
  Gauge,
  Fuel,
  Database,
  Banknote,
  CreditCard
} from "lucide-react";

interface TerminalEquipmentItem {
  id: string;
  name: string;
  code: string;
  location: string;
  status: 'online' | 'offline' | 'error';
  statusText: string;
  billCount?: number;
  billAmount?: number;
}

const getStatusIcon = (status: string) => {
  switch (status) {
    case 'online':
    case 'normal':
      return <CheckCircle2 className="w-4 h-4 text-green-500" />;
    case 'warning':
      return <AlertCircle className="w-4 h-4 text-yellow-500" />;
    case 'offline':
    case 'error':
      return <AlertCircle className="w-4 h-4 text-red-500" />;
    default:
      return <Settings className="w-4 h-4 text-gray-500" />;
  }
};

const getStatusColor = (status: string) => {
  switch (status) {
    case 'online':
    case 'normal':
      return 'text-green-500';
    case 'warning':
      return 'text-yellow-500';
    case 'offline':
    case 'error':
      return 'text-red-500';
    default:
      return 'text-gray-500';
  }
};

const getFillLevelColor = (level: number) => {
  if (level >= 70) return 'bg-green-500';
  if (level >= 40) return 'bg-yellow-500';
  return 'bg-red-500';
};

export default function Equipment() {
  const { selectedNetwork, selectedTradingPoint } = useSelection();
  const { toast } = useToast();
  const isMobile = useIsMobile();
  const [loading, setLoading] = useState(false);
  const [terminalEquipment, setTerminalEquipment] = useState<TerminalEquipmentItem[]>([]);
  const [tanks, setTanks] = useState<Tank[]>([]);
  const [terminalInfo, setTerminalInfo] = useState<TerminalInfo | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...');
    
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É STS API
    ensureSTSApiConfigured();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    if (selectedTradingPoint && selectedTradingPoint !== 'all' && selectedNetwork?.external_id) {
      console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', selectedTradingPoint);
      loadEquipmentData();
    }
  }, [selectedTradingPoint, selectedNetwork]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ STS API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const ensureSTSApiConfigured = () => {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º STS API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
    
    const correctConfig = {
      url: 'https://pos.autooplata.ru/tms',
      username: 'UserApi',
      password: 'lHQfLZHzB3tn',
      enabled: true,
      timeout: 30000,
      retryAttempts: 3,
      refreshInterval: 20 * 60 * 1000 // 20 –º–∏–Ω—É—Ç
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const currentConfig = localStorage.getItem('sts-api-config');
    let needsUpdate = false;
    
    if (currentConfig) {
      try {
        const parsed = JSON.parse(currentConfig);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if (parsed.url !== correctConfig.url || 
            parsed.username !== correctConfig.username || 
            parsed.password !== correctConfig.password ||
            !parsed.enabled) {
          needsUpdate = true;
        }
      } catch {
        needsUpdate = true;
      }
    } else {
      needsUpdate = true;
    }
    
    if (needsUpdate) {
      console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é STS API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');
      localStorage.setItem('sts-api-config', JSON.stringify(correctConfig));
    }
    
    return correctConfig;
  };

  const loadEquipmentData = async () => {
    if (!selectedTradingPoint || !selectedNetwork?.external_id) return;
    
    setLoading(true);
    try {
      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É STS API
      ensureSTSApiConfigured();
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
      const contextParams = {
        networkId: selectedNetwork.external_id,
        tradingPointId: selectedTradingPoint
      };

      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ STS API...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (stsApiService —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)
      const [terminalInfoData, tanksData] = await Promise.all([
        stsApiService.getTerminalInfo(contextParams),
        stsApiService.getTanks(contextParams)
      ]);

      setTerminalInfo(terminalInfoData);
      setTanks(tanksData);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const equipmentItems = mapTerminalInfoToEquipment(terminalInfoData);
      setTerminalEquipment(equipmentItems);

      toast({
        title: "–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
        description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –°–¢–°"
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.",
        variant: "destructive"
      });
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      setTerminalEquipment(getMockTerminalEquipment());
      setTanks(getMockTanks());
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    await loadEquipmentData();
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ TerminalInfo –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const mapTerminalInfoToEquipment = (info: TerminalInfo): TerminalEquipmentItem[] => {
    const equipment: TerminalEquipmentItem[] = [];

    // –ê–ó–° (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª)
    equipment.push({
      id: 'azs',
      name: '–ê–ó–°',
      code: info.terminal.name || '–ê–ó–°',
      location: '',
      status: info.terminal.status,
      statusText: info.terminal.status === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'
    });

    // POS —Ç–µ—Ä–º–∏–Ω–∞–ª
    equipment.push({
      id: 'pos',
      name: 'POS',
      code: info.pos.version || 'POS 1',
      location: '',
      status: info.pos.status,
      statusText: info.pos.status === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'
    });

    // QR (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã)
    equipment.push({
      id: 'qr',
      name: 'QR',
      code: '–ì–æ—Ç–æ–≤',
      location: info.shift ? `–°–º–µ–Ω–∞ ‚Ññ${info.shift.number}` : '',
      status: info.shift?.state === '–û—Ç–∫—Ä—ã—Ç–∞—è' ? 'online' : 'offline',
      statusText: '–ì–æ—Ç–æ–≤'
    });

    // –ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫—É–ø—é—Ä–∞—Ö
    if (info.devices?.billAcceptor) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ STS API —Å–µ—Ä–≤–∏—Å–∞
      const deviceStatus = info.devices.billAcceptor.status; // 'online' –∏–ª–∏ 'error'
      const isOnline = deviceStatus === 'online';
      
      console.log('üéØ –°—Ç–∞—Ç—É—Å –∫—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π):', {
        status: deviceStatus,
        isOnline: isOnline,
        billCount: info.devices.billAcceptor.billCount,
        billAmount: info.devices.billAcceptor.billAmount,
        name: info.devices.billAcceptor.name
      });
      
      equipment.push({
        id: 'bill-acceptor',
        name: '–ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫',
        code: `ID: ${info.devices.billAcceptor.name}`,
        location: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${info.devices.billAcceptor.name}`,
        status: deviceStatus, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        statusText: isOnline ? '–ì–æ—Ç–æ–≤' : '–û—à–∏–±–∫–∞',
        billCount: info.devices.billAcceptor.billCount,
        billAmount: info.devices.billAcceptor.billAmount
      });
    }

    // –ö–∞—Ä—Ç—Ä–∏–¥–µ—Ä
    if (info.devices?.cardReader) {
      equipment.push({
        id: 'card-reader',
        name: '–ö–∞—Ä—Ç—Ä–∏–¥–µ—Ä',
        code: info.devices.cardReader.status === 'online' ? '–ì–æ—Ç–æ–≤' : '–û—à–∏–±–∫–∞',
        location: `ID: ${info.devices.cardReader.name}`,
        status: info.devices.cardReader.status,
        statusText: info.devices.cardReader.status === 'online' ? '–ì–æ—Ç–æ–≤' : '–û—à–∏–±–∫–∞'
      });
    }

    // –ú–ü–°-—Ä–∏–¥–µ—Ä
    if (info.devices?.mpsReader) {
      equipment.push({
        id: 'mps-reader',
        name: '–ú–ü–°-—Ä–∏–¥–µ—Ä',
        code: info.devices.mpsReader.status === 'online' ? '–ì–æ—Ç–æ–≤' : '–û—à–∏–±–∫–∞',
        location: `ID: ${info.devices.mpsReader.name}`,
        status: info.devices.mpsReader.status,
        statusText: info.devices.mpsReader.status === 'online' ? '–ì–æ—Ç–æ–≤' : '–û—à–∏–±–∫–∞'
      });
    }

    return equipment;
  };

  // Fallback mock –¥–∞–Ω–Ω—ã–µ
  const getMockTerminalEquipment = (): TerminalEquipmentItem[] => [
    { id: 'azs-1', name: '–ê–ó–°', code: '–ê–ó–ö 4', location: '–¢–ö –¢-4', status: 'offline', statusText: '–û—Ñ–ª–∞–π–Ω' },
    { id: 'pos-1', name: 'POS', code: 'POS 1', location: '', status: 'online', statusText: '–û–Ω–ª–∞–π–Ω' },
    { id: 'qr-1', name: 'QR', code: '–ì–æ—Ç–æ–≤', location: '–°–º–µ–Ω–∞ ‚Ññ13', status: 'online', statusText: '–ì–æ—Ç–æ–≤' },
    { id: 'inspector-1', name: '–ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫', code: 'ID: 10', location: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 10', status: 'online', statusText: '–ì–æ—Ç–æ–≤', billCount: 341, billAmount: 153450 },
    { id: 'card-reader-1', name: '–ö–∞—Ä—Ç—Ä–∏–¥–µ—Ä', code: '–ì–æ—Ç–æ–≤', location: 'ID: 11', status: 'online', statusText: '–ì–æ—Ç–æ–≤' },
    { id: 'mps-river-1', name: '–ú–ü–°-—Ä–∏–≤–µ—Ä', code: '–ì–æ—Ç–æ–≤', location: 'ID: 15', status: 'online', statusText: '–ì–æ—Ç–æ–≤' }
  ];

  const getMockTanks = (): Tank[] => [
    {
      id: 1, name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ1', fuelType: '–î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ',
      currentLevelLiters: 7595.83, capacityLiters: 10129.88, minLevelPercent: 20, criticalLevelPercent: 10,
      temperature: 19.0, waterLevelMm: 0, sensors: [], lastCalibration: '', linkedPumps: [],
      notifications: { enabled: true, drainAlerts: true, levelAlerts: true },
      thresholds: { criticalTemp: { min: -10, max: 40 }, maxWaterLevel: 10, notifications: { critical: true, minimum: true, temperature: true, water: true } }
    },
    {
      id: 2, name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ2', fuelType: '–ê–ò-95',
      currentLevelLiters: 4287.96, capacityLiters: 10303.61, minLevelPercent: 20, criticalLevelPercent: 10,
      temperature: 18.6, waterLevelMm: 0.58, sensors: [], lastCalibration: '', linkedPumps: [],
      notifications: { enabled: true, drainAlerts: true, levelAlerts: true },
      thresholds: { criticalTemp: { min: -10, max: 40 }, maxWaterLevel: 10, notifications: { critical: true, minimum: true, temperature: true, water: true } }
    },
    {
      id: 3, name: '–†–µ–∑–µ—Ä–≤—É–∞—Ä ‚Ññ3', fuelType: '–ê–ò-92',
      currentLevelLiters: 6266.36, capacityLiters: 10489.90, minLevelPercent: 20, criticalLevelPercent: 10,
      temperature: 19.0, waterLevelMm: 0, sensors: [], lastCalibration: '', linkedPumps: [],
      notifications: { enabled: true, drainAlerts: true, levelAlerts: true },
      thresholds: { criticalTemp: { min: -10, max: 40 }, maxWaterLevel: 10, notifications: { critical: true, minimum: true, temperature: true, water: true } }
    }
  ];

  if (!selectedTradingPoint) {
    return (
      <MainLayout fullWidth={true}>
        <div className="w-full space-y-6 px-4 md:px-6 lg:px-8">
          <div className="mb-6 pt-4">
            <h1 className="text-2xl font-semibold text-white">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h1>
            <p className="text-slate-400 mt-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</p>
          </div>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout fullWidth={true}>
      <div className="w-full space-y-6 px-4 md:px-6 lg:px-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className="mb-6 pt-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-semibold text-white">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h1>
              <p className="text-slate-400 mt-1 hidden md:block">{selectedNetwork?.name || '–ë–¢–û –ê–ó–° ‚Ññ4'}</p>
            </div>
            <div className="flex items-center gap-2">
              <MobileButton
                variant="outline"
                onClick={handleRefresh}
                disabled={loading}
                className="border-green-600 text-green-600 hover:bg-green-600 hover:text-white"
              >
                {loading ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <RefreshCw className="w-4 h-4" />
                )}
                <span className="hidden md:inline ml-2">–û–±–Ω–æ–≤–∏—Ç—å STS –¥–∞–Ω–Ω—ã–µ</span>
                <span className="md:hidden ml-2">STS</span>
              </MobileButton>
            </div>
          </div>
        </div>

        {/* –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ */}
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader className="pb-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                  <Settings className="w-4 h-4 text-white" />
                </div>
                <div>
                  <CardTitle className="text-white">–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</CardTitle>
                  <p className="text-sm text-slate-400 mt-1">8 –µ–¥.</p>
                </div>
              </div>
              <Button size="sm" variant="outline" className="border-slate-600 text-slate-300">
                <Settings className="w-4 h-4" />
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {/* –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: –∫—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫ –æ—Ç–¥–µ–ª—å–Ω–æ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ —Å–µ—Ç–∫–µ */}
            {(() => {
              const billAcceptor = terminalEquipment.find(eq => eq.name === '–ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫');
              const otherEquipment = terminalEquipment.filter(eq => eq.name !== '–ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫');
              
              return (
                <div className="space-y-6">
                  {/* –ö—É–ø—é—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –±–æ–ª—å—à–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
                  {billAcceptor && (
                    <div className="bg-slate-700 rounded-lg p-6 border border-slate-600 hover:border-slate-500 transition-colors">
                      <div className={`flex items-center ${isMobile ? 'flex-col gap-4' : 'justify-between gap-6'}`}>
                        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ ID */}
                        <div className={`flex items-center gap-3 ${isMobile ? 'w-full justify-center' : ''}`}>
                          <Banknote className="w-6 h-6 text-green-400" />
                          <div className={isMobile ? 'text-center' : ''}>
                            <h3 className="text-lg font-semibold text-white">{billAcceptor.name}</h3>
                            <p className="text-sm text-slate-400">{billAcceptor.location}</p>
                          </div>
                        </div>
                        
                        {/* –î–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç—É—Å */}
                        <div className={`${isMobile ? 'w-full grid grid-cols-3 gap-4' : 'flex gap-6'}`}>
                          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø—é—Ä */}
                          <div className="text-center">
                            <div className="text-3xl font-bold text-green-400">
                              {billAcceptor.billCount || 0}
                            </div>
                            <div className="text-sm text-slate-300">–∫—É–ø—é—Ä</div>
                          </div>
                          
                          {/* –°—É–º–º–∞ */}
                          <div className="text-center">
                            <div className="text-3xl font-bold text-blue-400">
                              {(billAcceptor.billAmount || 0).toLocaleString()}
                            </div>
                            <div className="text-sm text-slate-300">‚ÇΩ</div>
                          </div>
                          
                          {/* –°—Ç–∞—Ç—É—Å */}
                          <div className="flex flex-col items-center gap-2">
                            {getStatusIcon(billAcceptor.status)}
                            <Badge 
                              className={`${
                                billAcceptor.status === 'online' 
                                  ? 'bg-green-600 text-white hover:bg-green-700 text-base px-3 py-1 font-semibold' 
                                  : 'bg-red-600 text-white hover:bg-red-700 text-base px-3 py-1 font-semibold'
                              }`}
                            >
                              {billAcceptor.statusText}
                            </Badge>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* –û—Å—Ç–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ —Å–µ—Ç–∫–µ */}
                  <div className={`grid gap-4 ${isMobile ? 'grid-cols-1' : 'grid-cols-2 md:grid-cols-3 lg:grid-cols-5'}`}>
                    {otherEquipment.map((equipment) => (
                      <div
                        key={equipment.id}
                        className="bg-slate-700 rounded-lg p-4 border border-slate-600 hover:border-slate-500 transition-colors cursor-pointer"
                      >
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-sm font-medium text-white">{equipment.name}</span>
                          {getStatusIcon(equipment.status)}
                        </div>
                        
                        <div className="space-y-1">
                          <div className="text-xs text-slate-300">{equipment.code}</div>
                          {equipment.location && (
                            <div className="text-xs text-slate-400">{equipment.location}</div>
                          )}
                        </div>
                        
                        <div className="mt-3">
                          <Badge 
                            className={`text-xs font-semibold ${
                              equipment.status === 'online' && equipment.statusText === '–ì–æ—Ç–æ–≤'
                                ? 'bg-green-600 text-white hover:bg-green-700'
                                : equipment.status === 'online'
                                ? 'bg-blue-600 text-white hover:bg-blue-700' 
                                : 'bg-red-600 text-white hover:bg-red-700'
                            }`}
                          >
                            {equipment.statusText}
                          </Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })()}
          </CardContent>
        </Card>

        {/* –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã */}
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader className="pb-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center">
                  <Database className="w-4 h-4 text-white" />
                </div>
                <div>
                  <CardTitle className="text-white">–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã</CardTitle>
                  <p className="text-sm text-slate-400 mt-1 hidden md:block">–í—Å–µ–≥–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤: 3</p>
                </div>
              </div>
              <Button size="sm" variant="outline" className="border-green-600 text-green-600 hover:bg-green-600 hover:text-white">
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {/* Desktop Table */}
            <div className="hidden md:block">
              <MobileTable showScrollHint={true}>
                <table className="w-full text-sm min-w-[600px]">
                  <thead className="text-left border-b border-slate-600">
                    <tr>
                      <th className="pb-3 text-slate-300 font-medium">–†–µ–∑–µ—Ä–≤—É–∞—Ä</th>
                      <th className="pb-3 text-slate-300 font-medium">–¢–æ–ø–ª–∏–≤–æ</th>
                      <th className="pb-3 text-slate-300 font-medium">–û–±—ä–µ–º –µ–º–∫–æ—Å—Ç–∏</th>
                      <th className="pb-3 text-slate-300 font-medium">–£—Ä–æ–≤–µ–Ω—å</th>
                      <th className="pb-3 text-slate-300 font-medium">–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</th>
                      <th className="pb-3 text-slate-300 font-medium">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</th>
                      <th className="pb-3 text-slate-300 font-medium">–í–æ–¥–∞</th>
                      <th className="pb-3 text-slate-300 font-medium">–î–∞—Ç—á–∏–∫–∏</th>
                      <th className="pb-3 text-slate-300 font-medium">–°—Ç–∞—Ç—É—Å</th>
                    </tr>
                  </thead>
                  <tbody>
                    {tanks.map((tank) => {
                      const fillLevel = tank.capacityLiters > 0 ? (tank.currentLevelLiters / tank.capacityLiters) * 100 : 0;
                      const tankStatus = fillLevel < tank.criticalLevelPercent ? 'critical' : fillLevel < tank.minLevelPercent ? 'warning' : 'normal';
                      
                      return (
                        <tr key={tank.id} className="border-b border-slate-700 hover:bg-slate-700/30">
                          <td className="py-4">
                            <div className="flex items-center gap-2">
                              <Database className="w-4 h-4 text-green-500" />
                              <span className="text-white font-medium">{tank.name}</span>
                            </div>
                          </td>
                          <td className="py-4 text-slate-300">{tank.fuelType}</td>
                          <td className="py-4 text-slate-300">{tank.capacityLiters.toLocaleString()} –ª</td>
                          <td className="py-4 text-slate-300">{tank.currentLevelLiters.toLocaleString()} –ª</td>
                          <td className="py-4">
                            <div className="flex items-center gap-3">
                              <div className="flex-1 bg-slate-600 rounded-full h-2 min-w-[60px]">
                                <div
                                  className={`h-2 rounded-full ${getFillLevelColor(fillLevel)}`}
                                  style={{ width: `${Math.max(fillLevel, 2)}%` }}
                                />
                              </div>
                              <span className="text-sm text-slate-300 min-w-[35px]">{Math.round(fillLevel)}%</span>
                            </div>
                          </td>
                          <td className="py-4 text-slate-300">
                            <div className="flex items-center gap-1">
                              <Thermometer className="w-4 h-4 text-blue-400" />
                              {tank.temperature}¬∞C
                            </div>
                          </td>
                          <td className="py-4 text-slate-300">{tank.waterLevelMm} –º–º</td>
                          <td className="py-4">
                            <div className="flex items-center gap-2">
                              <div className="flex items-center gap-1">
                                <div className="w-2 h-2 bg-blue-400 rounded-full" />
                                <span className="text-xs text-slate-400">–£—Ä–æ–≤–µ–Ω—å</span>
                              </div>
                              <div className="flex items-center gap-1">
                                <div className="w-2 h-2 bg-red-400 rounded-full" />
                                <span className="text-xs text-slate-400">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</span>
                              </div>
                              {tank.waterLevelMm > 0 && (
                                <div className="flex items-center gap-1">
                                  <div className="w-2 h-2 bg-green-400 rounded-full" />
                                  <span className="text-xs text-slate-400">–ü–æ–¥—Ç–æ–≤–∞—Ä–Ω–∞—è –≤–æ–¥–∞</span>
                                </div>
                              )}
                            </div>
                          </td>
                          <td className="py-4">
                            <Badge 
                              variant={tankStatus === 'normal' ? 'default' : 'secondary'}
                              className={`${
                                tankStatus === 'normal' 
                                  ? 'bg-blue-600 text-white hover:bg-blue-700' 
                                  : tankStatus === 'warning'
                                  ? 'bg-yellow-600 text-white hover:bg-yellow-700'
                                  : 'bg-red-600 text-white hover:bg-red-700'
                              }`}
                            >
                              {tankStatus === 'normal' ? '–ù–æ—Ä–º–∞' : tankStatus === 'warning' ? '–ú–∞–ª–æ' : '–ö—Ä–∏—Ç–∏—á–Ω–æ'}
                            </Badge>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </MobileTable>
            </div>

            {/* Mobile Cards */}
            <div className="md:hidden space-y-4">
              {tanks.map((tank) => {
                const fillLevel = tank.capacityLiters > 0 ? (tank.currentLevelLiters / tank.capacityLiters) * 100 : 0;
                const tankStatus = fillLevel < tank.criticalLevelPercent ? 'critical' : fillLevel < tank.minLevelPercent ? 'warning' : 'normal';
                
                return (
                  <div key={tank.id} className="bg-slate-700/50 rounded-lg p-4 border border-slate-600">
                    {/* Tank Header */}
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <Database className="w-5 h-5 text-green-500" />
                        <span className="text-white font-medium text-lg">{tank.name}</span>
                      </div>
                      <Badge 
                        variant={tankStatus === 'normal' ? 'default' : 'secondary'}
                        className={`${
                          tankStatus === 'normal' 
                            ? 'bg-blue-600 text-white hover:bg-blue-700' 
                            : tankStatus === 'warning'
                            ? 'bg-yellow-600 text-white hover:bg-yellow-700'
                            : 'bg-red-600 text-white hover:bg-red-700'
                        }`}
                      >
                        {tankStatus === 'normal' ? '–ù–æ—Ä–º–∞' : tankStatus === 'warning' ? '–ú–∞–ª–æ' : '–ö—Ä–∏—Ç–∏—á–Ω–æ'}
                      </Badge>
                    </div>

                    {/* Fuel Type */}
                    <div className="flex items-center gap-2 mb-3">
                      <Fuel className="w-4 h-4 text-blue-400" />
                      <span className="text-slate-300 font-medium">{tank.fuelType}</span>
                    </div>

                    {/* Fill Level Progress */}
                    <div className="mb-4">
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm text-slate-400">–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</span>
                        <span className="text-sm text-white font-medium">{Math.round(fillLevel)}%</span>
                      </div>
                      <div className="w-full bg-slate-600 rounded-full h-3">
                        <div 
                          className={`h-3 rounded-full transition-all ${getFillLevelColor(fillLevel)}`}
                          style={{ width: `${Math.max(fillLevel, 2)}%` }}
                        />
                      </div>
                      <div className="flex justify-between text-xs text-slate-400 mt-1">
                        <span>{tank.currentLevelLiters.toLocaleString()} –ª</span>
                        <span>{tank.capacityLiters.toLocaleString()} –ª</span>
                      </div>
                    </div>

                    {/* Temperature and Water */}
                    <div className="grid grid-cols-2 gap-4 mb-3">
                      <div className="flex items-center gap-2">
                        <Thermometer className="w-4 h-4 text-blue-400" />
                        <div>
                          <div className="text-xs text-slate-400">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</div>
                          <div className="text-sm text-white font-medium">{tank.temperature}¬∞C</div>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="w-4 h-4 bg-blue-400 rounded-full" />
                        <div>
                          <div className="text-xs text-slate-400">–í–æ–¥–∞</div>
                          <div className="text-sm text-white font-medium">{tank.waterLevelMm} –º–º</div>
                        </div>
                      </div>
                    </div>

                    {/* Sensors */}
                    <div>
                      <div className="text-xs text-slate-400 mb-2">–î–∞—Ç—á–∏–∫–∏</div>
                      <div className="flex flex-wrap gap-2">
                        <div className="flex items-center gap-1 bg-slate-600/50 rounded px-2 py-1">
                          <div className="w-2 h-2 bg-blue-400 rounded-full" />
                          <span className="text-xs text-slate-300">–£—Ä–æ–≤–µ–Ω—å</span>
                        </div>
                        <div className="flex items-center gap-1 bg-slate-600/50 rounded px-2 py-1">
                          <div className="w-2 h-2 bg-red-400 rounded-full" />
                          <span className="text-xs text-slate-300">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</span>
                        </div>
                        {tank.waterLevelMm > 0 && (
                          <div className="flex items-center gap-1 bg-slate-600/50 rounded px-2 py-1">
                            <div className="w-2 h-2 bg-green-400 rounded-full" />
                            <span className="text-xs text-slate-300">–ü–æ–¥—Ç–æ–≤–∞—Ä–Ω–∞—è –≤–æ–¥–∞</span>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}