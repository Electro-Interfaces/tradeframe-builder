import React, { useState, useEffect, useMemo } from "react";
import { useIsMobile } from "@/hooks/use-mobile";
import { useSelection } from "@/context/SelectionContext";
import { MainLayout } from "@/components/layout/MainLayout";
import { DollarSign, Users, Fuel, Monitor, CreditCard, Loader2, RefreshCw, Activity, Calendar, Download, HelpCircle } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";
import { BarChart, Bar, XAxis, YAxis, ResponsiveContainer } from "recharts";
import { stsApiService, Transaction } from "@/services/stsApi";
import { tradingPointsService } from "@/services/tradingPointsService";
import { useToast } from "@/hooks/use-toast";
import { SalesForecast } from "@/components/charts/SalesForecast";
import * as XLSX from 'xlsx';


export default function NetworkOverview() {
  const isMobile = useIsMobile();
  const { selectedNetwork, selectedTradingPoint } = useSelection();
  const { toast } = useToast();
  
  // –î–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const today = new Date();
  const monthAgo = new Date();
  monthAgo.setMonth(today.getMonth() - 1);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [dateFrom, setDateFrom] = useState(monthAgo.toISOString().split('T')[0]);
  const [dateTo, setDateTo] = useState(today.toISOString().split('T')[0]);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const [transactions, setTransactions] = useState([]);
  const [tanks, setTanks] = useState([]);
  const [terminalInfo, setTerminalInfo] = useState(null);
  const [prices, setPrices] = useState([]);
  const [loading, setLoading] = useState(false);
  const [stsApiConfigured, setStsApiConfigured] = useState(false);
  const [initializing, setInitializing] = useState(true);

  const isNetworkOnly = selectedNetwork && !selectedTradingPoint;
  const isTradingPointSelected = selectedNetwork && selectedTradingPoint;
  

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const loadTransactions = async () => {
    if (!selectedNetwork?.external_id) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º external_id",
        variant: "destructive",
      });
      return;
    }

    if (!stsApiService.isConfigured()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "STS API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí API –°–¢–°",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è NetworkOverview (—Ç–æ–ª—å–∫–æ STS API)...');
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      setTransactions([]);
      setTanks([]);
      setTerminalInfo(null);
      setPrices([]);
      
      console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é STS API...');
      
      // –Ø–í–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–û–ö–ï–ù–ê –ü–ï–†–ï–î –ó–ê–ü–†–û–°–û–ú
      try {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
        console.log('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω STS API...');
        const tokenRefreshed = await stsApiService.forceRefreshToken();
        
        if (!tokenRefreshed) {
          throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ STS API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è.');
        }
        
        console.log('‚úÖ –¢–æ–∫–µ–Ω STS API —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } catch (authError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ STS API:', authError);
        toast({
          title: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ STS API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
          variant: "destructive",
        });
        throw authError;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ STS API
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è contextParams –∫–∞–∫ –≤ Tanks.tsx
      let contextParams = {
        networkId: selectedNetwork?.external_id || selectedNetwork?.code || '1',
        tradingPointId: undefined
      };

      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ (–Ω–µ 'all'), –ø–æ–ª—É—á–∞–µ–º –µ—ë –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (selectedTradingPoint && selectedTradingPoint !== 'all') {
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –ø–æ ID:', selectedTradingPoint);
        
        try {
          const tradingPointObject = await tradingPointsService.getById(selectedTradingPoint);
          if (tradingPointObject) {
            console.log('üè™ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', tradingPointObject);
            contextParams.tradingPointId = tradingPointObject.external_id || '1';
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', error);
        }
      }
      
      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', contextParams);
      console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ STS API (${contextParams.tradingPointId ? '–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—á–∫–∞' : '–≤—Å—è —Å–µ—Ç—å'})...`);
      
      const stsTransactions = await stsApiService.getTransactions(
        dateFrom,
        dateTo,
        200,
        contextParams
      );
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${stsTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ STS API`);
      setTransactions(stsTransactions);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞
      let additionalDataLoaded = [];
      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Ü–µ–Ω—ã)...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã
        const tanksData = await stsApiService.getTanks(contextParams);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tanksData.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤`);
        setTanks(tanksData);
        if (tanksData.length > 0) additionalDataLoaded.push(`${tanksData.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤`);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞)
        if (contextParams.tradingPointId && contextParams.tradingPointId !== '1') {
          try {
            const terminalData = await stsApiService.getTerminalInfo(contextParams);
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
            setTerminalInfo(terminalData);
            if (terminalData) additionalDataLoaded.push('–¥–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞');
          } catch (terminalError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:', terminalError);
          }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞)
        if (contextParams.tradingPointId && contextParams.tradingPointId !== '1') {
          try {
            const pricesData = await stsApiService.getPrices(contextParams);
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${pricesData.length} —Ü–µ–Ω`);
            setPrices(pricesData);
            if (pricesData.length > 0) additionalDataLoaded.push(`${pricesData.length} —Ü–µ–Ω`);
          } catch (pricesError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã:', pricesError);
          }
        }
        
      } catch (additionalDataError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', additionalDataError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏) —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      }
      
      const additionalText = additionalDataLoaded.length > 0 ? `, ${additionalDataLoaded.join(', ')}` : '';
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${stsTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π${additionalText}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
  const exportToExcel = () => {
    try {
      console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel...');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
      const workbook = XLSX.utils.book_new();
      
      // –õ–∏—Å—Ç 1: –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
      const mainData = [
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        ['–û–¢–ß–ï–¢ –ü–û –¢–û–†–ì–û–í–û–ô –°–ï–¢–ò - –û–ë–ó–û–†'],
        [''],
        ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
        ['–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞', `${dateFrom} - ${dateTo}`],
        ['–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Ç—å', selectedNetwork?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'],
        ['–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞', selectedTradingPoint === 'all' ? '–í—Å–µ —Ç–æ—á–∫–∏' : (selectedTradingPoint || '–í—Å–µ —Ç–æ—á–∫–∏')],
        ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞', new Date().toLocaleString('ru-RU')],
        [''],
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ KPI
        ['–û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò'],
        [''],
        ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ', '', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
        ['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ (‚ÇΩ)', Math.round(totalRevenue), '', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π', filteredTransactions.length],
        ['–û–±—â–∏–π –æ–±—ä–µ–º (–ª)', Math.round(totalVolume), '', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)', Math.round(averageCheck)],
        ['–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é (–ª)', filteredTransactions.length > 0 ? Math.round(totalVolume / filteredTransactions.length) : 0],
        [''],
        ['']
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
      if (fuelTypeStats.length > 0) {
        mainData.push(['–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ò–î–ê–ú –¢–û–ü–õ–ò–í–ê']);
        mainData.push(['']);
        mainData.push(['–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '–û–±—ä–µ–º (–ª)', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)', '–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ (%)']);
        
        fuelTypeStats.forEach(fuel => {
          mainData.push([
            fuel.type,
            fuel.operations,
            Math.round(fuel.revenue),
            Math.round(fuel.volume),
            fuel.operations > 0 ? Math.round(fuel.revenue / fuel.operations) : 0,
            totalRevenue > 0 ? Math.round((fuel.revenue / totalRevenue) * 100 * 100) / 100 : 0
          ]);
        });
        
        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞
        mainData.push([
          '–ò–¢–û–ì–û',
          filteredTransactions.length,
          Math.round(totalRevenue),
          Math.round(totalVolume),
          Math.round(averageCheck),
          100
        ]);
        
        mainData.push(['']);
        mainData.push(['']);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
      if (paymentTypeStats.length > 0) {
        mainData.push(['–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ü–û–°–û–ë–ê–ú –û–ü–õ–ê–¢–´']);
        mainData.push(['']);
        mainData.push(['–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '–û–±—ä–µ–º (–ª)', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)', '–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ (%)']);
        
        paymentTypeStats.forEach(payment => {
          mainData.push([
            payment.type,
            payment.operations,
            Math.round(payment.revenue),
            Math.round(payment.volume),
            payment.operations > 0 ? Math.round(payment.revenue / payment.operations) : 0,
            totalRevenue > 0 ? Math.round((payment.revenue / totalRevenue) * 100 * 100) / 100 : 0
          ]);
        });
        
        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        mainData.push([
          '–ò–¢–û–ì–û',
          filteredTransactions.length,
          Math.round(totalRevenue),
          Math.round(totalVolume),
          Math.round(averageCheck),
          100
        ]);
        
        mainData.push(['']);
        mainData.push(['']);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã –∏ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
        mainData.push(['–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –°–ü–û–°–û–ë–´ –û–ü–õ–ê–¢–´ √ó –í–ò–î–´ –¢–û–ü–õ–ò–í–ê']);
        mainData.push(['']);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞
        const getFuelPriority = (fuelType) => {
          const fuel = fuelType.toLowerCase();
          if (fuel.includes('–∞–∏-98') || fuel.includes('98')) return 1;
          if (fuel.includes('–∞–∏-95') || fuel.includes('95')) return 2;
          if (fuel.includes('–∞–∏-92') || fuel.includes('92')) return 3;
          if (fuel.includes('–∞–∏-91') || fuel.includes('91')) return 4;
          if (fuel.includes('–∞–∏-80') || fuel.includes('80')) return 5;
          if (fuel.includes('–±–µ–Ω–∑–∏–Ω') || fuel.includes('gasoline') || fuel.includes('petrol')) return 6;
          if (fuel.includes('–¥—Ç') || fuel.includes('–¥–∏–∑–µ–ª—å') || fuel.includes('diesel')) return 10;
          if (fuel.includes('–¥—Ç –∑–∏–º–Ω–µ–µ') || fuel.includes('–∑–∏–º–Ω–∏–π –¥–∏–∑–µ–ª—å')) return 11;
          if (fuel.includes('–¥—Ç –ª–µ—Ç–Ω–µ–µ') || fuel.includes('–ª–µ—Ç–Ω–∏–π –¥–∏–∑–µ–ª—å')) return 12;
          if (fuel.includes('–¥—Ç –∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π') || fuel.includes('–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–µ–ª—å')) return 13;
          if (fuel.includes('–≥–∞–∑') || fuel.includes('–≥–∞–∑–æ–≤—ã–π') || fuel.includes('gas')) return 20;
          if (fuel.includes('–∫–µ—Ä–æ—Å–∏–Ω') || fuel.includes('kerosene')) return 21;
          if (fuel.includes('–º–∞—Å–ª–æ') || fuel.includes('oil')) return 22;
          return 99;
        };
        
        const allFuelTypes = [...new Set(
          Object.values(paymentFuelBreakdown).flatMap(paymentData => Object.keys(paymentData))
        )].sort((a, b) => {
          const priorityA = getFuelPriority(a);
          const priorityB = getFuelPriority(b);
          if (priorityA !== priorityB) return priorityA - priorityB;
          return a.localeCompare(b, 'ru');
        });
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        const detailHeaders = ['–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', '–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '–û–±—ä–µ–º (–ª)', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)', '% –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã'];
        mainData.push(detailHeaders);
        
        // –î–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        paymentTypeStats.forEach(payment => {
          const paymentData = paymentFuelBreakdown[payment.type] || {};
          let isFirstRow = true;
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
          const fuelTypesForPayment = Object.keys(paymentData).sort((a, b) => {
            const priorityA = getFuelPriority(a);
            const priorityB = getFuelPriority(b);
            if (priorityA !== priorityB) return priorityA - priorityB;
            return a.localeCompare(b, 'ru');
          });
          
          fuelTypesForPayment.forEach(fuelType => {
            const fuelData = paymentData[fuelType];
            const percentOfPayment = payment.revenue > 0 ? Math.round((fuelData.revenue / payment.revenue) * 100 * 100) / 100 : 0;
            
            mainData.push([
              isFirstRow ? payment.type : '', // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
              fuelType,
              fuelData.operations,
              Math.round(fuelData.revenue),
              Math.round(fuelData.volume),
              fuelData.operations > 0 ? Math.round(fuelData.revenue / fuelData.operations) : 0,
              percentOfPayment
            ]);
            
            isFirstRow = false;
          });
          
          // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
          if (fuelTypesForPayment.length > 0) {
            mainData.push([
              `–ò–¢–û–ì–û –ø–æ "${payment.type}"`,
              '',
              payment.operations,
              Math.round(payment.revenue),
              Math.round(payment.volume),
              payment.operations > 0 ? Math.round(payment.revenue / payment.operations) : 0,
              100 // –í—Å–µ–≥–¥–∞ 100% –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            ]);
            
            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
            mainData.push(['', '', '', '', '', '', '']);
          }
        });
        
        // –û–±—â–∏–π –∏—Ç–æ–≥ –ø–æ –≤—Å–µ–π –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        mainData.push([
          '–û–ë–©–ò–ô –ò–¢–û–ì',
          `${allFuelTypes.length} –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞`,
          filteredTransactions.length,
          Math.round(totalRevenue),
          Math.round(totalVolume),
          Math.round(averageCheck),
          100
        ]);
      }
      
      const mainWorksheet = XLSX.utils.aoa_to_sheet(mainData);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ª–∏—Å—Ç—É
      const range = XLSX.utils.decode_range(mainWorksheet['!ref']);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
      const columnWidths = [
        { wch: 25 }, // A - –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π/—Ç–æ–ø–ª–∏–≤–∞/—Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        { wch: 20 }, // B - –ó–Ω–∞—á–µ–Ω–∏—è/–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞/–û–ø–µ—Ä–∞—Ü–∏–∏
        { wch: 15 }, // C - –û–ø–µ—Ä–∞—Ü–∏–∏/–í—ã—Ä—É—á–∫–∞
        { wch: 15 }, // D - –í—ã—Ä—É—á–∫–∞/–û–±—ä–µ–º
        { wch: 15 }, // E - –û–±—ä–µ–º/–°—Ä–µ–¥–Ω–∏–π —á–µ–∫
        { wch: 15 }, // F - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫/–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏
        { wch: 15 }  // G - % –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
      ];
      mainWorksheet['!cols'] = columnWidths;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç)
      const headerCells = ['A1', 'A9'];
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
      const fuelStatsIndex = mainData.findIndex(row => row[0] === '–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ò–î–ê–ú –¢–û–ü–õ–ò–í–ê');
      const paymentStatsIndex = mainData.findIndex(row => row[0] === '–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ü–û–°–û–ë–ê–ú –û–ü–õ–ê–¢–´');
      const detailStatsIndex = mainData.findIndex(row => row[0] === '–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –°–ü–û–°–û–ë–´ –û–ü–õ–ê–¢–´ √ó –í–ò–î–´ –¢–û–ü–õ–ò–í–ê');
      
      if (fuelStatsIndex > -1) headerCells.push('A' + (fuelStatsIndex + 1));
      if (paymentStatsIndex > -1) headerCells.push('A' + (paymentStatsIndex + 1));
      if (detailStatsIndex > -1) headerCells.push('A' + (detailStatsIndex + 1));
      
      headerCells.forEach(cellAddr => {
        if (mainWorksheet[cellAddr]) {
          mainWorksheet[cellAddr].s = {
            font: { bold: true, sz: 14 },
            alignment: { horizontal: 'left' }
          };
        }
      });
      
      XLSX.utils.book_append_sheet(workbook, mainWorksheet, '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏');
      
      // –õ–∏—Å—Ç 2: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
      if (dailyActivityData.length > 0) {
        const hourlyData = [
          ['–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú –°–£–¢–û–ö'],
          [''],
          ['–ß–∞—Å', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞ —á–∞—Å (‚ÇΩ)'],
          ...dailyActivityData.map(hour => [
            hour.hour,
            hour.operations,
            Math.round(hour.revenue),
            hour.operations > 0 ? Math.round(hour.revenue / hour.operations) : 0
          ])
        ];
        
        const hourlyWorksheet = XLSX.utils.aoa_to_sheet(hourlyData);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
        hourlyWorksheet['!cols'] = [
          { wch: 10 }, // –ß–∞—Å
          { wch: 12 }, // –û–ø–µ—Ä–∞—Ü–∏–∏ 
          { wch: 15 }, // –í—ã—Ä—É—á–∫–∞
          { wch: 20 }  // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
        ];
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if (hourlyWorksheet['A1']) {
          hourlyWorksheet['A1'].s = {
            font: { bold: true, sz: 14 },
            alignment: { horizontal: 'center' }
          };
        }
        
        XLSX.utils.book_append_sheet(workbook, hourlyWorksheet, '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º');
      }
      
      // –õ–∏—Å—Ç 3: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
      if (dailySalesData.data.length > 0) {
        const salesHeaders = ['–î–∞—Ç–∞', '–û–ø–µ—Ä–∞—Ü–∏–∏', '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', '–û–±—ä–µ–º (–ª)', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)'];
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ç–æ–ø–ª–∏–≤–∞
        dailySalesData.fuelTypes.forEach(fuelType => {
          salesHeaders.push(`${fuelType} (‚ÇΩ)`);
        });
        
        const salesData = [
          ['–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –î–ù–Ø–ú –° –†–ê–ó–ë–ò–í–ö–û–ô –ü–û –¢–û–ü–õ–ò–í–£'],
          [''],
          salesHeaders,
          ...dailySalesData.data.map(day => {
            const baseData = [
              day.date,
              day.operations,
              Math.round(day.revenue),
              Math.round(day.volume),
              day.operations > 0 ? Math.round(day.revenue / day.operations) : 0
            ];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∏–¥—É —Ç–æ–ø–ª–∏–≤–∞
            dailySalesData.fuelTypes.forEach(fuelType => {
              baseData.push(Math.round(day[fuelType] || 0));
            });
            
            return baseData;
          })
        ];
        
        const salesWorksheet = XLSX.utils.aoa_to_sheet(salesData);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
        const salesColWidths = [
          { wch: 12 }, // –î–∞—Ç–∞
          { wch: 12 }, // –û–ø–µ—Ä–∞—Ü–∏–∏
          { wch: 15 }, // –í—ã—Ä—É—á–∫–∞
          { wch: 12 }, // –û–±—ä–µ–º
          { wch: 15 }  // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
        ];
        
        // –î–æ–±–∞–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—ã –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–æ–ø–ª–∏–≤–∞
        dailySalesData.fuelTypes.forEach(() => {
          salesColWidths.push({ wch: 15 });
        });
        
        salesWorksheet['!cols'] = salesColWidths;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if (salesWorksheet['A1']) {
          salesWorksheet['A1'].s = {
            font: { bold: true, sz: 14 },
            alignment: { horizontal: 'center' }
          };
        }
        
        XLSX.utils.book_append_sheet(workbook, salesWorksheet, '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º');
      }
      
      // –õ–∏—Å—Ç 4: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
      if (heatmapData.length > 0) {
        const heatmapHeaders = ['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', '–î–∞—Ç–∞'];
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
        for (let hour = 0; hour < 24; hour++) {
          heatmapHeaders.push(`${hour.toString().padStart(2, '0')}:00`);
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        const getColorIndicator = (value) => {
          if (value === 0) return '‚¨ú'; // –ë–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç –¥–ª—è –Ω—É–ª—è
          
          const maxVal = Math.max(...heatmapData.flatMap(day => day.hours.map(h => h.transactions)));
          const normalized = maxVal > 0 ? value / maxVal : 0;
          
          if (normalized <= 0.2) return 'üî∑'; // –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
          else if (normalized <= 0.4) return 'üîπ'; // –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
          else if (normalized <= 0.6) return 'üü¶'; // –°—Ä–µ–¥–Ω–µ-—Å–∏–Ω–∏–π
          else if (normalized <= 0.8) return 'üîµ'; // –°–∏–Ω–∏–π
          else return 'üü¶'; // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å–∏–º–≤–æ–ª)
        };

        const heatmapExportData = [
          ['–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú –ò –ß–ê–°–ê–ú (–¢–ï–ü–õ–û–í–ê–Ø –ö–ê–†–¢–ê)'],
          [''],
          heatmapHeaders,
          ...heatmapData.map(day => {
            const rowData = [day.dayName, day.date];
            day.hours.forEach(hourData => {
              // –î–æ–±–∞–≤–ª—è–µ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
              const cellValue = hourData.transactions > 0 
                ? `${hourData.transactions} ${getColorIndicator(hourData.transactions)}`
                : getColorIndicator(0);
              rowData.push(cellValue);
            });
            return rowData;
          })
        ];
        
        const heatmapWorksheet = XLSX.utils.aoa_to_sheet(heatmapExportData);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        const heatmapColWidths = [
          { wch: 12 }, // –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
          { wch: 12 }  // –î–∞—Ç–∞
        ];
        
        // –£–∑–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —á–∞—Å–æ–≤
        for (let i = 0; i < 24; i++) {
          heatmapColWidths.push({ wch: 6 });
        }
        
        heatmapWorksheet['!cols'] = heatmapColWidths;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if (heatmapWorksheet['A1']) {
          heatmapWorksheet['A1'].s = {
            font: { bold: true, sz: 14 },
            alignment: { horizontal: 'center' }
          };
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –¥–∞–Ω–Ω—ã–º —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        const range = XLSX.utils.decode_range(heatmapWorksheet['!ref']);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        let allValues = [];
        heatmapData.forEach(day => {
          day.hours.forEach(hourData => {
            if (hourData.transactions > 0) {
              allValues.push(hourData.transactions);
            }
          });
        });
        
        if (allValues.length > 0) {
          const minValue = Math.min(...allValues);
          const maxValue = Math.max(...allValues);
          
          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
          const getBlueColor = (value) => {
            if (value === 0) return 'FFFFFF'; // –ë–µ–ª—ã–π –¥–ª—è –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1
            const normalized = maxValue > minValue ? (value - minValue) / (maxValue - minValue) : 0;
            
            // –ì—Ä–∞–¥–∞—Ü–∏–∏ —Å–∏–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞ –æ—Ç —Å–≤–µ—Ç–ª–æ–≥–æ –∫ —Ç–µ–º–Ω–æ–º—É
            if (normalized <= 0.2) return 'E3F2FD'; // –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
            else if (normalized <= 0.4) return 'BBDEFB'; // –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
            else if (normalized <= 0.6) return '90CAF9'; // –°—Ä–µ–¥–Ω–µ-—Å–∏–Ω–∏–π
            else if (normalized <= 0.8) return '64B5F6'; // –°–∏–Ω–∏–π
            else return '2196F3'; // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
          };
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —è—á–µ–π–∫–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
          heatmapData.forEach((day, dayIndex) => {
            const rowIndex = dayIndex + 3; // –ù–∞—á–∏–Ω–∞–µ–º —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 3), —É—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            
            day.hours.forEach((hourData, hourIndex) => {
              const colIndex = hourIndex + 2; // –°—Ç–æ–ª–±—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å C (–∏–Ω–¥–µ–∫—Å 2)
              const cellAddr = XLSX.utils.encode_cell({ r: rowIndex, c: colIndex });
              
              if (heatmapWorksheet[cellAddr]) {
                const bgColor = getBlueColor(hourData.transactions);
                
                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∏–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                if (!heatmapWorksheet[cellAddr].s) {
                  heatmapWorksheet[cellAddr].s = {};
                }
                
                heatmapWorksheet[cellAddr].s = {
                  ...heatmapWorksheet[cellAddr].s,
                  fill: {
                    patternType: 'solid',
                    fgColor: { rgb: bgColor }
                  },
                  alignment: { 
                    horizontal: 'center', 
                    vertical: 'middle' 
                  },
                  font: { 
                    sz: 10,
                    color: { rgb: hourData.transactions > 0 && bgColor === '2196F3' ? 'FFFFFF' : '000000' }
                  },
                  border: {
                    top: { style: 'thin', color: { rgb: 'CCCCCC' } },
                    bottom: { style: 'thin', color: { rgb: 'CCCCCC' } },
                    left: { style: 'thin', color: { rgb: 'CCCCCC' } },
                    right: { style: 'thin', color: { rgb: 'CCCCCC' } }
                  }
                };
              }
            });
          });
          
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –¥–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
          const dataStartRow = 4; // –°—Ç—Ä–æ–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö (1-indexed)
          const dataStartCol = 3;  // –ö–æ–ª–æ–Ω–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö (1-indexed)
          const dataEndRow = dataStartRow + heatmapData.length - 1;
          const dataEndCol = dataStartCol + 23; // 24 —á–∞—Å–∞
          
          // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
          if (!heatmapWorksheet['!conditionalFormatting']) {
            heatmapWorksheet['!conditionalFormatting'] = [];
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —à–∫–∞–ª—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
          heatmapWorksheet['!conditionalFormatting'].push({
            ref: XLSX.utils.encode_range({
              s: { r: dataStartRow - 1, c: dataStartCol - 1 },
              e: { r: dataEndRow - 1, c: dataEndCol - 1 }
            }),
            rules: [
              {
                type: 'colorScale',
                priority: 1,
                colorScale: {
                  cfvo: [
                    { type: 'min', val: 0 },
                    { type: 'percentile', val: 50 },
                    { type: 'max', val: maxValue }
                  ],
                  color: [
                    { rgb: 'FFFFFF' }, // –ë–µ–ª—ã–π –¥–ª—è –º–∏–Ω–∏–º—É–º–∞
                    { rgb: '90CAF9' }, // –°—Ä–µ–¥–Ω–∏–π —Å–∏–Ω–∏–π
                    { rgb: '2196F3' }  // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞
                  ]
                }
              }
            ]
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É —Ü–≤–µ—Ç–æ–≤ –≤ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –ª–∏—Å—Ç–∞
          const legendStartRow = heatmapData.length + 6;
          
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–µ–≥–µ–Ω–¥—ã
          const legendTitleAddr = XLSX.utils.encode_cell({ r: legendStartRow, c: 0 });
          heatmapWorksheet[legendTitleAddr] = { 
            v: '–¶–í–ï–¢–û–í–ê–Ø –õ–ï–ì–ï–ù–î–ê:', 
            t: 's',
            s: { 
              font: { bold: true, sz: 12 },
              alignment: { horizontal: 'left' }
            }
          };
          
          // –õ–µ–≥–µ–Ω–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
          const legendItems = [
            { label: '0 –æ–ø–µ—Ä–∞—Ü–∏–π', indicator: '‚¨ú' },
            { label: `1-${Math.ceil(maxValue * 0.2)} –æ–ø–µ—Ä–∞—Ü–∏–π (–Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)`, indicator: 'üî∑' },
            { label: `${Math.ceil(maxValue * 0.2 + 1)}-${Math.ceil(maxValue * 0.4)} –æ–ø–µ—Ä–∞—Ü–∏–π (–Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)`, indicator: 'üîπ' },
            { label: `${Math.ceil(maxValue * 0.4 + 1)}-${Math.ceil(maxValue * 0.6)} –æ–ø–µ—Ä–∞—Ü–∏–π (—Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)`, indicator: 'üü¶' },
            { label: `${Math.ceil(maxValue * 0.6 + 1)}-${Math.ceil(maxValue * 0.8)} –æ–ø–µ—Ä–∞—Ü–∏–π (–≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)`, indicator: 'üîµ' },
            { label: `${Math.ceil(maxValue * 0.8 + 1)}+ –æ–ø–µ—Ä–∞—Ü–∏–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)`, indicator: 'üü¶' }
          ];
          
          legendItems.forEach((item, index) => {
            const legendRow = legendStartRow + index + 2;
            
            // –≠–º–æ–¥–∑–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            const indicatorCellAddr = XLSX.utils.encode_cell({ r: legendRow, c: 0 });
            heatmapWorksheet[indicatorCellAddr] = { 
              v: item.indicator, 
              t: 's',
              s: { 
                font: { sz: 16 },
                alignment: { horizontal: 'center', vertical: 'middle' }
              }
            };
            
            // –û–ø–∏—Å–∞–Ω–∏–µ
            const labelCellAddr = XLSX.utils.encode_cell({ r: legendRow, c: 1 });
            heatmapWorksheet[labelCellAddr] = { 
              v: item.label, 
              t: 's',
              s: { 
                font: { sz: 10 },
                alignment: { horizontal: 'left', vertical: 'middle' }
              }
            };
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ª–∏—Å—Ç–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã
          const newRange = XLSX.utils.encode_range({
            s: { r: 0, c: 0 },
            e: { r: legendStartRow + legendItems.length + 3, c: 25 }
          });
          heatmapWorksheet['!ref'] = newRange;
        }
        
        XLSX.utils.book_append_sheet(workbook, heatmapWorksheet, '–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞');
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
      const now = new Date();
      const dateStr = now.toISOString().split('T')[0];
      const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-');
      const networkName = selectedNetwork?.name?.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9]/g, '_') || 'network';
      const fileName = `–û–±–∑–æ—Ä_${networkName}_${dateStr}_${timeStr}.xlsx`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      XLSX.writeFile(workbook, fileName);
      
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', fileName);
      toast({
        title: "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
        description: `–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${fileName}`,
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive",
      });
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üîÑ NetworkOverview useEffect –∑–∞–ø—É—â–µ–Ω');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ STS API (–æ–±—Ö–æ–¥–∏–º –∫—ç—à)
    const checkConfig = async () => {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const isConfigured = stsApiService.isConfigured();
        console.log('üîç STS API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞:', isConfigured);
        setStsApiConfigured(isConfigured);
        
        setInitializing(false);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ—Ç—å –ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω STS API
        if (selectedNetwork && isConfigured) {
          console.log('‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
          loadTransactions();
        } else if (selectedNetwork && !isConfigured) {
          console.log('‚ö†Ô∏è STS API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ');
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast —Å—Ä–∞–∑—É, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        setInitializing(false);
      }
    };
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const initTimer = setTimeout(checkConfig, 1500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ 1.5 —Å–µ–∫

    return () => clearTimeout(initTimer);
  }, [selectedNetwork, selectedTradingPoint, dateFrom, dateTo]);

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const completedTransactions = useMemo(() => {
    const completed = transactions.filter(tx => tx.status === 'completed' || !tx.status);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('üîç NetworkOverview: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', {
      totalTransactions: transactions.length,
      completedTransactions: completed.length,
      dateFrom,
      dateTo,
      sampleTransactions: transactions.slice(0, 3).map(tx => ({
        id: tx.id,
        timestamp: tx.timestamp || tx.createdAt || tx.date,
        status: tx.status,
        paymentMethod: tx.paymentMethod,
        apiDataPayment: tx.apiData?.payment_method,
        paymentType: tx.paymentType,
        total: tx.total || tx.actualAmount || tx.totalCost,
        volume: tx.volume || tx.actualQuantity || tx.quantity,
        fuelType: tx.fuelType || tx.apiData?.product_name
      }))
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const onlineTransactions = transactions.filter(tx => {
      const paymentMethod = tx.paymentMethod || tx.apiData?.payment_method || tx.paymentType;
      return paymentMethod && String(paymentMethod).toLowerCase().includes('online');
    });
    
    console.log('üõí NetworkOverview: –û–Ω–ª–∞–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã:', {
      count: onlineTransactions.length,
      examples: onlineTransactions.slice(0, 2).map(tx => ({
        id: tx.id,
        paymentMethod: tx.paymentMethod,
        apiDataPayment: tx.apiData?.payment_method,
        status: tx.status,
        total: tx.total || tx.actualAmount || tx.totalCost
      }))
    });
    
    return completed;
  }, [transactions, dateFrom, dateTo]);

  // –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç –¥–ª—è –∏—Ç–æ–≥–æ–≤
  const filteredTransactions = useMemo(() => {
    const startDate = new Date(dateFrom);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date(dateTo);
    endDate.setHours(23, 59, 59, 999);
    
    const filtered = completedTransactions.filter(tx => {
      const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
      return txDate >= startDate && txDate <= endDate;
    });
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
    console.log('üìÖ NetworkOverview: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º:', {
      dateFrom,
      dateTo,
      startDate: startDate.toISOString(),
      endDate: endDate.toISOString(),
      completedTotal: completedTransactions.length,
      filteredTotal: filtered.length,
      filteredOutCount: completedTransactions.length - filtered.length
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
    const onlineFiltered = filtered.filter(tx => {
      const paymentMethod = tx.paymentMethod || tx.apiData?.payment_method || tx.paymentType;
      return paymentMethod && String(paymentMethod).toLowerCase().includes('online');
    });
    
    console.log('üõí NetworkOverview: –û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', {
      count: onlineFiltered.length,
      examples: onlineFiltered.slice(0, 2)
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    const outsideDateRange = completedTransactions.filter(tx => {
      const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
      return txDate < startDate || txDate > endDate;
    });
    
    if (outsideDateRange.length > 0) {
      console.log('‚è∞ NetworkOverview: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç:', {
        count: outsideDateRange.length,
        examples: outsideDateRange.slice(0, 2).map(tx => ({
          date: tx.timestamp || tx.createdAt || tx.date,
          paymentMethod: tx.paymentMethod || tx.apiData?.payment_method,
          status: tx.status
        }))
      });
    }
    
    return filtered;
  }, [completedTransactions, dateFrom, dateTo]);

  const totalRevenue = useMemo(() => {
    return filteredTransactions.reduce((sum, tx) => 
      sum + (tx.total || tx.actualAmount || tx.totalCost || 0), 0
    );
  }, [filteredTransactions]);

  const totalVolume = useMemo(() => {
    return filteredTransactions.reduce((sum, tx) => 
      sum + (tx.volume || tx.actualQuantity || tx.quantity || 0), 0
    );
  }, [filteredTransactions]);

  const averageCheck = useMemo(() => {
    return filteredTransactions.length > 0 ? totalRevenue / filteredTransactions.length : 0;
  }, [totalRevenue, filteredTransactions.length]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞ (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–∞–º)
  const fuelTypeStats = useMemo(() => {
    if (filteredTransactions.length === 0) return [];
    
    const fuelGroups = filteredTransactions.reduce((groups, tx) => {
      const fuelType = tx.fuelType || tx.apiData?.product_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      if (!groups[fuelType]) {
        groups[fuelType] = [];
      }
      groups[fuelType].push(tx);
      return groups;
    }, {});

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–ø–ª–∏–≤–∞
    const getFuelPriority = (fuelType) => {
      const fuel = fuelType.toLowerCase();
      
      // –ë–µ–Ω–∑–∏–Ω—ã
      if (fuel.includes('–∞–∏-98') || fuel.includes('98')) return 1;
      if (fuel.includes('–∞–∏-95') || fuel.includes('95')) return 2;
      if (fuel.includes('–∞–∏-92') || fuel.includes('92')) return 3;
      if (fuel.includes('–∞–∏-91') || fuel.includes('91')) return 4;
      if (fuel.includes('–∞–∏-80') || fuel.includes('80')) return 5;
      if (fuel.includes('–±–µ–Ω–∑–∏–Ω') || fuel.includes('gasoline') || fuel.includes('petrol')) return 6;
      
      // –î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ
      if (fuel.includes('–¥—Ç') || fuel.includes('–¥–∏–∑–µ–ª—å') || fuel.includes('diesel')) return 10;
      if (fuel.includes('–¥—Ç –∑–∏–º–Ω–µ–µ') || fuel.includes('–∑–∏–º–Ω–∏–π –¥–∏–∑–µ–ª—å')) return 11;
      if (fuel.includes('–¥—Ç –ª–µ—Ç–Ω–µ–µ') || fuel.includes('–ª–µ—Ç–Ω–∏–π –¥–∏–∑–µ–ª—å')) return 12;
      if (fuel.includes('–¥—Ç –∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π') || fuel.includes('–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–µ–ª—å')) return 13;
      
      // –î—Ä—É–≥–∏–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞
      if (fuel.includes('–≥–∞–∑') || fuel.includes('–≥–∞–∑–æ–≤—ã–π') || fuel.includes('gas')) return 20;
      if (fuel.includes('–∫–µ—Ä–æ—Å–∏–Ω') || fuel.includes('kerosene')) return 21;
      if (fuel.includes('–º–∞—Å–ª–æ') || fuel.includes('oil')) return 22;
      
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ - –≤ –∫–æ–Ω–µ—Ü
      return 99;
    };

    return Object.entries(fuelGroups).map(([type, txs]) => {
      const revenue = txs.reduce((sum, tx) => sum + (tx.total || tx.actualAmount || tx.totalCost || 0), 0);
      const volume = txs.reduce((sum, tx) => sum + (tx.volume || tx.actualQuantity || tx.quantity || 0), 0);
      return {
        type,
        operations: txs.length,
        revenue,
        volume,
        priority: getFuelPriority(type)
      };
    }).sort((a, b) => {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–±–µ–Ω–∑–∏–Ω—ã ‚Üí –¥–∏–∑–µ–ª—å ‚Üí –æ—Å—Ç–∞–ª—å–Ω–æ–µ)
      if (a.priority !== b.priority) {
        return a.priority - b.priority;
      }
      // –í–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã—Ä—É—á–∫–µ (—É–±—ã–≤–∞–Ω–∏–µ)
      return b.revenue - a.revenue;
    });
  }, [filteredTransactions]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
  const getPaymentTypeDisplayName = (paymentType) => {
    const translations = {
      'bank_card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
      'card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
      'credit_card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
      'debit_card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
      'cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
      'fuel_card': '–¢–æ–ø–ª–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞',
      'fleet_card': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞',
      'online_order': '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑',
      'mobile': '–ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
      'qr': 'QR-–∫–æ–¥',
      'contactless': '–ë–µ—Å–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
      'online': '–û–Ω–ª–∞–π–Ω –ø–ª–∞—Ç–µ–∂',
      'digital': '–¶–∏—Ñ—Ä–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞',
      'transfer': '–ü–µ—Ä–µ–≤–æ–¥',
      'other': '–î—Ä—É–≥–æ–µ',
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ STS API
      '–Ω–∞–ª–∏—á–Ω—ã–µ': '–ù–∞–ª–∏—á–Ω—ã–µ',
      '–∫–∞—Ä—Ç–∞': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
      '—Å–±–µ—Ä–±–∞–Ω–∫': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
      '—Ç–æ–ø–ª–∏–≤–Ω–∞—è_–∫–∞—Ä—Ç–∞': '–¢–æ–ø–ª–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞',
      '–º–æ–±–∏–ª.–ø': '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑',       // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É "–ú–æ–±–∏–ª.–ü" –∏–∑ STS API
      '–º–æ–±–∏–ª—å–Ω–∞—è': '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑',
      '–º–æ–±–∏–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞': '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑'
    };
    return translations[paymentType?.toLowerCase()] || paymentType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–∞–º)
  const paymentTypeStats = useMemo(() => {
    if (filteredTransactions.length === 0) return [];
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const uniquePaymentMethods = new Set();
    filteredTransactions.forEach(tx => {
      const rawPaymentType = tx.paymentMethod || tx.apiData?.payment_method || tx.paymentType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      if (rawPaymentType && rawPaymentType !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
        uniquePaymentMethods.add(rawPaymentType);
      }
    });
    
    console.log('üîç NetworkOverview: –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –æ—Ç STS API:', Array.from(uniquePaymentMethods));
    
    const paymentGroups = filteredTransactions.reduce((groups, tx) => {
      const rawPaymentType = tx.paymentMethod || tx.apiData?.payment_method || tx.paymentType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const paymentType = getPaymentTypeDisplayName(rawPaymentType);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è
      if (paymentType === rawPaymentType && rawPaymentType !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
        console.log('‚ö†Ô∏è NetworkOverview: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –æ—Ç STS API:', rawPaymentType);
      }
      
      if (!groups[paymentType]) {
        groups[paymentType] = [];
      }
      groups[paymentType].push(tx);
      return groups;
    }, {});

    return Object.entries(paymentGroups).map(([type, txs]) => {
      const revenue = txs.reduce((sum, tx) => sum + (tx.total || tx.actualAmount || tx.totalCost || 0), 0);
      const volume = txs.reduce((sum, tx) => sum + (tx.volume || tx.actualQuantity || tx.quantity || 0), 0);
      return {
        type,
        operations: txs.length,
        revenue,
        volume
      };
    }).sort((a, b) => b.revenue - a.revenue);
  }, [filteredTransactions]);

  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
  const paymentFuelBreakdown = useMemo(() => {
    if (filteredTransactions.length === 0) return {};
    
    const breakdown = {};
    
    filteredTransactions.forEach(tx => {
      const rawPaymentType = tx.paymentMethod || tx.apiData?.payment_method || tx.paymentType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const paymentType = getPaymentTypeDisplayName(rawPaymentType);
      const fuelType = tx.fuelType || tx.apiData?.product_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      if (!breakdown[paymentType]) {
        breakdown[paymentType] = {};
      }
      
      if (!breakdown[paymentType][fuelType]) {
        breakdown[paymentType][fuelType] = {
          operations: 0,
          revenue: 0,
          volume: 0
        };
      }
      
      breakdown[paymentType][fuelType].operations++;
      breakdown[paymentType][fuelType].revenue += (tx.total || tx.actualAmount || tx.totalCost || 0);
      breakdown[paymentType][fuelType].volume += (tx.volume || tx.actualQuantity || tx.quantity || 0);
    });
    
    return breakdown;
  }, [filteredTransactions]);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—É—Ç–æ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–∞–º)
  const dailyActivityData = useMemo(() => {
    if (completedTransactions.length === 0) return [];
    
    const startDate = new Date(dateFrom);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date(dateTo);
    endDate.setHours(23, 59, 59, 999);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    const filteredTransactions = completedTransactions.filter(tx => {
      const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
      return txDate >= startDate && txDate <= endDate;
    });
    
    const hourlyActivity = Array(24).fill(0).map((_, hour) => ({
      hour: `${hour}:00`,
      hourNum: hour,
      operations: 0,
      revenue: 0
    }));
    
    filteredTransactions.forEach(tx => {
      const txTime = tx.timestamp || tx.createdAt || tx.date || tx.apiData?.timestamp;
      if (txTime) {
        const hour = new Date(txTime).getHours();
        if (hour >= 0 && hour < 24) {
          hourlyActivity[hour].operations++;
          hourlyActivity[hour].revenue += (tx.total || tx.actualAmount || tx.totalCost || 0);
        }
      }
    });
    
    return hourlyActivity;
  }, [completedTransactions, dateFrom, dateTo]);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
  const dailySalesData = useMemo(() => {
    if (completedTransactions.length === 0) return { data: [], fuelTypes: [] };
    
    const startDate = new Date(dateFrom);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date(dateTo);
    endDate.setHours(23, 59, 59, 999);
    const grouped = {};
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    const filteredTransactions = completedTransactions.filter(tx => {
      const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
      return txDate >= startDate && txDate <= endDate;
    });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–ø–ª–∏–≤–∞ (–¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
    const getFuelPriority = (fuelType) => {
      const fuel = fuelType.toLowerCase();
      
      // –ë–µ–Ω–∑–∏–Ω—ã
      if (fuel.includes('–∞–∏-98') || fuel.includes('98')) return 1;
      if (fuel.includes('–∞–∏-95') || fuel.includes('95')) return 2;
      if (fuel.includes('–∞–∏-92') || fuel.includes('92')) return 3;
      if (fuel.includes('–∞–∏-91') || fuel.includes('91')) return 4;
      if (fuel.includes('–∞–∏-80') || fuel.includes('80')) return 5;
      if (fuel.includes('–±–µ–Ω–∑–∏–Ω') || fuel.includes('gasoline') || fuel.includes('petrol')) return 6;
      
      // –î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ
      if (fuel.includes('–¥—Ç') || fuel.includes('–¥–∏–∑–µ–ª—å') || fuel.includes('diesel')) return 10;
      if (fuel.includes('–¥—Ç –∑–∏–º–Ω–µ–µ') || fuel.includes('–∑–∏–º–Ω–∏–π –¥–∏–∑–µ–ª—å')) return 11;
      if (fuel.includes('–¥—Ç –ª–µ—Ç–Ω–µ–µ') || fuel.includes('–ª–µ—Ç–Ω–∏–π –¥–∏–∑–µ–ª—å')) return 12;
      if (fuel.includes('–¥—Ç –∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π') || fuel.includes('–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–µ–ª—å')) return 13;
      
      // –î—Ä—É–≥–∏–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞
      if (fuel.includes('–≥–∞–∑') || fuel.includes('–≥–∞–∑–æ–≤—ã–π') || fuel.includes('gas')) return 20;
      if (fuel.includes('–∫–µ—Ä–æ—Å–∏–Ω') || fuel.includes('kerosene')) return 21;
      if (fuel.includes('–º–∞—Å–ª–æ') || fuel.includes('oil')) return 22;
      
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ - –≤ –∫–æ–Ω–µ—Ü
      return 99;
    };

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const fuelTypes = [...new Set(filteredTransactions.map(tx => 
      tx.fuelType || tx.apiData?.product_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    ).filter(Boolean))].sort((a, b) => {
      const priorityA = getFuelPriority(a);
      const priorityB = getFuelPriority(b);
      if (priorityA !== priorityB) {
        return priorityA - priorityB;
      }
      return a.localeCompare(b, 'ru');
    });
    
    filteredTransactions.forEach(tx => {
      const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
      const dateKey = txDate.toISOString().split('T')[0]; // YYYY-MM-DD
      const fuelType = tx.fuelType || tx.apiData?.product_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      if (!grouped[dateKey]) {
        grouped[dateKey] = {
          date: dateKey,
          operations: 0,
          revenue: 0,
          volume: 0,
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ç–æ–ø–ª–∏–≤–∞
          ...fuelTypes.reduce((acc, fuel) => {
            acc[fuel] = 0;
            return acc;
          }, {})
        };
      }
      
      const txRevenue = tx.total || tx.actualAmount || tx.totalCost || 0;
      grouped[dateKey].operations++;
      grouped[dateKey].revenue += txRevenue;
      grouped[dateKey].volume += (tx.volume || tx.actualQuantity || tx.quantity || 0);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ä—É—á–∫—É –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –≤–∏–¥—É —Ç–æ–ø–ª–∏–≤–∞
      grouped[dateKey][fuelType] += txRevenue;
    });
    
    return {
      data: Object.values(grouped)
        .sort((a, b) => new Date(a.date) - new Date(b.date))
        .map(item => ({
          ...item,
          displayDate: new Date(item.date).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })
        })),
      fuelTypes
    };
  }, [completedTransactions, dateFrom, dateTo]);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
  const heatmapData = useMemo(() => {
    console.log('Heatmap useMemo called:', {
      selectedNetwork: !!selectedNetwork,
      transactionsLength: transactions.length,
      willGenerate: !(!selectedNetwork || transactions.length === 0)
    });
    
    if (!selectedNetwork || transactions.length === 0) return [];
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –Ω–∞–∑–∞–¥
    const today = new Date();
    today.setHours(23, 59, 59, 999); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∫–æ–Ω–µ—Ü –¥–Ω—è
    
    console.log('Heatmap for last 7 days:', {
      today: today.toDateString(),
      transactionsTotal: transactions.length,
      sampleTodayTransactions: transactions.filter(tx => {
        const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
        const todayStart = new Date();
        todayStart.setHours(0, 0, 0, 0);
        return txDate >= todayStart && txDate <= today;
      }).length
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 7 –¥–Ω–µ–π √ó 24 —á–∞—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    const heatmapGrid = [];
    const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–æ—Ç 6 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–æ —Å–µ–≥–æ–¥–Ω—è)
    for (let dayOffset = 6; dayOffset >= 0; dayOffset--) {
      const currentDate = new Date();
      currentDate.setDate(today.getDate() - dayOffset);
      currentDate.setHours(0, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è
      const dateStr = currentDate.toISOString().split('T')[0];
      const dayOfWeek = currentDate.getDay(); // 0=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, etc.
      
      const dayRow = {
        date: dateStr,
        dayName: dayNames[dayOfWeek],
        dayOfWeek: dayOfWeek,
        hours: []
      };
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 24 —á–∞—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
      for (let hour = 0; hour < 24; hour++) {
        const hourTransactions = transactions.filter(tx => {
          const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
          const txHour = txDate.getHours();
          return txDate.getFullYear() === currentDate.getFullYear() &&
                 txDate.getMonth() === currentDate.getMonth() &&
                 txDate.getDate() === currentDate.getDate() &&
                 txHour === hour;
        });
        
        const transactionCount = hourTransactions.length;
        const revenue = hourTransactions.reduce((sum, tx) => 
          sum + (tx.total || tx.actualAmount || tx.totalCost || 0), 0);
        
        dayRow.hours.push({
          hour,
          transactions: transactionCount,
          revenue: Math.round(revenue),
          intensity: transactionCount > 0 ? Math.min(transactionCount / 3, 1) : 0, // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π = –º–∞–∫—Å–∏–º—É–º
          displayTime: `${hour.toString().padStart(2, '0')}:00`
        });
      }
      
      const dayTotal = dayRow.hours.reduce((sum, h) => sum + h.transactions, 0);
      if (dayTotal > 0) {
        console.log(`${dayNames[dayOfWeek]} (${dateStr}): ${dayTotal} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      }
      
      heatmapGrid.push(dayRow);
    }
    
    return heatmapGrid;
  }, [selectedNetwork, transactions]);

  return (
    <MainLayout fullWidth={true}>
      <div className="w-full space-y-6 px-4 md:px-6 lg:px-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <Card className={`bg-gradient-to-br from-slate-800 to-slate-850 border border-slate-600/50 rounded-xl shadow-2xl backdrop-blur-sm ${isMobile ? 'mx-0' : ''} overflow-hidden`}>
          <CardHeader className={`${isMobile ? 'px-4 py-4' : 'px-8 py-6'} bg-gradient-to-r from-slate-800/90 via-slate-750/90 to-slate-800/90 border-b border-slate-600/30`}>
            <CardTitle className={`text-slate-100 flex ${isMobile ? 'flex-col gap-3' : 'items-center justify-between'}`}>
              <div className="flex items-center gap-3">
                <div className="w-1.5 h-10 bg-gradient-to-b from-blue-400 to-blue-600 rounded-full shadow-lg"></div>
                <div className="flex flex-col">
                  <span className={`${isMobile ? 'text-xl font-bold' : 'text-3xl font-bold'} text-white leading-tight`}>–û–±–∑–æ—Ä —Å–µ—Ç–∏</span>
                  <span className="text-slate-400 text-sm font-medium">–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏</span>
                </div>
              </div>
              
              <div className={`flex ${isMobile ? 'gap-2 self-start flex-wrap' : 'gap-4'} items-center`}>
                {!isMobile && (
                  <Button
                    onClick={() => window.open('/help/network-overview', '_blank')}
                    variant="outline"
                    size="sm"
                    className="border-slate-500/60 text-slate-300 hover:text-white hover:bg-slate-600/80 hover:border-slate-400 hover:shadow-md transition-all duration-300 px-5 py-2.5 rounded-lg bg-slate-700/30 backdrop-blur-sm"
                  >
                    <HelpCircle className="w-4 h-4 mr-2" />
                    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
                  </Button>
                )}
                
                {/* –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
                {!initializing && selectedNetwork && filteredTransactions.length > 0 && (
                  <Button
                    onClick={exportToExcel}
                    disabled={loading}
                    size="sm"
                    className="bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-300 px-5 py-2.5 rounded-lg font-medium"
                    title="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel"
                  >
                    <Download className="w-4 h-4 mr-2" />
                    –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                  </Button>
                )}
                
                {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö */}
                {!initializing && selectedNetwork && (
                  <Button
                    onClick={loadTransactions}
                    disabled={loading}
                    size="sm"
                    className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-300 px-5 py-2.5 rounded-lg font-medium disabled:opacity-50"
                  >
                    <div className="w-4 h-4 mr-2 flex items-center justify-center">
                      {loading ? (
                        <Loader2 className="w-4 h-4 animate-spin" />
                      ) : (
                        <RefreshCw className="w-4 h-4" />
                      )}
                    </div>
                    {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
                  </Button>
                )}
              </div>
            </CardTitle>
          </CardHeader>
        </Card>

        <div className="space-y-6">

        {/* –§–∏–ª—å—Ç—Ä—ã - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ—Ç—å */}
        {!initializing && selectedNetwork && (
          <Card className={`bg-slate-800 border border-slate-700 rounded-lg shadow-lg ${isMobile ? 'mx-0' : ''}`}>
            <CardContent className={`${isMobile ? 'px-4 py-4' : 'px-6 py-4'}`}>
              <div className={`flex items-center gap-3 ${isMobile ? 'mb-4' : 'mb-6'}`}>
                <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0 shadow-md">
                  <span className="text-white text-sm">‚öôÔ∏è</span>
                </div>
                <h2 className={`${isMobile ? 'text-lg' : 'text-xl'} font-semibold text-white`}>–§–∏–ª—å—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞</h2>
              </div>
              
              <div className={`grid ${isMobile ? 'grid-cols-1 gap-4' : 'grid-cols-2 gap-6'}`}>
                {/* –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ */}
                <Card className="bg-slate-800 border-slate-600">
                  <CardContent className="p-4">
                    <Label htmlFor="dateFrom" className="text-slate-300 text-sm font-medium mb-2 block">–î–∞—Ç–∞ —Å</Label>
                    <div className="relative">
                      <Input
                        id="dateFrom"
                        type="date"
                        value={dateFrom}
                        onChange={(e) => setDateFrom(e.target.value)}
                        className="bg-slate-700 border-slate-600 text-slate-200 h-10 text-base pr-10 focus:border-blue-500 focus:ring-blue-500 [&::-webkit-calendar-picker-indicator]:opacity-0 [&::-webkit-calendar-picker-indicator]:absolute [&::-webkit-calendar-picker-indicator]:right-2 [&::-webkit-calendar-picker-indicator]:w-5 [&::-webkit-calendar-picker-indicator]:h-5 [&::-webkit-calendar-picker-indicator]:cursor-pointer"
                      />
                      <Calendar 
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400 hover:text-blue-400 transition-colors pointer-events-none" 
                      />
                    </div>
                  </CardContent>
                </Card>
                
                {/* –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è */}
                <Card className="bg-slate-800 border-slate-600">
                  <CardContent className="p-4">
                    <Label htmlFor="dateTo" className="text-slate-300 text-sm font-medium mb-2 block">–î–∞—Ç–∞ –ø–æ</Label>
                    <div className="relative">
                      <Input
                        id="dateTo"
                        type="date"
                        value={dateTo}
                        onChange={(e) => setDateTo(e.target.value)}
                        className="bg-slate-700 border-slate-600 text-slate-200 h-10 text-base pr-10 focus:border-blue-500 focus:ring-blue-500 [&::-webkit-calendar-picker-indicator]:opacity-0 [&::-webkit-calendar-picker-indicator]:absolute [&::-webkit-calendar-picker-indicator]:right-2 [&::-webkit-calendar-picker-indicator]:w-5 [&::-webkit-calendar-picker-indicator]:h-5 [&::-webkit-calendar-picker-indicator]:cursor-pointer"
                      />
                      <Calendar 
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400 hover:text-blue-400 transition-colors pointer-events-none" 
                      />
                    </div>
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞ */}
        {!initializing && selectedNetwork && fuelTypeStats.length > 0 && (
          <div className={`grid gap-4 ${isMobile ? 'grid-cols-1' : 'grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'}`}>
            {fuelTypeStats.map((fuel) => (
              <Card key={fuel.type} className="bg-slate-800 border-slate-600">
                <CardContent className={`${isMobile ? 'p-4' : 'p-6'}`}>
                  <div className="flex items-center">
                    <div className="p-2 bg-purple-600 rounded-lg mr-4">
                      <Fuel className="h-6 w-6 text-white" />
                    </div>
                    <div className="flex-1">
                      <p className={`text-white font-semibold mb-1 ${isMobile ? 'text-sm' : 'text-base'}`}>{fuel.type}</p>
                      <p className={`font-bold text-white mb-0.5 ${isMobile ? 'text-lg' : 'text-2xl'}`}>
                        {Math.round(fuel.revenue).toLocaleString('ru-RU')} ‚ÇΩ
                      </p>
                      <div className="space-y-0.5">
                        <p className={`font-bold text-white ${isMobile ? 'text-base' : 'text-xl'}`}>{Math.round(fuel.volume).toLocaleString('ru-RU')} –ª</p>
                        <p className="text-sm text-slate-400">{fuel.operations} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
            
            {/* –ò—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
            <Card className="bg-slate-700 border-slate-500 border-2">
              <CardContent className={`${isMobile ? 'p-4' : 'p-6'}`}>
                <div className="flex items-center">
                  <div className="p-2 bg-blue-600 rounded-lg mr-4">
                    <Activity className="h-6 w-6 text-white" />
                  </div>
                  <div className="flex-1">
                    <p className={`text-white font-semibold mb-1 ${isMobile ? 'text-sm' : 'text-base'}`}>–ò—Ç–æ–≥–æ</p>
                    <p className={`font-bold text-white mb-0.5 ${isMobile ? 'text-lg' : 'text-2xl'}`}>
                      {Math.round(totalRevenue).toLocaleString('ru-RU')} ‚ÇΩ
                    </p>
                    <div className="space-y-0.5">
                      <p className={`font-bold text-white ${isMobile ? 'text-base' : 'text-xl'}`}>{Math.round(totalVolume).toLocaleString('ru-RU')} –ª</p>
                      <p className="text-sm text-slate-400">{filteredTransactions.length} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã */}
        {!initializing && selectedNetwork && paymentTypeStats.length > 0 && (
          <div className={`grid gap-4 ${isMobile ? 'grid-cols-1' : 'grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'}`}>
            {paymentTypeStats.map((payment) => (
              <Card key={payment.type} className="bg-slate-800 border-slate-600">
                <CardContent className={`${isMobile ? 'p-4' : 'p-6'}`}>
                  <div className="flex items-center">
                    <div className="p-2 bg-green-600 rounded-lg mr-4">
                      <CreditCard className="h-6 w-6 text-white" />
                    </div>
                    <div className="flex-1">
                      <p className={`text-white font-semibold mb-1 ${isMobile ? 'text-sm' : 'text-base'}`}>{payment.type}</p>
                      <p className={`font-bold text-white mb-0.5 ${isMobile ? 'text-lg' : 'text-2xl'}`}>
                        {Math.round(payment.revenue).toLocaleString('ru-RU')} ‚ÇΩ
                      </p>
                      <div className="space-y-0.5">
                        <p className={`font-bold text-white ${isMobile ? 'text-base' : 'text-xl'}`}>{Math.round(payment.volume).toLocaleString('ru-RU')} –ª</p>
                        <p className="text-sm text-slate-400">{payment.operations} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
            
            {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ */}
            <Card className="bg-slate-800 border-slate-600">
              <CardContent className={`${isMobile ? 'p-4' : 'p-6'}`}>
                <div className="flex items-center">
                  <div className="p-2 bg-purple-600 rounded-lg mr-4">
                    <Monitor className="h-6 w-6 text-white" />
                  </div>
                  <div className="flex-1">
                    <p className={`text-white font-semibold mb-1 ${isMobile ? 'text-sm' : 'text-base'}`}>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</p>
                    <p className={`font-bold text-white mb-0.5 ${isMobile ? 'text-lg' : 'text-2xl'}`}>
                      {Math.round(averageCheck).toLocaleString('ru-RU')} ‚ÇΩ
                    </p>
                    <div className="space-y-0.5">
                      <p className={`font-bold text-white ${isMobile ? 'text-base' : 'text-xl'}`}>&nbsp;</p>
                      <p className="text-sm text-slate-400">&nbsp;</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}


        {/* –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Ç–æ–ø–ª–∏–≤—É */}
        {!initializing && selectedNetwork && transactions.length > 0 && (
          <Card className="bg-slate-800 border-slate-600">
            <CardHeader className="pb-4">
              <div className="flex items-center justify-between">
                <CardTitle className="text-white text-lg flex items-center gap-2">
                  <DollarSign className="h-5 w-5 text-green-400" />
                  –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º ({dailySalesData.data.length} –¥–Ω–µ–π)
                </CardTitle>
              </div>
            </CardHeader>
            <CardContent className={`pt-0 pb-2 ${isMobile ? 'px-1' : 'px-2'}`}>
              {dailySalesData.data.length > 0 ? (
                <div className={`w-full ${isMobile ? 'h-64' : 'h-80'}`}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart 
                      data={dailySalesData.data} 
                      margin={isMobile ? { top: 10, right: 10, left: 30, bottom: 40 } : { top: 10, right: 30, left: 60, bottom: 20 }}
                    >
                      <XAxis 
                        dataKey="displayDate" 
                        stroke="#94a3b8"
                        fontSize={isMobile ? 10 : 11}
                        tick={{ fill: '#94a3b8' }}
                        angle={isMobile ? -90 : -45}
                        textAnchor="end"
                        height={isMobile ? 40 : 60}
                        interval={isMobile ? "preserveStartEnd" : 0}
                      />
                      <YAxis 
                        stroke="#94a3b8" 
                        fontSize={isMobile ? 10 : 11}
                        tick={{ fill: '#94a3b8' }}
                        tickFormatter={(value) => isMobile ? `${Math.round(value / 1000)}–∫` : `${Math.round(value / 1000)}–∫ ‚ÇΩ`}
                        width={isMobile ? 25 : 60}
                      />
                      <ChartTooltip 
                        content={({ active, payload, label }) => {
                          if (!active || !payload || !payload.length) {
                            return <div style={{ display: 'none' }} />;
                          }
                          
                          const data = payload[0].payload;
                          return (
                            <div className="bg-slate-900/95 border border-slate-600 rounded-lg p-3 shadow-xl backdrop-blur-sm">
                              <p className="text-white font-medium mb-2">{label}</p>
                              <div className="space-y-1">
                                <p className="text-slate-300 flex justify-between">
                                  <span>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</span>
                                  <span className="font-medium">{Math.round(data.revenue).toLocaleString('ru-RU')} ‚ÇΩ</span>
                                </p>
                                {dailySalesData.fuelTypes
                                  .map((fuelType, index) => ({ fuelType, index, revenue: data[fuelType] || 0 }))
                                  .filter(item => item.revenue > 0)
                                  .map(({ fuelType, index, revenue }) => {
                                    const colors = ['#3b82f6', '#1d4ed8', '#1e40af', '#1e3a8a', '#312e81'];
                                    return (
                                      <p key={fuelType} className="flex justify-between" style={{ color: colors[index % colors.length] }}>
                                        <span>{fuelType}:</span>
                                        <span className="font-medium">{Math.round(revenue).toLocaleString('ru-RU')} ‚ÇΩ</span>
                                      </p>
                                    );
                                  })}
                                <p className="text-blue-400 flex justify-between">
                                  <span>–û–ø–µ—Ä–∞—Ü–∏–∏:</span>
                                  <span className="font-medium">{data.operations}</span>
                                </p>
                              </div>
                            </div>
                          );
                        }}
                      />
                      {/* –°—Ç–µ–∫–æ–≤—ã–µ –±–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ —Å –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ */}
                      {dailySalesData.fuelTypes.map((fuelType, index) => {
                        const colors = ['#3b82f6', '#1d4ed8', '#1e40af', '#1e3a8a', '#312e81'];
                        return (
                          <Bar 
                            key={fuelType}
                            dataKey={fuelType} 
                            stackId="fuel"
                            fill={colors[index % colors.length]}
                            radius={index === dailySalesData.fuelTypes.length - 1 ? [2, 2, 0, 0] : [0, 0, 0, 0]}
                          />
                        );
                      })}
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              ) : (
                <div className="flex items-center justify-center h-80 text-slate-400">
                  <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
                </div>
              )}
            </CardContent>
          </Card>
        )}

        {/* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å—É—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
        {!initializing && selectedNetwork && transactions.length > 0 && (
          <div className={`grid gap-6 ${isMobile ? 'grid-cols-1' : 'grid-cols-1 xl:grid-cols-2'}`}>
            {/* –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
            <Card className="bg-slate-800 border-slate-600">
              <CardHeader className={`${isMobile ? 'pb-2' : 'pb-4'}`}>
                <div className="flex items-center justify-between">
                  <CardTitle className={`text-white ${isMobile ? 'text-base' : 'text-lg'} flex items-center gap-2`}>
                    <Activity className="h-5 w-5 text-blue-400" />
                    {isMobile ? '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π' : '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π'}
                  </CardTitle>
                  <div className={`${isMobile ? 'text-xs' : 'text-sm'} text-slate-400`}>
                    {isMobile ? '7 –¥–Ω–µ–π' : '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π'}
                  </div>
                </div>
              </CardHeader>
              <CardContent className={`pt-0 pb-2 ${isMobile ? 'px-1' : 'px-2'}`}>
                {heatmapData && heatmapData.length > 0 ? (
                  <div className="space-y-3">
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —á–∞—Å–∞–º–∏ */}
                    <div className="flex items-center">
                      <div className={`${isMobile ? 'w-8' : 'w-12'} shrink-0`}></div>
                      <div className={`flex-1 flex gap-0.5 text-xs text-slate-400`}>
                        {Array.from({ length: 24 }, (_, hour) => (
                          <div key={hour} className={`flex-1 text-center ${isMobile ? 'text-[8px]' : 'text-[10px]'}`}>
                            {hour % (isMobile ? 4 : 6) === 0 ? hour : ''}
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    {/* –°–µ—Ç–∫–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã */}
                    {heatmapData.map((day) => (
                      <div key={day.date} className="flex items-center">
                        {/* –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ */}
                        <div className={`${isMobile ? 'w-8' : 'w-12'} shrink-0 ${isMobile ? 'text-[10px]' : 'text-xs'} text-slate-300 font-medium`}>
                          {day.dayName}
                        </div>
                        
                        {/* –ß–∞—Å—ã */}
                        <div className="flex-1 flex gap-0.5">
                          {day.hours.map((hourData) => {
                            const intensity = hourData.intensity;
                            let bgColor = 'bg-slate-700'; // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                            
                            if (intensity > 0) {
                              if (intensity <= 0.2) bgColor = 'bg-green-900/40';
                              else if (intensity <= 0.4) bgColor = 'bg-green-700/60';
                              else if (intensity <= 0.6) bgColor = 'bg-green-600/70';
                              else if (intensity <= 0.8) bgColor = 'bg-green-500/80';
                              else bgColor = 'bg-green-400';
                            }
                            
                            return (
                              <div
                                key={hourData.hour}
                                className={`flex-1 aspect-square ${bgColor} ${isMobile ? 'rounded-[1px]' : 'rounded-sm'} cursor-pointer hover:ring-1 hover:ring-green-400 ${isMobile ? '' : 'hover:scale-110'} transition-all duration-200`}
                                title={`${day.dayName}, ${hourData.displayTime}
–û–ø–µ—Ä–∞—Ü–∏–π: ${hourData.transactions}
–í—ã—Ä—É—á–∫–∞: ${hourData.revenue.toLocaleString('ru-RU')} ‚ÇΩ`}
                              />
                            );
                          })}
                        </div>
                      </div>
                    ))}
                    
                    {/* –õ–µ–≥–µ–Ω–¥–∞ */}
                    <div className="flex items-center justify-between text-xs text-slate-400 mt-4 pt-2 border-t border-slate-600">
                      <span>–ú–µ–Ω—å—à–µ</span>
                      <div className="flex items-center gap-1">
                        <div className="w-3 h-3 bg-slate-700 rounded-sm"></div>
                        <div className="w-3 h-3 bg-green-900/40 rounded-sm"></div>
                        <div className="w-3 h-3 bg-green-700/60 rounded-sm"></div>
                        <div className="w-3 h-3 bg-green-600/70 rounded-sm"></div>
                        <div className="w-3 h-3 bg-green-500/80 rounded-sm"></div>
                        <div className="w-3 h-3 bg-green-400 rounded-sm"></div>
                      </div>
                      <span>–ë–æ–ª—å—à–µ</span>
                    </div>
                  </div>
                ) : (
                  <div className="flex items-center justify-center h-64 text-slate-400">
                    <div className="text-center">
                      <Activity className="h-8 w-8 mx-auto mb-2 opacity-50" />
                      <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                      <p className="text-sm">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –∏ –ø–µ—Ä–∏–æ–¥</p>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* –ì—Ä–∞—Ñ–∏–∫ —Å—É—Ç–æ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
            <Card className="bg-slate-800 border-slate-600">
              <CardHeader className={`${isMobile ? 'pb-2' : 'pb-4'}`}>
                <CardTitle className={`text-white ${isMobile ? 'text-base' : 'text-lg'} flex items-center gap-2`}>
                  <Activity className="h-5 w-5 text-blue-400" />
                  {isMobile ? '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º' : '–°—É—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º'}
                </CardTitle>
              </CardHeader>
              <CardContent className={`pt-0 pb-2 ${isMobile ? 'px-1' : 'px-2'}`}>
                <div className={`w-full ${isMobile ? 'h-64' : 'h-80'}`}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart 
                      data={dailyActivityData} 
                      margin={isMobile ? { top: 10, right: 5, left: 25, bottom: 40 } : { top: 10, right: 15, left: 40, bottom: 50 }}
                    >
                      <XAxis 
                        dataKey="hour" 
                        stroke="#94a3b8"
                        fontSize={isMobile ? 9 : 11}
                        interval={isMobile ? 1 : 0}
                        angle={isMobile ? -90 : -45}
                        textAnchor="end"
                        height={isMobile ? 40 : 50}
                        tick={{ fill: '#94a3b8' }}
                      />
                      <YAxis 
                        stroke="#94a3b8" 
                        fontSize={isMobile ? 9 : 11}
                        tick={{ fill: '#94a3b8' }}
                        width={isMobile ? 25 : 35}
                      />
                      <ChartTooltip 
                        content={({ active, payload, label }) => {
                          if (!active || !payload || !payload.length) {
                            return <div style={{ display: 'none' }} />;
                          }
                          
                          const data = payload[0].payload;
                          const hourStart = parseInt(label.split(':')[0]);
                          const hourEnd = hourStart + 1;
                          return (
                            <div className="bg-slate-900/95 border border-slate-600 rounded-lg p-3 shadow-xl backdrop-blur-sm">
                              <p className="text-white font-medium mb-2">
                                {`${hourStart.toString().padStart(2, '0')}:00 - ${hourEnd.toString().padStart(2, '0')}:00`}
                              </p>
                              <div className="space-y-1">
                                <p className="text-blue-400 flex justify-between">
                                  <span>–û–ø–µ—Ä–∞—Ü–∏–∏:</span>
                                  <span className="font-medium">{data.operations}</span>
                                </p>
                                <p className="text-green-400 flex justify-between">
                                  <span>–í—ã—Ä—É—á–∫–∞:</span>
                                  <span className="font-medium">{Math.round(data.revenue).toLocaleString('ru-RU')} ‚ÇΩ</span>
                                </p>
                              </div>
                            </div>
                          );
                        }}
                      />
                      <Bar 
                        dataKey="operations" 
                        fill="#3b82f6"
                        stroke="#2563eb"
                        strokeWidth={1}
                        radius={[3, 3, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ */}
        {!initializing && selectedNetwork && stsApiConfigured && transactions.length > 0 && (() => {
          console.log('üîÆ NetworkOverview: –ü–µ—Ä–µ–¥–∞–µ–º –≤ SalesForecast —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', {
            totalTransactions: transactions.length,
            completedTransactions: completedTransactions.length,
            sampleCompletedTransactions: completedTransactions.slice(0, 3).map(tx => ({
              id: tx.id,
              startTime: tx.startTime,
              total: tx.total,
              fuelType: tx.fuelType
            }))
          });
          return (
            <SalesForecast 
              transactions={completedTransactions}
              className="w-full"
            />
          );
        })()}

        {/* –≠–∫—Ä–∞–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ */}
        {initializing && (
          <div className="bg-slate-800 border border-slate-600 rounded-lg p-8 text-center">
            <div className="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
              <Loader2 className="w-8 h-8 text-blue-500 animate-spin" />
            </div>
            <h3 className="text-xl font-semibold text-white mb-2">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</h3>
            <p className="text-slate-400">–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –¥–∞–Ω–Ω—ã–µ...</p>
          </div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∏ */}
        {!initializing && !selectedNetwork && (
          <div className="bg-slate-800 border border-slate-600 rounded-lg p-8 text-center">
            <div className="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-slate-400 text-2xl">üìä</span>
            </div>
            <h3 className="text-xl font-semibold text-white mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤</h3>
            <p className="text-slate-400">–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ</p>
          </div>
        )}

        {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {!initializing && selectedNetwork && stsApiConfigured && loading && (
          <div className="bg-slate-800 border border-slate-600 rounded-lg p-8 text-center">
            <div className="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
              <Loader2 className="w-8 h-8 text-blue-500 animate-spin" />
            </div>
            <h3 className="text-xl font-semibold text-white mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
            <p className="text-slate-400">–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ STS API...</p>
          </div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
        {!initializing && selectedNetwork && stsApiConfigured && !loading && transactions.length === 0 && (
          <div className="bg-slate-800 border border-slate-600 rounded-lg p-8 text-center">
            <div className="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
              <Activity className="w-8 h-8 text-slate-400" />
            </div>
            <h3 className="text-xl font-semibold text-white mb-2">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</h3>
            <p className="text-slate-400 mb-4">–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
            <Button 
              onClick={loadTransactions}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </Button>
          </div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ STS API */}
        {!initializing && selectedNetwork && !stsApiConfigured && (
          <div className="bg-slate-800 border border-orange-600 rounded-lg p-8 text-center">
            <div className="w-16 h-16 bg-orange-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-white text-2xl">‚öôÔ∏è</span>
            </div>
            <h3 className="text-xl font-semibold text-white mb-2">–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ STS API</h3>
            <p className="text-slate-400 mb-4">–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ STS API. –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API.</p>
            <div className="flex gap-3 justify-center">
              <Button 
                onClick={() => window.location.href = '/settings/sts-api'}
                className="bg-orange-600 hover:bg-orange-700 text-white"
              >
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API
              </Button>
              <Button 
                onClick={async () => {
                  console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ STS API...');
                  setInitializing(true);
                  
                  // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                  setTimeout(() => {
                    const isConfigured = stsApiService.isConfigured();
                    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', isConfigured);
                    setStsApiConfigured(isConfigured);
                    setInitializing(false);
                    
                    if (isConfigured) {
                      toast({
                        title: "–£—Å–ø–µ—à–Ω–æ",
                        description: "STS API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                      });
                      loadTransactions();
                    } else {
                      toast({
                        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                        description: "STS API –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                        variant: "destructive",
                      });
                    }
                  }, 1000);
                }}
                variant="outline"
                className="border-blue-600 text-blue-400 hover:bg-blue-700/20"
              >
                üîÑ –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
            </div>
          </div>
        )}
        </div>
      </div>
    </MainLayout>
  );
}