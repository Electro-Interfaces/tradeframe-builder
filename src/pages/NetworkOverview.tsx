import React, { useState, useEffect, useMemo } from "react";
import { useIsMobile } from "@/hooks/use-mobile";
import { useSelection } from "@/context/SelectionContext";
import { MainLayout } from "@/components/layout/MainLayout";
import { DollarSign, Users, Fuel, Monitor, CreditCard, Loader2, RefreshCw, Activity, Calendar } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";
import { BarChart, Bar, XAxis, YAxis, ResponsiveContainer } from "recharts";
import { stsApiService, Transaction } from "@/services/stsApi";
import { tradingPointsService } from "@/services/tradingPointsService";
import { useToast } from "@/hooks/use-toast";
import { SalesForecast } from "@/components/charts/SalesForecast";


export default function NetworkOverview() {
  const isMobile = useIsMobile();
  const { selectedNetwork, selectedTradingPoint } = useSelection();
  const { toast } = useToast();
  
  // –î–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const today = new Date();
  const monthAgo = new Date();
  monthAgo.setMonth(today.getMonth() - 1);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [dateFrom, setDateFrom] = useState(monthAgo.toISOString().split('T')[0]);
  const [dateTo, setDateTo] = useState(today.toISOString().split('T')[0]);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const [transactions, setTransactions] = useState([]);
  const [tanks, setTanks] = useState([]);
  const [terminalInfo, setTerminalInfo] = useState(null);
  const [prices, setPrices] = useState([]);
  const [loading, setLoading] = useState(false);
  const [stsApiConfigured, setStsApiConfigured] = useState(false);
  const [initializing, setInitializing] = useState(true);

  const isNetworkOnly = selectedNetwork && !selectedTradingPoint;
  const isTradingPointSelected = selectedNetwork && selectedTradingPoint;
  

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const loadTransactions = async () => {
    if (!selectedNetwork?.external_id) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º external_id",
        variant: "destructive",
      });
      return;
    }

    if (!stsApiService.isConfigured()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "STS API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí API –°–¢–°",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è NetworkOverview (—Ç–æ–ª—å–∫–æ STS API)...');
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      setTransactions([]);
      setTanks([]);
      setTerminalInfo(null);
      setPrices([]);
      
      console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é STS API...');
      
      // –Ø–í–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–û–ö–ï–ù–ê –ü–ï–†–ï–î –ó–ê–ü–†–û–°–û–ú
      try {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
        console.log('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω STS API...');
        const tokenRefreshed = await stsApiService.forceRefreshToken();
        
        if (!tokenRefreshed) {
          throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ STS API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è.');
        }
        
        console.log('‚úÖ –¢–æ–∫–µ–Ω STS API —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } catch (authError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ STS API:', authError);
        toast({
          title: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ STS API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
          variant: "destructive",
        });
        throw authError;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ STS API
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è contextParams –∫–∞–∫ –≤ Tanks.tsx
      let contextParams = {
        networkId: selectedNetwork?.external_id || selectedNetwork?.code || '1',
        tradingPointId: undefined
      };

      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ (–Ω–µ 'all'), –ø–æ–ª—É—á–∞–µ–º –µ—ë –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (selectedTradingPoint && selectedTradingPoint !== 'all') {
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –ø–æ ID:', selectedTradingPoint);
        
        try {
          const tradingPointObject = await tradingPointsService.getById(selectedTradingPoint);
          if (tradingPointObject) {
            console.log('üè™ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', tradingPointObject);
            contextParams.tradingPointId = tradingPointObject.external_id || '1';
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', error);
        }
      }
      
      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', contextParams);
      console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ STS API (${contextParams.tradingPointId ? '–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—á–∫–∞' : '–≤—Å—è —Å–µ—Ç—å'})...`);
      
      const stsTransactions = await stsApiService.getTransactions(
        dateFrom,
        dateTo,
        200,
        contextParams
      );
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${stsTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ STS API`);
      setTransactions(stsTransactions);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞
      let additionalDataLoaded = [];
      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Ü–µ–Ω—ã)...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã
        const tanksData = await stsApiService.getTanks(contextParams);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tanksData.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤`);
        setTanks(tanksData);
        if (tanksData.length > 0) additionalDataLoaded.push(`${tanksData.length} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤`);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞)
        if (contextParams.tradingPointId && contextParams.tradingPointId !== '1') {
          try {
            const terminalData = await stsApiService.getTerminalInfo(contextParams);
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
            setTerminalInfo(terminalData);
            if (terminalData) additionalDataLoaded.push('–¥–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞');
          } catch (terminalError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:', terminalError);
          }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞)
        if (contextParams.tradingPointId && contextParams.tradingPointId !== '1') {
          try {
            const pricesData = await stsApiService.getPrices(contextParams);
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${pricesData.length} —Ü–µ–Ω`);
            setPrices(pricesData);
            if (pricesData.length > 0) additionalDataLoaded.push(`${pricesData.length} —Ü–µ–Ω`);
          } catch (pricesError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã:', pricesError);
          }
        }
        
      } catch (additionalDataError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', additionalDataError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏) —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      }
      
      const additionalText = additionalDataLoaded.length > 0 ? `, ${additionalDataLoaded.join(', ')}` : '';
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${stsTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π${additionalText}`,
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üîÑ NetworkOverview useEffect –∑–∞–ø—É—â–µ–Ω');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ STS API (–æ–±—Ö–æ–¥–∏–º –∫—ç—à)
    const checkConfig = async () => {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const isConfigured = stsApiService.isConfigured();
        console.log('üîç STS API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞:', isConfigured);
        setStsApiConfigured(isConfigured);
        
        setInitializing(false);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ—Ç—å –ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω STS API
        if (selectedNetwork && isConfigured) {
          console.log('‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
          loadTransactions();
        } else if (selectedNetwork && !isConfigured) {
          console.log('‚ö†Ô∏è STS API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ');
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast —Å—Ä–∞–∑—É, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        setInitializing(false);
      }
    };
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const initTimer = setTimeout(checkConfig, 1500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ 1.5 —Å–µ–∫

    return () => clearTimeout(initTimer);
  }, [selectedNetwork, selectedTradingPoint, dateFrom, dateTo]);

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const completedTransactions = useMemo(() => {
    const completed = transactions.filter(tx => tx.status === 'completed' || !tx.status);
    
    console.log('All transactions analysis:', {
      totalTransactions: transactions.length,
      completedTransactions: completed.length,
      dateFrom,
      dateTo,
      sampleTransactionDates: transactions.slice(0, 5).map(tx => ({
        timestamp: tx.timestamp || tx.createdAt || tx.date,
        status: tx.status
      }))
    });
    
    return completed;
  }, [transactions, dateFrom, dateTo]);

  // –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç –¥–ª—è –∏—Ç–æ–≥–æ–≤
  const filteredTransactions = useMemo(() => {
    const startDate = new Date(dateFrom);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date(dateTo);
    endDate.setHours(23, 59, 59, 999);
    
    return completedTransactions.filter(tx => {
      const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
      return txDate >= startDate && txDate <= endDate;
    });
  }, [completedTransactions, dateFrom, dateTo]);

  const totalRevenue = useMemo(() => {
    return filteredTransactions.reduce((sum, tx) => 
      sum + (tx.total || tx.actualAmount || tx.totalCost || 0), 0
    );
  }, [filteredTransactions]);

  const totalVolume = useMemo(() => {
    return filteredTransactions.reduce((sum, tx) => 
      sum + (tx.volume || tx.actualQuantity || tx.quantity || 0), 0
    );
  }, [filteredTransactions]);

  const averageCheck = useMemo(() => {
    return filteredTransactions.length > 0 ? totalRevenue / filteredTransactions.length : 0;
  }, [totalRevenue, filteredTransactions.length]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞ (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–∞–º)
  const fuelTypeStats = useMemo(() => {
    if (filteredTransactions.length === 0) return [];
    
    const fuelGroups = filteredTransactions.reduce((groups, tx) => {
      const fuelType = tx.fuelType || tx.apiData?.product_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      if (!groups[fuelType]) {
        groups[fuelType] = [];
      }
      groups[fuelType].push(tx);
      return groups;
    }, {});

    return Object.entries(fuelGroups).map(([type, txs]) => {
      const revenue = txs.reduce((sum, tx) => sum + (tx.total || tx.actualAmount || tx.totalCost || 0), 0);
      const volume = txs.reduce((sum, tx) => sum + (tx.volume || tx.actualQuantity || tx.quantity || 0), 0);
      return {
        type,
        operations: txs.length,
        revenue,
        volume
      };
    }).sort((a, b) => b.revenue - a.revenue);
  }, [filteredTransactions]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
  const getPaymentTypeDisplayName = (paymentType) => {
    const translations = {
      'bank_card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
      'card': '–ö–∞—Ä—Ç–∞',
      'cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
      'mobile': '–ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
      'qr': 'QR-–∫–æ–¥',
      'contactless': '–ë–µ—Å–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
      'online': '–û–Ω–ª–∞–π–Ω –ø–ª–∞—Ç–µ–∂',
      'transfer': '–ü–µ—Ä–µ–≤–æ–¥',
      'other': '–î—Ä—É–≥–æ–µ'
    };
    return translations[paymentType?.toLowerCase()] || paymentType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–∞–º)
  const paymentTypeStats = useMemo(() => {
    if (filteredTransactions.length === 0) return [];
    
    const paymentGroups = filteredTransactions.reduce((groups, tx) => {
      const rawPaymentType = tx.paymentMethod || tx.apiData?.payment_method || tx.paymentType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const paymentType = getPaymentTypeDisplayName(rawPaymentType);
      if (!groups[paymentType]) {
        groups[paymentType] = [];
      }
      groups[paymentType].push(tx);
      return groups;
    }, {});

    return Object.entries(paymentGroups).map(([type, txs]) => {
      const revenue = txs.reduce((sum, tx) => sum + (tx.total || tx.actualAmount || tx.totalCost || 0), 0);
      const volume = txs.reduce((sum, tx) => sum + (tx.volume || tx.actualQuantity || tx.quantity || 0), 0);
      return {
        type,
        operations: txs.length,
        revenue,
        volume
      };
    }).sort((a, b) => b.revenue - a.revenue);
  }, [filteredTransactions]);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—É—Ç–æ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–∞–º)
  const dailyActivityData = useMemo(() => {
    if (completedTransactions.length === 0) return [];
    
    const startDate = new Date(dateFrom);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date(dateTo);
    endDate.setHours(23, 59, 59, 999);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    const filteredTransactions = completedTransactions.filter(tx => {
      const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
      return txDate >= startDate && txDate <= endDate;
    });
    
    const hourlyActivity = Array(24).fill(0).map((_, hour) => ({
      hour: `${hour}:00`,
      hourNum: hour,
      operations: 0,
      revenue: 0
    }));
    
    filteredTransactions.forEach(tx => {
      const txTime = tx.timestamp || tx.createdAt || tx.date || tx.apiData?.timestamp;
      if (txTime) {
        const hour = new Date(txTime).getHours();
        if (hour >= 0 && hour < 24) {
          hourlyActivity[hour].operations++;
          hourlyActivity[hour].revenue += (tx.total || tx.actualAmount || tx.totalCost || 0);
        }
      }
    });
    
    return hourlyActivity;
  }, [completedTransactions, dateFrom, dateTo]);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
  const dailySalesData = useMemo(() => {
    if (completedTransactions.length === 0) return { data: [], fuelTypes: [] };
    
    const startDate = new Date(dateFrom);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date(dateTo);
    endDate.setHours(23, 59, 59, 999);
    const grouped = {};
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    const filteredTransactions = completedTransactions.filter(tx => {
      const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
      return txDate >= startDate && txDate <= endDate;
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞
    const fuelTypes = [...new Set(filteredTransactions.map(tx => 
      tx.fuelType || tx.apiData?.product_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    ).filter(Boolean))].sort();
    
    filteredTransactions.forEach(tx => {
      const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
      const dateKey = txDate.toISOString().split('T')[0]; // YYYY-MM-DD
      const fuelType = tx.fuelType || tx.apiData?.product_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      if (!grouped[dateKey]) {
        grouped[dateKey] = {
          date: dateKey,
          operations: 0,
          revenue: 0,
          volume: 0,
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ç–æ–ø–ª–∏–≤–∞
          ...fuelTypes.reduce((acc, fuel) => {
            acc[fuel] = 0;
            return acc;
          }, {})
        };
      }
      
      const txRevenue = tx.total || tx.actualAmount || tx.totalCost || 0;
      grouped[dateKey].operations++;
      grouped[dateKey].revenue += txRevenue;
      grouped[dateKey].volume += (tx.volume || tx.actualQuantity || tx.quantity || 0);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ä—É—á–∫—É –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –≤–∏–¥—É —Ç–æ–ø–ª–∏–≤–∞
      grouped[dateKey][fuelType] += txRevenue;
    });
    
    return {
      data: Object.values(grouped)
        .sort((a, b) => new Date(a.date) - new Date(b.date))
        .map(item => ({
          ...item,
          displayDate: new Date(item.date).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })
        })),
      fuelTypes
    };
  }, [completedTransactions, dateFrom, dateTo]);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
  const heatmapData = useMemo(() => {
    console.log('Heatmap useMemo called:', {
      selectedNetwork: !!selectedNetwork,
      transactionsLength: transactions.length,
      willGenerate: !(!selectedNetwork || transactions.length === 0)
    });
    
    if (!selectedNetwork || transactions.length === 0) return [];
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –Ω–∞–∑–∞–¥
    const today = new Date();
    today.setHours(23, 59, 59, 999); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∫–æ–Ω–µ—Ü –¥–Ω—è
    
    console.log('Heatmap for last 7 days:', {
      today: today.toDateString(),
      transactionsTotal: transactions.length,
      sampleTodayTransactions: transactions.filter(tx => {
        const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
        const todayStart = new Date();
        todayStart.setHours(0, 0, 0, 0);
        return txDate >= todayStart && txDate <= today;
      }).length
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 7 –¥–Ω–µ–π √ó 24 —á–∞—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    const heatmapGrid = [];
    const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–æ—Ç 6 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–æ —Å–µ–≥–æ–¥–Ω—è)
    for (let dayOffset = 6; dayOffset >= 0; dayOffset--) {
      const currentDate = new Date();
      currentDate.setDate(today.getDate() - dayOffset);
      currentDate.setHours(0, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è
      const dateStr = currentDate.toISOString().split('T')[0];
      const dayOfWeek = currentDate.getDay(); // 0=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, etc.
      
      const dayRow = {
        date: dateStr,
        dayName: dayNames[dayOfWeek],
        dayOfWeek: dayOfWeek,
        hours: []
      };
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 24 —á–∞—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
      for (let hour = 0; hour < 24; hour++) {
        const hourTransactions = transactions.filter(tx => {
          const txDate = new Date(tx.timestamp || tx.createdAt || tx.date);
          const txHour = txDate.getHours();
          return txDate.getFullYear() === currentDate.getFullYear() &&
                 txDate.getMonth() === currentDate.getMonth() &&
                 txDate.getDate() === currentDate.getDate() &&
                 txHour === hour;
        });
        
        const transactionCount = hourTransactions.length;
        const revenue = hourTransactions.reduce((sum, tx) => 
          sum + (tx.total || tx.actualAmount || tx.totalCost || 0), 0);
        
        dayRow.hours.push({
          hour,
          transactions: transactionCount,
          revenue: Math.round(revenue),
          intensity: transactionCount > 0 ? Math.min(transactionCount / 3, 1) : 0, // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π = –º–∞–∫—Å–∏–º—É–º
          displayTime: `${hour.toString().padStart(2, '0')}:00`
        });
      }
      
      const dayTotal = dayRow.hours.reduce((sum, h) => sum + h.transactions, 0);
      if (dayTotal > 0) {
        console.log(`${dayNames[dayOfWeek]} (${dateStr}): ${dayTotal} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      }
      
      heatmapGrid.push(dayRow);
    }
    
    return heatmapGrid;
  }, [selectedNetwork, transactions]);

  return (
    <MainLayout fullWidth={true}>
      <div className="w-full space-y-6 px-4 md:px-6 lg:px-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className="mb-6 pt-4">
          <h1 className="text-2xl font-semibold text-white">–û–±–∑–æ—Ä —Å–µ—Ç–∏</h1>
          <p className="text-slate-400 mt-2">–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏</p>
        </div>

        <div className="space-y-6">

        {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö */}
        {!initializing && selectedNetwork && (
          <div className="flex justify-end items-center">
            <div className="flex gap-2">
              <Button
                onClick={loadTransactions}
                disabled={loading}
                className="bg-blue-600 hover:bg-blue-700 text-white flex items-center"
              >
                <div className="w-4 h-4 mr-2 flex items-center justify-center">
                  {loading ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <RefreshCw className="w-4 h-4" />
                  )}
                </div>
                {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
              </Button>
            </div>
          </div>
        )}

        {/* –§–∏–ª—å—Ç—Ä—ã - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ—Ç—å */}
        {!initializing && selectedNetwork && (
          <div className={`bg-slate-800 border border-slate-600 rounded-lg ${isMobile ? 'p-4' : 'p-6'}`}>
            <div className={`flex items-center gap-3 ${isMobile ? 'mb-3' : 'mb-4'}`}>
              <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                <span className="text-white text-sm">‚öôÔ∏è</span>
              </div>
              <h2 className={`${isMobile ? 'text-base' : 'text-lg'} font-semibold text-white`}>–§–∏–ª—å—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞</h2>
            </div>
            
            <div className={`grid ${isMobile ? 'grid-cols-1 gap-3' : 'grid-cols-3 gap-4'}`}>
              {/* –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ */}
              <div>
                <Label htmlFor="dateFrom" className="text-slate-300 text-sm font-medium">–î–∞—Ç–∞ —Å</Label>
                <div className="relative">
                  <Input
                    id="dateFrom"
                    type="date"
                    value={dateFrom}
                    onChange={(e) => setDateFrom(e.target.value)}
                    className="bg-slate-800 border-slate-700 text-slate-200 h-10 text-base pr-10 [&::-webkit-calendar-picker-indicator]:opacity-0 [&::-webkit-calendar-picker-indicator]:absolute [&::-webkit-calendar-picker-indicator]:right-2 [&::-webkit-calendar-picker-indicator]:w-5 [&::-webkit-calendar-picker-indicator]:h-5 [&::-webkit-calendar-picker-indicator]:cursor-pointer"
                  />
                  <Calendar 
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-200 hover:text-blue-400 transition-colors pointer-events-none" 
                  />
                </div>
              </div>
              
              {/* –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è */}
              <div>
                <Label htmlFor="dateTo" className="text-slate-300 text-sm font-medium">–î–∞—Ç–∞ –ø–æ</Label>
                <div className="relative">
                  <Input
                    id="dateTo"
                    type="date"
                    value={dateTo}
                    onChange={(e) => setDateTo(e.target.value)}
                    className="bg-slate-800 border-slate-700 text-slate-200 h-10 text-base pr-10 [&::-webkit-calendar-picker-indicator]:opacity-0 [&::-webkit-calendar-picker-indicator]:absolute [&::-webkit-calendar-picker-indicator]:right-2 [&::-webkit-calendar-picker-indicator]:w-5 [&::-webkit-calendar-picker-indicator]:h-5 [&::-webkit-calendar-picker-indicator]:cursor-pointer"
                  />
                  <Calendar 
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-200 hover:text-blue-400 transition-colors pointer-events-none" 
                  />
                </div>
              </div>
              
            </div>
          </div>
        )}


        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞ */}
        {!initializing && selectedNetwork && fuelTypeStats.length > 0 && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-6">
            {fuelTypeStats.map((fuel) => (
              <Card key={fuel.type} className="bg-slate-800 border-slate-600">
                <CardContent className="p-6">
                  <div className="flex items-center">
                    <div className="p-2 bg-purple-600 rounded-lg">
                      <Fuel className="h-6 w-6 text-white" />
                    </div>
                    <div className="ml-4">
                      <p className="text-white text-base font-semibold mb-1">{fuel.type}</p>
                      <p className="text-2xl font-bold text-white mb-0.5">
                        {Math.round(fuel.revenue).toLocaleString('ru-RU')} ‚ÇΩ
                      </p>
                      <div className="space-y-0.5">
                        <p className="text-2xl font-bold text-white">{Math.round(fuel.volume).toLocaleString('ru-RU')} –ª</p>
                        <p className="text-sm text-slate-400">{fuel.operations} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
            
            {/* –ò—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
            <Card className="bg-slate-700 border-slate-500 border-2">
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-blue-600 rounded-lg">
                    <Activity className="h-6 w-6 text-white" />
                  </div>
                  <div className="ml-4">
                    <p className="text-white text-base font-semibold mb-1">–ò—Ç–æ–≥–æ</p>
                    <p className="text-2xl font-bold text-white mb-0.5">
                      {Math.round(totalRevenue).toLocaleString('ru-RU')} ‚ÇΩ
                    </p>
                    <div className="space-y-0.5">
                      <p className="text-2xl font-bold text-white">{Math.round(totalVolume).toLocaleString('ru-RU')} –ª</p>
                      <p className="text-sm text-slate-400">{filteredTransactions.length} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã */}
        {!initializing && selectedNetwork && paymentTypeStats.length > 0 && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-6">
            {paymentTypeStats.map((payment) => (
              <Card key={payment.type} className="bg-slate-800 border-slate-600">
                <CardContent className="p-6">
                  <div className="flex items-center">
                    <div className="p-2 bg-green-600 rounded-lg">
                      <CreditCard className="h-6 w-6 text-white" />
                    </div>
                    <div className="ml-4">
                      <p className="text-white text-base font-semibold mb-1">{payment.type}</p>
                      <p className="text-2xl font-bold text-white mb-0.5">
                        {Math.round(payment.revenue).toLocaleString('ru-RU')} ‚ÇΩ
                      </p>
                      <div className="space-y-0.5">
                        <p className="text-2xl font-bold text-white">{Math.round(payment.volume).toLocaleString('ru-RU')} –ª</p>
                        <p className="text-sm text-slate-400">{payment.operations} –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
            
            {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ */}
            <Card className="bg-slate-800 border-slate-600">
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-purple-600 rounded-lg">
                    <Monitor className="h-6 w-6 text-white" />
                  </div>
                  <div className="ml-4">
                    <p className="text-white text-base font-semibold mb-1">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</p>
                    <p className="text-2xl font-bold text-white mb-0.5">
                      {Math.round(averageCheck).toLocaleString('ru-RU')} ‚ÇΩ
                    </p>
                    <div className="space-y-0.5">
                      <p className="text-2xl font-bold text-white">&nbsp;</p>
                      <p className="text-sm text-slate-400">&nbsp;</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Ç–æ–ø–ª–∏–≤—É */}
        {!initializing && selectedNetwork && transactions.length > 0 && (
          <Card className="bg-slate-800 border-slate-600">
            <CardHeader className="pb-4">
              <div className="flex items-center justify-between">
                <CardTitle className="text-white text-lg flex items-center gap-2">
                  <DollarSign className="h-5 w-5 text-green-400" />
                  –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º ({dailySalesData.data.length} –¥–Ω–µ–π)
                </CardTitle>
              </div>
            </CardHeader>
            <CardContent className="pt-0 pb-2 px-2">
              {dailySalesData.data.length > 0 ? (
                <div className="w-full h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart 
                      data={dailySalesData.data} 
                      margin={{ top: 10, right: 30, left: 60, bottom: 20 }}
                    >
                      <XAxis 
                        dataKey="displayDate" 
                        stroke="#94a3b8"
                        fontSize={11}
                        tick={{ fill: '#94a3b8' }}
                        angle={-45}
                        textAnchor="end"
                        height={60}
                      />
                      <YAxis 
                        stroke="#94a3b8" 
                        fontSize={11}
                        tick={{ fill: '#94a3b8' }}
                        tickFormatter={(value) => `${Math.round(value / 1000)}–∫ ‚ÇΩ`}
                      />
                      <ChartTooltip 
                        content={({ active, payload, label }) => {
                          if (!active || !payload || !payload.length) {
                            return <div style={{ display: 'none' }} />;
                          }
                          
                          const data = payload[0].payload;
                          return (
                            <div className="bg-slate-900/95 border border-slate-600 rounded-lg p-3 shadow-xl backdrop-blur-sm">
                              <p className="text-white font-medium mb-2">{label}</p>
                              <div className="space-y-1">
                                <p className="text-slate-300 flex justify-between">
                                  <span>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</span>
                                  <span className="font-medium">{Math.round(data.revenue).toLocaleString('ru-RU')} ‚ÇΩ</span>
                                </p>
                                {dailySalesData.fuelTypes
                                  .map((fuelType, index) => ({ fuelType, index, revenue: data[fuelType] || 0 }))
                                  .filter(item => item.revenue > 0)
                                  .map(({ fuelType, index, revenue }) => {
                                    const colors = ['#3b82f6', '#1d4ed8', '#1e40af', '#1e3a8a', '#312e81'];
                                    return (
                                      <p key={fuelType} className="flex justify-between" style={{ color: colors[index % colors.length] }}>
                                        <span>{fuelType}:</span>
                                        <span className="font-medium">{Math.round(revenue).toLocaleString('ru-RU')} ‚ÇΩ</span>
                                      </p>
                                    );
                                  })}
                                <p className="text-blue-400 flex justify-between">
                                  <span>–û–ø–µ—Ä–∞—Ü–∏–∏:</span>
                                  <span className="font-medium">{data.operations}</span>
                                </p>
                              </div>
                            </div>
                          );
                        }}
                      />
                      {/* –°—Ç–µ–∫–æ–≤—ã–µ –±–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ —Å –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ */}
                      {dailySalesData.fuelTypes.map((fuelType, index) => {
                        const colors = ['#3b82f6', '#1d4ed8', '#1e40af', '#1e3a8a', '#312e81'];
                        return (
                          <Bar 
                            key={fuelType}
                            dataKey={fuelType} 
                            stackId="fuel"
                            fill={colors[index % colors.length]}
                            radius={index === dailySalesData.fuelTypes.length - 1 ? [2, 2, 0, 0] : [0, 0, 0, 0]}
                          />
                        );
                      })}
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              ) : (
                <div className="flex items-center justify-center h-80 text-slate-400">
                  <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
                </div>
              )}
            </CardContent>
          </Card>
        )}

        {/* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å—É—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
        {!initializing && selectedNetwork && transactions.length > 0 && (
          <div className={`grid gap-6 ${isMobile ? 'grid-cols-1' : 'grid-cols-1 xl:grid-cols-2'}`}>
            {/* –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
            <Card className="bg-slate-800 border-slate-600">
              <CardHeader className="pb-4">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-white text-lg flex items-center gap-2">
                    <Activity className="h-5 w-5 text-blue-400" />
                    –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
                  </CardTitle>
                  <div className="text-sm text-slate-400">
                    –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                  </div>
                </div>
              </CardHeader>
              <CardContent className="pt-0 pb-2 px-2">
                {heatmapData && heatmapData.length > 0 ? (
                  <div className="space-y-3">
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —á–∞—Å–∞–º–∏ */}
                    <div className="flex items-center">
                      <div className="w-12 shrink-0"></div>
                      <div className="flex-1 flex gap-0.5 text-xs text-slate-400">
                        {Array.from({ length: 24 }, (_, hour) => (
                          <div key={hour} className="flex-1 text-center text-[10px]">
                            {hour % 6 === 0 ? hour : ''}
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    {/* –°–µ—Ç–∫–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã */}
                    {heatmapData.map((day) => (
                      <div key={day.date} className="flex items-center">
                        {/* –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ */}
                        <div className="w-12 shrink-0 text-xs text-slate-300 font-medium">
                          {day.dayName}
                        </div>
                        
                        {/* –ß–∞—Å—ã */}
                        <div className="flex-1 flex gap-0.5">
                          {day.hours.map((hourData) => {
                            const intensity = hourData.intensity;
                            let bgColor = 'bg-slate-700'; // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                            
                            if (intensity > 0) {
                              if (intensity <= 0.2) bgColor = 'bg-green-900/40';
                              else if (intensity <= 0.4) bgColor = 'bg-green-700/60';
                              else if (intensity <= 0.6) bgColor = 'bg-green-600/70';
                              else if (intensity <= 0.8) bgColor = 'bg-green-500/80';
                              else bgColor = 'bg-green-400';
                            }
                            
                            return (
                              <div
                                key={hourData.hour}
                                className={`flex-1 aspect-square ${bgColor} rounded-sm cursor-pointer hover:ring-1 hover:ring-green-400 hover:scale-110 transition-all duration-200`}
                                title={`${day.dayName}, ${hourData.displayTime}
–û–ø–µ—Ä–∞—Ü–∏–π: ${hourData.transactions}
–í—ã—Ä—É—á–∫–∞: ${hourData.revenue.toLocaleString('ru-RU')} ‚ÇΩ`}
                              />
                            );
                          })}
                        </div>
                      </div>
                    ))}
                    
                    {/* –õ–µ–≥–µ–Ω–¥–∞ */}
                    <div className="flex items-center justify-between text-xs text-slate-400 mt-4 pt-2 border-t border-slate-600">
                      <span>–ú–µ–Ω—å—à–µ</span>
                      <div className="flex items-center gap-1">
                        <div className="w-3 h-3 bg-slate-700 rounded-sm"></div>
                        <div className="w-3 h-3 bg-green-900/40 rounded-sm"></div>
                        <div className="w-3 h-3 bg-green-700/60 rounded-sm"></div>
                        <div className="w-3 h-3 bg-green-600/70 rounded-sm"></div>
                        <div className="w-3 h-3 bg-green-500/80 rounded-sm"></div>
                        <div className="w-3 h-3 bg-green-400 rounded-sm"></div>
                      </div>
                      <span>–ë–æ–ª—å—à–µ</span>
                    </div>
                  </div>
                ) : (
                  <div className="flex items-center justify-center h-64 text-slate-400">
                    <div className="text-center">
                      <Activity className="h-8 w-8 mx-auto mb-2 opacity-50" />
                      <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                      <p className="text-sm">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –∏ –ø–µ—Ä–∏–æ–¥</p>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* –ì—Ä–∞—Ñ–∏–∫ —Å—É—Ç–æ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
            <Card className="bg-slate-800 border-slate-600">
              <CardHeader className="pb-4">
                <CardTitle className="text-white text-lg flex items-center gap-2">
                  <Activity className="h-5 w-5 text-blue-400" />
                  –°—É—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0 pb-2 px-2">
                <div className="w-full h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart 
                      data={dailyActivityData} 
                      margin={{ top: 10, right: 15, left: 40, bottom: 50 }}
                    >
                      <XAxis 
                        dataKey="hour" 
                        stroke="#94a3b8"
                        fontSize={11}
                        interval={0}
                        angle={-45}
                        textAnchor="end"
                        height={50}
                        tick={{ fill: '#94a3b8' }}
                      />
                      <YAxis 
                        stroke="#94a3b8" 
                        fontSize={11}
                        tick={{ fill: '#94a3b8' }}
                        width={35}
                      />
                      <ChartTooltip 
                        content={({ active, payload, label }) => {
                          if (!active || !payload || !payload.length) {
                            return <div style={{ display: 'none' }} />;
                          }
                          
                          const data = payload[0].payload;
                          const hourStart = parseInt(label.split(':')[0]);
                          const hourEnd = hourStart + 1;
                          return (
                            <div className="bg-slate-900/95 border border-slate-600 rounded-lg p-3 shadow-xl backdrop-blur-sm">
                              <p className="text-white font-medium mb-2">
                                {`${hourStart.toString().padStart(2, '0')}:00 - ${hourEnd.toString().padStart(2, '0')}:00`}
                              </p>
                              <div className="space-y-1">
                                <p className="text-blue-400 flex justify-between">
                                  <span>–û–ø–µ—Ä–∞—Ü–∏–∏:</span>
                                  <span className="font-medium">{data.operations}</span>
                                </p>
                                <p className="text-green-400 flex justify-between">
                                  <span>–í—ã—Ä—É—á–∫–∞:</span>
                                  <span className="font-medium">{Math.round(data.revenue).toLocaleString('ru-RU')} ‚ÇΩ</span>
                                </p>
                              </div>
                            </div>
                          );
                        }}
                      />
                      <Bar 
                        dataKey="operations" 
                        fill="#3b82f6"
                        stroke="#2563eb"
                        strokeWidth={1}
                        radius={[3, 3, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ */}
        {!initializing && selectedNetwork && stsApiConfigured && transactions.length > 0 && (
          <SalesForecast 
            transactions={completedTransactions}
            className="w-full"
          />
        )}

        {/* –≠–∫—Ä–∞–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ */}
        {initializing && (
          <div className="bg-slate-800 border border-slate-600 rounded-lg p-8 text-center">
            <div className="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
              <Loader2 className="w-8 h-8 text-blue-500 animate-spin" />
            </div>
            <h3 className="text-xl font-semibold text-white mb-2">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</h3>
            <p className="text-slate-400">–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –¥–∞–Ω–Ω—ã–µ...</p>
          </div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∏ */}
        {!initializing && !selectedNetwork && (
          <div className="bg-slate-800 border border-slate-600 rounded-lg p-8 text-center">
            <div className="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-slate-400 text-2xl">üìä</span>
            </div>
            <h3 className="text-xl font-semibold text-white mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤</h3>
            <p className="text-slate-400">–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ</p>
          </div>
        )}

        {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {!initializing && selectedNetwork && stsApiConfigured && loading && (
          <div className="bg-slate-800 border border-slate-600 rounded-lg p-8 text-center">
            <div className="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
              <Loader2 className="w-8 h-8 text-blue-500 animate-spin" />
            </div>
            <h3 className="text-xl font-semibold text-white mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
            <p className="text-slate-400">–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ STS API...</p>
          </div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
        {!initializing && selectedNetwork && stsApiConfigured && !loading && transactions.length === 0 && (
          <div className="bg-slate-800 border border-slate-600 rounded-lg p-8 text-center">
            <div className="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
              <Activity className="w-8 h-8 text-slate-400" />
            </div>
            <h3 className="text-xl font-semibold text-white mb-2">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</h3>
            <p className="text-slate-400 mb-4">–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
            <Button 
              onClick={loadTransactions}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </Button>
          </div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ STS API */}
        {!initializing && selectedNetwork && !stsApiConfigured && (
          <div className="bg-slate-800 border border-orange-600 rounded-lg p-8 text-center">
            <div className="w-16 h-16 bg-orange-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-white text-2xl">‚öôÔ∏è</span>
            </div>
            <h3 className="text-xl font-semibold text-white mb-2">–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ STS API</h3>
            <p className="text-slate-400 mb-4">–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ STS API. –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API.</p>
            <div className="flex gap-3 justify-center">
              <Button 
                onClick={() => window.location.href = '/settings/sts-api'}
                className="bg-orange-600 hover:bg-orange-700 text-white"
              >
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API
              </Button>
              <Button 
                onClick={async () => {
                  console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ STS API...');
                  setInitializing(true);
                  
                  // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                  setTimeout(() => {
                    const isConfigured = stsApiService.isConfigured();
                    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', isConfigured);
                    setStsApiConfigured(isConfigured);
                    setInitializing(false);
                    
                    if (isConfigured) {
                      toast({
                        title: "–£—Å–ø–µ—à–Ω–æ",
                        description: "STS API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                      });
                      loadTransactions();
                    } else {
                      toast({
                        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                        description: "STS API –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                        variant: "destructive",
                      });
                    }
                  }, 1000);
                }}
                variant="outline"
                className="border-blue-600 text-blue-400 hover:bg-blue-700/20"
              >
                üîÑ –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
            </div>
          </div>
        )}
        </div>
      </div>
    </MainLayout>
  );
}