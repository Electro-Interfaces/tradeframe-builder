/**
 * üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ–º–æ-–æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –î–µ–º–æ —Å–µ—Ç–∏ –ê–ó–°
 * 
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 250 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –∞–≤–≥—É—Å—Ç 2025
 * —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –∏ –∏—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î)
const TRADING_POINTS = [
  {
    id: '9baf5375-9929-4774-8366-c0609b9f2a51',
    name: '–ê–ó–° ‚Ññ001 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è',
    external_id: 'station_01',
    fuels: [
      { type: '–ê–ò-95', price: 55.50 },
      { type: '–ê–ò-92', price: 52.30 }
    ]
  },
  {
    id: '9be94f90-84d1-4557-b746-460e13485b65', 
    name: '–ê–ó–° ‚Ññ002 - –°–µ–≤–µ—Ä–Ω–∞—è',
    external_id: 'station_02',
    fuels: [
      { type: '–ê–ò-92', price: 52.50 },
      { type: '–ê–ò-95', price: 55.70 },
      { type: '–î–∏–∑–µ–ª—å', price: 58.80 }
    ]
  },
  {
    id: 'f2566905-c748-4240-ac31-47b626ab625d',
    name: '–ê–ó–° ‚Ññ003 - –Æ–∂–Ω–∞—è', 
    external_id: 'station_03',
    fuels: [
      { type: '–ê–ò-92', price: 52.40 },
      { type: '–ê–ò-95', price: 55.60 },
      { type: '–ê–ò-98', price: 67.20 },
      { type: '–î–∏–∑–µ–ª—å', price: 58.90 }
    ]
  },
  {
    id: 'f7963207-2732-4fae-988e-c73eef7645ca',
    name: '–ê–ó–° ‚Ññ005 - –ü—Ä–æ–º–∑–æ–Ω–∞',
    external_id: 'station_05', 
    fuels: [
      { type: '–ê–ò-95', price: 55.80 },
      { type: '–ê–ò-98', price: 67.40 },
      { type: '–ê–ò-92', price: 52.60 },
      { type: '–î–∏–∑–µ–ª—å', price: 59.10 }
    ]
  },
  {
    id: '35f56ffd-826c-43b3-8f15-0f0e870f20cd',
    name: '–ê–ó–° ‚Ññ006 - –û–∫—Ä—É–∂–Ω–∞—è',
    external_id: 'station_06',
    fuels: [
      { type: '–ê–ò-95', price: 55.90 },
      { type: '–ê–ò-92', price: 52.70 },
      { type: '–ê–ò-98', price: 67.50 },
      { type: '–î–∏–∑–µ–ª—å', price: 59.20 },
      { type: '–î–∏–∑–µ–ª—å –∑–∏–º–Ω–∏–π', price: 61.10 }
    ]
  }
];

// –¢–∏–ø—ã –æ–ø–ª–∞—Ç—ã –∏ –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
const PAYMENT_METHODS = [
  { type: 'bank_card', weight: 60, name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã' },
  { type: 'cash', weight: 25, name: '–ù–∞–ª–∏—á–Ω—ã–µ' }, 
  { type: 'fuel_card', weight: 10, name: '–¢–æ–ø–ª–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã' },
  { type: 'online_orders', weight: 5, name: '–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã' }
];

// –°—Ç–∞—Ç—É—Å—ã –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
const OPERATION_STATUSES = [
  { status: 'completed', weight: 90 },
  { status: 'error', weight: 2.5 },
  { status: 'pending', weight: 2.5 },
  { status: 'processing', weight: 2.5 }, 
  { status: 'rejected', weight: 1.5 }
];

// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
const OPERATORS = [
  '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
  '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.',
  '–°–∏–¥–æ—Ä–æ–≤ –°.–°.',
  '–ö–æ–∑–ª–æ–≤ –ö.–ö.',
  '–ú–æ—Ä–æ–∑–æ–≤ –ú.–ú.',
  '–í–æ–ª–∫–æ–≤ –í.–í.',
  '–°–æ–∫–æ–ª–æ–≤ –°.–°.',
  '–õ–µ–±–µ–¥–µ–≤ –õ.–õ.',
  '–°–µ–º–µ–Ω–æ–≤ –°.–°.',
  '–ï–≥–æ—Ä–æ–≤ –ï.–ï.',
  '–ü–∞–≤–ª–æ–≤ –ü.–ü.',
  '–ö—É–∑–Ω–µ—Ü–æ–≤ –ö.–ö.',
  '–ú–∏—Ö–∞–π–ª–æ–≤ –ú.–ú.',
  '–ù–æ–≤–∏–∫–æ–≤ –ù.–ù.',
  '–§–µ–¥–æ—Ä–æ–≤ –§.–§.',
  '–ö–∏—Ä–∏–ª–ª–æ–≤ –ö.–ö.',
  '–ê–ª–µ–∫—Å–µ–µ–≤ –ê.–ê.',
  '–î–º–∏—Ç—Ä–∏–µ–≤ –î.–î.',
  '–†–æ–º–∞–Ω–æ–≤ –†.–†.',
  '–ü–æ–ø–æ–≤ –ë.–ë.'
];

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–æ–º–µ—Ä–æ–≤ –º–∞—à–∏–Ω  
function generateVehicleNumber() {
  const letters = '–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•';
  const regions = ['77', '199', '178', '99', '197', '777', '123', '750'];
  
  const letter1 = letters[Math.floor(Math.random() * letters.length)];
  const numbers = String(Math.floor(Math.random() * 900) + 100);
  const letter2 = letters[Math.floor(Math.random() * letters.length)];
  const letter3 = letters[Math.floor(Math.random() * letters.length)];
  const region = regions[Math.floor(Math.random() * regions.length)];
  
  return `${letter1}${numbers}${letter2}${letter3}${region}`;
}

// –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
function weightedRandom(items) {
  const totalWeight = items.reduce((sum, item) => sum + item.weight, 0);
  const randomWeight = Math.random() * totalWeight;
  
  let currentWeight = 0;
  for (const item of items) {
    currentWeight += item.weight;
    if (randomWeight <= currentWeight) {
      return item;
    }
  }
  return items[items.length - 1];
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
function generateTimestamp(date) {
  const dayOfWeek = date.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 = —Å—É–±–±–æ—Ç–∞
  const dayOfMonth = date.getDate();
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
  let activityMultiplier = 1.0;
  if (dayOfWeek === 5) activityMultiplier = 1.4; // –ü—è—Ç–Ω–∏—Ü–∞
  if (dayOfWeek === 6 || dayOfWeek === 0) activityMultiplier = 0.7; // –í—ã—Ö–æ–¥–Ω—ã–µ
  
  // –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞
  if (dayOfMonth >= 25) activityMultiplier *= 1.2;
  
  // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º (–±–æ–ª—å—à–µ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–Ω–µ–º)
  let hour;
  if (Math.random() < 0.05) {
    // –ù–æ—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (5%)
    hour = Math.floor(Math.random() * 5); // 0-4
  } else if (Math.random() < 0.15) {
    // –†–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ –∏ –ø–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä (15%)
    hour = Math.random() < 0.5 ? 
      Math.floor(Math.random() * 3) + 5 : // 5-7
      Math.floor(Math.random() * 3) + 21; // 21-23
  } else {
    // –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è (80%)
    hour = Math.floor(Math.random() * 12) + 8; // 8-19
  }
  
  const minute = Math.floor(Math.random() * 60);
  const second = Math.floor(Math.random() * 60);
  
  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), hour, minute, second);
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π
function generateOperations(targetCount = 250) {
  const operations = [];
  
  // –ê–≤–≥—É—Å—Ç 2025
  const year = 2025;
  const month = 7; // –ê–≤–≥—É—Å—Ç (0-based)
  const daysInMonth = 31;
  
  for (let i = 0; i < targetCount; i++) {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–Ω—å –∞–≤–≥—É—Å—Ç–∞
    const day = Math.floor(Math.random() * daysInMonth) + 1;
    const date = new Date(year, month, day);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    const operationTime = generateTimestamp(date);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É
    const tradingPoint = TRADING_POINTS[Math.floor(Math.random() * TRADING_POINTS.length)];
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞
    const fuel = tradingPoint.fuels[Math.floor(Math.random() * tradingPoint.fuels.length)];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤ (10-80–ª)
    const quantity = +(Math.random() * 70 + 10).toFixed(2);
    
    // –ù–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ü–µ–Ω—ã (¬±3%)
    const priceVariation = 1 + (Math.random() - 0.5) * 0.06;
    const price = +(fuel.price * priceVariation).toFixed(1);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const totalCost = +(quantity * price).toFixed(2);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å
    const paymentMethod = weightedRandom(PAYMENT_METHODS);
    const status = weightedRandom(OPERATION_STATUSES);
    
    // –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
    const duration = Math.floor(Math.random() * 4) + 2; // 2-5 –º–∏–Ω—É—Ç
    const endTime = new Date(operationTime.getTime() + duration * 60 * 1000);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationId = `TXN-${year}-08-${String(day).padStart(2, '0')}-${String(i + 1).padStart(3, '0')}`;
    
    const operation = {
      id: operationId,
      operation_type: 'sale',
      status: status.status,
      start_time: operationTime.toISOString(),
      end_time: status.status === 'completed' ? endTime.toISOString() : null,
      duration: status.status === 'completed' ? duration : null,
      trading_point_id: tradingPoint.external_id,
      trading_point_name: tradingPoint.name,
      device_id: `PUMP-${String(Math.floor(Math.random() * 10) + 1).padStart(3, '0')}`,
      transaction_id: `TXN-${Date.now()}-${i}`,
      fuel_type: fuel.type,
      quantity: quantity,
      price: price,
      total_cost: totalCost,
      payment_method: paymentMethod.type,
      details: `–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ø–ª–∏–≤–∞ ${fuel.type}`,
      progress: status.status === 'completed' ? 100 : 
               status.status === 'processing' ? Math.floor(Math.random() * 80) + 20 :
               status.status === 'pending' ? 0 : 
               Math.floor(Math.random() * 50),
      operator_name: OPERATORS[Math.floor(Math.random() * OPERATORS.length)],
      customer_id: `CUST-${Math.floor(Math.random() * 99999)}`,
      vehicle_number: generateVehicleNumber(),
      metadata: {},
      created_at: operationTime.toISOString(),
      updated_at: (status.status === 'completed' ? endTime : operationTime).toISOString()
    };
    
    operations.push(operation);
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  operations.sort((a, b) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime());
  
  return operations;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
async function insertOperations(operations) {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Supabase...');
  
  // –ò–º–ø–æ—Ä—Ç Supabase –∫–ª–∏–µ–Ω—Ç–∞
  const supabaseService = await import('./src/services/supabaseServiceClient.js');
  const { supabaseService: supabase } = supabaseService;
  
  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞–≤–≥—É—Å—Ç–∞ 2025 (–µ—Å–ª–∏ –µ—Å—Ç—å)
  console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞–≤–≥—É—Å—Ç–∞ 2025...');
  await supabase
    .from('operations')
    .delete()
    .gte('start_time', '2025-08-01T00:00:00Z')
    .lt('start_time', '2025-09-01T00:00:00Z');
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–∞—Ç—á–∞–º–∏ –ø–æ 50
  const batchSize = 50;
  const totalBatches = Math.ceil(operations.length / batchSize);
  
  for (let i = 0; i < totalBatches; i++) {
    const startIdx = i * batchSize;
    const endIdx = Math.min(startIdx + batchSize, operations.length);
    const batch = operations.slice(startIdx, endIdx);
    
    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ç—á ${i + 1}/${totalBatches} (${batch.length} –æ–ø–µ—Ä–∞—Ü–∏–π)...`);
    
    const { error } = await supabase
      .from('operations')
      .insert(batch);
    
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞ ${i + 1}:`, error);
      throw error;
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!`);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—á–µ—Ç–∞
function generateReport(operations) {
  const report = {
    total: operations.length,
    byStatus: {},
    byPayment: {},
    byFuelType: {},
    byTradingPoint: {},
    totalRevenue: 0
  };
  
  operations.forEach(op => {
    // –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
    report.byStatus[op.status] = (report.byStatus[op.status] || 0) + 1;
    
    // –ü–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
    report.byPayment[op.payment_method] = (report.byPayment[op.payment_method] || 0) + 1;
    
    // –ü–æ —Ç–∏–ø–∞–º —Ç–æ–ø–ª–∏–≤–∞
    report.byFuelType[op.fuel_type] = (report.byFuelType[op.fuel_type] || 0) + 1;
    
    // –ü–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º
    report.byTradingPoint[op.trading_point_name] = (report.byTradingPoint[op.trading_point_name] || 0) + 1;
    
    // –í—ã—Ä—É—á–∫–∞ (—Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
    if (op.status === 'completed') {
      report.totalRevenue += op.total_cost;
    }
  });
  
  report.totalRevenue = +report.totalRevenue.toFixed(2);
  
  return report;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –î–µ–º–æ —Å–µ—Ç–∏ –ê–ó–°');
    console.log('üìÖ –ü–µ—Ä–∏–æ–¥: –ê–≤–≥—É—Å—Ç 2025');
    console.log('üé≤ –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 250 –æ–ø–µ—Ä–∞—Ü–∏–π\n');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log('‚ö° –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏...');
    const operations = generateOperations(250);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const report = generateReport(operations);
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò:');
    console.log(`üìà –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${report.total}`);
    console.log(`üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${report.totalRevenue.toLocaleString('ru-RU')} ‚ÇΩ`);
    
    console.log('\nüìã –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    Object.entries(report.byStatus).forEach(([status, count]) => {
      const percent = ((count / report.total) * 100).toFixed(1);
      console.log(`  ${status}: ${count} (${percent}%)`);
    });
    
    console.log('\nüí≥ –ü–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã:');
    Object.entries(report.byPayment).forEach(([method, count]) => {
      const percent = ((count / report.total) * 100).toFixed(1);
      console.log(`  ${method}: ${count} (${percent}%)`);
    });
    
    console.log('\n‚õΩ –ü–æ —Ç–∏–ø–∞–º —Ç–æ–ø–ª–∏–≤–∞:');
    Object.entries(report.byFuelType).forEach(([fuel, count]) => {
      const percent = ((count / report.total) * 100).toFixed(1);
      console.log(`  ${fuel}: ${count} (${percent}%)`);
    });
    
    console.log('\nüè™ –ü–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º:');
    Object.entries(report.byTradingPoint).forEach(([station, count]) => {
      const percent = ((count / report.total) * 100).toFixed(1);
      console.log(`  ${station}: ${count} (${percent}%)`);
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase...');
    await insertOperations(operations);
    
    console.log('\nüéâ –ì–û–¢–û–í–û! –î–µ–º–æ-–æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { generateOperations, insertOperations, generateReport };