/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ HTTP –∫–ª–∏–µ–Ω—Ç–∞
 */

// –ò–º–∏—Ç–∏—Ä—É–µ–º browser —Å—Ä–µ–¥—É –¥–ª—è ES –º–æ–¥—É–ª–µ–π
globalThis.import = { meta: { env: { DEV: true } } };

// –ò–º–∏—Ç–∞—Ü–∏—è btoa –¥–ª—è Node.js
if (typeof btoa === 'undefined') {
  globalThis.btoa = function(str) {
    return Buffer.from(str).toString('base64');
  };
}

// Imitation fetch –¥–ª—è Node.js –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
if (typeof fetch === 'undefined') {
  const { fetch } = await import('node-fetch');
  globalThis.fetch = fetch;
}

async function testUniversalHttpClient() {
  console.log('üß™ –¢–ï–°–¢ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û HTTP –ö–õ–ò–ï–ù–¢–ê');
  console.log('====================================\n');

  try {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç...');
    const { httpClient } = await import('./src/services/universalHttpClient.js');
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ\n');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('üîß –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log('--------------------------------------------');
    
    try {
      const { tradingNetworkConfigService } = await import('./src/services/tradingNetworkConfigService.js');
      console.log('üìã –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏...');
      
      const config = await tradingNetworkConfigService.getConfig();
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:');
      console.log('   - –í–∫–ª—é—á–µ–Ω–∞:', config.enabled);
      console.log('   - Base URL:', config.baseUrl);
      console.log('   - Auth Type:', config.authType);
      console.log('   - Username:', config.username || '–Ω–µ —É–∫–∞–∑–∞–Ω');
      console.log('   - Endpoints:', JSON.stringify(config.endpoints, null, 2));
      
    } catch (configError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', configError.message);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
      try {
        const { tradingNetworkConfigService } = await import('./src/services/tradingNetworkConfigService.js');
        const syncConfig = tradingNetworkConfigService.getConfigSync();
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
        console.log('   - –í–∫–ª—é—á–µ–Ω–∞:', syncConfig.enabled);
        console.log('   - Base URL:', syncConfig.baseUrl);
        console.log('   - Auth Type:', syncConfig.authType);
        console.log('   - Username:', syncConfig.username);
      } catch (syncError) {
        console.error('‚ùå –ò —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', syncError.message);
      }
    }
    
    console.log('\nüåê –¢–ï–°–¢ 2: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç');
    console.log('--------------------------------------------------');
    
    // –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
    const testEndpoint = '/tanks';
    const testParams = {
      system: '15',  // Network external_id (–ù–æ—Ä–¥ –õ–∞–π–Ω)
      station: '4'   // –ê–ó–° 4 external_id
    };
    
    console.log('üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å:', testEndpoint);
    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', testParams);
    
    const response = await httpClient.get(testEndpoint, {
      destination: 'external-api',
      queryParams: testParams,
      timeout: 10000
    });
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:');
    console.log('   - –£—Å–ø–µ—Ö:', response.success);
    console.log('   - HTTP —Å—Ç–∞—Ç—É—Å:', response.status);
    console.log('   - –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:', response.responseTime + 'ms');
    console.log('   - –û—à–∏–±–∫–∞:', response.error || '–Ω–µ—Ç');
    
    if (response.success && response.data) {
      console.log('   - –î–∞–Ω–Ω—ã–µ:');
      if (Array.isArray(response.data)) {
        console.log(`     üìä –†–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤: ${response.data.length}`);
        if (response.data.length > 0) {
          console.log('     üõ¢Ô∏è  –ü–µ—Ä–≤—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä:', JSON.stringify(response.data[0], null, 4));
        }
      } else {
        console.log('     üìÑ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(response.data, null, 2));
      }
    } else {
      console.log('   - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', response.headers);
      console.log('   - –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', response.data);
    }
    
  } catch (importError) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', importError);
    console.error('Stack trace:', importError.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testUniversalHttpClient().catch(error => {
  console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  process.exit(1);
});