/**
 * –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL Supabase
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */

const { Client } = require('pg');
const https = require('https');
const dns = require('dns');

// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase URL
const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const projectRef = 'tohtryzyffcebtyvkxwh';

// –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const connectionConfigs = [
  {
    name: 'Transaction Pooler (Port 6543)',
    config: {
      host: `aws-0-eu-central-1.pooler.supabase.com`,
      port: 6543,
      database: 'postgres',
      user: `postgres.${projectRef}`,
      password: 'tradeframe2024',
      ssl: { rejectUnauthorized: false }
    }
  },
  {
    name: 'Session Pooler (Port 5432)',
    config: {
      host: `aws-0-eu-central-1.pooler.supabase.com`,
      port: 5432,
      database: 'postgres',
      user: `postgres.${projectRef}`,
      password: 'tradeframe2024',
      ssl: { rejectUnauthorized: false }
    }
  },
  {
    name: 'Direct Connection (supabase.co)',
    config: {
      host: `${projectRef}.supabase.co`,
      port: 5432,
      database: 'postgres',
      user: 'postgres',
      password: 'tradeframe2024',
      ssl: { rejectUnauthorized: false }
    }
  },
  {
    name: 'Direct Connection (supabase.co) with project user',
    config: {
      host: `${projectRef}.supabase.co`,
      port: 5432,
      database: 'postgres',
      user: `postgres.${projectRef}`,
      password: 'tradeframe2024',
      ssl: { rejectUnauthorized: false }
    }
  },
  {
    name: 'IPv6 Direct',
    config: {
      host: `db.${projectRef}.supabase.co`,
      port: 5432,
      database: 'postgres',
      user: 'postgres',
      password: 'tradeframe2024',
      ssl: { rejectUnauthorized: false }
    }
  }
];

async function checkDNS(hostname) {
  return new Promise((resolve) => {
    dns.lookup(hostname, (err, address) => {
      if (err) {
        resolve({ success: false, error: err.message });
      } else {
        resolve({ success: true, address });
      }
    });
  });
}

async function checkPort(host, port) {
  return new Promise((resolve) => {
    const net = require('net');
    const socket = new net.Socket();
    
    socket.setTimeout(5000);
    
    socket.on('connect', () => {
      socket.destroy();
      resolve({ success: true });
    });
    
    socket.on('timeout', () => {
      socket.destroy();
      resolve({ success: false, error: 'timeout' });
    });
    
    socket.on('error', (err) => {
      resolve({ success: false, error: err.message });
    });
    
    socket.connect(port, host);
  });
}

async function testPostgresConnection(configName, config) {
  console.log(`\nüîÑ === –¢–µ—Å—Ç–∏—Ä—É–µ–º ${configName} ===`);
  console.log(`   Host: ${config.host}:${config.port}`);
  console.log(`   User: ${config.user}`);
  console.log(`   DB: ${config.database}`);
  
  // 1. DNS Resolution
  console.log('üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥...');
  const dnsResult = await checkDNS(config.host);
  if (dnsResult.success) {
    console.log(`‚úÖ DNS: ${config.host} ‚Üí ${dnsResult.address}`);
  } else {
    console.log(`‚ùå DNS –æ—à–∏–±–∫–∞: ${dnsResult.error}`);
    return { success: false, stage: 'DNS' };
  }
  
  // 2. Port Check
  console.log(`üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ ${config.port}...`);
  const portResult = await checkPort(config.host, config.port);
  if (portResult.success) {
    console.log(`‚úÖ –ü–æ—Ä—Ç ${config.port} –æ—Ç–∫—Ä—ã—Ç`);
  } else {
    console.log(`‚ùå –ü–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${portResult.error}`);
    return { success: false, stage: 'PORT' };
  }
  
  // 3. PostgreSQL Connection
  console.log('üîì –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
  const client = new Client(config);
  
  try {
    await client.connect();
    console.log('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // 4. Basic Query
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL...');
    const versionResult = await client.query('SELECT version()');
    const version = versionResult.rows[0].version;
    console.log(`‚úÖ PostgreSQL: ${version.split(' ')[0]} ${version.split(' ')[1]}`);
    
    // 5. Check Schema Access
    console.log('üóÇÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ö–µ–º–µ...');
    const schemaResult = await client.query('SELECT schema_name FROM information_schema.schemata');
    console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ö–µ–º: ${schemaResult.rows.length}`);
    
    // 6. Check Operations Table
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É operations...');
    const tableResult = await client.query(`
      SELECT table_name, table_type 
      FROM information_schema.tables 
      WHERE table_schema = 'public' AND table_name = 'operations'
    `);
    
    if (tableResult.rows.length > 0) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ operations –Ω–∞–π–¥–µ–Ω–∞');
      
      // 7. Check Constraints
      console.log('üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º constraints...');
      const constraintResult = await client.query(`
        SELECT conname, consrc 
        FROM pg_constraint 
        WHERE conrelid = (SELECT oid FROM pg_class WHERE relname = 'operations') 
        AND conname LIKE '%payment%'
      `);
      
      if (constraintResult.rows.length > 0) {
        console.log('üìã –ù–∞–π–¥–µ–Ω—ã constraints:');
        constraintResult.rows.forEach(row => {
          console.log(`   ${row.conname}: ${row.consrc}`);
        });
      } else {
        console.log('‚ö†Ô∏è Payment constraints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
      // 8. Check Permissions
      console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞...');
      try {
        await client.query(`SELECT COUNT(*) FROM operations LIMIT 1`);
        console.log('‚úÖ SELECT –ø—Ä–∞–≤–∞ –µ—Å—Ç—å');
        
        await client.query(`
          INSERT INTO operations (id, operation_type, status, start_time, payment_method, details, created_at, updated_at) 
          VALUES ('TEST-PERM-${Date.now()}', 'sale', 'completed', NOW(), 'cash', 'Permission test', NOW(), NOW())
        `);
        console.log('‚úÖ INSERT –ø—Ä–∞–≤–∞ –µ—Å—Ç—å');
        
        await client.query(`DELETE FROM operations WHERE id LIKE 'TEST-PERM-%'`);
        console.log('‚úÖ DELETE –ø—Ä–∞–≤–∞ –µ—Å—Ç—å');
        
      } catch (permErr) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: ${permErr.message}`);
      }
      
      await client.end();
      return { 
        success: true, 
        config,
        hasOperationsTable: true,
        hasConstraints: constraintResult.rows.length > 0,
        constraints: constraintResult.rows
      };
      
    } else {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ operations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      await client.end();
      return { success: false, stage: 'TABLE_ACCESS' };
    }
    
  } catch (error) {
    console.log(`‚ùå PostgreSQL –æ—à–∏–±–∫–∞: ${error.message}`);
    console.log(`üîß –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code || 'UNKNOWN'}`);
    try {
      await client.end();
    } catch (e) {}
    return { success: false, stage: 'POSTGRES', error: error.message, code: error.code };
  }
}

async function main() {
  console.log('üöÄ –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE POSTGRESQL');
  console.log('=' .repeat(80));
  console.log(`üìä –ü—Ä–æ–µ–∫—Ç: ${projectRef}`);
  console.log(`üîó Supabase URL: ${supabaseUrl}`);
  console.log(`üóùÔ∏è Service Key: ${supabaseKey.substring(0, 20)}...`);
  
  let workingConnection = null;
  
  for (const { name, config } of connectionConfigs) {
    const result = await testPostgresConnection(name, config);
    
    if (result.success) {
      console.log(`\nüéØ –£–°–ü–ï–®–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û: ${name}`);
      workingConnection = result;
      break;
    }
  }
  
  if (workingConnection) {
    console.log('\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
    console.log('‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log(`üì° –•–æ—Å—Ç: ${workingConnection.config.host}:${workingConnection.config.port}`);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${workingConnection.config.user}`);
    console.log(`üóÇÔ∏è –ë–∞–∑–∞: ${workingConnection.config.database}`);
    
    if (workingConnection.hasConstraints) {
      console.log('\nüîí –ù–ê–ô–î–ï–ù–ù–´–ï CONSTRAINTS:');
      workingConnection.constraints.forEach(constraint => {
        console.log(`   ${constraint.conname}: ${constraint.consrc}`);
      });
      console.log('\n‚úÖ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å —É–¥–∞–ª–µ–Ω–∏–µ–º constraint!');
    } else {
      console.log('\n‚ö†Ô∏è Payment constraints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã');
    }
    
    return workingConnection;
    
  } else {
    console.log('\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–ô–¢–ò –†–ê–ë–û–ß–ï–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï');
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('   2. Firewall –±–ª–æ–∫–∏—Ä—É–µ—Ç PostgreSQL –ø–æ—Ä—Ç—ã');
    console.log('   3. Supabase –∏–∑–º–µ–Ω–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    console.log('   4. –ù—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
    console.log('   5. –ü—Ä–æ–µ–∫—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
    
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ Supabase Dashboard ‚Üí Settings ‚Üí Database');
    console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Database URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Dashboard');
    
    return null;
  }
}

main().then((result) => {
  if (result) {
    console.log('\nüéØ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π!');
  } else {
    console.log('\n‚ö†Ô∏è –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
  }
  process.exit(0);
}).catch(err => {
  console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', err);
  process.exit(1);
});