import { useState, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { useToast } from "@/hooks/use-toast";
import { EmptyState } from "@/components/ui/empty-state";
import { 
  Edit, 
  TestTube, 
  RotateCw, 
  Copy, 
  Trash2, 
  CheckCircle, 
  XCircle,
  Clock,
  Plus
} from "lucide-react";
import { ConnectionForm } from "@/components/connections/ConnectionForm";
import { Connection, CreateConnectionRequest, UpdateConnectionRequest, ConnectionTestResult } from "@/types/connections";
import { mockConnectionsApi } from "@/services/connections";

export default function Connections() {
  const { toast } = useToast();
  
  // State
  const [connections, setConnections] = useState<Connection[]>([]);
  const [loading, setLoading] = useState(true);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [editingConnection, setEditingConnection] = useState<Connection | null>(null);
  const [deletingConnection, setDeletingConnection] = useState<Connection | null>(null);
  const [formLoading, setFormLoading] = useState(false);
  const [testResults, setTestResults] = useState<Record<string, ConnectionTestResult>>({});
  const [testLoadingStates, setTestLoadingStates] = useState<Record<string, boolean>>({});
  const [searchQuery, setSearchQuery] = useState("");

  // Load connections
  useEffect(() => {
    loadConnections();
  }, []);

  const loadConnections = async () => {
    try {
      setLoading(true);
      const data = await mockConnectionsApi.getConnections();
      setConnections(data);
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ –ø–æ–∏—Å–∫—É
  const filteredConnections = connections.filter(connection =>
    connection.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    connection.connectionType.toLowerCase().includes(searchQuery.toLowerCase()) ||
    connection.purpose.toLowerCase().includes(searchQuery.toLowerCase()) ||
    connection.baseUrl.toLowerCase().includes(searchQuery.toLowerCase()) ||
    connection.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  const getStatusIcon = (connection: Connection) => {
    const testResult = testResults[connection.id];
    const isLoading = testLoadingStates[connection.id];
    
    if (isLoading) {
      return <div className="animate-spin h-4 w-4 border-2 border-current border-t-transparent rounded-full" />;
    }
    
    if (testResult) {
      return testResult.success 
        ? <CheckCircle className="h-4 w-4 text-green-500" />
        : <XCircle className="h-4 w-4 text-red-500" />;
    }
    
    return <Clock className="h-4 w-4 text-slate-400" />;
  };

  const getStatusText = (connection: Connection) => {
    const testResult = testResults[connection.id];
    const isLoading = testLoadingStates[connection.id];
    
    if (isLoading) return "–ü—Ä–æ–≤–µ—Ä–∫–∞...";
    if (testResult) {
      return testResult.success ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" : "–û—à–∏–±–∫–∞";
    }
    return "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ";
  };

  // Event handlers
  const handleAddConnection = () => {
    setEditingConnection(null);
    setIsCreateDialogOpen(true);
  };

  const handleEditConnection = (connection: Connection) => {
    setEditingConnection(connection);
    setIsEditDialogOpen(true);
  };

  const handleFormSubmit = async (data: CreateConnectionRequest | UpdateConnectionRequest) => {
    try {
      setFormLoading(true);
      
      if (editingConnection) {
        // Update existing connection
        const updatedConnection = await mockConnectionsApi.updateConnection(
          editingConnection.id, 
          data as UpdateConnectionRequest
        );
        setConnections(prev => 
          prev.map(conn => conn.id === editingConnection.id ? updatedConnection : conn)
        );
        toast({
          title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
          description: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ "${updatedConnection.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`,
        });
      } else {
        // Create new connection
        const newConnection = await mockConnectionsApi.createConnection(data as CreateConnectionRequest);
        setConnections(prev => [...prev, newConnection]);
        toast({
          title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
          description: `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ "${newConnection.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ`,
        });
      }
      
      setIsCreateDialogOpen(false);
      setIsEditDialogOpen(false);
      setEditingConnection(null);
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
        variant: "destructive",
      });
    } finally {
      setFormLoading(false);
    }
  };

  const handleFormCancel = () => {
    setIsCreateDialogOpen(false);
    setIsEditDialogOpen(false);
    setEditingConnection(null);
  };

  const handleTestConnection = async (connection: Connection): Promise<ConnectionTestResult> => {
    setTestLoadingStates(prev => ({ ...prev, [connection.id]: true }));
    
    try {
      const result = await mockConnectionsApi.testConnection(connection.id);
      setTestResults(prev => ({ ...prev, [connection.id]: result }));
      
      toast({
        title: result.success ? "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" : "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        description: result.message,
        variant: result.success ? "default" : "destructive",
      });
      
      return result;
    } catch (error: any) {
      const errorResult: ConnectionTestResult = {
        success: false,
        message: error.message || "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        error: error.message,
      };
      setTestResults(prev => ({ ...prev, [connection.id]: errorResult }));
      return errorResult;
    } finally {
      setTestLoadingStates(prev => ({ ...prev, [connection.id]: false }));
    }
  };

  const handleRotateSecret = async (connection: Connection) => {
    try {
      const updatedConnection = await mockConnectionsApi.rotateSecret(connection.id);
      setConnections(prev => 
        prev.map(conn => conn.id === connection.id ? updatedConnection : conn)
      );
      toast({
        title: "–°–µ–∫—Ä–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω",
        description: `–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è "${connection.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`,
      });
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç",
        variant: "destructive",
      });
    }
  };

  const handleCloneConnection = async (connection: Connection) => {
    try {
      const clonedConnection = await mockConnectionsApi.cloneConnection(connection.id);
      setConnections(prev => [...prev, clonedConnection]);
      toast({
        title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ",
        description: `–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è "${clonedConnection.name}"`,
      });
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
        variant: "destructive",
      });
    }
  };

  const handleDeleteConnection = (connection: Connection) => {
    setDeletingConnection(connection);
  };

  const confirmDelete = async () => {
    if (!deletingConnection) return;
    
    try {
      await mockConnectionsApi.deleteConnection(deletingConnection.id);
      setConnections(prev => prev.filter(conn => conn.id !== deletingConnection.id));
      toast({
        title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
        description: `"${deletingConnection.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ`,
      });
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
        variant: "destructive",
      });
    } finally {
      setDeletingConnection(null);
    }
  };

  return (
    <>
      <MainLayout fullWidth={true}>
        <div className="w-full h-full report-full-width">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
          <div className="mb-6 pt-4 pl-4 md:pl-6 lg:pl-8 pr-4 md:pr-6 lg:pr-8">
            <h1 className="text-2xl font-semibold text-white">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h1>
            <p className="text-slate-400 mt-2">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ –≤–Ω–µ—à–Ω–∏–º —Å–∏—Å—Ç–µ–º–∞–º –∏ —Å–µ—Ä–≤–∏—Å–∞–º</p>
          </div>

          {/* –ü–∞–Ω–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π */}
          <div className="bg-slate-800 mb-6 rounded-lg border border-slate-700 mx-4 md:mx-6 lg:mx-8">
            <div className="px-4 md:px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                    <span className="text-white text-sm">üîó</span>
                  </div>
                  <h2 className="text-lg font-semibold text-white">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h2>
                </div>
                <Button 
                  onClick={handleAddConnection}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium flex-shrink-0"
                >
                  + –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                </Button>
              </div>
              
              {/* –ü–æ–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π */}
              <div className="mt-4">
                <Input
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                />
              </div>
            </div>

          </div>

          <div className="mx-4 md:mx-6 lg:mx-8">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <div className="animate-spin h-8 w-8 border-4 border-blue-600 border-t-transparent rounded-full"></div>
            </div>
          ) : connections.length === 0 ? (
            <div className="pb-6">
              <EmptyState 
                title="–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π" 
                description="–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏"
                cta={
                  <Button 
                    onClick={handleAddConnection}
                    className="bg-blue-600 hover:bg-blue-700 text-white"
                  >
                    + –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                  </Button>
                }
                className="py-16"
              />
            </div>
          ) : filteredConnections.length === 0 ? (
            <div className="pb-6">
              <EmptyState 
                title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" 
                description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞"
                className="py-16"
              />
            </div>
          ) : (
            <div>
              {/* –î–µ—Å–∫—Ç–æ–ø: —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
              <div className="overflow-x-auto border border-slate-600 rounded-lg">
                <table className="w-full text-sm table-fixed">
                    <thead className="bg-slate-700">
                      <tr>
                        <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '25%'}}>–ù–ê–ó–í–ê–ù–ò–ï</th>
                        <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '15%'}}>–¢–ò–ü</th>
                        <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '20%'}}>URL</th>
                        <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '15%'}}>–°–¢–ê–¢–£–°</th>
                        <th className="px-6 py-4 text-left text-slate-200 font-medium" style={{width: '15%'}}>–°–û–°–¢–û–Ø–ù–ò–ï</th>
                        <th className="px-6 py-4 text-right text-slate-200 font-medium" style={{width: '10%'}}>–î–ï–ô–°–¢–í–ò–Ø</th>
                      </tr>
                    </thead>
                    <tbody className="bg-slate-800">
                      {filteredConnections.map((connection) => (
                        <tr
                          key={connection.id}
                          className="border-b border-slate-600 cursor-pointer hover:bg-slate-700 transition-colors"
                        >
                          <td className="px-4 md:px-6 py-4">
                            <div>
                              <div className="font-medium text-white text-base flex items-center gap-2">
                                {connection.name}
                                {connection.isSystem && (
                                  <Badge variant="outline" className="border-orange-500 text-orange-400 text-xs">
                                    –°–ò–°–¢–ï–ú–ù–û–ï
                                  </Badge>
                                )}
                              </div>
                              {connection.purpose && (
                                <div className="text-sm text-slate-400">{connection.purpose}</div>
                              )}
                              {connection.tags.length > 0 && (
                                <div className="flex flex-wrap gap-1 mt-1">
                                  {connection.tags.slice(0, 3).map((tag) => (
                                    <Badge key={tag} variant="outline" className="border-slate-600 text-slate-400 text-xs">
                                      {tag}
                                    </Badge>
                                  ))}
                                  {connection.tags.length > 3 && (
                                    <Badge variant="outline" className="border-slate-600 text-slate-400 text-xs">
                                      +{connection.tags.length - 3}
                                    </Badge>
                                  )}
                                </div>
                              )}
                            </div>
                          </td>
                          <td className="px-4 md:px-6 py-4">
                            <Badge variant="secondary" className="bg-slate-600 text-slate-200">
                              {connection.connectionType}
                            </Badge>
                          </td>
                          <td className="px-4 md:px-6 py-4">
                            <code className="bg-slate-600 text-slate-200 px-2 py-1 rounded text-xs">
                              {connection.baseUrl}
                            </code>
                          </td>
                          <td className="px-4 md:px-6 py-4">
                            <Badge variant={connection.isEnabled ? "default" : "secondary"}>
                              {connection.isEnabled ? "–í–∫–ª—é—á–µ–Ω–æ" : "–í—ã–∫–ª—é—á–µ–Ω–æ"}
                            </Badge>
                          </td>
                          <td className="px-4 md:px-6 py-4">
                            <div className="flex items-center gap-2">
                              {getStatusIcon(connection)}
                              <span className="text-sm text-slate-200">{getStatusText(connection)}</span>
                            </div>
                          </td>
                          <td className="px-6 py-4 text-right">
                            <div className="flex items-center justify-end gap-2">
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="h-8 w-8 p-0 text-slate-400 hover:text-white"
                                onClick={() => handleEditConnection(connection)}
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="h-8 w-8 p-0 text-slate-400 hover:text-white"
                                onClick={() => handleTestConnection(connection)}
                                disabled={testLoadingStates[connection.id]}
                              >
                                <TestTube className="h-4 w-4" />
                              </Button>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="h-8 w-8 p-0 text-slate-400 hover:text-white"
                                onClick={() => handleCloneConnection(connection)}
                                disabled={connection.isSystem}
                              >
                                <Copy className="h-4 w-4" />
                              </Button>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="h-8 w-8 p-0 text-slate-400 hover:text-red-400"
                                onClick={() => handleDeleteConnection(connection)}
                                disabled={connection.isSystem}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
              </div>
            </div>
          )}
          </div>
        </div>
      </MainLayout>

      {/* Create/Edit Connection Dialog */}
      <Dialog open={isCreateDialogOpen || isEditDialogOpen} onOpenChange={(open) => {
        if (!open) {
          setIsCreateDialogOpen(false);
          setIsEditDialogOpen(false);
          setEditingConnection(null);
        }
      }}>
        <DialogContent className="bg-slate-800 border-slate-600 max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="text-white">
              {editingConnection ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ' : '–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'}
            </DialogTitle>
          </DialogHeader>
          <ConnectionForm
            connection={editingConnection || undefined}
            onSubmit={handleFormSubmit}
            onCancel={handleFormCancel}
            loading={formLoading}
          />
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={!!deletingConnection} onOpenChange={() => setDeletingConnection(null)}>
        <AlertDialogContent className="bg-slate-800 border-slate-600">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-white">–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</AlertDialogTitle>
            <AlertDialogDescription className="text-slate-300">
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ "{deletingConnection?.name}"? 
              –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeletingConnection(null)}
              className="border-slate-600 text-white hover:bg-slate-700"
            >
              –û—Ç–º–µ–Ω–∞
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={confirmDelete}
              className="bg-red-600 hover:bg-red-700 text-white"
            >
              –£–¥–∞–ª–∏—Ç—å
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}