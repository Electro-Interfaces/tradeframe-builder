// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ü–µ–Ω —Å Supabase
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://tshglrthsmyxhlsrrsmt.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRzaGdscnRoc215eGhsc3Jyc210Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMDc4MzI5NywiZXhwIjoyMDQ2MzU5Mjk3fQ.NHXfz4p5SaYWwZdA4MxeKg6J4vRBfuBFhJx0N4Q5I_g';

const supabase = createClient(supabaseUrl, serviceKey);

async function testPricesIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ü–µ–Ω —Å Supabase...');

  try {
    // 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    console.log('\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...');
    
    const tables = ['prices', 'price_packages', 'price_package_lines', 'price_history'];
    let tablesFound = 0;
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true });
        
        if (error) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: OK`);
          tablesFound++;
        }
      } catch (err) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${err.message}`);
      }
    }
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${tablesFound}/${tables.length} —Ç–∞–±–ª–∏—Ü –¥–æ—Å—Ç—É–ø–Ω—ã`);
    
    if (tablesFound === 0) {
      console.log('\n‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é database/prices_simple.sql');
      return;
    }

    // 2. –¢–µ—Å—Ç —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞
    console.log('\n‚õΩ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞...');
    
    const { data: fuelTypes, error: ftError } = await supabase
      .from('fuel_types')
      .select('id, name, code, is_active')
      .eq('is_active', true)
      .order('name');
    
    if (ftError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞: ${ftError.message}`);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞: ${fuelTypes?.length || 0}`);
      fuelTypes?.forEach(ft => {
        console.log(`  ‚Ä¢ ${ft.name} (${ft.code})`);
      });
    }

    // 3. –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
    console.log('\nüè™ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫...');
    
    const { data: tradingPoints, error: tpError } = await supabase
      .from('trading_points')
      .select('id, name')
      .order('name');
    
    if (tpError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: ${tpError.message}`);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: ${tradingPoints?.length || 0}`);
      tradingPoints?.forEach(tp => {
        console.log(`  ‚Ä¢ ${tp.name}`);
      });
    }

    // 4. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
    if (fuelTypes && fuelTypes.length > 0 && tradingPoints && tradingPoints.length > 0) {
      console.log('\nüí∞ –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ü–µ–Ω—ã...');
      
      const testPrice = {
        trading_point_id: tradingPoints[0].id,
        fuel_type_id: fuelTypes[0].id,
        price_net: 5500, // 55.00 —Ä—É–± –±–µ–∑ –ù–î–°
        vat_rate: 20,
        price_gross: 6600, // 66.00 —Ä—É–± —Å –ù–î–°
        source: 'manual',
        valid_from: new Date().toISOString(),
        is_active: true,
        created_by: '550e8400-e29b-41d4-a716-446655440000', // test user
        reason: '–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
        metadata: { test: true }
      };

      try {
        const { data: newPrice, error: createError } = await supabase
          .from('prices')
          .insert(testPrice)
          .select('*, fuel_types(name, code), trading_points(name)')
          .single();
        
        if (createError) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω—ã: ${createError.message}`);
        } else {
          console.log(`‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:`);
          console.log(`  ‚Ä¢ –¢–æ–ø–ª–∏–≤–æ: ${newPrice.fuel_types?.name}`);
          console.log(`  ‚Ä¢ –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞: ${newPrice.trading_points?.name}`);
          console.log(`  ‚Ä¢ –¶–µ–Ω–∞: ${(newPrice.price_gross / 100).toFixed(2)} ‚ÇΩ/–ª`);
          console.log(`  ‚Ä¢ ID: ${newPrice.id}`);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
          global.testPriceId = newPrice.id;
        }
      } catch (err) {
        console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–Ω—ã: ${err.message}`);
      }
    }

    // 5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
    console.log('\nüìä –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω...');
    
    try {
      const { data: prices, error: pricesError } = await supabase
        .from('prices')
        .select(`
          *,
          fuel_types(name, code),
          trading_points(name)
        `)
        .eq('is_active', true)
        .order('valid_from', { ascending: false })
        .limit(10);
      
      if (pricesError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: ${pricesError.message}`);
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω: ${prices?.length || 0}`);
        
        prices?.forEach((price, i) => {
          console.log(`  ${i + 1}. ${price.fuel_types?.name} - ${(price.price_gross / 100).toFixed(2)} ‚ÇΩ –Ω–∞ ${price.trading_points?.name}`);
        });
      }
    } catch (err) {
      console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω: ${err.message}`);
    }

    // 6. –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
    console.log('\nüìö –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω...');
    
    try {
      const { data: history, error: historyError } = await supabase
        .from('price_history')
        .select(`
          *,
          fuel_types(name, code),
          trading_points(name)
        `)
        .order('effective_date', { ascending: false })
        .limit(5);
      
      if (historyError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${historyError.message}`);
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${history?.length || 0}`);
        
        history?.forEach((entry, i) => {
          const date = new Date(entry.effective_date).toLocaleString('ru-RU');
          console.log(`  ${i + 1}. ${date} - ${entry.fuel_types?.name}: ${(entry.new_price_gross / 100).toFixed(2)} ‚ÇΩ`);
        });
      }
    } catch (err) {
      console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: ${err.message}`);
    }

    // 7. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
    if (global.testPriceId) {
      console.log('\nüîÑ –¢–µ—Å—Ç 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã...');
      
      try {
        const { data: updatedPrice, error: updateError } = await supabase
          .from('prices')
          .update({
            price_net: 5600, // –ù–æ–≤–∞—è —Ü–µ–Ω–∞
            price_gross: 6720,
            reason: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ü–µ–Ω—ã'
          })
          .eq('id', global.testPriceId)
          .select()
          .single();
        
        if (updateError) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã: ${updateError.message}`);
        } else {
          console.log(`‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${(updatedPrice.price_gross / 100).toFixed(2)} ‚ÇΩ`);
        }
      } catch (err) {
        console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: ${err.message}`);
      }
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–µ–∑—é–º–µ:');
    console.log(`  ‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã`);
    console.log(`  ‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç`);
    console.log(`  ‚úÖ –°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    console.log(`  ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ–¥–µ—Ç—Å—è`);
    
    console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testPricesIntegration();