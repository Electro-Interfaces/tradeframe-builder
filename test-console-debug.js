/**
 * –ö–û–ù–°–û–õ–¨–ù–´–ô –¢–ï–°–¢ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ DevTools
 * –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ http://localhost:3000
 */

console.log('üß™ –ó–ê–ü–£–°–ö –ö–û–ù–°–û–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û HTTP –ö–õ–ò–ï–ù–¢–ê');
console.log('======================================================');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testHttpClientInConsole() {
    const TARGET_TP_ID = '6969b08d-1cbe-45c2-ae9c-8002c7022b59'; // –ê–ó–° 4
    
    try {
        console.log('üì¶ –®–ê–ì 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...');
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
        const { httpClient } = await import('./src/services/universalHttpClient.js');
        const { tradingNetworkConfigService } = await import('./src/services/tradingNetworkConfigService.js');
        const { tradingPointsService } = await import('./src/services/tradingPointsService.js');
        const { networksService } = await import('./src/services/networksService.js');
        
        console.log('‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
        
        // –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        console.log('üîß –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        
        let config;
        try {
            config = await tradingNetworkConfigService.getConfig();
            console.log('‚úÖ Async –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', config);
        } catch (asyncError) {
            console.error('‚ùå Async –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', asyncError.message);
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º sync –≤–µ—Ä—Å–∏—é...');
            
            try {
                config = tradingNetworkConfigService.getConfigSync();
                console.log('‚ö†Ô∏è Sync –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', config);
            } catch (syncError) {
                console.error('üí• –û–±–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç:', syncError.message);
                return;
            }
        }
        
        // –®–ê–ì 3: API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        console.log('üÜî –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ API –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...');
        
        const tradingPoint = await tradingPointsService.getById(TARGET_TP_ID);
        console.log('üìç –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞:', tradingPoint);
        
        if (!tradingPoint) {
            console.error('‚ùå –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        const stationId = tradingPoint.external_id || tradingPoint.code || '';
        let systemId = '';
        
        if (tradingPoint.network_id) {
            const network = await networksService.getById(tradingPoint.network_id);
            console.log('üåê –°–µ—Ç—å:', network);
            if (network) {
                systemId = network.external_id || network.name || '';
            }
        }
        
        console.log('üìã API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:');
        console.log('   System ID:', systemId);
        console.log('   Station ID:', stationId);
        
        if (!systemId || !stationId) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
            return;
        }
        
        // –®–ê–ì 4: HTTP –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å
        console.log('üåê –®–ê–ì 4: –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ HTTP –∫–ª–∏–µ–Ω—Ç...');
        
        const endpoint = config.endpoints?.tanks || '/tanks';
        const queryParams = { system: systemId, station: stationId };
        const fullUrl = `${config.baseUrl}${endpoint}?system=${systemId}&station=${stationId}`;
        
        console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
        console.log('   Endpoint:', endpoint);
        console.log('   Query Params:', queryParams);
        console.log('   Full URL:', fullUrl);
        
        const startTime = Date.now();
        
        const response = await httpClient.get(endpoint, {
            destination: 'external-api',
            queryParams: queryParams,
            timeout: 15000
        });
        
        const responseTime = Date.now() - startTime;
        
        console.log('üìä –û—Ç–≤–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç–∞:');
        console.log('   Success:', response.success);
        console.log('   Status:', response.status);
        console.log('   Error:', response.error);
        console.log('   Time:', responseTime + 'ms');
        console.log('   Data:', response.data);
        
        if (response.success && Array.isArray(response.data)) {
            console.log('‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', response.data.length);
            if (response.data.length > 0) {
                console.log('üõ¢Ô∏è  –ü–µ—Ä–≤—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä:', response.data[0]);
            }
        } else {
            console.error('‚ùå HTTP –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ');
            console.log('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                success: response.success,
                status: response.status,
                error: response.error,
                headers: response.headers,
                rawData: response.data
            });
        }
        
        // –®–ê–ì 5: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        console.log('üîÑ –®–ê–ì 5: –ü—Ä—è–º–æ–π fetch –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...');
        
        try {
            const authString = btoa(`${config.username}:${config.password}`);
            
            const directResponse = await fetch(fullUrl, {
                method: 'GET',
                headers: {
                    'Authorization': `Basic ${authString}`,
                    'Accept': 'application/json',
                    'User-Agent': 'tradeframe-builder/console-test'
                }
            });
            
            console.log('üìä –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å:', directResponse.status, directResponse.statusText);
            
            if (directResponse.ok) {
                const directData = await directResponse.json();
                console.log('‚úÖ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω! –†–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', Array.isArray(directData) ? directData.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
                console.log('üõ¢Ô∏è  –ü—Ä—è–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', directData);
                
                // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
                const httpWorks = response.success && Array.isArray(response.data);
                const directWorks = Array.isArray(directData) && directData.length > 0;
                
                if (httpWorks && directWorks) {
                    console.log('üéâ –û–ë–ê –ú–ï–¢–û–î–ê –†–ê–ë–û–¢–ê–Æ–¢!');
                } else if (directWorks && !httpWorks) {
                    console.warn('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, HTTP –∫–ª–∏–µ–Ω—Ç - –ù–ï–¢');
                    console.log('üîç –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç');
                } else {
                    console.error('‚ùå –û–±–∞ –º–µ—Ç–æ–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ API –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö');
                }
                
            } else {
                const errorText = await directResponse.text();
                console.error('‚ùå –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω:', directResponse.status, errorText);
            }
            
        } catch (fetchError) {
            console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', fetchError.message);
        }
        
        console.log('üèÅ –ö–û–ù–°–û–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
        
    } catch (error) {
        console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testHttpClientInConsole();