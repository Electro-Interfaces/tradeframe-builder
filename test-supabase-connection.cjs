#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç JavaScript
 */

require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase —á–µ—Ä–µ–∑ HTTP API
async function testSupabaseConnection() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  
  if (!supabaseUrl || !serviceRoleKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
    return;
  }
  
  console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
  console.log(`üì° URL: ${supabaseUrl}`);
  
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π REST –∑–∞–ø—Ä–æ—Å
    const response = await fetch(`${supabaseUrl}/rest/v1/`, {
      headers: {
        'apikey': serviceRoleKey,
        'Authorization': `Bearer ${serviceRoleKey}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=minimal'
      }
    });
    
    console.log(`‚úÖ HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}`);
    
    if (response.ok) {
      console.log('‚úÖ Supabase REST API –¥–æ—Å—Ç—É–ø–Ω–æ');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
      const tablesResponse = await fetch(`${supabaseUrl}/rest/v1/`, {
        method: 'HEAD',
        headers: {
          'apikey': serviceRoleKey,
          'Authorization': `Bearer ${serviceRoleKey}`
        }
      });
      
      console.log(`‚úÖ Tables endpoint —Å—Ç–∞—Ç—É—Å: ${tablesResponse.status}`);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL —á–µ—Ä–µ–∑ RPC (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      const rpcResponse = await fetch(`${supabaseUrl}/rest/v1/rpc/`, {
        method: 'POST',
        headers: {
          'apikey': serviceRoleKey,
          'Authorization': `Bearer ${serviceRoleKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({})
      });
      
      console.log(`üìù RPC endpoint —Å—Ç–∞—Ç—É—Å: ${rpcResponse.status}`);
      
      return true;
      
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', response.statusText);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testSupabaseConnection().then(success => {
  if (success) {
    console.log('\nüéâ Supabase –¥–æ—Å—Ç—É–ø–µ–Ω! –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ UI –∏–ª–∏ REST API');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:');
    console.log('   1. –û—Ç–∫—Ä—ã—Ç—å Supabase Dashboard: https://app.supabase.com/');
    console.log('   2. –ü–µ—Ä–µ–π—Ç–∏ –≤ SQL Editor');
    console.log('   3. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ create-telegram-verification-tables.sql');
  } else {
    console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Supabase');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('   1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    console.log('   2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    console.log('   3. –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Supabase Dashboard');
  }
});