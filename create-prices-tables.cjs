// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Ü–µ–Ω –≤ Supabase
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

const supabaseUrl = 'https://tshglrthsmyxhlsrrsmt.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRzaGdscnRoc215eGhsc3Jyc210Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMDc4MzI5NywiZXhwIjoyMDQ2MzU5Mjk3fQ.NHXfz4p5SaYWwZdA4MxeKg6J4vRBfuBFhJx0N4Q5I_g';

const supabase = createClient(supabaseUrl, serviceKey);

async function createPricesTables() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Ü–µ–Ω –≤ Supabase...');

  try {
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlContent = fs.readFileSync(path.join(__dirname, 'database/prices_schema.sql'), 'utf8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd && !cmd.startsWith('--'));

    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥`);

    let successCount = 0;
    let errorCount = 0;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i].trim();
      if (!command) continue;

      try {
        console.log(`\n‚û§ –ö–æ–º–∞–Ω–¥–∞ ${i + 1}/${commands.length}:`);
        console.log(command.substring(0, 100) + (command.length > 100 ? '...' : ''));
        
        const { data, error } = await supabase.rpc('execute_sql', { query: command });
        
        if (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
          errorCount++;
        } else {
          console.log('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
          successCount++;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (err) {
        console.log('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:', err.message);
        errorCount++;
      }
    }

    console.log(`\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...');
    
    const tables = ['prices', 'price_packages', 'price_package_lines', 'price_history'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true });
        
        if (error) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        }
      } catch (err) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${err.message}`);
      }
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
createPricesTables();