const fs = require('fs');

// –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
console.log('üì• –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π operationsService.ts...');
const originalContent = fs.readFileSync('original-operations-service.ts', 'utf8');

// –ò—â–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
const startPattern = 'const initialOperations: Operation[] = [';
const startIndex = originalContent.indexOf(startPattern);

if (startIndex === -1) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ initialOperations –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ');
  process.exit(1);
}

// –ù–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
const searchStart = startIndex + startPattern.length;
let bracketCount = 1;
let endIndex = searchStart;

while (bracketCount > 0 && endIndex < originalContent.length) {
  if (originalContent[endIndex] === '[') bracketCount++;
  if (originalContent[endIndex] === ']') bracketCount--;
  endIndex++;
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
const operationsJsonText = originalContent.substring(searchStart, endIndex - 1).trim();
console.log('üîç –ò–∑–≤–ª–µ–∫–ª–∏ JSON –æ–ø–µ—Ä–∞—Ü–∏–π, —Ä–∞–∑–º–µ—Ä:', operationsJsonText.length, '—Å–∏–º–≤–æ–ª–æ–≤');

// –ü–∞—Ä—Å–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏
let operations;
try {
  operations = JSON.parse(operationsJsonText);
  console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–∞—Ä—Å–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:', operations.length);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:', error.message);
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  fs.writeFileSync('debug-operations.json', operationsJsonText);
  console.log('üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ debug-operations.json');
  process.exit(1);
}

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤...');

// –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å completed
operations.forEach(op => {
  if (!op.status) op.status = 'completed';
});

// –û—à–∏–±–∫–∞ - 2%
const errorCount = Math.max(1, Math.floor(operations.length * 0.02));
console.log(`üî¥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "failed" –¥–ª—è ${errorCount} –æ–ø–µ—Ä–∞—Ü–∏–π`);
const errorIndexes = [];
while (errorIndexes.length < errorCount) {
  const randomIndex = Math.floor(Math.random() * operations.length);
  if (!errorIndexes.includes(randomIndex)) {
    errorIndexes.push(randomIndex);
    operations[randomIndex].status = 'failed';
    if (!operations[randomIndex].details.includes('–û—à–∏–±–∫–∞')) {
      operations[randomIndex].details += ' - –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã';
    }
  }
}

// –û–∂–∏–¥–∞–Ω–∏–µ - 2%
const pendingCount = Math.max(1, Math.floor(operations.length * 0.02));
console.log(`üü° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "pending" –¥–ª—è ${pendingCount} –æ–ø–µ—Ä–∞—Ü–∏–π`);
const pendingIndexes = [];
while (pendingIndexes.length < pendingCount) {
  const randomIndex = Math.floor(Math.random() * operations.length);
  if (!errorIndexes.includes(randomIndex) && !pendingIndexes.includes(randomIndex)) {
    pendingIndexes.push(randomIndex);
    operations[randomIndex].status = 'pending';
    if (!operations[randomIndex].details.includes('–û–∂–∏–¥–∞–µ—Ç')) {
      operations[randomIndex].details += ' - –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
    }
    operations[randomIndex].progress = 10 + Math.floor(Math.random() * 20);
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è - 3%
const inProgressCount = Math.max(1, Math.floor(operations.length * 0.03));
console.log(`üîµ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "in_progress" –¥–ª—è ${inProgressCount} –æ–ø–µ—Ä–∞—Ü–∏–π`);
const inProgressIndexes = [];
while (inProgressIndexes.length < inProgressCount) {
  const randomIndex = Math.floor(Math.random() * operations.length);
  if (!errorIndexes.includes(randomIndex) && 
      !pendingIndexes.includes(randomIndex) && 
      !inProgressIndexes.includes(randomIndex)) {
    inProgressIndexes.push(randomIndex);
    operations[randomIndex].status = 'in_progress';
    operations[randomIndex].progress = 50 + Math.floor(Math.random() * 40);
  }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = { byStatus: {} };
operations.forEach(op => {
  stats.byStatus[op.status] = (stats.byStatus[op.status] || 0) + 1;
});

console.log('üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤:');
const total = operations.length;
Object.entries(stats.byStatus).forEach(([status, count]) => {
  const percentage = ((count / total) * 100).toFixed(1);
  console.log(`   ${status}: ${count} (${percentage}%)`);
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π operationsService.ts
console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º operationsService.ts...');
let currentContent = fs.readFileSync('./src/services/operationsService.ts', 'utf8');

const currentStartIndex = currentContent.indexOf(startPattern);
if (currentStartIndex === -1) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ initialOperations –≤ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ');
  process.exit(1);
}

const currentSearchStart = currentStartIndex + startPattern.length;
let currentBracketCount = 1;
let currentEndIndex = currentSearchStart;

while (currentBracketCount > 0 && currentEndIndex < currentContent.length) {
  if (currentContent[currentEndIndex] === '[') currentBracketCount++;
  if (currentContent[currentEndIndex] === ']') currentBracketCount--;
  currentEndIndex++;
}

const beforeArray = currentContent.substring(0, currentStartIndex + startPattern.length);
const afterArray = currentContent.substring(currentEndIndex);
const operationsString = JSON.stringify(operations, null, 2);

const newContent = beforeArray + '\n' + operationsString + '\n' + afterArray.substring(1);

fs.writeFileSync('./src/services/operationsService.ts', newContent);

console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
console.log(`üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}`);
console.log('üîÑ –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');

// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
fs.unlinkSync('original-operations-service.ts');