const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, supabaseKey);

async function findNetwork15Transactions() {
  console.log('üîç –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–µ—Ç–∏ 15, –ê–ó–° 4...');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å "–ê–ó–° ‚Ññ004" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    const { data: transactions, error: selectError } = await supabase
      .from('operations')
      .select('*')
      .ilike('trading_point_name', '%–ê–ó–° ‚Ññ004%');

    if (selectError) {
      throw selectError;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ê–ó–° ‚Ññ004`);

    if (transactions.length === 0) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –¥—Ä—É–≥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –Ω–∞–∑–≤–∞–Ω–∏—è
      console.log('üîç –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ê–ó–°...');
      
      const { data: allTransactions, error: allError } = await supabase
        .from('operations')
        .select('trading_point_name')
        .limit(50);
        
      if (allError) {
        throw allError;
      }
      
      const uniqueNames = [...new Set(allTransactions.map(t => t.trading_point_name))];
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫:');
      uniqueNames.forEach(name => console.log(`  - ${name}`));
      
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const transactionTypes = transactions.reduce((acc, t) => {
      acc[t.operation_type] = (acc[t.operation_type] || 0) + 1;
      return acc;
    }, {});

    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
    Object.entries(transactionTypes).forEach(([type, count]) => {
      console.log(`  - ${type}: ${count}`);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ trading_point_id –¥–ª—è —ç—Ç–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const uniqueTradingPointIds = [...new Set(transactions.map(t => t.trading_point_id))];
    console.log('\nüè™ –ù–∞–π–¥–µ–Ω–Ω—ã–µ trading_point_id:');
    uniqueTradingPointIds.forEach(id => console.log(`  - ${id}`));

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
    const uniqueTradingPointNames = [...new Set(transactions.map(t => t.trading_point_name))];
    console.log('\nüìç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫:');
    uniqueTradingPointNames.forEach(name => console.log(`  - ${name}`));

    return transactions;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
findNetwork15Transactions();