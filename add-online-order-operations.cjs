/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å payment_method = 'online_order'
 * –î–æ–±–∞–≤–ª—è–µ—Ç 25 –æ–ø–µ—Ä–∞—Ü–∏–π (10% –æ—Ç 250) —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceKey);

// –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const tradingPoints = [
  { id: 'station_01', name: '–ê–ó–° ‚Ññ1 –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è' },
  { id: 'station_02', name: '–ê–ó–° ‚Ññ2 –°–µ–≤–µ—Ä–Ω–∞—è' },
  { id: 'station_03', name: '–ê–ó–° ‚Ññ3 –Æ–∂–Ω–∞—è' },
  { id: 'station_04', name: '–ê–ó–° ‚Ññ4 –í–æ—Å—Ç–æ—á–Ω–∞—è' },
  { id: 'station_05', name: '–ê–ó–° ‚Ññ5 –ü—Ä–æ–º–∑–æ–Ω–∞' }
];

const fuelTypes = ['–ê–ò-92', '–ê–ò-95', '–ê–ò-98', '–ê–ò-100', '–î–¢'];

const operators = [
  '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
  '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.',
  '–°–∏–¥–æ—Ä–æ–≤ –°.–°.',
  '–ú–æ—Ä–æ–∑–æ–≤ –ú.–ú.',
  '–õ–µ–±–µ–¥–µ–≤ –õ.–õ.',
  '–í–æ–ª–∫–æ–≤ –í.–í.',
  '–ü–æ–ø–æ–≤ –ë.–ë.'
];

const devices = [
  'PUMP-001', 'PUMP-002', 'PUMP-003', 'PUMP-004', 'PUMP-005',
  'PUMP-006', 'PUMP-007', 'PUMP-008', 'PUMP-009', 'PUMP-010',
  'PUMP-011', 'PUMP-012'
];

// –¶–µ–Ω—ã –∑–∞ –ª–∏—Ç—Ä –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞ (–≤ —Ä—É–±–ª—è—Ö)
const fuelPrices = {
  '–ê–ò-92': { min: 52, max: 54 },
  '–ê–ò-95': { min: 55, max: 57 },
  '–ê–ò-98': { min: 62, max: 65 },
  '–ê–ò-100': { min: 68, max: 72 },
  '–î–¢': { min: 58, max: 61 }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
function randomInRange(min, max) {
  return Math.random() * (max - min) + min;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã –≤ –∞–≤–≥—É—Å—Ç–µ 2025
function randomAugust2025Date() {
  const start = new Date('2025-08-01T00:00:00Z');
  const end = new Date('2025-08-31T23:59:59Z');
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –º–∞—à–∏–Ω—ã
function generateVehicleNumber() {
  const letters = '–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•';
  const numbers = '0123456789';
  const regions = ['77', '78', '99', '177', '197', '199', '777'];
  
  const letter1 = letters[Math.floor(Math.random() * letters.length)];
  const num1 = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
  const letter2 = letters[Math.floor(Math.random() * letters.length)];
  const letter3 = letters[Math.floor(Math.random() * letters.length)];
  const region = regions[Math.floor(Math.random() * regions.length)];
  
  return `${letter1}${num1}${letter2}${letter3}${region}`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∫–ª–∏–µ–Ω—Ç–∞
function generateCustomerId() {
  return `CUST-${Math.floor(Math.random() * 100000)}`;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
function generateOnlineOrderOperation(index) {
  const tradingPoint = tradingPoints[Math.floor(Math.random() * tradingPoints.length)];
  const fuelType = fuelTypes[Math.floor(Math.random() * fuelTypes.length)];
  const operator = operators[Math.floor(Math.random() * operators.length)];
  const device = devices[Math.floor(Math.random() * devices.length)];
  
  const startTime = randomAugust2025Date();
  const endTime = new Date(startTime.getTime() + Math.floor(randomInRange(2, 8)) * 60000); // 2-8 –º–∏–Ω—É—Ç
  const duration = Math.floor((endTime.getTime() - startTime.getTime()) / 60000); // –≤ –º–∏–Ω—É—Ç–∞—Ö
  
  const quantity = randomInRange(15, 80); // 15-80 –ª–∏—Ç—Ä–æ–≤
  const priceRange = fuelPrices[fuelType];
  const price = randomInRange(priceRange.min, priceRange.max);
  const totalCost = quantity * price;
  
  const operationId = `ONL-${startTime.getFullYear()}-${String(startTime.getMonth() + 1).padStart(2, '0')}-${String(startTime.getDate()).padStart(2, '0')}-${String(index).padStart(3, '0')}`;
  const transactionId = `TXN-${startTime.getTime()}-${Math.floor(Math.random() * 1000)}`;
  
  return {
    id: operationId,
    operation_type: 'sale',
    status: 'completed',
    start_time: startTime.toISOString(),
    end_time: endTime.toISOString(),
    duration: duration,
    trading_point_id: tradingPoint.id,
    trading_point_name: tradingPoint.name,
    device_id: device,
    transaction_id: transactionId,
    fuel_type: fuelType,
    quantity: Math.round(quantity * 100) / 100, // –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    price: Math.round(price * 100) / 100,
    total_cost: Math.round(totalCost * 100) / 100,
    payment_method: 'online_order',
    details: `–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑ —Ç–æ–ø–ª–∏–≤–∞ ${fuelType}`,
    progress: 100,
    operator_name: operator,
    customer_id: generateCustomerId(),
    vehicle_number: generateVehicleNumber(),
    metadata: {},
    created_at: startTime.toISOString(),
    updated_at: endTime.toISOString()
  };
}

async function addOnlineOrderOperations() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å online_order...');
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 25 –æ–ø–µ—Ä–∞—Ü–∏–π
    const operations = [];
    for (let i = 1; i <= 25; i++) {
      operations.push(generateOnlineOrderOperation(i));
    }
    
    console.log(`üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π —Å online_order`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { data, error } = await supabase
      .from('operations')
      .insert(operations)
      .select();
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
      return false;
    }
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${data.length} –æ–ø–µ—Ä–∞—Ü–∏–π —Å payment_method = 'online_order'`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
    const { count } = await supabase
      .from('operations')
      .select('*', { count: 'exact', head: true });
      
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –ë–î: ${count}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π —Å online_order
    const { count: onlineOrderCount } = await supabase
      .from('operations')
      .select('*', { count: 'exact', head: true })
      .eq('payment_method', 'online_order');
      
    console.log(`üí≥ –û–ø–µ—Ä–∞—Ü–∏–π —Å online_order: ${onlineOrderCount}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞: ${((onlineOrderCount / count) * 100).toFixed(1)}%`);
    
    return true;
    
  } catch (err) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
addOnlineOrderOperations().then((success) => {
  if (success) {
    console.log('üéâ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  } else {
    console.log('üíî –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏');
    process.exit(1);
  }
});