/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–≥—É—Å—Ç–æ–≤—Å–∫–∏—Ö –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –≤ operationsService
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –∑–∞–º–µ–Ω—è–µ—Ç –≤ localStorage
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
function loadAugustDemoData() {
  const demoDataPath = path.join(__dirname, 'august-2025-demo-data.json');
  
  if (!fs.existsSync(demoDataPath)) {
    throw new Error(`–§–∞–π–ª —Å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${demoDataPath}`);
  }

  const rawData = fs.readFileSync(demoDataPath, 'utf8');
  return JSON.parse(rawData);
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç operationsService
function convertToOperationsFormat(demoData) {
  return demoData.operations.map(op => {
    // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
    const operationTypeMap = {
      'sale': 'sale',
      'maintenance': 'maintenance', 
      'inventory': 'sensor_calibration', // –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤
      'refuel_truck': 'fuel_loading'     // –ü–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–ø–ª–∏–≤–∞ –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–ª–∏–≤–∞
    };

    return {
      id: op.id,
      operationType: operationTypeMap[op.operationType] || op.operationType,
      status: op.status,
      startTime: op.startTime,
      endTime: op.endTime,
      duration: op.duration ? Math.floor(op.duration / 60) : undefined, // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
      tradingPointId: op.tradingPointId,
      tradingPointName: op.tradingPointName,
      deviceId: op.deviceId,
      transactionId: op.transactionId,
      fuelType: op.fuelType,
      quantity: op.quantity,
      price: op.price,
      totalCost: op.totalCost,
      paymentMethod: op.paymentMethod,
      details: op.details,
      progress: op.progress,
      lastUpdated: op.lastUpdated,
      operatorName: op.operatorName,
      customerId: op.customerId,
      vehicleNumber: op.vehicleNumber,
      metadata: {},
      createdAt: new Date(op.createdAt || op.startTime),
      updatedAt: new Date(op.updatedAt || op.lastUpdated || op.startTime)
    };
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
function generateOperationsData() {
  console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–≥—É—Å—Ç–æ–≤—Å–∫–∏—Ö –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const demoData = loadAugustDemoData();
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${demoData.operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    
    const convertedOperations = convertToOperationsFormat(demoData);
    console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${convertedOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç operationsService`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
    const typeStats = convertedOperations.reduce((acc, op) => {
      acc[op.operationType] = (acc[op.operationType] || 0) + 1;
      return acc;
    }, {});
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π:');
    Object.entries(typeStats).forEach(([type, count]) => {
      console.log(`  - ${type}: ${count}`);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = convertedOperations.reduce((acc, op) => {
      acc[op.status] = (acc[op.status] || 0) + 1;
      return acc;
    }, {});
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    Object.entries(statusStats).forEach(([status, count]) => {
      console.log(`  - ${status}: ${count}`);
    });
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ operationsService
    const operationsServiceData = {
      operations: convertedOperations,
      metadata: demoData.metadata,
      statistics: demoData.statistics,
      lastUpdated: new Date().toISOString()
    };
    
    const outputPath = path.join(__dirname, 'august-operations-data.json');
    fs.writeFileSync(outputPath, JSON.stringify(operationsServiceData, null, 2));
    console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);
    
    return operationsServiceData;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ operationsService.ts
function generateOperationsServiceCode(operationsData) {
  const operations = operationsData.operations;
  
  const operationsCode = operations.slice(0, 50).map(op => { // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 –¥–ª—è –¥–µ–º–æ
    const createdAt = typeof op.createdAt === 'string' ? op.createdAt : op.createdAt.toISOString();
    const updatedAt = typeof op.updatedAt === 'string' ? op.updatedAt : op.updatedAt.toISOString();
    
    return `  {
    id: "${op.id}",
    operationType: "${op.operationType}",
    status: "${op.status}",
    startTime: "${op.startTime}",
    endTime: ${op.endTime ? `"${op.endTime}"` : 'undefined'},
    duration: ${op.duration || 'undefined'},
    tradingPointId: "${op.tradingPointId}",
    tradingPointName: "${op.tradingPointName}",
    deviceId: ${op.deviceId ? `"${op.deviceId}"` : 'undefined'},
    transactionId: ${op.transactionId ? `"${op.transactionId}"` : 'undefined'},
    fuelType: ${op.fuelType ? `"${op.fuelType}"` : 'undefined'},
    quantity: ${op.quantity || 'undefined'},
    price: ${op.price || 'undefined'},
    totalCost: ${op.totalCost || 'undefined'},
    paymentMethod: ${op.paymentMethod ? `"${op.paymentMethod}"` : 'undefined'},
    details: "${op.details.replace(/"/g, '\\"')}",
    progress: ${op.progress || 'undefined'},
    lastUpdated: "${op.lastUpdated}",
    operatorName: ${op.operatorName ? `"${op.operatorName}"` : 'undefined'},
    customerId: ${op.customerId ? `"${op.customerId}"` : 'undefined'},
    vehicleNumber: ${op.vehicleNumber ? `"${op.vehicleNumber}"` : 'undefined'},
    createdAt: new Date('${createdAt}'),
    updatedAt: new Date('${updatedAt}')
  }`;
  }).join(',\n');

  const fullCode = `// –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–µ—Ç–∏ –ê–ó–° (–∞–≤–≥—É—Å—Ç 2025)
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ august-2025-demo-data.json
const initialOperations: Operation[] = [
${operationsCode}
];`;

  const codeOutputPath = path.join(__dirname, 'operations-service-data.ts');
  fs.writeFileSync(codeOutputPath, fullCode);
  console.log(`üíæ –ö–æ–¥ –¥–ª—è operationsService —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${codeOutputPath}`);
  
  return fullCode;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è operationsService...');
    
    const operationsData = generateOperationsData();
    const serviceCode = generateOperationsServiceCode(operationsData);
    
    console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ! –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ operations-service-data.ts');
    console.log('2. –ó–∞–º–µ–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ initialOperations –≤ src/services/operationsService.ts');
    console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`- –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operationsData.operations.length}`);
    console.log(`- –ü–µ—Ä–∏–æ–¥: –∞–≤–≥—É—Å—Ç 2025`);
    console.log(`- –°—Ç–∞–Ω—Ü–∏–π: ${operationsData.metadata.stations.length}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url.includes('load-august-demo.js')) {
  main();
}

export { loadAugustDemoData, convertToOperationsFormat, generateOperationsData };