/**
 * –ê—É–¥–∏—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Supabase
 */

import fs from 'fs';
import path from 'path';
import { executeSelect } from './tools/sql-direct.js';

const SERVICES_DIR = './src/services';
const COMPONENTS_DIR = './src/components';

async function auditDatabaseIntegration() {
    console.log('üîç –ê–£–î–ò–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•');
    console.log('='.repeat(60));
    
    const results = {
        services: {
            total: 0,
            withDatabase: 0,
            mockOnly: 0,
            needsUpdate: 0,
            files: []
        },
        database: {
            tables: [],
            accessible: 0,
            issues: []
        },
        compatibility: {
            statusField: { correct: 0, incorrect: 0, files: [] },
            uuidFormat: { correct: 0, incorrect: 0, files: [] },
            supabaseIntegration: { present: 0, missing: 0, files: [] }
        }
    };
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä 1. –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    console.log('-'.repeat(40));
    
    const knownTables = [
        'equipment_templates', 'equipment', 'networks', 'trading_points',
        'operations', 'nomenclature', 'users', 'fuel_types'
    ];
    
    for (const table of knownTables) {
        try {
            const data = await executeSelect(table, { limit: 1 });
            results.database.accessible++;
            results.database.tables.push({
                name: table,
                status: 'accessible',
                records: data.length
            });
            console.log(`‚úÖ ${table}: ${data.length} –∑–∞–ø–∏—Å–µ–π`);
        } catch (error) {
            results.database.issues.push({ table, error: error.message });
            console.log(`‚ùå ${table}: ${error.message}`);
        }
    }
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    console.log('\nüõ†Ô∏è 2. –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í –°–ï–†–í–ò–°–û–í');
    console.log('-'.repeat(40));
    
    const serviceFiles = fs.readdirSync(SERVICES_DIR)
        .filter(file => file.endsWith('.ts'))
        .map(file => path.join(SERVICES_DIR, file));
    
    results.services.total = serviceFiles.length;
    
    for (const filePath of serviceFiles) {
        const fileName = path.basename(filePath);
        const content = fs.readFileSync(filePath, 'utf8');
        
        const analysis = analyzeServiceFile(fileName, content);
        results.services.files.push(analysis);
        
        if (analysis.hasDatabase) results.services.withDatabase++;
        if (analysis.mockOnly) results.services.mockOnly++;
        if (analysis.needsUpdate) results.services.needsUpdate++;
        
        // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π —Å—Ç–∞—Ç—É—Å–∞
        if (analysis.usesStatus) {
            results.compatibility.statusField.incorrect++;
            results.compatibility.statusField.files.push(fileName);
        }
        if (analysis.usesIsActive) {
            results.compatibility.statusField.correct++;
        }
        
        // –ê–Ω–∞–ª–∏–∑ UUID
        if (analysis.hasUuidIssues) {
            results.compatibility.uuidFormat.incorrect++;
            results.compatibility.uuidFormat.files.push(fileName);
        }
        
        // –ê–Ω–∞–ª–∏–∑ Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        if (analysis.hasSupabaseIntegration) {
            results.compatibility.supabaseIntegration.present++;
        } else {
            results.compatibility.supabaseIntegration.missing++;
            results.compatibility.supabaseIntegration.files.push(fileName);
        }
        
        const status = analysis.needsUpdate ? '‚ö†Ô∏è' : 
                      analysis.hasSupabaseIntegration ? '‚úÖ' : 
                      analysis.hasDatabase ? 'üîÑ' : 'üìù';
        
        console.log(`${status} ${fileName}: ${analysis.description}`);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    console.log('\nüé® 3. –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í');
    console.log('-'.repeat(40));
    
    const keyComponents = [
        'equipment/Equipment.tsx',
        'equipment/EquipmentWizard.tsx', 
        'equipment/ComponentWizard.tsx',
        'connections/ConnectionsList.tsx',
        'admin/users/UserFormDialog.tsx'
    ];
    
    for (const comp of keyComponents) {
        const compPath = path.join(COMPONENTS_DIR, comp);
        if (fs.existsSync(compPath)) {
            const content = fs.readFileSync(compPath, 'utf8');
            const hasApiCalls = content.includes('API') || content.includes('fetch');
            const usesServices = /from ['"]\@\/services/.test(content);
            console.log(`${hasApiCalls || usesServices ? '‚úÖ' : '‚ö†Ô∏è'} ${comp}: ${hasApiCalls ? 'API –≤—ã–∑–æ–≤—ã' : ''} ${usesServices ? '–°–µ—Ä–≤–∏—Å—ã' : ''}`);
        } else {
            console.log(`‚ùå ${comp}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
    }
    
    // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    console.log('\nüìã 4. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('='.repeat(40));
    
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:`);
    console.log(`   ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: ${results.database.accessible}/${knownTables.length}`);
    console.log(`   ‚ùå –ü—Ä–æ–±–ª–µ–º: ${results.database.issues.length}`);
    
    console.log(`üõ†Ô∏è –°–µ—Ä–≤–∏—Å—ã:`);
    console.log(`   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${results.services.total}`);
    console.log(`   üóÑÔ∏è –° –ë–î –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π: ${results.services.withDatabase}`);
    console.log(`   üé≠ –¢–æ–ª—å–∫–æ mock: ${results.services.mockOnly}`);
    console.log(`   ‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${results.services.needsUpdate}`);
    
    console.log(`üîß –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ö–µ–º—ã:`);
    console.log(`   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ (is_active): ${results.compatibility.statusField.correct}`);
    console.log(`   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ (status): ${results.compatibility.statusField.incorrect}`);
    console.log(`   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å UUID: ${results.compatibility.uuidFormat.incorrect}`);
    console.log(`   ‚úÖ –° Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π: ${results.compatibility.supabaseIntegration.present}`);
    console.log(`   ‚ùå –ë–µ–∑ Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${results.compatibility.supabaseIntegration.missing}`);
    
    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° 5. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
    console.log('-'.repeat(40));
    
    if (results.compatibility.statusField.incorrect > 0) {
        console.log(`‚ö†Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–∞–π–ª–∞—Ö:`);
        results.compatibility.statusField.files.forEach(f => console.log(`   ‚Ä¢ ${f}`));
    }
    
    if (results.compatibility.supabaseIntegration.missing > 0) {
        console.log(`üîÑ –î–æ–±–∞–≤–∏—Ç—å Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤:`);
        results.compatibility.supabaseIntegration.files.slice(0, 10).forEach(f => 
            console.log(`   ‚Ä¢ ${f}`)
        );
        if (results.compatibility.supabaseIntegration.files.length > 10) {
            console.log(`   ... –∏ –µ—â–µ ${results.compatibility.supabaseIntegration.files.length - 10} —Ñ–∞–π–ª–æ–≤`);
        }
    }
    
    const score = calculateCompatibilityScore(results);
    console.log(`\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò: ${score}%`);
    
    if (score >= 80) {
        console.log('üéâ –û–¢–õ–ò–ß–ù–û! –ü—Ä–æ–µ–∫—Ç —Ö–æ—Ä–æ—à–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    } else if (score >= 60) {
        console.log('‚ö†Ô∏è –•–û–†–û–®–û, –Ω–æ –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è');
    } else {
        console.log('‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    }
    
    return results;
}

function analyzeServiceFile(fileName, content) {
    const analysis = {
        hasDatabase: false,
        hasSupabaseIntegration: false,
        mockOnly: false,
        usesStatus: false,
        usesIsActive: false,
        hasUuidIssues: false,
        needsUpdate: false,
        description: ''
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    const hasSupabase = content.includes('supabase') || content.includes('Supabase');
    const hasFetch = content.includes('fetch(') || content.includes('http');
    const hasMockAPI = content.includes('mockAPI') || content.includes('Mock');
    const hasRealAPI = content.includes('realAPI') || content.includes('Real');
    
    analysis.hasSupabaseIntegration = hasSupabase;
    analysis.hasDatabase = hasFetch || hasSupabase || hasRealAPI;
    analysis.mockOnly = hasMockAPI && !hasRealAPI && !hasSupabase;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞
    analysis.usesStatus = content.includes("'status'") || content.includes('"status"') || content.includes('status:');
    analysis.usesIsActive = content.includes('is_active') || content.includes('isActive');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID –ø—Ä–æ–±–ª–µ–º—ã
    const hasStringIds = /id:\s*['"]\w+-\d+/.test(content);
    const hasTestIds = /id:\s*['"]test-/.test(content);
    analysis.hasUuidIssues = hasStringIds || hasTestIds;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    analysis.needsUpdate = analysis.usesStatus || analysis.hasUuidIssues || 
                          (analysis.hasDatabase && !analysis.hasSupabaseIntegration);
    
    // –û–ø–∏—Å–∞–Ω–∏–µ
    if (analysis.hasSupabaseIntegration) {
        analysis.description = '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Supabase';
    } else if (analysis.hasDatabase) {
        analysis.description = 'HTTP API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è';
    } else if (analysis.mockOnly) {
        analysis.description = '–¢–æ–ª—å–∫–æ mock –¥–∞–Ω–Ω—ã–µ';
    } else {
        analysis.description = '–£—Ç–∏–ª–∏—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å';
    }
    
    return analysis;
}

function calculateCompatibilityScore(results) {
    const weights = {
        databaseAccess: 30,      // –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ
        schemaCompatibility: 25, // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ö–µ–º—ã  
        serviceIntegration: 25,  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        overallHealth: 20        // –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    };
    
    const scores = {
        databaseAccess: (results.database.accessible / 8) * 100,
        schemaCompatibility: Math.max(0, 100 - (results.compatibility.statusField.incorrect * 10)),
        serviceIntegration: Math.min(100, (results.compatibility.supabaseIntegration.present / results.services.total) * 200),
        overallHealth: Math.max(0, 100 - (results.services.needsUpdate * 2))
    };
    
    const weightedScore = Object.entries(weights).reduce((total, [key, weight]) => {
        return total + (scores[key] * weight / 100);
    }, 0);
    
    return Math.round(weightedScore);
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
auditDatabaseIntegration().catch(console.error);