// –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∏–∑ localStorage –≤ Supabase
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://tshglrthsmyxhlsrrsmt.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRzaGdscnRoc215eGhsc3Jyc210Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMDc4MzI5NywiZXhwIjoyMDQ2MzU5Mjk3fQ.NHXfz4p5SaYWwZdA4MxeKg6J4vRBfuBFhJx0N4Q5I_g';

const supabase = createClient(supabaseUrl, serviceKey);

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
const mockFuelTypes = [
  { 
    id: "ai95", 
    name: "–ê–ò-95", 
    code: "AI95", 
    category: "gasoline",
    is_active: true
  },
  { 
    id: "ai92", 
    name: "–ê–ò-92", 
    code: "AI92", 
    category: "gasoline",
    is_active: true
  },
  { 
    id: "dt", 
    name: "–î–¢", 
    code: "DT", 
    category: "diesel",
    is_active: true
  },
  { 
    id: "ai98", 
    name: "–ê–ò-98", 
    code: "AI98", 
    category: "gasoline",
    is_active: true
  },
  { 
    id: "ai100", 
    name: "–ê–ò-100", 
    code: "AI100", 
    category: "gasoline",
    is_active: true
  }
];

const mockCurrentPrices = [
  // –ê–ó–° ‚Ññ001 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è
  {
    id: "price_point1_ai95",
    trading_point_id: "550e8400-e29b-41d4-a716-446655440001", // point1
    fuel_type_id: "ai95",
    price_net: 5320,
    vat_rate: 20,
    price_gross: 6384,
    source: "manual",
    valid_from: "2024-12-07T08:00:00Z",
    is_active: true,
    created_by: "550e8400-e29b-41d4-a716-446655440000", // admin user
    reason: "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ –ê–ò-95"
  },
  {
    id: "price_point1_ai92",
    trading_point_id: "550e8400-e29b-41d4-a716-446655440001",
    fuel_type_id: "ai92",
    price_net: 5045,
    vat_rate: 20,
    price_gross: 6054,
    source: "manual",
    valid_from: "2024-12-07T08:00:00Z",
    is_active: true,
    created_by: "550e8400-e29b-41d4-a716-446655440000",
    reason: "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ –ê–ò-92"
  },
  {
    id: "price_point1_dt",
    trading_point_id: "550e8400-e29b-41d4-a716-446655440001",
    fuel_type_id: "dt",
    price_net: 5195,
    vat_rate: 20,
    price_gross: 6234,
    source: "manual",
    valid_from: "2024-12-06T14:30:00Z",
    is_active: true,
    created_by: "550e8400-e29b-41d4-a716-446655440000",
    reason: "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ –î–¢"
  }
];

async function migratePricesData() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –≤ Supabase...');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    const { data: connectionTest } = await supabase
      .from('networks')
      .select('id')
      .limit(1);
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞
    console.log('\n‚õΩ –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞...');
    
    let fuelTypesCreated = 0;
    for (const fuelType of mockFuelTypes) {
      try {
        const { data, error } = await supabase
          .from('fuel_types')
          .upsert({
            id: fuelType.id,
            name: fuelType.name,
            code: fuelType.code,
            category: fuelType.category,
            is_active: fuelType.is_active
          }, { onConflict: 'id' });
        
        if (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ ${fuelType.name}: ${error.message}`);
        } else {
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞: ${fuelType.name}`);
          fuelTypesCreated++;
        }
      } catch (err) {
        console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–ª–∏–≤–∞ ${fuelType.name}: ${err.message}`);
      }
    }
    
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞: ${fuelTypesCreated}/${mockFuelTypes.length}`);

    // 3. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏
    console.log('\nüè™ –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏...');
    const { data: tradingPoints, error: tpError } = await supabase
      .from('trading_points')
      .select('id, name');
    
    if (tpError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: ${tpError.message}`);
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: ${tradingPoints?.length || 0}`);

    // 4. –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏)
    if (tradingPoints && tradingPoints.length > 0) {
      console.log('\nüí∞ –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—ã...');
      
      let pricesCreated = 0;
      for (const price of mockCurrentPrices) {
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É
          const tradingPointId = tradingPoints[0].id;
          
          const { data, error } = await supabase
            .from('prices')
            .insert({
              trading_point_id: tradingPointId,
              fuel_type_id: price.fuel_type_id,
              price_net: price.price_net,
              vat_rate: price.vat_rate,
              price_gross: price.price_gross,
              source: price.source,
              valid_from: price.valid_from,
              is_active: price.is_active,
              created_by: price.created_by,
              reason: price.reason,
              metadata: {}
            });
          
          if (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω—ã ${price.fuel_type_id}: ${error.message}`);
          } else {
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ü–µ–Ω–∞ –Ω–∞ ${price.fuel_type_id} –¥–ª—è ${tradingPoints[0].name}`);
            pricesCreated++;
          }
        } catch (err) {
          console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–Ω—ã ${price.fuel_type_id}: ${err.message}`);
        }
      }
      
      console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Ü–µ–Ω: ${pricesCreated}/${mockCurrentPrices.length}`);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞
    const { data: fuelTypesCheck, error: ftError } = await supabase
      .from('fuel_types')
      .select('*', { count: 'exact' })
      .eq('is_active', true);
    
    if (!ftError) {
      console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –≤ –ë–î: ${fuelTypesCheck?.length || 0}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã
    const { data: pricesCheck, error: pricesError } = await supabase
      .from('prices')
      .select('*, fuel_types(name), trading_points(name)', { count: 'exact' })
      .eq('is_active', true);
    
    if (!pricesError) {
      console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω –≤ –ë–î: ${pricesCheck?.length || 0}`);
      
      if (pricesCheck && pricesCheck.length > 0) {
        console.log('\nüìã –î–µ—Ç–∞–ª–∏ —Ü–µ–Ω:');
        pricesCheck.forEach((price, i) => {
          console.log(`  ${i + 1}. ${price.fuel_types?.name} - ${(price.price_gross / 100).toFixed(2)} ‚ÇΩ (${price.trading_points?.name})`);
        });
      }
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

    // 6. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏
    console.log('\nüìö –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω...');
    
    if (tradingPoints && tradingPoints.length > 0) {
      try {
        const { data, error } = await supabase
          .from('price_history')
          .insert({
            trading_point_id: tradingPoints[0].id,
            fuel_type_id: 'ai95',
            old_price_net: 5200,
            old_price_gross: 6240,
            new_price_net: 5320,
            new_price_gross: 6384,
            vat_rate: 20,
            change_type: 'update',
            source: 'manual',
            reason: '–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage',
            effective_date: new Date().toISOString(),
            changed_by: '550e8400-e29b-41d4-a716-446655440000',
            metadata: { migration: true }
          });
        
        if (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏: ${error.message}`);
        } else {
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω`);
        }
      } catch (err) {
        console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏: ${err.message}`);
      }
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migratePricesData();