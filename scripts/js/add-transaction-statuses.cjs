/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –ê–ó–°
 * 2% –æ—à–∏–±–æ—á–Ω—ã—Ö (failed), 2% –æ–∂–∏–¥–∞–Ω–∏–µ (pending), 3% –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (in_progress), 2% –æ—Ç–º–µ–Ω–µ–Ω–æ (cancelled)
 */

const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
const operationsFilePath = path.join(__dirname, 'src/services/operationsService.ts');
let operationsContent = fs.readFileSync(operationsFilePath, 'utf8');

// –°—Ç–∞—Ç—É—Å—ã –∏ –∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç—ã
const statusDistribution = [
  { status: 'failed', percent: 2, details: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏' },
  { status: 'pending', percent: 2, details: '–û–ø–µ—Ä–∞—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ' },
  { status: 'in_progress', percent: 3, details: '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' },
  { status: 'cancelled', percent: 2, details: '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' }
];

// –°–ø–∏—Å–æ–∫ –ê–ó–°
const stations = [
  { id: 'station_01', name: '–ê–ó–° ‚Ññ1 –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è' },
  { id: 'station_02', name: '–ê–ó–° ‚Ññ2 –°–µ–≤–µ—Ä–Ω–∞—è' },
  { id: 'station_03', name: '–ê–ó–° ‚Ññ3 –Æ–∂–Ω–∞—è' },
  { id: 'station_04', name: '–ê–ó–° ‚Ññ4 –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ' },
  { id: 'station_05', name: '–ê–ó–° ‚Ññ5 –ü—Ä–æ–º–∑–æ–Ω–∞' }
];

// –¢–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞ –∏ —Ü–µ–Ω—ã
const fuelTypes = [
  { type: '–ê–ò-92', price: 58.2 },
  { type: '–ê–ò-95', price: 62.8 },
  { type: '–ê–ò-98', price: 71.5 },
  { type: '–ê–ò-100', price: 68.5 },
  { type: '–î–¢', price: 64.3 }
];

// –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
const paymentMethods = ['bank_card', 'cash', 'corporate_card', 'fuel_card'];

// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
const operators = [
  '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
  '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.',
  '–°–∏–¥–æ—Ä–æ–≤ –°.–°.',
  '–ö–æ–∑–ª–æ–≤ –ö.–ö.',
  '–ü–æ–ø–æ–≤ –ë.–ë.'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
function randomBetween(min, max) {
  return Math.random() * (max - min) + min;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
function randomChoice(array) {
  return array[Math.floor(Math.random() * array.length)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
function generateVehicleNumber() {
  const letters = '–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•';
  const numbers = '0123456789';
  const regions = ['77', '97', '99', '177', '197', '199', '777'];
  
  return `${randomChoice(letters)}${randomChoice(numbers)}${randomChoice(numbers)}${randomChoice(numbers)}${randomChoice(letters)}${randomChoice(letters)}${randomChoice(regions)}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
function generateId(prefix, counter) {
  return `${prefix}-STATUS-${String(counter).padStart(4, '0')}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
function createOperation(status, statusDetails, stationId, stationName, counter) {
  const fuel = randomChoice(fuelTypes);
  const quantity = Math.round(randomBetween(15, 80) * 10) / 10;
  const totalCost = Math.round(quantity * fuel.price * 100) / 100;
  
  // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
  const now = new Date();
  const createdAt = new Date(now.getTime() - Math.random() * 7 * 24 * 60 * 60 * 1000);
  
  let endTime = null;
  let duration = null;
  let progress = 0;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  switch (status) {
    case 'completed':
      endTime = new Date(createdAt.getTime() + randomBetween(1, 5) * 60 * 1000);
      duration = Math.round((endTime - createdAt) / (60 * 1000));
      progress = 100;
      break;
    case 'in_progress':
      progress = Math.round(randomBetween(10, 85));
      break;
    case 'pending':
      progress = 0;
      break;
    case 'failed':
      progress = Math.round(randomBetween(5, 60));
      endTime = new Date(createdAt.getTime() + randomBetween(0.5, 3) * 60 * 1000);
      duration = Math.round((endTime - createdAt) / (60 * 1000));
      break;
    case 'cancelled':
      progress = Math.round(randomBetween(0, 30));
      endTime = new Date(createdAt.getTime() + randomBetween(0.2, 2) * 60 * 1000);
      duration = Math.round((endTime - createdAt) / (60 * 1000));
      break;
  }
  
  const operation = {
    id: generateId('TXN', counter),
    operationType: 'sale',
    status: status,
    startTime: createdAt.toISOString(),
    tradingPointId: stationId,
    tradingPointName: stationName,
    deviceId: `PUMP-${String(Math.floor(randomBetween(1, 15))).padStart(3, '0')}`,
    transactionId: generateId('TXN', counter),
    fuelType: fuel.type,
    quantity: quantity,
    price: fuel.price,
    totalCost: totalCost,
    paymentMethod: randomChoice(paymentMethods),
    details: statusDetails,
    lastUpdated: (endTime || createdAt).toISOString(),
    operatorName: randomChoice(operators),
    customerId: `CUST-${Math.floor(randomBetween(10000, 99999))}`,
    vehicleNumber: generateVehicleNumber(),
    metadata: status === 'failed' ? { errorCode: `ERR_${Math.floor(randomBetween(1001, 9999))}` } : {},
    createdAt: `new Date('${createdAt.toISOString()}')`,
    updatedAt: `new Date('${(endTime || createdAt).toISOString()}')`
  };
  
  if (endTime) {
    operation.endTime = endTime.toISOString();
  }
  if (duration !== null) {
    operation.duration = duration;
  }
  if (progress !== undefined) {
    operation.progress = progress;
  }
  
  return operation;
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
let newOperations = [];
let operationCounter = 8000; // –ù–∞—á–∏–Ω–∞–µ–º —Å 8000 —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏

console.log('üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏...');

stations.forEach(station => {
  console.log(`üìç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–ª—è ${station.name}`);
  
  statusDistribution.forEach(({ status, percent, details }) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    // –î–æ–ø—É—Å—Ç–∏–º, –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é = 100 –Ω–∞ –ê–ó–°
    const baseOperationsPerWeek = 100;
    const operationsCount = Math.round(baseOperationsPerWeek * percent / 100);
    
    console.log(`  ‚ú® –î–æ–±–∞–≤–ª—è–µ–º ${operationsCount} –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}" (${percent}%)`);
    
    for (let i = 0; i < operationsCount; i++) {
      const operation = createOperation(status, details, station.id, station.name, operationCounter++);
      newOperations.push(operation);
    }
  });
});

console.log(`üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${newOperations.length}`);

// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
const operationsCode = newOperations.map(op => {
  return `  {
    id: "${op.id}",
    operationType: "${op.operationType}",
    status: "${op.status}",
    startTime: "${op.startTime}",${op.endTime ? `
    endTime: "${op.endTime}",` : ''}${op.duration !== null ? `
    duration: ${op.duration},` : ''}
    tradingPointId: "${op.tradingPointId}",
    tradingPointName: "${op.tradingPointName}",
    deviceId: "${op.deviceId}",
    transactionId: "${op.transactionId}",
    fuelType: "${op.fuelType}",
    quantity: ${op.quantity},
    price: ${op.price},
    totalCost: ${op.totalCost},
    paymentMethod: "${op.paymentMethod}",
    details: "${op.details}",${op.progress !== undefined ? `
    progress: ${op.progress},` : ''}
    lastUpdated: "${op.lastUpdated}",
    operatorName: "${op.operatorName}",
    customerId: "${op.customerId}",
    vehicleNumber: "${op.vehicleNumber}",
    metadata: ${JSON.stringify(op.metadata)},
    createdAt: ${op.createdAt},
    updatedAt: ${op.updatedAt}
  }`;
}).join(',\n');

// –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π –º–∞—Å—Å–∏–≤–∞)
const insertPosition = operationsContent.lastIndexOf(']; // –ö–æ–Ω–µ—Ü –æ–ø–µ—Ä–∞—Ü–∏–π');
if (insertPosition === -1) {
  const altInsertPosition = operationsContent.lastIndexOf('];');
  if (altInsertPosition === -1) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π');
    process.exit(1);
  }
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const beforeArray = operationsContent.substring(0, altInsertPosition);
  const afterArray = operationsContent.substring(altInsertPosition);
  
  const newContent = beforeArray + ',\n' + operationsCode + '\n' + afterArray;
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  fs.writeFileSync(operationsFilePath, newContent, 'utf8');
} else {
  // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const beforeArray = operationsContent.substring(0, insertPosition);
  const afterArray = operationsContent.substring(insertPosition);
  
  const newContent = beforeArray + ',\n' + operationsCode + '\n' + afterArray;
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  fs.writeFileSync(operationsFilePath, newContent, 'utf8');
}

console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ operationsService.ts');
console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
statusDistribution.forEach(({ status, percent }) => {
  const count = newOperations.filter(op => op.status === status).length;
  console.log(`  ${status}: ${count} –æ–ø–µ—Ä–∞—Ü–∏–π (${percent}%)`);
});

console.log('\nüè™ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ê–ó–°:');
stations.forEach(station => {
  const count = newOperations.filter(op => op.tradingPointId === station.id).length;
  console.log(`  ${station.name}: ${count} –æ–ø–µ—Ä–∞—Ü–∏–π`);
});