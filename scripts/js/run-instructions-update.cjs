const fs = require('fs');
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://ssvazdgnmatbdynkhkqo.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzdmF6ZGdubWF0YmR5bmtoa3FvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNDMzODYyNiwiZXhwIjoyMDQ5OTE0NjI2fQ.eKrb7YXGFm7eCCKDBa_U6Ow7bVW6_xQJ9hT5x7W9u4E';

const supabase = createClient(supabaseUrl, supabaseKey);

async function runInstructionsUpdate() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...');
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlContent = fs.readFileSync('update-section-instructions.sql', 'utf8');
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0);
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      console.log(`‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${i + 1}/${commands.length}...`);
      
      try {
        const { data, error } = await supabase.rpc('exec_sql', {
          sql_query: command
        });
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, error.message);
          
          // –ï—Å–ª–∏ RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π SQL
          if (error.code === '42883') { // function does not exist
            console.log('–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');
            
            if (command.toLowerCase().startsWith('delete')) {
              const { error: deleteError } = await supabase
                .from('page_help')
                .delete()
                .in('route', [
                  '/networks', 
                  '/network/overview', 
                  '/network/operations-transactions',
                  '/point/prices',
                  '/point/tanks', 
                  '/equipment'
                ]);
              
              if (deleteError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', deleteError.message);
              } else {
                console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã');
              }
            } else if (command.toLowerCase().startsWith('insert')) {
              // –ü–∞—Ä—Å–∏–º INSERT –∫–æ–º–∞–Ω–¥—É
              const values = parseInsertValues(command);
              if (values) {
                const { error: insertError } = await supabase
                  .from('page_help')
                  .insert(values);
                
                if (insertError) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', insertError.message);
                } else {
                  console.log('‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞');
                }
              }
            }
          }
        } else {
          console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        }
      } catch (cmdError) {
        console.error(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, cmdError.message);
      }
    }
    
    console.log('üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: checkData, error: checkError } = await supabase
      .from('page_help')
      .select('route, title')
      .in('route', [
        '/networks', 
        '/network/overview', 
        '/network/operations-transactions',
        '/point/prices',
        '/point/tanks', 
        '/equipment'
      ]);
    
    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkError.message);
    } else {
      console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
      checkData.forEach(item => {
        console.log(`  - ${item.route}: ${item.title}`);
      });
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

function parseInsertValues(insertCommand) {
  // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è INSERT –∫–æ–º–∞–Ω–¥ (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–∂–¥—É VALUES ( –∏ )
    const valuesMatch = insertCommand.match(/VALUES\s*\(([\s\S]+)\)/i);
    if (!valuesMatch) return null;
    
    const valuesStr = valuesMatch[1];
    
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    // –ù–æ –¥–ª—è –Ω–∞—à–∏—Ö INSERT –∫–æ–º–∞–Ω–¥ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º INSERT —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ (–Ω—É–∂–µ–Ω —Ä—É—á–Ω–æ–π –≤–≤–æ–¥)');
    return null;
  } catch (e) {
    return null;
  }
}

runInstructionsUpdate();