#!/usr/bin/env node

/**
 * –†–∞–±–æ—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ö–µ–º–æ–π Supabase
 * –°–æ–∑–¥–∞–Ω–∏–µ –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
 */

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://ssvazdgnmatbdynkhkqo.supabase.co';
const SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzdmF6ZGdubWF0YmR5bmtoa3FvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzM0MzgzNCwiZXhwIjoyMDcyOTE5ODM0fQ.Gen-PI-vDkKjskpIvJNcQw0Uj3d0zGXB98zIxNK6di0';

const supabase = createClient(SUPABASE_URL, SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...');

async function checkExistingData() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º tenants (networks)
    console.log('\nüìã Checking tenants...');
    const { data: tenants, error: tenantsError } = await supabase
      .from('tenants')
      .select('*');
      
    if (tenantsError) {
      console.error('‚ùå Tenants error:', tenantsError);
    } else {
      console.log(`‚úÖ Found ${tenants?.length || 0} tenants:`);
      tenants?.forEach(t => {
        console.log(`   ‚Ä¢ ${t.name} (code: ${t.code}, id: ${t.id})`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º roles
    console.log('\nüë• Checking roles...');
    const { data: roles, error: rolesError } = await supabase
      .from('roles')
      .select('*');
      
    if (rolesError) {
      console.error('‚ùå Roles error:', rolesError);
    } else {
      console.log(`‚úÖ Found ${roles?.length || 0} roles:`);
      roles?.forEach(r => {
        console.log(`   ‚Ä¢ ${r.name} (code: ${r.code}, scope: ${r.scope})`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º users
    console.log('\nüë§ Checking users...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*');
      
    if (usersError) {
      console.error('‚ùå Users error:', usersError);
    } else {
      console.log(`‚úÖ Found ${users?.length || 0} users:`);
      users?.forEach(u => {
        console.log(`   ‚Ä¢ ${u.name} (${u.email}, tenant_id: ${u.tenant_id})`);
      });
    }

    return { tenants, roles, users };
  } catch (error) {
    console.error('‚ùå Error checking data:', error);
    return null;
  }
}

async function createBTOInfrastructure() {
  console.log('\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–¢–û...');

  try {
    // 1. –°–æ–∑–¥–∞—Ç—å tenant –ë–¢–û (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    let btoTenant = null;
    const { data: existingBTO } = await supabase
      .from('tenants')
      .select('*')
      .eq('code', 'bto')
      .single();

    if (existingBTO) {
      console.log('‚úÖ –ë–¢–û tenant —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingBTO.name);
      btoTenant = existingBTO;
    } else {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ë–¢–û tenant...');
      const { data: newBTO, error: btoError } = await supabase
        .from('tenants')
        .insert({
          name: '–ë–¢–û (–ë–∞—à–∫–∏—Ä—Å–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)', 
          code: 'bto',
          type: 'network',
          is_active: true,
          settings: {
            external_id: '15',
            region: '–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω',
            description: '–°–µ—Ç—å –ë–¢–û –¥–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û'
          }
        })
        .select()
        .single();

      if (btoError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–¢–û tenant:', btoError);
        return null;
      } else {
        console.log('‚úÖ –ë–¢–û tenant —Å–æ–∑–¥–∞–Ω:', newBTO.name);
        btoTenant = newBTO;
      }
    }

    // 2. –°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    let btoRole = null;
    const { data: existingRole } = await supabase
      .from('roles')
      .select('*')
      .eq('code', 'bto_manager')
      .single();

    if (existingRole) {
      console.log('‚úÖ –†–æ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingRole.name);
      btoRole = existingRole;
    } else {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û...');
      const { data: newRole, error: roleError } = await supabase
        .from('roles')
        .insert({
          code: 'bto_manager',
          name: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–¢–û',
          description: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–µ—Ç–∏ –ë–¢–û –∏ —Ä–∞–∑–¥–µ–ª–∞–º –¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏ –∏ –¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏',
          scope: 'tenant',
          permissions: ['networks.read', 'trading_points.read', 'networks.view_bto', 'points.view_bto'],
          scope_values: [btoTenant.id],
          is_system: false,
          is_active: true
        })
        .select()
        .single();

      if (roleError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û:', roleError);
        return null;
      } else {
        console.log('‚úÖ –†–æ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —Å–æ–∑–¥–∞–Ω–∞:', newRole.name);
        btoRole = newRole;
      }
    }

    // 3. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const { data: existingUser } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'bto.manager@tradeframe.com')
      .single();

    if (existingUser) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingUser.name);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º tenant_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (existingUser.tenant_id !== btoTenant.id) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ tenant_id –¥–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û...');
        const { error: updateError } = await supabase
          .from('users')
          .update({ 
            tenant_id: btoTenant.id,
            preferences: {
              role: btoRole.code,
              role_id: btoRole.id,
              network_access: 'bto_only'
            }
          })
          .eq('id', existingUser.id);

        if (updateError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updateError);
        } else {
          console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
      }
    } else {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û...');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à –ø–∞—Ä–æ–ª—è –¥–ª—è admin123
      const passwordHash = '$2a$10$rI7/WMuM5P7jjUuIIxB2KO7K6YXb3ZxF5rGvlqF7xK8N2YOo6m7K2'; // bcrypt hash –¥–ª—è "admin123"
      
      const { data: newUser, error: userError } = await supabase
        .from('users')
        .insert({
          tenant_id: btoTenant.id,
          email: 'bto.manager@tradeframe.com',
          name: '–ê–Ω–¥—Ä–µ–π –ë–∞—à–∫–∏—Ä–æ–≤ (–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–¢–û)',
          phone: '+7-917-123-45-67',
          status: 'active',
          pwd_hash: passwordHash,
          pwd_salt: 'demo_salt',
          preferences: {
            role: btoRole.code,
            role_id: btoRole.id,
            network_access: 'bto_only',
            menu_restrictions: {
              allowed_sections: ['networks', 'trading_points']
            }
          }
        })
        .select()
        .single();

      if (userError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û:', userError);
        return null;
      } else {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —Å–æ–∑–¥–∞–Ω:', newUser.name);
      }
    }

    console.log('\nüéâ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–¢–û —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –ß—Ç–æ —Å–æ–∑–¥–∞–Ω–æ:');
    console.log(`   ‚Ä¢ Tenant: ${btoTenant.name} (id: ${btoTenant.id})`);
    console.log(`   ‚Ä¢ Role: ${btoRole.name} (id: ${btoRole.id})`);
    console.log('   ‚Ä¢ User: bto.manager@tradeframe.com (password: admin123)');
    console.log('\nüîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('   Email: bto.manager@tradeframe.com');
    console.log('   Password: admin123');
    console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û!');

    return { btoTenant, btoRole };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–¢–û:', error);
    return null;
  }
}

async function main() {
  console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  const existingData = await checkExistingData();
  
  if (!existingData) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã');
    process.exit(1);
  }

  // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–¢–û
  const result = await createBTOInfrastructure();
  
  if (result) {
    console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û');
  } else {
    console.error('\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(1);
  }
}

main().catch(console.error);