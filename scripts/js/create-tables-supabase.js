#!/usr/bin/env node

/**
 * Supabase Table Creation Script
 * Creates all required tables for TradeFrame Builder
 */

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://ssvazdgnmatbdynkhkqo.supabase.co';
const SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzdmF6ZGdubWF0YmR5bmtoa3FvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzM0MzgzNCwiZXhwIjoyMDcyOTE5ODM0fQ.Gen-PI-vDkKjskpIvJNcQw0Uj3d0zGXB98zIxNK6di0';

const supabase = createClient(SUPABASE_URL, SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  },
  db: {
    schema: 'public'
  }
});

console.log('üöÄ Starting TradeFrame Database Setup...');

async function createTables() {
  try {
    console.log('üìù Creating fuel_types table...');
    
    // Create fuel_types data
    const fuelTypes = [
      { id: '00000000-0000-0000-0000-000000000001', name: '–ê–ò-92', code: 'AI92', category: 'gasoline', octane_number: 92, density: 0.7400, unit: 'liter', is_active: true },
      { id: '00000000-0000-0000-0000-000000000002', name: '–ê–ò-95', code: 'AI95', category: 'gasoline', octane_number: 95, density: 0.7500, unit: 'liter', is_active: true },
      { id: '00000000-0000-0000-0000-000000000003', name: '–ê–ò-98', code: 'AI98', category: 'gasoline', octane_number: 98, density: 0.7600, unit: 'liter', is_active: true },
      { id: '00000000-0000-0000-0000-000000000004', name: '–î–¢', code: 'DT', category: 'diesel', octane_number: null, density: 0.8400, unit: 'liter', is_active: true },
      { id: '00000000-0000-0000-0000-000000000005', name: '–ì–∞–∑', code: 'GAS', category: 'gas', octane_number: null, density: 0.5500, unit: 'm3', is_active: true }
    ];

    const { data: fuelData, error: fuelError } = await supabase
      .from('fuel_types')
      .insert(fuelTypes)
      .select();

    if (fuelError && !fuelError.message.includes('already exists')) {
      console.error('‚ùå Error creating fuel_types:', fuelError);
    } else {
      console.log('‚úÖ Fuel types created:', fuelData?.length || 'existing');
    }

    console.log('üìù Creating networks...');
    
    // Create networks
    const networks = [
      { id: '20000000-0000-0000-0000-000000000001', name: '–°–µ—Ç—å –î–µ–º–æ –ê–ó–°', code: 'demo-azs', external_id: '1', description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ—Ç—å –ê–ó–°', status: 'active' },
      { id: '20000000-0000-0000-0000-000000000002', name: '–ë–¢–û', code: 'bto', external_id: '15', description: '–°–µ—Ç—å –ë–¢–û (–ë–∞—à–∫–∏—Ä—Å–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)', status: 'active' },
      { id: '20000000-0000-0000-0000-000000000003', name: '–õ—É–∫–æ–π–ª', code: 'lukoil', external_id: '2', description: '–°–µ—Ç—å –õ–£–ö–û–ô–õ', status: 'active' },
      { id: '20000000-0000-0000-0000-000000000004', name: '–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å', code: 'gazprom', external_id: '3', description: '–°–µ—Ç—å –ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å', status: 'active' }
    ];

    const { data: networkData, error: networkError } = await supabase
      .from('networks')
      .insert(networks)
      .select();

    if (networkError && !networkError.message.includes('already exists')) {
      console.error('‚ùå Error creating networks:', networkError);
    } else {
      console.log('‚úÖ Networks created:', networkData?.length || 'existing');
    }

    console.log('üìù Creating trading_points...');
    
    // Create trading points for –ë–¢–û network
    const tradingPoints = [
      { id: '30000000-0000-0000-0000-000000000001', network_id: '20000000-0000-0000-0000-000000000002', name: '–ë–¢–û –ê–ó–° ‚Ññ1', code: 'BTO-001', external_id: '15001', address: '–≥. –£—Ñ–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 1', status: 'active' },
      { id: '30000000-0000-0000-0000-000000000002', network_id: '20000000-0000-0000-0000-000000000002', name: '–ë–¢–û –ê–ó–° ‚Ññ2', code: 'BTO-002', external_id: '15002', address: '–≥. –£—Ñ–∞, —É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 10', status: 'active' },
      { id: '30000000-0000-0000-0000-000000000003', network_id: '20000000-0000-0000-0000-000000000002', name: '–ë–¢–û –ê–ó–° ‚Ññ3', code: 'BTO-003', external_id: '15003', address: '–≥. –°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫, —É–ª. –ú–∏—Ä–∞, 5', status: 'active' },
      { id: '30000000-0000-0000-0000-000000000004', network_id: '20000000-0000-0000-0000-000000000001', name: '–î–µ–º–æ –ê–ó–° ‚Ññ1', code: 'DEMO-001', external_id: '1001', address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1', status: 'active' },
      { id: '30000000-0000-0000-0000-000000000005', network_id: '20000000-0000-0000-0000-000000000001', name: '–î–µ–º–æ –ê–ó–° ‚Ññ2', code: 'DEMO-002', external_id: '1002', address: '–≥. –ú–æ—Å–∫–≤–∞, –ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π –ø—Ä., 20', status: 'active' }
    ];

    const { data: pointData, error: pointError } = await supabase
      .from('trading_points')
      .insert(tradingPoints)
      .select();

    if (pointError && !pointError.message.includes('already exists')) {
      console.error('‚ùå Error creating trading_points:', pointError);
    } else {
      console.log('‚úÖ Trading points created:', pointData?.length || 'existing');
    }

    console.log('üìù Creating users...');
    
    // Create demo users including –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û
    const users = [
      { 
        id: '40000000-0000-0000-0000-000000000001', 
        email: 'admin@tradeframe.com', 
        name: '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 
        password_hash: '$2a$10$demopasswordhash123456789012345678901234567890', 
        first_name: '–ò–≤–∞–Ω', 
        last_name: '–ò–≤–∞–Ω–æ–≤', 
        role: 'system_admin',
        network_id: null,
        trading_point_ids: [],
        is_active: true,
        status: 'active'
      },
      { 
        id: '40000000-0000-0000-0000-000000000002', 
        email: 'network.admin@demo-azs.ru', 
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∏', 
        password_hash: '$2a$10$demopasswordhash123456789012345678901234567890', 
        first_name: '–ü–µ—Ç—Ä', 
        last_name: '–ü–µ—Ç—Ä–æ–≤', 
        role: 'network_admin',
        network_id: '20000000-0000-0000-0000-000000000001',
        trading_point_ids: [],
        is_active: true,
        status: 'active'
      },
      { 
        id: '40000000-0000-0000-0000-000000000005', 
        email: 'bto.manager@tradeframe.com', 
        name: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–¢–û', 
        password_hash: '$2a$10$demopasswordhash123456789012345678901234567890', 
        first_name: '–ê–Ω–¥—Ä–µ–π', 
        last_name: '–ë–∞—à–∫–∏—Ä–æ–≤', 
        role: 'bto_manager',
        network_id: '20000000-0000-0000-0000-000000000002',
        trading_point_ids: ['30000000-0000-0000-0000-000000000001', '30000000-0000-0000-0000-000000000002', '30000000-0000-0000-0000-000000000003'],
        is_active: true,
        status: 'active'
      }
    ];

    const { data: userData, error: userError } = await supabase
      .from('users')
      .insert(users)
      .select();

    if (userError && !userError.message.includes('already exists')) {
      console.error('‚ùå Error creating users:', userError);
    } else {
      console.log('‚úÖ Users created:', userData?.length || 'existing');
    }

    console.log('üìù Creating prices...');
    
    // Create demo prices for –ë–¢–û network
    const prices = [
      { fuel_type_id: '00000000-0000-0000-0000-000000000001', network_id: '20000000-0000-0000-0000-000000000002', price: 45.50, currency: 'RUB', price_type: 'retail', is_active: true },
      { fuel_type_id: '00000000-0000-0000-0000-000000000002', network_id: '20000000-0000-0000-0000-000000000002', price: 48.20, currency: 'RUB', price_type: 'retail', is_active: true },
      { fuel_type_id: '00000000-0000-0000-0000-000000000003', network_id: '20000000-0000-0000-0000-000000000002', price: 52.10, currency: 'RUB', price_type: 'retail', is_active: true },
      { fuel_type_id: '00000000-0000-0000-0000-000000000004', network_id: '20000000-0000-0000-0000-000000000002', price: 49.80, currency: 'RUB', price_type: 'retail', is_active: true },
      { fuel_type_id: '00000000-0000-0000-0000-000000000005', network_id: '20000000-0000-0000-0000-000000000002', price: 23.50, currency: 'RUB', price_type: 'retail', is_active: true }
    ];

    const { data: priceData, error: priceError } = await supabase
      .from('prices')
      .insert(prices)
      .select();

    if (priceError && !priceError.message.includes('already exists')) {
      console.error('‚ùå Error creating prices:', priceError);
    } else {
      console.log('‚úÖ Prices created:', priceData?.length || 'existing');
    }

    console.log('üéâ Database setup completed successfully!');
    console.log('üìã Summary:');
    console.log('   ‚úÖ Fuel types: 5 types (–ê–ò-92, –ê–ò-95, –ê–ò-98, –î–¢, –ì–∞–∑)');
    console.log('   ‚úÖ Networks: –ë–¢–û (external_id: 15) and demo networks');
    console.log('   ‚úÖ Trading Points: 3 –ë–¢–û stations + 2 demo stations');
    console.log('   ‚úÖ Users: admin, network admin, bto.manager@tradeframe.com');
    console.log('   ‚úÖ Prices: Set for all fuel types');
    console.log('');
    console.log('üîê Login credentials (password: admin123):');
    console.log('   ‚Ä¢ admin@tradeframe.com - System Administrator');
    console.log('   ‚Ä¢ bto.manager@tradeframe.com - –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û (–ë–¢–û network only)');
    console.log('');
    console.log('üöÄ Ready to test –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û functionality!');

  } catch (error) {
    console.error('‚ùå Setup failed:', error);
    process.exit(1);
  }
}

// Verification function
async function verifySetup() {
  console.log('üîç Verifying database setup...');
  
  try {
    // Check each table
    const tables = [
      { name: 'networks', expectedCount: 4 },
      { name: 'trading_points', expectedCount: 5 },
      { name: 'users', expectedCount: 3 },
      { name: 'fuel_types', expectedCount: 5 },
      { name: 'prices', expectedCount: 5 }
    ];

    for (const table of tables) {
      const { data, error } = await supabase
        .from(table.name)
        .select('*', { count: 'exact' });

      if (error) {
        console.error(`‚ùå Error accessing ${table.name}:`, error.message);
      } else {
        const count = data?.length || 0;
        const status = count >= table.expectedCount ? '‚úÖ' : '‚ö†Ô∏è';
        console.log(`   ${status} ${table.name}: ${count} records`);
      }
    }

    // Check specifically for –ë–¢–û network
    const { data: btoNetwork, error: btoError } = await supabase
      .from('networks')
      .select('*')
      .eq('external_id', '15')
      .single();

    if (btoError) {
      console.log('‚ùå –ë–¢–û network not found:', btoError.message);
    } else {
      console.log('‚úÖ –ë–¢–û network found:', btoNetwork.name);
    }

    // Check for –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û user
    const { data: btoManager, error: managerError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'bto.manager@tradeframe.com')
      .single();

    if (managerError) {
      console.log('‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û user not found:', managerError.message);
    } else {
      console.log('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û user found:', btoManager.name, `(role: ${btoManager.role})`);
    }

    console.log('‚úÖ Verification completed!');

  } catch (error) {
    console.error('‚ùå Verification failed:', error);
  }
}

// Run setup and verification
createTables()
  .then(() => verifySetup())
  .then(() => {
    console.log('üèÅ Setup process completed successfully!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• Setup process failed:', error);
    process.exit(1);
  });