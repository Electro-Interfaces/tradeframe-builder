/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏ –∏—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
 */

import { executeSelect, describeTable } from './tools/sql-direct.js';

async function testProjectIntegration() {
    console.log('üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–†–û–ï–ö–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•');
    console.log('='.repeat(60));
    
    const results = {
        database: { status: 'unknown', tables: 0, issues: [] },
        services: { equipment: 'untested', networks: 'untested', operations: 'untested' },
        schema: { compatibility: 0, issues: [] },
        integration: { score: 0, ready: false }
    };
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    console.log('\nüîå 1. –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•');
    console.log('-'.repeat(40));
    
    try {
        const tables = await testDatabaseAccess();
        results.database.status = 'connected';
        results.database.tables = tables.length;
        console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞: ${tables.length} —Ç–∞–±–ª–∏—Ü`);
    } catch (error) {
        results.database.status = 'failed';
        results.database.issues.push(error.message);
        console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º: ${error.message}`);
        return results;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –∏ —Å—Ö–µ–º—ã
    console.log('\nüìã 2. –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –¢–ê–ë–õ–ò–¶');
    console.log('-'.repeat(40));
    
    const criticalTables = ['equipment_templates', 'equipment', 'networks', 'trading_points'];
    let schemaIssues = 0;
    
    for (const table of criticalTables) {
        try {
            const data = await executeSelect(table, { limit: 1 });
            const structure = await analyzeTableSchema(table, data);
            
            console.log(`üìä ${table}:`);
            console.log(`   üìà –ó–∞–ø–∏—Å–µ–π: ${data.length}`);
            console.log(`   üîß –°—Ö–µ–º–∞: ${structure.isCorrect ? '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è' : '‚ùå –¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'}`);
            
            if (!structure.isCorrect) {
                schemaIssues++;
                results.schema.issues.push({
                    table,
                    issues: structure.issues
                });
                structure.issues.forEach(issue => console.log(`      ‚Ä¢ ${issue}`));
            }
            
        } catch (error) {
            console.log(`‚ùå ${table}: ${error.message}`);
            schemaIssues++;
        }
    }
    
    results.schema.compatibility = Math.max(0, ((4 - schemaIssues) / 4) * 100);
    
    // 3. –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–∫–ª—é—á–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
    console.log('\n‚öôÔ∏è 3. –¢–ï–°–¢ –°–ï–†–í–ò–°–û–í –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø');
    console.log('-'.repeat(40));
    
    try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        console.log('üîç –¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...');
        const templates = await executeSelect('equipment_templates', { limit: 3 });
        
        if (templates.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${templates.length} —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è`);
            results.services.equipment = 'working';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            const template = templates[0];
            const hasCorrectSchema = template.is_active !== undefined && 
                                   template.id && template.id.includes('-') &&
                                   typeof template.default_params === 'object';
            
            if (hasCorrectSchema) {
                console.log('‚úÖ –°—Ö–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è');
            } else {
                console.log('‚ö†Ô∏è –°—Ö–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è');
                results.services.equipment = 'needs_update';
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            console.log('üìã –ü—Ä–∏–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤:');
            templates.forEach((t, i) => {
                console.log(`   ${i + 1}. ${t.name} (${t.system_type}) - ${t.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
            });
        } else {
            console.log('‚ö†Ô∏è –®–∞–±–ª–æ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            results.services.equipment = 'empty';
        }
        
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${error.message}`);
        results.services.equipment = 'failed';
    }
    
    // 4. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–µ–π
    console.log('\nüè™ 4. –¢–ï–°–¢ –¢–û–†–ì–û–í–´–• –°–ï–¢–ï–ô –ò –¢–û–ß–ï–ö');
    console.log('-'.repeat(40));
    
    try {
        const networks = await executeSelect('networks', { limit: 3 });
        const points = await executeSelect('trading_points', { limit: 3 });
        
        console.log(`‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏: ${networks.length} –∑–∞–ø–∏—Å–µ–π`);
        console.log(`‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏: ${points.length} –∑–∞–ø–∏—Å–µ–π`);
        
        if (networks.length > 0 && points.length > 0) {
            results.services.networks = 'working';
            console.log('‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        } else {
            results.services.networks = 'empty';
            console.log('‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        }
        
    } catch (error) {
        console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–µ—Ç—è–º–∏: ${error.message}`);
        results.services.networks = 'failed';
    }
    
    // 5. –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    console.log('\nüí∞ 5. –¢–ï–°–¢ –û–ü–ï–†–ê–¶–ò–ô –ò –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–´');
    console.log('-'.repeat(40));
    
    try {
        const operations = await executeSelect('operations', { limit: 2 });
        const nomenclature = await executeSelect('nomenclature', { limit: 2 });
        const fuelTypes = await executeSelect('fuel_types', { limit: 5 });
        
        console.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏: ${operations.length} –∑–∞–ø–∏—Å–µ–π`);
        console.log(`‚úÖ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞: ${nomenclature.length} –∑–∞–ø–∏—Å–µ–π`);
        console.log(`‚úÖ –¢–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞: ${fuelTypes.length} –∑–∞–ø–∏—Å–µ–π`);
        
        if (operations.length > 0 && nomenclature.length > 0 && fuelTypes.length > 0) {
            results.services.operations = 'working';
            console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
        } else {
            results.services.operations = 'partial';
            console.log('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }
        
    } catch (error) {
        console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏: ${error.message}`);
        results.services.operations = 'failed';
    }
    
    // 6. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    console.log('\nüéØ 6. –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ü–†–û–ï–ö–¢–ê');
    console.log('='.repeat(40));
    
    const integrationScore = calculateIntegrationScore(results);
    results.integration.score = integrationScore;
    results.integration.ready = integrationScore >= 70;
    
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${results.database.status === 'connected' ? '‚úÖ' : '‚ùå'} (${results.database.tables} —Ç–∞–±–ª–∏—Ü)`);
    console.log(`üîß –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ö–µ–º—ã: ${results.schema.compatibility.toFixed(0)}%`);
    console.log(`‚öôÔ∏è –°–µ—Ä–≤–∏—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${getServiceStatus(results.services.equipment)}`);
    console.log(`üè™ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏: ${getServiceStatus(results.services.networks)}`);
    console.log(`üí∞ –û–ø–µ—Ä–∞—Ü–∏–∏: ${getServiceStatus(results.services.operations)}`);
    
    console.log(`\nüéØ –û–ë–©–ò–ô –ë–ê–õ–õ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: ${integrationScore}%`);
    
    if (integrationScore >= 85) {
        console.log('üéâ –û–¢–õ–ò–ß–ù–û! –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
    } else if (integrationScore >= 70) {
        console.log('‚úÖ –•–û–†–û–®–û! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω—É–∂–Ω—ã –º–µ–ª–∫–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
    } else if (integrationScore >= 50) {
        console.log('‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å');
    } else {
        console.log('‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –†–ê–ë–û–¢–ê. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
    }
    
    // 7. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:');
    console.log('-'.repeat(40));
    
    if (results.schema.issues.length > 0) {
        console.log('üîß –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
        results.schema.issues.forEach(issue => {
            console.log(`   ‚Ä¢ ${issue.table}: ${issue.issues.join(', ')}`);
        });
    }
    
    if (results.services.equipment !== 'working') {
        console.log('‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Supabase API');
    }
    
    if (results.services.networks !== 'working') {
        console.log('üè™ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏: –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ç–µ–π –∏ —Ç–æ—á–µ–∫');
    }
    
    if (results.services.operations !== 'working') {
        console.log('üí∞ –û–ø–µ—Ä–∞—Ü–∏–∏: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏');
    }
    
    console.log('\nüìà –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    if (integrationScore >= 70) {
        console.log('‚úÖ 1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev');
        console.log('‚úÖ 2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
        console.log('‚úÖ 3. –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ');
    } else {
        console.log('üîß 1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å—Ö–µ–º—ã');
        console.log('üîß 2. –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Supabase');
        console.log('üîß 3. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    }
    
    return results;
}

async function testDatabaseAccess() {
    const tables = ['equipment_templates', 'equipment', 'networks', 'trading_points', 
                   'operations', 'nomenclature', 'users', 'fuel_types'];
    
    const accessibleTables = [];
    for (const table of tables) {
        try {
            await executeSelect(table, { limit: 1 });
            accessibleTables.push(table);
        } catch (error) {
            // –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        }
    }
    
    if (accessibleTables.length === 0) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü');
    }
    
    return accessibleTables;
}

async function analyzeTableSchema(tableName, sampleData) {
    const issues = [];
    let isCorrect = true;
    
    if (sampleData.length === 0) {
        return { isCorrect: true, issues: ['–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è'] };
    }
    
    const record = sampleData[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞
    if (record.hasOwnProperty('status') && !record.hasOwnProperty('is_active')) {
        issues.push('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç status –≤–º–µ—Å—Ç–æ is_active');
        isCorrect = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID —Ñ–æ—Ä–º–∞—Ç –¥–ª—è id
    if (record.id && (typeof record.id !== 'string' || !record.id.includes('-'))) {
        issues.push('ID –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID');
        isCorrect = false;
    }
    
    return { isCorrect, issues };
}

function calculateIntegrationScore(results) {
    let score = 0;
    
    // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (30 –±–∞–ª–ª–æ–≤)
    if (results.database.status === 'connected') {
        score += 30;
    }
    
    // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ö–µ–º—ã (25 –±–∞–ª–ª–æ–≤)
    score += (results.schema.compatibility * 0.25);
    
    // –°–µ—Ä–≤–∏—Å—ã (45 –±–∞–ª–ª–æ–≤ –æ–±—â–µ–≥–æ - –ø–æ 15 –∫–∞–∂–¥—ã–π)
    const services = [results.services.equipment, results.services.networks, results.services.operations];
    services.forEach(status => {
        if (status === 'working') score += 15;
        else if (status === 'partial' || status === 'needs_update') score += 10;
        else if (status === 'empty') score += 5;
    });
    
    return Math.round(score);
}

function getServiceStatus(status) {
    const statusMap = {
        'working': '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç',
        'needs_update': 'üîÑ –¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        'partial': '‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ',
        'empty': 'üìù –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ',
        'failed': '‚ùå –û—à–∏–±–∫–∞',
        'untested': '‚ùì –ù–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω'
    };
    return statusMap[status] || status;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testProjectIntegration().catch(console.error);