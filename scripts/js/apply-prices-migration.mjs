/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü —Ü–µ–Ω –∫ Supabase
 */

import { readFileSync } from 'fs';

const config = {
  url: 'https://tohtryzyffcebtyvkxwh.supabase.co',
  apiKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY4NzU0NDgsImV4cCI6MjA3MjQ1MTQ0OH0.NMpuTp08vLuxhRLxbI9lOAo6JI22-8eDcMRylE3MoqI',
  schema: 'public'
};

async function applyMigration() {
  console.log('üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü —Ü–µ–Ω');
  console.log('=' .repeat(50));
  
  try {
    // –ß–∏—Ç–∞–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é
    console.log('üìñ –ß—Ç–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...');
    const migrationSQL = readFileSync('./migrations/008_prices_schema.sql', 'utf8');
    
    console.log(`üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${migrationSQL.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const sqlCommands = migrationSQL
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--') && !cmd.startsWith('/*'))
      .filter(cmd => !cmd.match(/^(COMMENT|DO \$\$|BEGIN|END|RAISE)/));
    
    console.log(`üîß –ù–∞–π–¥–µ–Ω–æ ${sqlCommands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
    
    let successCount = 0;
    let errorCount = 0;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    for (let i = 0; i < sqlCommands.length; i++) {
      const command = sqlCommands[i];
      if (command.length < 10) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
      
      console.log(`\n[${i + 1}/${sqlCommands.length}] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...`);
      console.log(`üìù ${command.substring(0, 80)}${command.length > 80 ? '...' : ''}`);
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL Editor API –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        const response = await fetch(`${config.url}/rest/v1/rpc/exec_sql`, {
          method: 'POST',
          headers: {
            'apikey': config.apiKey,
            'Authorization': `Bearer ${config.apiKey}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            sql: command + ';'
          })
        });
        
        if (response.ok) {
          const result = await response.json();
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
          successCount++;
        } else {
          const errorText = await response.text();
          console.log(`‚ùå –û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
          
          // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º
          if (errorText.includes('already exists') || errorText.includes('duplicate')) {
            console.log(`‚ÑπÔ∏è –û–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            successCount++;
          } else {
            errorCount++;
            
            // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
            if (errorText.includes('syntax error') || response.status === 500) {
              console.log(`üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é`);
              break;
            }
          }
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log('\n' + '=' .repeat(50));
    console.log('üìä –ò–¢–û–ì–ò –ú–ò–ì–†–ê–¶–ò–ò:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${successCount} –∫–æ–º–∞–Ω–¥`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} –∫–æ–º–∞–Ω–¥`);
    
    if (errorCount === 0) {
      console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else if (successCount > errorCount) {
      console.log('‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏');
    } else {
      console.log('üí• –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    
    const tablesToCheck = ['prices', 'price_packages'];
    
    for (const tableName of tablesToCheck) {
      try {
        const response = await fetch(`${config.url}/rest/v1/${tableName}?limit=1`, {
          method: 'GET',
          headers: {
            'apikey': config.apiKey,
            'Authorization': `Bearer ${config.apiKey}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          console.log(`‚úÖ ${tableName}: –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞`);
        } else if (response.status === 404) {
          console.log(`‚ùå ${tableName}: –¢–∞–±–ª–∏—Ü–∞ –ù–ï —Å–æ–∑–¥–∞–Ω–∞`);
        } else {
          console.log(`‚ö†Ô∏è ${tableName}: –°—Ç–∞—Ç—É—Å ${response.status} - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç—É–ø–∞`);
        }
      } catch (error) {
        console.log(`‚ùå ${tableName}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - ${error.message}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å nomenclature -> fuel_types
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ nomenclature -> fuel_types...');
    try {
      const response = await fetch(`${config.url}/rest/v1/nomenclature?limit=1&select=id,fuel_type_id`, {
        method: 'GET',
        headers: {
          'apikey': config.apiKey,
          'Authorization': `Bearer ${config.apiKey}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.length > 0 && 'fuel_type_id' in data[0]) {
          console.log(`‚úÖ –ü–æ–ª–µ fuel_type_id –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ nomenclature`);
        } else {
          console.log(`‚ùå –ü–æ–ª–µ fuel_type_id –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ nomenclature`);
        }
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏: ${error.message}`);
    }
    
    console.log('\nüèÅ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
applyMigration().catch(console.error);