#!/bin/bash
# =====================================================
# AGENT 1: INFRASTRUCTURE & DATABASE SETUP
# =====================================================

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[AGENT 1] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[AGENT 1 WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[AGENT 1 ERROR] $1${NC}"
}

info() {
    echo -e "${BLUE}[AGENT 1 INFO] $1${NC}"
}

# =====================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =====================================================

log "üöÄ Starting Agent 1: Infrastructure & Database Setup"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    error ".env file not found. Run setup-migration.sh first!"
    exit 1
fi

# =====================================================
# –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
# =====================================================

log "üóÑÔ∏è  Testing database connection..."

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
npm run db:test > /dev/null 2>&1 || {
    warn "Database connection test failed. Please check your .env configuration."
    info "Make sure to:"
    info "  1. Create a Supabase project"
    info "  2. Update SUPABASE_URL and SUPABASE_ANON_KEY in .env"
    info "  3. Run the SQL schemas in Supabase SQL Editor"
}

# =====================================================
# –ó–ê–ü–£–°–ö –°–•–ï–ú –ë–ê–ó–´ –î–ê–ù–ù–´–•
# =====================================================

log "üìã Database schema setup instructions:"
info "Please execute the following SQL files in your Supabase SQL Editor:"
info "  1. database/schema.sql - Main database schema"
info "  2. database/schema-additional.sql - Additional tables"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ö–µ–º
if [ -f "database/schema.sql" ]; then
    info "‚úÖ Main schema file found: database/schema.sql"
else
    warn "‚ö†Ô∏è  Main schema file missing: database/schema.sql"
fi

if [ -f "database/schema-additional.sql" ]; then
    info "‚úÖ Additional schema file found: database/schema-additional.sql"
else
    warn "‚ö†Ô∏è  Additional schema file missing: database/schema-additional.sql"
fi

# =====================================================
# –ö–û–ú–ü–ò–õ–Ø–¶–ò–Ø TYPESCRIPT
# =====================================================

log "üî® Building TypeScript files..."

# –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º API —Å–µ—Ä–≤–µ—Ä
npx tsc --project tsconfig.json || {
    error "TypeScript compilation failed!"
    info "Please fix TypeScript errors before proceeding"
    exit 1
}

info "‚úÖ TypeScript compilation successful"

# =====================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï JWT –°–ï–†–í–ò–°–ê
# =====================================================

log "üîê Testing JWT service..."

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è JWT (ES module compatible)
cat > test-jwt.mjs << 'EOF'
import { jwtService } from './dist/api/auth/jwt.js';

async function testJWT() {
    try {
        console.log('Testing JWT service...');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        const user = {
            id: 'test-user-id',
            email: 'test@example.com',
            roles: ['user']
        };
        
        const tokens = jwtService.generateTokens(user);
        console.log('‚úÖ JWT tokens generated successfully');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        const verified = jwtService.verifyAccessToken(tokens.accessToken);
        console.log('‚úÖ JWT verification successful');
        console.log('User data:', verified);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        const password = 'test123';
        const hashedPassword = await jwtService.hashPassword(password);
        console.log('‚úÖ Password hashing successful');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è
        const isValid = await jwtService.verifyPassword(password, hashedPassword);
        console.log('‚úÖ Password verification:', isValid ? 'PASSED' : 'FAILED');
        
    } catch (error) {
        console.error('‚ùå JWT test failed:', error.message);
        process.exit(1);
    }
}

testJWT();
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç JWT
node test-jwt.mjs || {
    error "JWT service test failed!"
    exit 1
}

# –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
rm test-jwt.mjs

# =====================================================
# –ó–ê–ü–£–°–ö API –°–ï–†–í–ï–†–ê
# =====================================================

log "üåê Starting API server..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 3001
if lsof -Pi :3001 -sTCP:LISTEN -t > /dev/null; then
    warn "Port 3001 is already in use. Stopping existing processes..."
    pkill -f "node.*server.js" || true
    sleep 2
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
info "Starting API server on port 3001..."
npm run api:dev &
API_PID=$!

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
sleep 5

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
if curl -s http://localhost:3001/health > /dev/null; then
    log "‚úÖ API server started successfully"
    info "API server PID: $API_PID"
    info "Health check: http://localhost:3001/health"
    info "API documentation: http://localhost:3001/api/docs"
else
    error "API server failed to start"
    kill $API_PID 2>/dev/null || true
    exit 1
fi

# =====================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS
# =====================================================

log "üß™ Testing API endpoints..."

# –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
HEALTH_RESPONSE=$(curl -s http://localhost:3001/health)
if echo "$HEALTH_RESPONSE" | grep -q "success.*true"; then
    info "‚úÖ Health check endpoint working"
else
    warn "‚ö†Ô∏è  Health check endpoint not responding correctly"
fi

# –¢–µ—Å—Ç–∏—Ä—É–µ–º Swagger documentation
if curl -s http://localhost:3001/api/docs > /dev/null; then
    info "‚úÖ Swagger documentation available"
else
    warn "‚ö†Ô∏è  Swagger documentation not accessible"
fi

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ API endpoints (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
# –≠—Ç–∏ endpoints –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å 401 Unauthorized, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
NETWORKS_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:3001/api/v1/networks -o /dev/null)
if [ "$NETWORKS_RESPONSE" = "401" ]; then
    info "‚úÖ Networks API endpoint responding (requires auth)"
else
    warn "‚ö†Ô∏è  Networks API endpoint not responding as expected (got $NETWORKS_RESPONSE)"
fi

# =====================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û-–ü–ï–†–ï–ó–ê–ü–£–°–ö–ê
# =====================================================

log "üîÑ Setting up auto-restart configuration..."

# –°–æ–∑–¥–∞–µ–º PM2 ecosystem —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
cat > ecosystem.api.config.js << 'EOF'
module.exports = {
  apps: [{
    name: 'tradeframe-api',
    script: './dist/api/server.js',
    instances: 1,
    exec_mode: 'cluster',
    env: {
      NODE_ENV: 'production',
      PORT: 3001
    },
    env_development: {
      NODE_ENV: 'development',
      PORT: 3001
    },
    error_file: './logs/api-error.log',
    out_file: './logs/api-out.log',
    log_file: './logs/api-combined.log',
    time: true,
    restart_delay: 1000,
    max_restarts: 10,
    min_uptime: '10s'
  }]
};
EOF

info "‚úÖ PM2 ecosystem configuration created: ecosystem.api.config.js"

# =====================================================
# –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –õ–û–ì–ò
# =====================================================

log "üìä Setting up monitoring and logging..."

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
cat > monitor-api.sh << 'EOF'
#!/bin/bash
# API Server Monitoring Script

echo "=== Tradeframe API Server Status ==="
echo "Time: $(date)"
echo

# Check if server is running
if curl -s http://localhost:3001/health > /dev/null; then
    echo "‚úÖ API Server: RUNNING"
    
    # Get health status
    HEALTH=$(curl -s http://localhost:3001/health)
    echo "Health Response: $HEALTH"
    
    # Check database connection
    if echo "$HEALTH" | grep -q "database.*connected"; then
        echo "‚úÖ Database: CONNECTED"
    else
        echo "‚ö†Ô∏è  Database: CHECK CONNECTION"
    fi
    
else
    echo "‚ùå API Server: DOWN"
fi

echo
echo "=== Recent API Logs ==="
tail -n 10 logs/api-combined.log 2>/dev/null || echo "No logs found"

echo
echo "=== Process Information ==="
ps aux | grep -E "(node|npm).*api" | grep -v grep || echo "No API processes found"
EOF

chmod +x monitor-api.sh
info "‚úÖ Monitoring script created: monitor-api.sh"

# =====================================================
# –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ –ê–ì–ï–ù–¢–ê 1
# =====================================================

log "‚úÖ Agent 1: Infrastructure & Database Setup COMPLETED!"

info "
üìã AGENT 1 SUMMARY:
‚úÖ TypeScript compilation successful
‚úÖ JWT service tested and working
‚úÖ API server started on port 3001
‚úÖ Health check endpoint active
‚úÖ Swagger documentation available
‚úÖ Basic API endpoints responding
‚úÖ PM2 configuration created
‚úÖ Monitoring script ready

üåê IMPORTANT URLS:
   - API Server: http://localhost:3001
   - Health Check: http://localhost:3001/health
   - API Documentation: http://localhost:3001/api/docs
   - API JSON Schema: http://localhost:3001/api/docs.json

üìä MONITORING:
   - Run ./monitor-api.sh to check server status
   - Logs available in logs/ directory
   - Use PM2 for production deployment

‚ö†Ô∏è  NEXT STEPS:
   1. Execute database schemas in Supabase SQL Editor
   2. Update .env with correct Supabase credentials
   3. Wait for Agent 2 (Business Logic) completion
   4. Wait for Agent 3 (API Endpoints) completion

üîß AGENT 1 PID: $API_PID (API Server running in background)
"

# –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∑–∂–µ
echo "$API_PID" > .agent1.pid

log "Agent 1 infrastructure setup completed successfully! üéâ"