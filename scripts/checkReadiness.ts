/**
 * üîç –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ Production
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ
 */

import fs from 'fs/promises';
import path from 'path';

interface Issue {
  type: 'critical' | 'warning' | 'info';
  file: string;
  line?: number;
  message: string;
  suggestion?: string;
}

class ReadinessChecker {
  private issues: Issue[] = [];
  private srcPath = './src';

  async checkAll(): Promise<Issue[]> {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production...\n');

    await this.checkTypeIssues();
    await this.checkSecurityIssues();
    await this.checkPerformanceIssues();
    await this.checkErrorHandling();
    await this.checkDataValidation();

    return this.issues;
  }

  private async checkTypeIssues() {
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é...');
    
    const files = await this.getTypescriptFiles();
    
    for (const file of files) {
      const content = await fs.readFile(file, 'utf-8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Record<string, any>
      const anyRecordMatches = content.match(/Record<string,\s*any>/g);
      if (anyRecordMatches) {
        this.addIssue('critical', file, {
          message: `–ù–∞–π–¥–µ–Ω–æ ${anyRecordMatches.length} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π Record<string, any>`,
          suggestion: '–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—Ç—Ä–æ–≥–∏–µ —Ç–∏–ø—ã –∏–ª–∏ union types'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º any —Ç–∏–ø—ã
      const anyMatches = content.match(/:\s*any[\s,;|\]]/g);
      if (anyMatches) {
        this.addIssue('warning', file, {
          message: `–ù–∞–π–¥–µ–Ω–æ ${anyMatches.length} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ç–∏–ø–∞ any`,
          suggestion: '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º @ts-ignore
      if (content.includes('@ts-ignore')) {
        this.addIssue('warning', file, {
          message: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è @ts-ignore',
          suggestion: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø—ã –≤–º–µ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è'
        });
      }
    }
  }

  private async checkSecurityIssues() {
    console.log('üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å...');
    
    const files = await this.getTypescriptFiles();
    
    for (const file of files) {
      const content = await fs.readFile(file, 'utf-8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º innerHTML –±–µ–∑ sanitization
      if (content.includes('innerHTML') && !content.includes('DOMPurify')) {
        this.addIssue('critical', file, {
          message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ innerHTML –±–µ–∑ sanitization',
          suggestion: '–î–æ–±–∞–≤–∏—Ç—å DOMPurify.sanitize()'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º eval
      if (content.includes('eval(')) {
        this.addIssue('critical', file, {
          message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval()',
          suggestion: '–£–±—Ä–∞—Ç—å eval() - –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º hardcoded –ø–∞—Ä–æ–ª–∏/—Ç–æ–∫–µ–Ω—ã
      const secrets = content.match(/(password|token|secret|key).*=.*["'][^"']+["']/gi);
      if (secrets) {
        this.addIssue('critical', file, {
          message: '–í–æ–∑–º–æ–∂–Ω—ã–µ hardcoded —Å–µ–∫—Ä–µ—Ç—ã',
          suggestion: '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è'
        });
      }
    }
  }

  private async checkPerformanceIssues() {
    console.log('‚ö° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...');
    
    const files = await this.getReactFiles();
    
    for (const file of files) {
      const content = await fs.readFile(file, 'utf-8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ React.memo –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      if (content.length > 500 && !content.includes('React.memo') && !content.includes('memo(')) {
        const hasProps = content.includes('Props');
        const hasState = content.includes('useState');
        
        if (hasProps && hasState) {
          this.addIssue('warning', file, {
            message: '–ë–æ–ª—å—à–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–∑ –º–µ–º–æ–∏–∑–∞—Ü–∏–∏',
            suggestion: '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ React.memo'
          });
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º inline –æ–±—ä–µ–∫—Ç—ã –≤ JSX
      const inlineObjects = content.match(/style=\{\{[^}]+\}\}/g);
      if (inlineObjects && inlineObjects.length > 3) {
        this.addIssue('warning', file, {
          message: `${inlineObjects.length} inline —Å—Ç–∏–ª–µ–π`,
          suggestion: '–í—ã–Ω–µ—Å—Ç–∏ –≤ CSS –∫–ª–∞—Å—Å—ã –∏–ª–∏ useMemo'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ key –≤ map
      const mapWithoutKey = content.match(/\.map\([^)]*\)\s*=>\s*<[^>]+(?!.*key=)/g);
      if (mapWithoutKey) {
        this.addIssue('warning', file, {
          message: 'Map –±–µ–∑ key prop',
          suggestion: '–î–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π key'
        });
      }
    }
  }

  private async checkErrorHandling() {
    console.log('üö® –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...');
    
    const files = await this.getTypescriptFiles();
    
    for (const file of files) {
      const content = await fs.readFile(file, 'utf-8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º async —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ try-catch
      const asyncFunctions = content.match(/async\s+\w+[^{]*\{[^}]*await[^}]*\}/g);
      if (asyncFunctions) {
        for (const func of asyncFunctions) {
          if (!func.includes('try') && !func.includes('catch')) {
            this.addIssue('warning', file, {
              message: 'Async —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
              suggestion: '–î–æ–±–∞–≤–∏—Ç—å try-catch –±–ª–æ–∫'
            });
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º fetch –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
      if (content.includes('fetch(') && !content.includes('.catch(') && !content.includes('try {')) {
        this.addIssue('warning', file, {
          message: 'Fetch –∑–∞–ø—Ä–æ—Å –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
          suggestion: '–î–æ–±–∞–≤–∏—Ç—å .catch() –∏–ª–∏ try-catch'
        });
      }
    }
  }

  private async checkDataValidation() {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
    
    const files = await this.getTypescriptFiles();
    
    for (const file of files) {
      const content = await fs.readFile(file, 'utf-8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ user input –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      if (content.includes('input.value') || content.includes('form.')) {
        if (!content.includes('z.') && !content.includes('yup') && !content.includes('joi')) {
          this.addIssue('warning', file, {
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
            suggestion: '–î–æ–±–∞–≤–∏—Ç—å —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (Zod/Yup)'
          });
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –¥–∞–Ω–Ω—ã—Ö
      if (content.includes('.json()') && !content.includes('Schema') && file.includes('services/')) {
        this.addIssue('info', file, {
          message: 'API –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã',
          suggestion: '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'
        });
      }
    }
  }

  private async getTypescriptFiles(): Promise<string[]> {
    return this.getFilesRecursive(this.srcPath, ['.ts', '.tsx']);
  }

  private async getReactFiles(): Promise<string[]> {
    return this.getFilesRecursive(this.srcPath, ['.tsx']);
  }

  private async getFilesRecursive(dir: string, extensions: string[]): Promise<string[]> {
    const files: string[] = [];
    
    try {
      const entries = await fs.readdir(dir, { withFileTypes: true });
      
      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        
        if (entry.isDirectory() && entry.name !== 'node_modules') {
          files.push(...await this.getFilesRecursive(fullPath, extensions));
        } else if (entry.isFile() && extensions.some(ext => entry.name.endsWith(ext))) {
          files.push(fullPath);
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏
    }
    
    return files;
  }

  private addIssue(type: Issue['type'], file: string, details: { message: string; suggestion?: string; line?: number }) {
    this.issues.push({
      type,
      file: file.replace(this.srcPath + '/', ''),
      ...details
    });
  }

  printReport() {
    const critical = this.issues.filter(i => i.type === 'critical');
    const warnings = this.issues.filter(i => i.type === 'warning');
    const info = this.issues.filter(i => i.type === 'info');

    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:\n');

    if (critical.length > 0) {
      console.log('üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:', critical.length);
      critical.forEach(issue => {
        console.log(`  ‚ùå ${issue.file}: ${issue.message}`);
        if (issue.suggestion) {
          console.log(`     üí° ${issue.suggestion}`);
        }
      });
      console.log();
    }

    if (warnings.length > 0) {
      console.log('üü° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:', warnings.length);
      warnings.forEach(issue => {
        console.log(`  ‚ö†Ô∏è  ${issue.file}: ${issue.message}`);
        if (issue.suggestion) {
          console.log(`     üí° ${issue.suggestion}`);
        }
      });
      console.log();
    }

    if (info.length > 0) {
      console.log('üîµ –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï:', info.length);
      info.forEach(issue => {
        console.log(`  ‚ÑπÔ∏è  ${issue.file}: ${issue.message}`);
        if (issue.suggestion) {
          console.log(`     üí° ${issue.suggestion}`);
        }
      });
      console.log();
    }

    // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    const totalIssues = this.issues.length;
    const criticalWeight = critical.length * 3;
    const warningWeight = warnings.length * 1;
    const totalWeight = criticalWeight + warningWeight;

    let readinessScore = 100;
    if (totalWeight > 0) {
      readinessScore = Math.max(0, 100 - totalWeight * 5);
    }

    console.log('üéØ –û–ë–©–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨ –ö PRODUCTION:');
    console.log(`   ${readinessScore}% (${this.getReadinessEmoji(readinessScore)})`);
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`);
    
    if (readinessScore < 80) {
      console.log('   ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ production');
    } else if (readinessScore < 95) {
      console.log('   ‚úÖ –ì–æ—Ç–æ–≤–æ –∫ production —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞–º–∏');
    } else {
      console.log('   üöÄ –ü–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ –∫ production!');
    }
  }

  private getReadinessEmoji(score: number): string {
    if (score >= 95) return 'üöÄ';
    if (score >= 80) return '‚úÖ';
    if (score >= 60) return 'üü°';
    return 'üî¥';
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
async function main() {
  const checker = new ReadinessChecker();
  await checker.checkAll();
  checker.printReport();
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { ReadinessChecker };