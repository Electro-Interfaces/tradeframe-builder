/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ç–∏ 15, –ê–ó–° –∫–æ–¥ 4
 * –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö, –∑–∞—Ç–µ–º –æ—á–∏—â–∞–µ–º
 */

import { createClient } from '@supabase/supabase-js';

// –°—Épabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SUPABASE_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function findNetworkAndStation() {
  console.log('üîç –ü–æ–∏—Å–∫ —Å–µ—Ç–∏ 15 –∏ –ê–ó–° —Å –∫–æ–¥–æ–º 4...\n');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã networks
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ç–µ–π...');
    const { data: allNetworks, error: allNetworksError } = await supabase
      .from('networks')
      .select('*')
      .limit(10);
      
    if (allNetworksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–π:', allNetworksError);
      return null;
    }
    
    console.log(`üè¢ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ç–µ–π: ${allNetworks?.length || 0}`);
    allNetworks?.forEach(network => {
      console.log(`  - ID: ${network.id}, –ò–º—è: "${network.name}"`);
      if (network.code) console.log(`    –ö–æ–¥: "${network.code}"`);
      if (network.external_id) console.log(`    External ID: "${network.external_id}"`);
    });
    
    // –ü–æ–∏—Å–∫ —Å–µ—Ç–∏ 15 –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—è–º
    const networks = allNetworks?.filter(n => 
      n.name?.includes('15') || 
      n.code?.includes('15') || 
      n.external_id?.includes('15')
    ) || [];
    
    console.log(`\nüéØ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ç–µ–π —Å '15': ${networks.length}`);
    
    // –ü–æ–ª—É—á–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã trading_points
    console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫...');
    const { data: allTradingPoints, error: allTpError } = await supabase
      .from('trading_points')
      .select('*')
      .limit(10);
      
    if (allTpError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫:', allTpError);
      return null;
    }
    
    console.log(`\n‚õΩ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: ${allTradingPoints?.length || 0}`);
    allTradingPoints?.forEach(tp => {
      console.log(`  - ID: ${tp.id}, –ò–º—è: "${tp.name}", Network ID: ${tp.network_id}`);
      if (tp.code) console.log(`    –ö–æ–¥: "${tp.code}"`);
      if (tp.external_id) console.log(`    External ID: "${tp.external_id}"`);
      if (tp.station_code) console.log(`    Station Code: "${tp.station_code}"`);
    });
    
    // –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —Å –∫–æ–¥–æ–º 4
    const tradingPoints = allTradingPoints?.filter(tp => 
      tp.name?.includes('4') || 
      tp.code?.includes('4') || 
      tp.external_id?.includes('4') ||
      tp.station_code?.includes('4')
    ) || [];
    
    console.log(`\nüéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —Å '4': ${tradingPoints.length}`);
    
    // –ù–∞–π–¥–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    let targetNetworkId = null;
    let targetTradingPoints = [];
    
    if (networks.length > 0) {
      targetNetworkId = networks[0].id;
      targetTradingPoints = allTradingPoints?.filter(tp => 
        tp.network_id === targetNetworkId && (
          tp.name?.includes('4') || 
          tp.code?.includes('4') || 
          tp.external_id?.includes('4') ||
          tp.station_code?.includes('4')
        )
      ) || [];
    } else {
      // –ï—Å–ª–∏ —Å–µ—Ç—å 15 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑—å–º–µ–º –ª—é–±—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Å –∫–æ–¥–æ–º 4
      targetTradingPoints = tradingPoints;
    }
    
    console.log(`\nüéØ –¶–µ–ª–µ–≤–∞—è —Å–µ—Ç—å ID: ${targetNetworkId}`);
    console.log('üéØ –¶–µ–ª–µ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏:', targetTradingPoints?.length || 0);
    targetTradingPoints?.forEach(tp => {
      console.log(`  - ID: ${tp.id}, –ò–º—è: "${tp.name}"`);
    });
    
    return {
      networks: allNetworks,
      tradingPoints: allTradingPoints,
      targetNetworkId,
      targetTradingPoints
    };
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return null;
  }
}

async function checkOperationsAndTransactions(targetData) {
  if (!targetData?.targetTradingPoints?.length) {
    console.log('\n‚ùå –ù–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π');
    return;
  }
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
  
  const tradingPointIds = targetData.targetTradingPoints.map(tp => tp.id);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    const { data: operations, error: opsError } = await supabase
      .from('operations')
      .select('*')
      .in('trading_point_id', tradingPointIds);
      
    if (opsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:', opsError);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations?.length || 0}`);
      if (operations?.length > 0) {
        console.log('  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π:');
        operations.slice(0, 5).forEach(op => {
          console.log(`    - ID: ${op.id}, –¢–∏–ø: ${op.operation_type}, –í—Ä–µ–º—è: ${op.start_time}, –¢–ü: ${op.trading_point_id}`);
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .in('trading_point_id', tradingPointIds);
      
    if (txError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
    } else {
      console.log(`üí≥ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions?.length || 0}`);
      if (transactions?.length > 0) {
        console.log('  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
        transactions.slice(0, 5).forEach(tx => {
          console.log(`    - ID: ${tx.id}, –°—É–º–º–∞: ${tx.total_amount}, –í—Ä–µ–º—è: ${tx.created_at}, –¢–ü: ${tx.trading_point_id}`);
        });
      }
    }
    
    return {
      operations: operations || [],
      transactions: transactions || []
    };
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    return null;
  }
}

async function cleanupData(targetData, dataToClean) {
  if (!dataToClean?.operations?.length && !dataToClean?.transactions?.length) {
    console.log('\n‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
    return;
  }
  
  console.log('\nüóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...');
  
  const tradingPointIds = targetData.targetTradingPoints.map(tp => tp.id);
  
  try {
    // –û—á–∏—Å—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    if (dataToClean.operations.length > 0) {
      console.log(`üîÑ –£–¥–∞–ª–µ–Ω–∏–µ ${dataToClean.operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π...`);
      const { error: opsDeleteError } = await supabase
        .from('operations')
        .delete()
        .in('trading_point_id', tradingPointIds);
        
      if (opsDeleteError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:', opsDeleteError);
      } else {
        console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
      }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (dataToClean.transactions.length > 0) {
      console.log(`üîÑ –£–¥–∞–ª–µ–Ω–∏–µ ${dataToClean.transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...`);
      const { error: txDeleteError } = await supabase
        .from('transactions')
        .delete()
        .in('trading_point_id', tradingPointIds);
        
      if (txDeleteError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txDeleteError);
      } else {
        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
      }
    }
    
    console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ç–∏ 15, –ê–ó–° –∫–æ–¥ 4\n');
  
  // –®–∞–≥ 1: –ù–∞–π—Ç–∏ —Ü–µ–ª–µ–≤—É—é —Å–µ—Ç—å –∏ –ê–ó–°
  const targetData = await findNetworkAndStation();
  if (!targetData) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    return;
  }
  
  // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const dataToClean = await checkOperationsAndTransactions(targetData);
  if (!dataToClean) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    return;
  }
  
  // –®–∞–≥ 3: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  await cleanupData(targetData, dataToClean);
  
  console.log('\n‚ú® –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);