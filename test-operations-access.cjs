/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ operations —á–µ—Ä–µ–∑ REST API
 * –∏ –ø–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–∞ –∏–∑–º–µ–Ω–∏—Ç—å constraint
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, serviceKey);

async function testOperationsAccess() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ê –ö OPERATIONS –ß–ï–†–ï–ó REST API');
  console.log('=' .repeat(80));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ operations
    console.log('üìã 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ operations...');
    const { data, error, count } = await supabase
      .from('operations')
      .select('*', { count: 'exact', head: false })
      .limit(5);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ operations:', error.message);
      return false;
    }
    
    console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ operations —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ ${count} –∑–∞–ø–∏—Å–µ–π`);
    if (data && data.length > 0) {
      console.log('üìä –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏:', {
        id: data[0].id,
        payment_method: data[0].payment_method,
        fuel_type: data[0].fuel_type,
        status: data[0].status
      });
    }

    // 2. –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å online_order
    console.log('\nüß™ 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ online_order...');
    const testId = `TEST-ONLINE-${Date.now()}`;
    
    const { data: insertData, error: insertError } = await supabase
      .from('operations')
      .insert({
        id: testId,
        operation_type: 'sale',
        status: 'completed',
        start_time: new Date().toISOString(),
        payment_method: 'online_order', // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        details: 'Test online order through REST API',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select();

    if (insertError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è online_order:', insertError.message);
      console.log('üîß –î–µ—Ç–∞–ª–∏:', insertError.details);
      console.log('üîß Hint:', insertError.hint);
      
      if (insertError.message.includes('violates check constraint')) {
        console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: constraint –±–ª–æ–∫–∏—Ä—É–µ—Ç online_order');
        return { constraintExists: true, restApiWorks: true };
      }
    } else {
      console.log('üéâ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: online_order –ø—Ä–æ—à–µ–ª!');
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ:', insertData);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase.from('operations').delete().eq('id', testId);
      return { constraintExists: false, restApiWorks: true };
    }

    // 3. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ constraints —á–µ—Ä–µ–∑ SQL
    console.log('\nüîç 3. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ constraints...');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ RPC –∏–ª–∏ –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
    const { data: rpcData, error: rpcError } = await supabase
      .rpc('get_table_constraints', { table_name: 'operations' });
    
    if (rpcError) {
      console.log('‚ö†Ô∏è RPC get_table_constraints –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', rpcError.message);
    } else {
      console.log('‚úÖ Constraints —á–µ—Ä–µ–∑ RPC:', rpcData);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ RPC —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('\nüìã 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ RPC —Ñ—É–Ω–∫—Ü–∏–∏...');
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
      const { data: funcData, error: funcError } = await supabase
        .from('pg_proc') // –°–∏—Å—Ç–µ–º–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ PostgreSQL
        .select('proname')
        .limit(5);
      
      if (funcError) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ pg_proc:', funcError.message);
      } else {
        console.log('‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º!');
        console.log('üìã –ü—Ä–∏–º–µ—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π:', funcData.map(f => f.proname));
      }
    } catch (e) {
      console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    return { constraintExists: true, restApiWorks: true };

  } catch (error) {
    console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

async function tryAlternativeApproaches() {
  console.log('\nüîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ü–û–î–•–û–î–´ –ö –ò–ó–ú–ï–ù–ï–ù–ò–Æ CONSTRAINT');
  console.log('=' .repeat(60));

  // –ü–æ–¥—Ö–æ–¥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π RPC —Ñ—É–Ω–∫—Ü–∏–∏
  console.log('üõ†Ô∏è –ü–æ–¥—Ö–æ–¥ 1: –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å RPC —Ñ—É–Ω–∫—Ü–∏—é...');
  
  const createRpcQuery = `
    CREATE OR REPLACE FUNCTION remove_payment_constraint()
    RETURNS text
    LANGUAGE plpgsql
    SECURITY DEFINER
    AS $$
    BEGIN
        ALTER TABLE operations DROP CONSTRAINT IF EXISTS operations_payment_method_check;
        RETURN 'Constraint removed successfully';
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 'Error: ' || SQLERRM;
    END;
    $$;
  `;

  try {
    const { data: createRpcData, error: createRpcError } = await supabase.rpc('exec', {
      sql: createRpcQuery
    });

    if (createRpcError) {
      console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ RPC —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å:', createRpcError.message);
    } else {
      console.log('‚úÖ RPC —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', createRpcData);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
      const { data: execData, error: execError } = await supabase
        .rpc('remove_payment_constraint');
      
      if (execError) {
        console.log('‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPC —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å:', execError.message);
      } else {
        console.log('üéâ RPC —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', execData);
        return true;
      }
    }
  } catch (e) {
    console.log('‚ùå RPC –ø–æ–¥—Ö–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', e.message);
  }

  // –ü–æ–¥—Ö–æ–¥ 2: –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö admin —Ñ—É–Ω–∫—Ü–∏–π
  console.log('\nüîç –ü–æ–¥—Ö–æ–¥ 2: –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö admin —Ñ—É–Ω–∫—Ü–∏–π...');
  
  const adminFunctions = [
    'execute_sql', 'exec_sql', 'admin_execute', 'run_sql', 
    'pg_execute', 'supabase_execute', 'admin_query'
  ];

  for (const funcName of adminFunctions) {
    try {
      const { error } = await supabase.rpc(funcName, { 
        query: 'SELECT 1 as test' 
      });
      
      if (!error || !error.message.includes('not found')) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: ${funcName}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–µ
        const { data: sqlData, error: sqlError } = await supabase.rpc(funcName, {
          query: 'ALTER TABLE operations DROP CONSTRAINT IF EXISTS operations_payment_method_check'
        });
        
        if (sqlError) {
          console.log(`‚ö†Ô∏è ${funcName} –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å DDL:`, sqlError.message);
        } else {
          console.log(`üéâ ${funcName} –≤—ã–ø–æ–ª–Ω–∏–ª DDL!`, sqlData);
          return true;
        }
      }
    } catch (e) {
      // –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }
  }

  console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã admin —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DDL');

  return false;
}

async function main() {
  const testResult = await testOperationsAccess();
  
  if (testResult && testResult.restApiWorks) {
    console.log('\n‚úÖ REST API –¥–æ—Å—Ç—É–ø –∫ operations —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!');
    
    if (testResult.constraintExists) {
      console.log('üîí Constraint operations_payment_method_check –∞–∫—Ç–∏–≤–µ–Ω');
      
      const alternativeSuccess = await tryAlternativeApproaches();
      
      if (alternativeSuccess) {
        console.log('\nüéâ CONSTRAINT –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù!');
        console.log('‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å online_order');
        
        // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç
        const retestId = `RETEST-ONLINE-${Date.now()}`;
        const { data: retestData, error: retestError } = await supabase
          .from('operations')
          .insert({
            id: retestId,
            operation_type: 'sale', 
            status: 'completed',
            start_time: new Date().toISOString(),
            payment_method: 'online_order',
            details: 'Retest after constraint removal',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
          .select();

        if (retestError) {
          console.log('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª:', retestError.message);
        } else {
          console.log('üéâ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!', retestData);
          await supabase.from('operations').delete().eq('id', retestId);
        }
        
        return true;
      } else {
        console.log('\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± —É–¥–∞–ª–∏—Ç—å constraint —á–µ—Ä–µ–∑ API');
        console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
        console.log('1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Supabase Dashboard ‚Üí SQL Editor');
        console.log('2. –†–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ payment_method');
        console.log('3. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É –ø—Ä–æ–µ–∫—Ç–∞ Supabase');
        
        return false;
      }
    } else {
      console.log('üéâ Constraint —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! online_order –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å');
      return true;
    }
  } else {
    console.log('\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ operations —á–µ—Ä–µ–∑ REST API');
    return false;
  }
}

main().then((success) => {
  if (success) {
    console.log('\nüéØ –ì–û–¢–û–í –ö –î–û–ë–ê–í–õ–ï–ù–ò–Æ ONLINE_ORDER!');
    console.log('‚úÖ –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å 4 —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã');
  } else {
    console.log('\n‚ö†Ô∏è –ù—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ—à–µ–Ω–∏—è');
  }
  process.exit(0);
}).catch(err => {
  console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});