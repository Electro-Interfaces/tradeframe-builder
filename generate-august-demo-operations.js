/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ–º–æ-–æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–µ—Ç–∏ –ê–ó–° –∑–∞ –∞–≤–≥—É—Å—Ç 2025
 * –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–º–ø—Ç—É: 250 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(supabaseUrl, supabaseKey);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∏ –ê–ó–°
const stations = [
  { id: 'station_01', name: '–ê–ó–° ‚Ññ1 –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è', pumps: 8 },
  { id: 'station_02', name: '–ê–ó–° ‚Ññ2 –°–µ–≤–µ—Ä–Ω–∞—è', pumps: 6 },
  { id: 'station_03', name: '–ê–ó–° ‚Ññ3 –Æ–∂–Ω–∞—è', pumps: 10 },
  { id: 'station_04', name: '–ê–ó–° ‚Ññ4 –í–æ—Å—Ç–æ—á–Ω–∞—è', pumps: 4 },
  { id: 'station_05', name: '–ê–ó–° ‚Ññ5 –ü—Ä–æ–º–∑–æ–Ω–∞', pumps: 12 }
];

// –í–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞ —Å —Ü–µ–Ω–∞–º–∏ (5 –≤–∏–¥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏)
const fuelTypes = [
  { type: '–ê–ò-92', minPrice: 52, maxPrice: 54 },
  { type: '–ê–ò-95', minPrice: 55, maxPrice: 57 },
  { type: '–ê–ò-98', minPrice: 62, maxPrice: 64 },
  { type: '–ê–ò-100', minPrice: 68, maxPrice: 70 },
  { type: '–î–¢', minPrice: 58, maxPrice: 60 }
];

// –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≤ –ë–î —Å–æ–≥–ª–∞—Å–Ω–æ constraint)
const paymentMethods = ['cash', 'bank_card', 'fuel_card'];
const paymentMethodNames = {
  'cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
  'bank_card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã', 
  'fuel_card': '–¢–æ–ø–ª–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã'
};

// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –¥–ª—è –ê–ó–°)
const paymentWeights = {
  'fuel_card': 0.40,  // 40% - –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
  'bank_card': 0.35,  // 35% - –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
  'cash': 0.25        // 25% - –Ω–∞–ª–∏—á–Ω—ã–µ (—É–º–µ–Ω—å—à–∞–µ—Ç—Å—è)
};

// –°—Ç–∞—Ç—É—Å—ã –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
const operationStatuses = [
  { status: 'completed', probability: 0.90 },
  { status: 'failed', probability: 0.03 },
  { status: 'pending', probability: 0.03 },
  { status: 'in_progress', probability: 0.03 },
  { status: 'cancelled', probability: 0.01 }
];

// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
const operators = [
  '–ò–≤–∞–Ω–æ–≤ –ò.–ò.', '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.', '–°–∏–¥–æ—Ä–æ–≤ –°.–°.', '–ö–æ–∑–ª–æ–≤ –ö.–ö.', 
  '–ú–æ—Ä–æ–∑–æ–≤ –ú.–ú.', '–í–æ–ª–∫–æ–≤ –í.–í.', '–°–æ–∫–æ–ª–æ–≤ –°.–°.', '–õ–µ–±–µ–¥–µ–≤ –õ.–õ.',
  '–ù–æ–≤ikov –ù.–ù.', '–§–µ–¥–æ—Ä–æ–≤ –§.–§.', '–ú–∏—Ö–∞–π–ª–æ–≤ –ú.–ú.', '–ü–æ–ø–æ–≤ –ë.–ë.'
];

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É –≤ –∞–≤–≥—É—Å—Ç–µ 2025 —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
 */
function generateRandomDate() {
  const year = 2025;
  const month = 7; // –∞–≤–≥—É—Å—Ç (0-based)
  const daysInMonth = 31;
  
  // –í–µ—Å –¥–Ω–µ–π: –±–æ–ª—å—à–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –±—É–¥–Ω–∏, –º–µ–Ω—å—à–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
  const dayWeights = {
    0: 0.6, // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    1: 1.0, // –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    2: 1.0, // –≤—Ç–æ—Ä–Ω–∏–∫
    3: 1.0, // —Å—Ä–µ–¥–∞
    4: 1.0, // —á–µ—Ç–≤–µ—Ä–≥
    5: 1.3, // –ø—è—Ç–Ω–∏—Ü–∞ - –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    6: 0.7  // —Å—É–±–±–æ—Ç–∞
  };
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤ + –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ –∞–∫—Ç–∏–≤–Ω–µ–µ
  let day;
  if (Math.random() < 0.3) { // 30% —à–∞–Ω—Å –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
    day = 25 + Math.floor(Math.random() * 7); // 25-31 –∞–≤–≥—É—Å—Ç–∞
  } else {
    day = 1 + Math.floor(Math.random() * 24); // 1-24 –∞–≤–≥—É—Å—Ç–∞
  }
  
  const date = new Date(year, month, day);
  const dayOfWeek = date.getDay();
  
  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –≤–µ—Å –¥–Ω—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
  if (Math.random() > dayWeights[dayOfWeek]) {
    return generateRandomDate(); // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∞—Å —Å —É—á–µ—Ç–æ–º –¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  let hour;
  const rand = Math.random();
  if (rand < 0.1) { // 10% - –Ω–æ—á—å (00:00-05:59)
    hour = Math.floor(Math.random() * 6);
  } else if (rand < 0.2) { // 10% - —É—Ç—Ä–æ (06:00-09:59)
    hour = 6 + Math.floor(Math.random() * 4);
  } else if (rand < 0.7) { // 50% - –¥–µ–Ω—å (10:00-18:59)
    hour = 10 + Math.floor(Math.random() * 9);
  } else { // 30% - –≤–µ—á–µ—Ä (19:00-23:59)
    hour = 19 + Math.floor(Math.random() * 5);
  }
  
  const minute = Math.floor(Math.random() * 60);
  const second = Math.floor(Math.random() * 60);
  
  return new Date(year, month, day, hour, minute, second);
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
 */
function getRandomStatus() {
  const rand = Math.random();
  let cumulative = 0;
  
  for (const item of operationStatuses) {
    cumulative += item.probability;
    if (rand <= cumulative) {
      return item.status;
    }
  }
  return 'completed'; // fallback
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –≤–µ—Å–æ–≤
 */
function getRandomPaymentMethod() {
  const rand = Math.random();
  let cumulative = 0;
  
  for (const [method, weight] of Object.entries(paymentWeights)) {
    cumulative += weight;
    if (rand <= cumulative) {
      return method;
    }
  }
  return 'fuel_card'; // fallback –Ω–∞ —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 */
function generateVehicleNumber() {
  const letters1 = '–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•';
  const letters2 = '–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•';
  const regions = ['77', '99', '197', '199', '178', '777'];
  
  const l1 = letters1[Math.floor(Math.random() * letters1.length)];
  const nums = String(Math.floor(Math.random() * 900) + 100);
  const l2 = letters2[Math.floor(Math.random() * letters2.length)];
  const l3 = letters2[Math.floor(Math.random() * letters2.length)];
  const region = regions[Math.floor(Math.random() * regions.length)];
  
  return `${l1}${nums}${l2}${l3}${region}`;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é
 */
function generateOperation(index) {
  const station = stations[Math.floor(Math.random() * stations.length)];
  const fuel = fuelTypes[Math.floor(Math.random() * fuelTypes.length)];
  const paymentMethod = getRandomPaymentMethod();
  const status = getRandomStatus();
  const operator = operators[Math.floor(Math.random() * operators.length)];
  
  const quantity = 10 + Math.random() * 70; // 10-80 –ª–∏—Ç—Ä–æ–≤
  const price = fuel.minPrice + Math.random() * (fuel.maxPrice - fuel.minPrice);
  const totalCost = quantity * price;
  
  const startTime = generateRandomDate();
  const duration = 2 + Math.random() * 6; // 2-8 –º–∏–Ω—É—Ç
  const endTime = status === 'completed' || status === 'failed' ? 
    new Date(startTime.getTime() + duration * 60000) : null;
  
  const pumpNumber = String(Math.floor(Math.random() * station.pumps) + 1).padStart(3, '0');
  const deviceId = `PUMP-${pumpNumber}`;
  const transactionId = `TXN-${startTime.getTime()}-${index}`;
  const customerId = `CUST-${Math.floor(Math.random() * 99999)}`;
  
  return {
    id: `TXN-2025-08-${String(startTime.getDate()).padStart(2, '0')}-${station.id.slice(-2)}-${String(index).padStart(3, '0')}`,
    operation_type: 'sale',
    status: status,
    start_time: startTime.toISOString(),
    end_time: endTime ? endTime.toISOString() : null,
    duration: status === 'completed' || status === 'failed' ? Math.round(duration) : null,
    trading_point_id: station.id,
    trading_point_name: station.name,
    device_id: deviceId,
    transaction_id: transactionId,
    fuel_type: fuel.type,
    quantity: Math.round(quantity * 100) / 100,
    price: Math.round(price * 100) / 100,
    total_cost: Math.round(totalCost * 100) / 100,
    payment_method: paymentMethod,
    details: `–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ø–ª–∏–≤–∞ ${fuel.type}`,
    progress: status === 'completed' ? 100 : 
             status === 'failed' ? 0 :
             status === 'in_progress' ? Math.floor(Math.random() * 80) + 10 :
             0,
    operator_name: operator,
    customer_id: customerId,
    vehicle_number: generateVehicleNumber(),
    metadata: {},
    created_at: startTime.toISOString(),
    updated_at: (endTime || startTime).toISOString()
  };
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
async function generateDemoOperations() {
  console.log('üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 250 –¥–µ–º–æ-–æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –∞–≤–≥—É—Å—Ç 2025...');
  
  try {
    // 1. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...');
    const { error: deleteError } = await supabase
      .from('operations')
      .delete()
      .neq('id', 'impossible-id'); // —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏

    if (deleteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', deleteError);
      return;
    }
    
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...');
    const operations = [];
    
    for (let i = 1; i <= 250; i++) {
      operations.push(generateOperation(i));
      if (i % 50 === 0) {
        console.log(`   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${i}/250 –æ–ø–µ—Ä–∞—Ü–∏–π...`);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    operations.sort((a, b) => new Date(a.start_time) - new Date(b.start_time));

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:');
    const statusCount = {};
    const fuelCount = {};
    const paymentCount = {};
    
    operations.forEach(op => {
      statusCount[op.status] = (statusCount[op.status] || 0) + 1;
      fuelCount[op.fuel_type] = (fuelCount[op.fuel_type] || 0) + 1;
      paymentCount[op.payment_method] = (paymentCount[op.payment_method] || 0) + 1;
    });
    
    console.log('   –°—Ç–∞—Ç—É—Å—ã:', statusCount);
    console.log('   –¢–æ–ø–ª–∏–≤–æ:', fuelCount);
    console.log('   –û–ø–ª–∞—Ç–∞:', paymentCount);

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏
    console.log('üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    const batchSize = 50;
    
    for (let i = 0; i < operations.length; i += batchSize) {
      const batch = operations.slice(i, i + batchSize);
      
      const { error: insertError } = await supabase
        .from('operations')
        .insert(batch);

      if (insertError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞ ${i}-${i + batch.length}:`, insertError);
        return;
      }
      
      console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Math.min(i + batchSize, operations.length)}/250 –æ–ø–µ—Ä–∞—Ü–∏–π...`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { count, error: countError } = await supabase
      .from('operations')
      .select('*', { count: 'exact', head: true });

    if (countError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞:', countError);
      return;
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${count} –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    console.log('üìÖ –ü–µ—Ä–∏–æ–¥: –∞–≤–≥—É—Å—Ç 2025');
    console.log('üè™ –°—Ç–∞–Ω—Ü–∏–∏: 5 –ê–ó–°');
    console.log('‚õΩ –í–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞: –ê–ò-92, –ê–ò-95, –ê–ò-98, –ê–ò-100, –î–¢');
    console.log('üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: –Ω–∞–ª–∏—á–Ω—ã–µ, –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, —Ç–æ–ø–ª–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≤ –ë–î)');
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateDemoOperations().then(() => {
  console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  process.exit(0);
}).catch(err => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});