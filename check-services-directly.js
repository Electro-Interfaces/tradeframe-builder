/**
 * üîç –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Node.js
 * –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ TypeScript —Ñ–∞–π–ª–æ–≤
 */

import { readFileSync, existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const servicesToCheck = [
    'src/services/apiConfigServiceDB.ts',
    'src/services/apiSwitch.ts', 
    'src/services/supabaseConfigManager.ts',
    'src/services/equipmentSupabase.ts',
    'src/services/operationsSupabaseService.ts',
    'src/services/pricesSupabaseService.ts',
    'src/services/usersSupabaseService.ts',
    'src/services/componentsSupabase.ts',
    'src/services/authService.ts',
    'src/services/supabaseAuthService.ts'
];

function log(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    console.log(`[${timestamp}] ${icon} ${message}`);
}

function checkFileExists(filePath) {
    const fullPath = join(__dirname, filePath);
    const exists = existsSync(fullPath);
    
    if (exists) {
        log(`–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${filePath}`, 'success');
        return true;
    } else {
        log(`–§–∞–π–ª –ù–ï –Ω–∞–π–¥–µ–Ω: ${filePath}`, 'error');
        return false;
    }
}

function checkFileContent(filePath) {
    try {
        const fullPath = join(__dirname, filePath);
        const content = readFileSync(fullPath, 'utf8');
        
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        const checks = {
            hasExports: content.includes('export'),
            hasImports: content.includes('import'),
            hasSupabase: content.includes('supabase') || content.includes('Supabase'),
            hasMock: content.includes('mock') || content.includes('Mock'),
            hasTypeScript: content.includes(': ') && content.includes('=>'),
            length: content.length
        };
        
        log(`–ê–Ω–∞–ª–∏–∑ ${filePath}:`);
        log(`  üì¶ –≠–∫—Å–ø–æ—Ä—Ç—ã: ${checks.hasExports ? '‚úÖ' : '‚ùå'}`);
        log(`  üì• –ò–º–ø–æ—Ä—Ç—ã: ${checks.hasImports ? '‚úÖ' : '‚ùå'}`);
        log(`  üóÑÔ∏è Supabase —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${checks.hasSupabase ? '‚úÖ' : '‚ùå'}`);
        log(`  üö´ Mock —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${checks.hasMock ? '‚ö†Ô∏è' : '‚úÖ'}`);
        log(`  üìù TypeScript —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: ${checks.hasTypeScript ? '‚úÖ' : '‚ùå'}`);
        log(`  üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${checks.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        return checks;
        
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${filePath}: ${error.message}`, 'error');
        return null;
    }
}

function checkMockDisabled() {
    log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Mock —Ä–µ–∂–∏–º–∞...');
    
    try {
        const apiConfigPath = join(__dirname, 'src/services/apiConfigServiceDB.ts');
        const content = readFileSync(apiConfigPath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ isMockMode –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false
        const mockModeFunction = content.includes('return false; // MOCK –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù');
        const forceDatabaseMode = content.includes('const forceDatabaseMode = true');
        const mockDisabledInConfig = content.includes('disableMock: true');
        
        log('  üö´ isMockMode –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false: ' + (mockModeFunction ? '‚úÖ' : '‚ùå'));
        log('  üîß forceDatabaseMode –∞–∫—Ç–∏–≤–µ–Ω: ' + (forceDatabaseMode ? '‚úÖ' : '‚ùå'));
        log('  ‚öôÔ∏è disableMock –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ' + (mockDisabledInConfig ? '‚úÖ' : '‚ùå'));
        
        const mockFullyDisabled = mockModeFunction && forceDatabaseMode && mockDisabledInConfig;
        
        if (mockFullyDisabled) {
            log('‚úÖ Mock —Ä–µ–∂–∏–º –ü–û–õ–ù–û–°–¢–¨–Æ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–¥–µ!', 'success');
        } else {
            log('‚ùå Mock —Ä–µ–∂–∏–º –ù–ï –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω!', 'error');
        }
        
        return mockFullyDisabled;
        
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Mock —Ä–µ–∂–∏–º–∞: ${error.message}`, 'error');
        return false;
    }
}

function checkSupabaseConfiguration() {
    log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase...');
    
    try {
        const apiSwitchPath = join(__dirname, 'src/services/apiSwitch.ts');
        const content = readFileSync(apiSwitchPath, 'utf8');
        
        const productionMode = content.includes("mode: 'SUPABASE_PRODUCTION'");
        const mockDisabled = content.includes('mockDisabled: true');
        const forceDatabaseMode = content.includes('forceDatabaseMode: true');
        
        log('  üöÄ SUPABASE_PRODUCTION —Ä–µ–∂–∏–º: ' + (productionMode ? '‚úÖ' : '‚ùå'));
        log('  üö´ mockDisabled —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ' + (mockDisabled ? '‚úÖ' : '‚ùå'));
        log('  üîß forceDatabaseMode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ' + (forceDatabaseMode ? '‚úÖ' : '‚ùå'));
        
        const supabaseConfigured = productionMode && mockDisabled && forceDatabaseMode;
        
        if (supabaseConfigured) {
            log('‚úÖ Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!', 'success');
        } else {
            log('‚ùå Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏!', 'error');
        }
        
        return supabaseConfigured;
        
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`, 'error');
        return false;
    }
}

function generateReport(results) {
    log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–†–û–í–ï–†–ö–ò –ì–û–¢–û–í–ù–û–°–¢–ò –°–ï–†–í–ò–°–û–í');
    log('=' * 60);
    
    const totalFiles = servicesToCheck.length;
    const existingFiles = results.fileChecks.filter(r => r.exists).length;
    const validFiles = results.fileChecks.filter(r => r.content && r.content.hasExports).length;
    
    log(`üìÅ –§–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã: ${existingFiles}/${totalFiles}`);
    log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: ${validFiles}/${totalFiles}`);
    log(`üö´ Mock –æ—Ç–∫–ª—é—á–µ–Ω: ${results.mockDisabled ? '‚úÖ' : '‚ùå'}`);
    log(`üóÑÔ∏è Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${results.supabaseConfigured ? '‚úÖ' : '‚ùå'}`);
    
    const overallHealth = Math.round(
        (existingFiles / totalFiles * 25) +
        (validFiles / totalFiles * 25) +
        (results.mockDisabled ? 25 : 0) +
        (results.supabaseConfigured ? 25 : 0)
    );
    
    log(`\nüéØ –û–ë–©–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´: ${overallHealth}%`);
    
    if (overallHealth >= 90) {
        log('üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö PRODUCTION!', 'success');
    } else if (overallHealth >= 70) {
        log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞, —Ç—Ä–µ–±—É—é—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏', 'warning');
    } else {
        log('‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ—Ä–∞–±–æ—Ç–æ–∫', 'error');
    }
    
    return overallHealth;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async function runServiceReadinessCheck() {
    log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –ë–î...\n');
    
    const results = {
        fileChecks: [],
        mockDisabled: false,
        supabaseConfigured: false
    };
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤...');
    for (const service of servicesToCheck) {
        const exists = checkFileExists(service);
        const content = exists ? checkFileContent(service) : null;
        
        results.fileChecks.push({
            path: service,
            exists,
            content
        });
        
        log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Mock —Ä–µ–∂–∏–º–∞
    results.mockDisabled = checkMockDisabled();
    log('');
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase
    results.supabaseConfigured = checkSupabaseConfiguration();
    log('');
    
    // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const healthScore = generateReport(results);
    
    return {
        health: healthScore,
        ready: healthScore >= 90,
        results
    };
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
runServiceReadinessCheck()
    .then(result => {
        if (result.ready) {
            log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ–º—É –æ—Ç–∫–∞–∑—É –æ—Ç Mock!', 'success');
            process.exit(0);
        } else {
            log('\n‚ùå –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏', 'error');
            process.exit(1);
        }
    })
    .catch(error => {
        log(`\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`, 'error');
        process.exit(1);
    });

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export {
    runServiceReadinessCheck,
    checkFileExists,
    checkFileContent,
    checkMockDisabled,
    checkSupabaseConfiguration
};