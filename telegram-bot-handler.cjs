#!/usr/bin/env node

/**
 * Telegram Bot –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã TradeFrame
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - Node.js 16+
 * - npm install node-telegram-bot-api pg
 * - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, DATABASE_URL
 */

const TelegramBot = require('node-telegram-bot-api');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// ============================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Ç–æ–∫–µ–Ω
const BOT_TOKEN = process.env.BOT_TOKEN || '8162072057:AAGGbs9LH9kGSwauKh4B0LsbJY3xvX-tNOs';
const BOT_USERNAME = process.env.BOT_USERNAME || 'tradeframe_integration_bot';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

console.log('ü§ñ Telegram Bot TradeFrame –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
console.log('üîë Bot Token:', BOT_TOKEN.substring(0, 20) + '***');
console.log('üë§ Bot Username:', BOT_USERNAME);
console.log('üì° Supabase URL:', supabaseUrl);

// –°–æ–∑–¥–∞–Ω–∏–µ Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(supabaseUrl, serviceRoleKey, {
  auth: { autoRefreshToken: false, persistSession: false }
});

// ============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –ë–î
// ============================================

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
async function connectDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('count', { count: 'exact', head: true })
      .limit(1);
    
    if (usersError) {
      throw usersError;
    }
    
    const { data: codes, error: codesError } = await supabase
      .from('telegram_verification_codes')
      .select('count', { count: 'exact', head: true })
      .limit(1);
    
    if (codesError) {
      throw codesError;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${users}`);
    console.log(`üîë –ö–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑–µ: ${codes}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
    process.exit(1);
  }
}

// ============================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================

/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase RPC
 */
async function verifyCodeAndLinkUser(verificationCode, chatId, username, firstName, lastName) {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞: ${verificationCode} –¥–ª—è chat_id: ${chatId}`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ Supabase
    const { data: result, error } = await supabase
      .rpc('verify_telegram_code', {
        p_verification_code: verificationCode,
        p_chat_id: chatId.toString()
      });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ RPC –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: `–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`,
        errorCode: 'DATABASE_ERROR'
      };
    }
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç RPC –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', result);
    
    if (result?.success) {
      return {
        success: true,
        user: result.user,
        message: result.message
      };
    } else {
      return {
        success: false,
        error: result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        errorCode: result?.error_code || 'UNKNOWN'
      };
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`,
      errorCode: 'PROCESSING_ERROR'
    };
  }

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
 */
function logEvent(type, data) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${type}:`, JSON.stringify(data, null, 2));
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function sendWelcomeMessage(chatId, username) {
  const welcomeText = 
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TradeFrame Bot!\n\n` +
    `ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.\n\n` +
    `üìã <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:</b>\n` +
    `1. –í–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å TradeFrame\n` +
    `2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n` +
    `3. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram"\n` +
    `4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ: /start –í–ê–®_–ö–û–î\n\n` +
    `üí° <b>–ü—Ä–∏–º–µ—Ä:</b> /start TF7K2M\n\n` +
    `‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.`;

  return bot.sendMessage(chatId, welcomeText, { parse_mode: 'HTML' });
}

// ============================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ë–û–¢–ê
// ============================================

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
bot.onText(/\/start (.+)/, async (msg, match) => {
  const chatId = msg.chat.id.toString();
  const username = msg.from.username || '';
  const firstName = msg.from.first_name || '';
  const lastName = msg.from.last_name || '';
  const verificationCode = match[1].trim().toUpperCase();
  
  logEvent('VERIFICATION_ATTEMPT', {
    chatId,
    username,
    firstName,
    lastName,
    verificationCode,
    timestamp: new Date().toISOString()
  });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞
    if (!/^TF[A-Z0-9]{4,8}$/.test(verificationCode)) {
      await bot.sendMessage(chatId, 
        `‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞</b>\n\n` +
        `–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞: <code>TF7K2M</code>\n\n` +
        `–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ:\n` +
        `üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí ‚öôÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram`,
        { parse_mode: 'HTML' }
      );
      return;
    }
    
    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–¥
    const result = await verifyCodeAndLinkUser(
      verificationCode, 
      chatId, 
      username, 
      firstName, 
      lastName
    );
    
    if (result.success) {
      // –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞
      await bot.sendMessage(chatId,
        `‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n` +
        `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${result.user.name}\n` +
        `üìß <b>Email:</b> ${result.user.email}\n` +
        `üïê <b>–í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> ${new Date().toLocaleString('ru-RU')}\n\n` +
        `üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è TradeFrame –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n` +
        `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–∂–Ω–æ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è`,
        { parse_mode: 'HTML' }
      );
      
      logEvent('VERIFICATION_SUCCESS', {
        chatId,
        userId: result.user.id,
        userEmail: result.user.email,
        verificationCode
      });
      
    } else {
      // –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      let errorMessage = `‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n`;
      
      switch (result.errorCode) {
        case 'INVALID_CODE':
          errorMessage += 
            `–ö–æ–¥ <code>${verificationCode}</code> –Ω–µ–≤–µ—Ä–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫.\n\n` +
            `üí° –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ:\n` +
            `üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí ‚öôÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram\n\n` +
            `‚è±Ô∏è –ö–æ–¥—ã –¥–µ–π—Å—Ç–≤—É—é—Ç 15 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è.`;
          break;
          
        case 'CHAT_ID_TAKEN':
          errorMessage += 
            `${result.error}\n\n` +
            `üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n` +
            `‚Ä¢ –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à —Å—Ç–∞—Ä—ã–π –∞–∫–∫–∞—É–Ω—Ç - –≤–æ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ –∏ –æ—Ç–≤—è–∂–∏—Ç–µ Telegram\n` +
            `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç\n` +
            `‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã`;
          break;
          
        default:
          errorMessage += 
            `${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n` +
            `–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
      }
      
      await bot.sendMessage(chatId, errorMessage, { parse_mode: 'HTML' });
      
      logEvent('VERIFICATION_FAILED', {
        chatId,
        verificationCode,
        error: result.error,
        errorCode: result.errorCode
      });
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', error);
    
    await bot.sendMessage(chatId,
      `‚ùå <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n` +
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.\n\n` +
      `üÜî ID –æ—à–∏–±–∫–∏: ${Date.now()}`,
      { parse_mode: 'HTML' }
    );
    
    logEvent('CRITICAL_ERROR', {
      chatId,
      verificationCode,
      error: error.message,
      stack: error.stack
    });
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */
bot.onText(/^\/start$/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  logEvent('WELCOME_MESSAGE', {
    chatId,
    username,
    timestamp: new Date().toISOString()
  });
  
  await sendWelcomeMessage(chatId, username);
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
 */
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const helpText = 
    `üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ TradeFrame Bot</b>\n\n` +
    `üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:</b>\n` +
    `1. –í–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å TradeFrame\n` +
    `2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n` +
    `3. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram"\n` +
    `4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /start –í–ê–®_–ö–û–î\n\n` +
    `üí° <b>–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞:</b> TF7K2M\n\n` +
    `‚öôÔ∏è <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n` +
    `/start –ö–û–î - –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n` +
    `/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
    `/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n` +
    `üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n` +
    `–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É TradeFrame.`;

  await bot.sendMessage(chatId, helpText, { parse_mode: 'HTML' });
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
 */
bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id.toString();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —ç—Ç–æ—Ç chat_id –∫ –∫–∞–∫–æ–º—É-–ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userQuery = `
      SELECT id, name, email, telegram_verified_at, telegram_notifications_enabled
      FROM users 
      WHERE telegram_chat_id = $1
    `;
    
    const result = await dbClient.query(userQuery, [chatId]);
    
    if (result.rows.length > 0) {
      const user = result.rows[0];
      
      await bot.sendMessage(chatId,
        `‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n` +
        `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user.name}\n` +
        `üìß <b>Email:</b> ${user.email}\n` +
        `üïê <b>–ü–æ–¥–∫–ª—é—á–µ–Ω:</b> ${new Date(user.telegram_verified_at).toLocaleString('ru-RU')}\n` +
        `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ${user.telegram_notifications_enabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n` +
        `‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏`,
        { parse_mode: 'HTML' }
      );
      
    } else {
      await bot.sendMessage(chatId,
        `‚ùå <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n` +
        `–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n` +
        `1. –í–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å TradeFrame\n` +
        `2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n` +
        `3. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n` +
        `4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ: /start –í–ê–®_–ö–û–î`,
        { parse_mode: 'HTML' }
      );
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    await bot.sendMessage(chatId,
      `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
 */
bot.on('message', async (msg) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (!msg.text || msg.text.startsWith('/')) {
    return;
  }
  
  const chatId = msg.chat.id;
  
  await bot.sendMessage(chatId,
    `ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã.\n\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n` +
    `/start –ö–û–î - –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞\n` +
    `/help - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏\n` +
    `/status - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞`,
    { parse_mode: 'HTML' }
  );
});

// ============================================
// –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ò –ó–ê–í–ï–†–®–ï–ù–ò–ï
// ============================================

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
 */
bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ Telegram Bot API:', error);
  
  logEvent('BOT_ERROR', {
    error: error.message,
    code: error.code,
    stack: error.stack
  });
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ polling –æ—à–∏–±–æ–∫
 */
bot.on('polling_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
  
  logEvent('POLLING_ERROR', {
    error: error.message,
    code: error.code
  });
});

/**
 * Graceful shutdown
 */
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  
  try {
    await bot.stopPolling();
    await dbClient.end();
    console.log('‚úÖ –ë–æ—Ç –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error);
  } finally {
    process.exit(0);
  }
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  
  try {
    await bot.stopPolling();
    await dbClient.end();
    console.log('‚úÖ –ë–æ—Ç –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error);
  } finally {
    process.exit(0);
  }
});

// ============================================
// –ó–ê–ü–£–°–ö –ë–û–¢–ê
// ============================================

async function startBot() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ TradeFrame Telegram Bot...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectDatabase();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botInfo = await bot.getMe();
    console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', {
      id: botInfo.id,
      username: botInfo.username,
      first_name: botInfo.first_name
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é
    await bot.setMyCommands([
      { command: 'start', description: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç TradeFrame' },
      { command: 'help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É' },
      { command: 'status', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' }
    ]);
    
    console.log('‚úÖ TradeFrame Telegram Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    console.log(`üì± –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: @${botInfo.username}`);
    console.log('üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
    setInterval(async () => {
      try {
        const result = await dbClient.query(
          'DELETE FROM telegram_verification_codes WHERE expires_at < NOW() AND is_used = false'
        );
        
        if (result.rowCount > 0) {
          console.log(`üßπ –û—á–∏—â–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤: ${result.rowCount}`);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤:', error);
      }
    }, 15 * 60 * 1000); // 15 –º–∏–Ω—É—Ç
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();

console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
console.log(`   BOT_TOKEN: ${BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
console.log(`   BOT_USERNAME: ${BOT_USERNAME}`);
console.log(`   SUPABASE_URL: ${supabaseUrl}`);
console.log('');

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports = { bot, supabase, verifyCodeAndLinkUser };