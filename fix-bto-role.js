#!/usr/bin/env node

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º scope
 */

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://ssvazdgnmatbdynkhkqo.supabase.co';
const SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzdmF6ZGdubWF0YmR5bmtoa3FvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzM0MzgzNCwiZXhwIjoyMDcyOTE5ODM0fQ.Gen-PI-vDkKjskpIvJNcQw0Uj3d0zGXB98zIxNK6di0';

const supabase = createClient(SUPABASE_URL, SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function fixBTORole() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ë–¢–û tenant
    const { data: btoTenant, error: tenantError } = await supabase
      .from('tenants')
      .select('*')
      .eq('code', 'bto')
      .single();

    if (tenantError || !btoTenant) {
      console.error('‚ùå –ë–¢–û tenant –Ω–µ –Ω–∞–π–¥–µ–Ω:', tenantError);
      return;
    }

    console.log('‚úÖ –ë–¢–û tenant –Ω–∞–π–¥–µ–Ω:', btoTenant.name, `(id: ${btoTenant.id})`);

    // –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–∞–∫–∏–µ scope –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    const { data: existingRoles, error: rolesError } = await supabase
      .from('roles')
      .select('*');

    if (rolesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π:', rolesError);
      return;
    }

    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏ –∏ –∏—Ö scope:');
    existingRoles?.forEach(role => {
      console.log(`   ‚Ä¢ ${role.name}: scope="${role.scope}", permissions=${JSON.stringify(role.permissions)}`);
    });

    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å —Å scope 'network' (–∫–∞–∫ —É network_admin)
    console.log('\nüìù –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —Å–æ scope "network"...');
    
    const { data: btoRole, error: roleError } = await supabase
      .from('roles')
      .insert({
        code: 'bto_manager',
        name: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–¢–û', 
        description: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–µ—Ç–∏ –ë–¢–û –∏ —Ä–∞–∑–¥–µ–ª–∞–º –¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏ –∏ –¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏',
        scope: 'network', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ scope —á—Ç–æ –∏ —É network_admin
        permissions: ['networks.read', 'trading_points.read'],
        scope_values: [btoTenant.id],
        is_system: false,
        is_active: true
      })
      .select()
      .single();

    if (roleError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ (network scope):', roleError);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å scope 'global'
      console.log('\nüìù –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —Å–æ scope "global"...');
      
      const { data: btoRoleGlobal, error: roleErrorGlobal } = await supabase
        .from('roles')
        .insert({
          code: 'bto_manager',
          name: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–¢–û',
          description: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–µ—Ç–∏ –ë–¢–û –∏ —Ä–∞–∑–¥–µ–ª–∞–º –¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏ –∏ –¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏', 
          scope: 'global', // –ò—Å–ø–æ–ª—å–∑—É–µ–º global scope
          permissions: ['networks.read', 'trading_points.read'],
          scope_values: [], // –ü—É—Å—Ç–æ–π –¥–ª—è global
          is_system: false,
          is_active: true
        })
        .select()
        .single();

      if (roleErrorGlobal) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ (global scope):', roleErrorGlobal);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏
        const networkAdminRole = existingRoles?.find(r => r.code === 'network_admin');
        if (networkAdminRole) {
          console.log('\nüìù –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–æ–ª–∏ network_admin...');
          
          const { data: btoRoleCopy, error: roleErrorCopy } = await supabase
            .from('roles')
            .insert({
              code: 'bto_manager',
              name: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–¢–û',
              description: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–µ—Ç–∏ –ë–¢–û –∏ —Ä–∞–∑–¥–µ–ª–∞–º –¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏ –∏ –¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏',
              scope: networkAdminRole.scope,
              permissions: networkAdminRole.permissions, // –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ network_admin
              scope_values: [btoTenant.id],
              is_system: false,
              is_active: true
            })
            .select()
            .single();

          if (roleErrorCopy) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ (–∫–æ–ø–∏—è network_admin):', roleErrorCopy);
            return;
          } else {
            console.log('‚úÖ –†–æ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —Å–æ–∑–¥–∞–Ω–∞ (–∫–æ–ø–∏—è network_admin):', btoRoleCopy.name);
            return btoRoleCopy;
          }
        }
        
        return;
      } else {
        console.log('‚úÖ –†–æ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —Å–æ–∑–¥–∞–Ω–∞ (global scope):', btoRoleGlobal.name);
        return btoRoleGlobal;
      }
    } else {
      console.log('‚úÖ –†–æ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —Å–æ–∑–¥–∞–Ω–∞ (network scope):', btoRole.name);
      return btoRole;
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

async function createBTOUser(btoRole) {
  console.log('\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ë–¢–û tenant
    const { data: btoTenant } = await supabase
      .from('tenants')
      .select('*')
      .eq('code', 'bto')
      .single();

    if (!btoTenant) {
      console.error('‚ùå –ë–¢–û tenant –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const { data: existingUser } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'bto.manager@tradeframe.com')
      .single();

    if (existingUser) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingUser.name);
      return existingUser;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const passwordHash = '$2a$10$rI7/WMuM5P7jjUuIIxB2KO7K6YXb3ZxF5rGvlqF7xK8N2YOo6m7K2'; // bcrypt hash –¥–ª—è "admin123"
    
    const { data: newUser, error: userError } = await supabase
      .from('users')
      .insert({
        tenant_id: btoTenant.id,
        email: 'bto.manager@tradeframe.com',
        name: '–ê–Ω–¥—Ä–µ–π –ë–∞—à–∫–∏—Ä–æ–≤ (–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–¢–û)',
        phone: '+7-917-123-45-67',
        status: 'active',
        pwd_hash: passwordHash,
        pwd_salt: 'demo_salt',
        preferences: {
          role: btoRole?.code || 'bto_manager',
          role_id: btoRole?.id || null,
          network_access: 'bto_only',
          tenant_restriction: btoTenant.id,
          menu_restrictions: {
            allowed_sections: ['networks', 'trading_points']
          }
        }
      })
      .select()
      .single();

    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û:', userError);
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û —Å–æ–∑–¥–∞–Ω:', newUser.name);
      console.log('üìß Email:', newUser.email);
      console.log('üîê Password: admin123');
      console.log('üè¢ Tenant:', btoTenant.name);
      
      return newUser;
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

async function main() {
  console.log('üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û...\n');
  
  const role = await fixBTORole();
  if (role) {
    const user = await createBTOUser(role);
    if (user) {
      console.log('\nüéâ –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
      console.log('   Email: bto.manager@tradeframe.com');
      console.log('   Password: admin123');
      console.log('\nüß™ –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–¢–û –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!');
    }
  }
}

main().catch(console.error);