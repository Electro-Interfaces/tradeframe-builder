// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –¥–∞–Ω–Ω—ã—Ö –≤ operationsService.ts
const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const newOperations = JSON.parse(fs.readFileSync('realistic-operations-august-2025.json', 'utf8'));

console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${newOperations.length}`);

// –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π operationsService.ts
const operationsServicePath = path.join('src', 'services', 'operationsService.ts');
let content = fs.readFileSync(operationsServicePath, 'utf8');

// –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ initialOperations
const startMarker = 'const initialOperations: Operation[] = [';
const endMarker = '];';

const startIndex = content.indexOf(startMarker);
if (startIndex === -1) {
  throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ initialOperations');
}

// –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
let bracketCount = 0;
let endIndex = -1;
let foundStart = false;

for (let i = startIndex; i < content.length; i++) {
  const char = content[i];
  
  if (char === '[') {
    if (!foundStart) {
      foundStart = true;
    }
    bracketCount++;
  } else if (char === ']') {
    bracketCount--;
    if (bracketCount === 0 && foundStart) {
      endIndex = i;
      break;
    }
  }
}

if (endIndex === -1) {
  throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ initialOperations');
}

// –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –º–∞—Å—Å–∏–≤–∞
const newArrayCode = `const initialOperations: Operation[] = ${JSON.stringify(newOperations, null, 2)}`;

// –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Å—Å–∏–≤ –Ω–∞ –Ω–æ–≤—ã–π
const beforeArray = content.substring(0, startIndex);
const afterArray = content.substring(endIndex + 2); // +2 –¥–ª—è '];'

const newContent = beforeArray + newArrayCode + ';\n' + afterArray;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
fs.writeFileSync(operationsServicePath, newContent, 'utf8');

console.log('‚úÖ operationsService.ts –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);

// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
const stats = {
  total: newOperations.length,
  byFuelType: {},
  byPaymentMethod: {},
  byStatus: {}
};

newOperations.forEach(op => {
  // –ü–æ —Ç–∏–ø—É —Ç–æ–ø–ª–∏–≤–∞
  if (op.fuelType) {
    stats.byFuelType[op.fuelType] = (stats.byFuelType[op.fuelType] || 0) + 1;
  }
  
  // –ü–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã
  if (op.paymentMethod) {
    stats.byPaymentMethod[op.paymentMethod] = (stats.byPaymentMethod[op.paymentMethod] || 0) + 1;
  }
  
  // –ü–æ —Å—Ç–∞—Ç—É—Å—É
  stats.byStatus[op.status] = (stats.byStatus[op.status] || 0) + 1;
});

console.log(`–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${stats.total}`);
console.log(`–ü–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞:`, stats.byFuelType);
console.log(`–ü–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã:`, stats.byPaymentMethod);
console.log(`–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:`, stats.byStatus);