/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥ –≤ Supabase
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

async function executeSQL(sql) {
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/execute_sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SERVICE_KEY}`,
        'apikey': SERVICE_KEY
      },
      body: JSON.stringify({ sql })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    return await response.text();
  } catch (error) {
    console.error('‚ùå SQL execution error:', error.message);
    throw error;
  }
}

async function createCommandTemplatesTables() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥...');

  // –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É
  const schemaPath = path.join(__dirname, 'database', 'command_templates_schema.sql');
  const sqlContent = fs.readFileSync(schemaPath, 'utf8');

  // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π)
  const sqlCommands = sqlContent
    .split(';')
    .map(cmd => cmd.trim())
    .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

  console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${sqlCommands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);

  // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç–¥–µ–ª—å–Ω–æ
  for (let i = 0; i < sqlCommands.length; i++) {
    const command = sqlCommands[i];
    if (command.length === 0) continue;

    try {
      console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É ${i + 1}/${sqlCommands.length}:`);
      console.log(command.substring(0, 80) + '...');
      
      await executeSQL(command);
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, error.message);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
  
  const tables = ['command_templates', 'api_templates', 'command_executions'];
  for (const table of tables) {
    try {
      const result = await executeSQL(`SELECT COUNT(*) as count FROM ${table}`);
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: –≥–æ—Ç–æ–≤–∞`);
    } catch (error) {
      console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
    }
  }

  console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫
createCommandTemplatesTables().catch(console.error);