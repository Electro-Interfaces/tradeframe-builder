/**
 * –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */

const API_CONFIG = {
    baseUrl: 'https://pos.autooplata.ru/tms',
    systemId: 15,
    username: 'UserApi', 
    password: 'lHQfLZHzB3tn',
    timeout: 30000
};

class TradingNetworkAPITester {
    constructor() {
        this.token = null;
    }

    async testServerAvailability() {
        console.log('\nüåê === –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê ===');
        try {
            const controller = new AbortController();
            const timeout = setTimeout(() => controller.abort(), 5000);

            const response = await fetch(`${API_CONFIG.baseUrl}/docs`, {
                method: 'HEAD',
                signal: controller.signal
            });
            
            clearTimeout(timeout);
            
            if (response.ok) {
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
                console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
                console.log(`üïí –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –±—ã—Å—Ç—Ä–æ`);
                return true;
            } else {
                console.log(`‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
                return false;
            }
        } catch (error) {
            console.log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
            return false;
        }
    }

    async testAuthentication() {
        console.log('\nüîê === –¢–ï–°–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===');
        try {
            const controller = new AbortController();
            const timeout = setTimeout(() => controller.abort(), API_CONFIG.timeout);

            const response = await fetch(`${API_CONFIG.baseUrl}/v1/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'text/plain, application/json'
                },
                body: JSON.stringify({
                    username: API_CONFIG.username,
                    password: API_CONFIG.password
                }),
                signal: controller.signal
            });

            clearTimeout(timeout);

            console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
            console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, Object.fromEntries(response.headers));

            if (!response.ok) {
                const errorText = await response.text().catch(() => '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏');
                console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${errorText}`);
                return false;
            }

            const token = await response.text();
            this.token = token.replace(/^["']|["']$/g, '');
            console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!`);
            console.log(`üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${this.token.substring(0, 20)}...`);
            console.log(`üìè –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: ${this.token.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            return true;
        } catch (error) {
            console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
            this.token = null;
            return false;
        }
    }

    async testServices() {
        console.log('\nüìã === –¢–ï–°–¢ –°–ü–†–ê–í–û–ß–ù–ò–ö–ê –£–°–õ–£–ì ===');
        
        if (!this.token) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            return false;
        }

        try {
            const url = `${API_CONFIG.baseUrl}/v1/services?system=${API_CONFIG.systemId}`;
            console.log(`üîó URL –∑–∞–ø—Ä–æ—Å–∞: ${url}`);

            const controller = new AbortController();
            const timeout = setTimeout(() => controller.abort(), API_CONFIG.timeout);

            const response = await fetch(url, {
                headers: {
                    'Authorization': `Bearer ${this.token}`,
                    'Accept': 'application/json'
                },
                signal: controller.signal
            });

            clearTimeout(timeout);

            console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

            if (!response.ok) {
                const errorText = await response.text().catch(() => '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏');
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥: ${errorText}`);
                return false;
            }

            const services = await response.json();
            console.log(`‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥: ${Array.isArray(services) ? services.length : '–ù–µ –º–∞—Å—Å–∏–≤'}`);
            console.log(`üìã –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(services, null, 2));
            return true;
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥: ${error.message}`);
            return false;
        }
    }

    async testPrices() {
        console.log('\nüí∞ === –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –¶–ï–ù ===');
        
        if (!this.token) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            return false;
        }

        const stationNumber = 4; // –°—Ç–∞–Ω—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        try {
            const dateParam = new Date().toISOString();
            const url = `${API_CONFIG.baseUrl}/v1/pos/prices/${stationNumber}?system=${API_CONFIG.systemId}&date=${encodeURIComponent(dateParam)}`;
            console.log(`üîó URL –∑–∞–ø—Ä–æ—Å–∞: ${url}`);

            const controller = new AbortController();
            const timeout = setTimeout(() => controller.abort(), API_CONFIG.timeout);

            const response = await fetch(url, {
                headers: {
                    'Authorization': `Bearer ${this.token}`,
                    'Accept': 'application/json'
                },
                signal: controller.signal
            });

            clearTimeout(timeout);

            console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

            if (!response.ok) {
                const errorText = await response.text().catch(() => '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏');
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: ${errorText}`);
                return false;
            }

            const pricesData = await response.json();
            console.log(`‚úÖ –¶–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}`);
            console.log(`üìã –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(pricesData, null, 2));
            return true;
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω: ${error.message}`);
            return false;
        }
    }

    async testMonitoringInfo() {
        console.log('\nüîß === –¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø ===');
        
        if (!this.token) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            return false;
        }

        const stationNumber = 4;
        
        try {
            const url = `${API_CONFIG.baseUrl}/v1/info?system=${API_CONFIG.systemId}&station=${stationNumber}`;
            console.log(`üîó URL –∑–∞–ø—Ä–æ—Å–∞: ${url}`);

            const controller = new AbortController();
            const timeout = setTimeout(() => controller.abort(), API_CONFIG.timeout);

            const response = await fetch(url, {
                headers: {
                    'Authorization': `Bearer ${this.token}`,
                    'Accept': 'application/json'
                },
                signal: controller.signal
            });

            clearTimeout(timeout);

            console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

            if (!response.ok) {
                const errorText = await response.text().catch(() => '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏');
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: ${errorText}`);
                return false;
            }

            const monitoringData = await response.json();
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationNumber}`);
            console.log(`üìã –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(monitoringData, null, 2));
            return true;
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);
            return false;
        }
    }

    async runAllTests() {
        console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –¢–û–†–ì–û–í–û–ô –°–ï–¢–ò');
        console.log('=' .repeat(60));
        console.log(`üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
        console.log(`   URL: ${API_CONFIG.baseUrl}`);
        console.log(`   System ID: ${API_CONFIG.systemId}`);
        console.log(`   Username: ${API_CONFIG.username}`);
        console.log(`   Timeout: ${API_CONFIG.timeout}ms`);
        console.log('=' .repeat(60));

        const results = {
            serverAvailable: false,
            authenticationSucceeded: false,
            servicesWork: false,
            pricesWork: false,
            monitoringWork: false
        };

        // –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        results.serverAvailable = await this.testServerAvailability();
        
        if (!results.serverAvailable) {
            console.log('\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã');
            return results;
        }

        // –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        results.authenticationSucceeded = await this.testAuthentication();
        
        if (!results.authenticationSucceeded) {
            console.log('\n‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã');
            return results;
        }

        // –¢–µ—Å—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥
        results.servicesWork = await this.testServices();

        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
        results.pricesWork = await this.testPrices();

        // –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        results.monitoringWork = await this.testMonitoringInfo();

        // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        console.log('\n' + '=' .repeat(60));
        console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('=' .repeat(60));
        console.log(`üåê –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞:      ${results.serverAvailable ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:              ${results.authenticationSucceeded ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        console.log(`üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥:         ${results.servicesWork ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω:            ${results.pricesWork ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        console.log(`üîß –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:  ${results.monitoringWork ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);

        const successfulTests = Object.values(results).filter(Boolean).length;
        const totalTests = Object.keys(results).length;
        
        console.log(`\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successfulTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);
        
        if (successfulTests === totalTests) {
            console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç.');
        } else if (results.serverAvailable && results.authenticationSucceeded) {
            console.log('‚ö†Ô∏è  API —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.');
        } else {
            console.log('‚ùå API —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ –ù–ï –†–ê–ë–û–¢–ê–ï–¢. –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º.');
        }

        return results;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const tester = new TradingNetworkAPITester();
    tester.runAllTests().catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        process.exit(1);
    });
}

module.exports = TradingNetworkAPITester;