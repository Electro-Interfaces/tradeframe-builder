/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

import { createClient } from '@supabase/supabase-js';
import crypto from 'crypto';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
const SUPABASE_URL = process.env.SUPABASE_URL || 'https://your-project.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || 'your-service-role-key';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

/**
 * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å PBKDF2 (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å CryptoUtils)
 */
async function hashPassword(password, salt) {
  return new Promise((resolve, reject) => {
    crypto.pbkdf2(password, Buffer.from(salt, 'base64'), 100000, 32, 'sha256', (err, derivedKey) => {
      if (err) reject(err);
      else resolve(derivedKey.toString('base64'));
    });
  });
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ª–∏
 */
function generateSalt() {
  return crypto.randomBytes(16).toString('base64');
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
 */
function generateTempPassword(name) {
  const words = name.split(' ');
  const firstName = words[0] || 'User';
  const randomNum = Math.floor(Math.random() * 99) + 1;
  return `${firstName}${randomNum}!`;
}

/**
 * –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function resetAllPasswords() {
  try {
    console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error } = await supabase
      .from('users')
      .select('id, email, name')
      .eq('status', 'active')
      .is('deleted_at', null);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log('\nüîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏:\n');

    const userCredentials = [];

    for (const user of users) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
      const tempPassword = generateTempPassword(user.name);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ª—å –∏ —Ö–µ—à
      const salt = generateSalt();
      const hash = await hashPassword(tempPassword, salt);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ
      const { error: updateError } = await supabase
        .from('users')
        .update({
          pwd_salt: salt,
          pwd_hash: hash,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);

      if (updateError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è ${user.email}:`, updateError);
      } else {
        console.log(`‚úÖ ${user.email} -> ${tempPassword}`);
        userCredentials.push({
          email: user.email,
          name: user.name,
          password: tempPassword
        });
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    const fs = await import('fs');
    const credentialsData = {
      generated_at: new Date().toISOString(),
      note: '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏.',
      users: userCredentials
    };

    await fs.promises.writeFile(
      'temp-passwords.json',
      JSON.stringify(credentialsData, null, 2)
    );

    console.log('\nüìÑ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª temp-passwords.json');
    console.log('\n‚ö†Ô∏è –í–ê–ñ–ù–û:');
    console.log('1. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏');
    console.log('2. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∏—Ö —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ');
    console.log('3. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª temp-passwords.json –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–æ–ª–µ–π');

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã
if (process.argv.includes('--reset')) {
  resetAllPasswords();
} else {
  console.log('üîß –£—Ç–∏–ª–∏—Ç–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  console.log('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('node tools/reset-passwords.js --reset');
  console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–∏—Ç –ø–∞—Ä–æ–ª–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!');
}