/**
 * –ü—Ä—è–º–æ–π SQL –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è Claude Code
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é –∫ Supabase PostgreSQL
 */

import https from 'https';
import url from 'url';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Supabase RPC
 */
async function executeSQL(sqlQuery) {
    return new Promise((resolve, reject) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ SQL
        const requestUrl = `${SUPABASE_URL}/rest/v1/rpc/execute_sql`;
        
        const postData = JSON.stringify({
            sql: sqlQuery
        });

        const parsedUrl = url.parse(requestUrl);
        
        const options = {
            hostname: parsedUrl.hostname,
            port: parsedUrl.port || 443,
            path: parsedUrl.path,
            method: 'POST',
            headers: {
                'apikey': SERVICE_KEY,
                'Authorization': `Bearer ${SERVICE_KEY}`,
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData),
                'Prefer': 'return=representation'
            }
        };

        const req = https.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    if (res.statusCode >= 200 && res.statusCode < 300) {
                        const result = data ? JSON.parse(data) : null;
                        console.log('‚úÖ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
                        resolve(result);
                    } else {
                        console.log('‚ùå SQL –æ—à–∏–±–∫–∞:', res.statusCode, data);
                        reject(new Error(`HTTP ${res.statusCode}: ${data}`));
                    }
                } catch (error) {
                    reject(error);
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        req.write(postData);
        req.end();
    });
}

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π SELECT –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ REST API
 */
async function executeSelect(table, options = {}) {
    return new Promise((resolve, reject) => {
        let requestUrl = `${SUPABASE_URL}/rest/v1/${table}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const params = new URLSearchParams();
        if (options.select) params.append('select', options.select);
        if (options.limit) params.append('limit', options.limit);
        if (options.offset) params.append('offset', options.offset);
        
        // –§–∏–ª—å—Ç—Ä—ã
        if (options.eq) {
            Object.entries(options.eq).forEach(([key, value]) => {
                params.append(key, `eq.${value}`);
            });
        }
        
        if (params.toString()) {
            requestUrl += '?' + params.toString();
        }

        const parsedUrl = url.parse(requestUrl);
        
        const options_req = {
            hostname: parsedUrl.hostname,
            port: parsedUrl.port || 443,
            path: parsedUrl.path,
            method: 'GET',
            headers: {
                'apikey': SERVICE_KEY,
                'Authorization': `Bearer ${SERVICE_KEY}`,
                'Content-Type': 'application/json'
            }
        };

        const req = https.request(options_req, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    if (res.statusCode >= 200 && res.statusCode < 300) {
                        const result = JSON.parse(data);
                        console.log(`‚úÖ SELECT –∏–∑ ${table} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${Array.isArray(result) ? result.length : 1}`);
                        resolve(result);
                    } else {
                        console.log('‚ùå SELECT –æ—à–∏–±–∫–∞:', res.statusCode, data);
                        reject(new Error(`HTTP ${res.statusCode}: ${data}`));
                    }
                } catch (error) {
                    reject(error);
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        req.end();
    });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
 */
async function describeTable(tableName) {
    const sql = `
        SELECT 
            column_name,
            data_type,
            is_nullable,
            column_default,
            character_maximum_length
        FROM information_schema.columns 
        WHERE table_name = '${tableName}' 
        AND table_schema = 'public'
        ORDER BY ordinal_position;
    `;
    
    console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SELECT –∏–∑ information_schema
        const result = await executeSelect('information_schema.columns', {
            select: 'column_name,data_type,is_nullable,column_default',
            eq: { 
                table_name: tableName,
                table_schema: 'public'
            }
        });
        
        console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`);
        result.forEach(col => {
            console.log(`  ‚Ä¢ ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'}`);
        });
        
        return result;
    } catch (error) {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–ª—É—á–∏—Ç—å sample –¥–∞–Ω–Ω—ã—Ö
        try {
            const sample = await executeSelect(tableName, { limit: 1 });
            if (sample.length > 0) {
                const columns = Object.keys(sample[0]);
                console.log(`üìã –°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, columns);
                return columns.map(col => ({ column_name: col, data_type: 'unknown' }));
            }
        } catch (err) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã:', err.message);
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è CLI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function main() {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log('üöÄ SQL Query Tool –¥–ª—è Supabase');
        console.log('');
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
        console.log('  node sql-query-tool.js describe <table_name>     - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã');
        console.log('  node sql-query-tool.js select <table_name>       - –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π');
        console.log('  node sql-query-tool.js tables                    - –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü');
        console.log('');
        console.log('–ü—Ä–∏–º–µ—Ä—ã:');
        console.log('  node sql-query-tool.js describe equipment_templates');
        console.log('  node sql-query-tool.js select equipment_templates');
        console.log('  node sql-query-tool.js tables');
        return;
    }

    const command = args[0];
    const tableName = args[1];

    try {
        switch (command) {
            case 'describe':
                if (!tableName) {
                    console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã');
                    return;
                }
                await describeTable(tableName);
                break;

            case 'select':
                if (!tableName) {
                    console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã');
                    return;
                }
                console.log(`üîç –í—ã–±–æ—Ä–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
                const data = await executeSelect(tableName, { limit: 10 });
                console.log('üìä –î–∞–Ω–Ω—ã–µ:');
                console.log(JSON.stringify(data, null, 2));
                break;

            case 'tables':
                console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü...');
                try {
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ information_schema
                    const tables = await executeSelect('information_schema.tables', {
                        select: 'table_name',
                        eq: { table_schema: 'public' }
                    });
                    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
                    tables.forEach((t, i) => console.log(`  ${i + 1}. ${t.table_name}`));
                } catch (error) {
                    console.log('‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');
                    // –ü—Ä–æ–≤–µ—Ä–∏–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                    const knownTables = [
                        'equipment_templates', 'equipment', 'networks', 'trading_points',
                        'operations', 'nomenclature', 'users', 'fuel_types'
                    ];
                    
                    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:');
                    for (const table of knownTables) {
                        try {
                            await executeSelect(table, { limit: 1 });
                            console.log(`  ‚úÖ ${table}`);
                        } catch {
                            console.log(`  ‚ùå ${table}`);
                        }
                    }
                }
                break;

            default:
                console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
                console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: describe, select, tables');
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);

if (process.argv[1] === __filename) {
    main().catch(console.error);
}

export {
    executeSQL,
    executeSelect,
    describeTable
};