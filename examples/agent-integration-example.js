/**
 * –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SQL Direct Tool –≤ –∫–æ–¥ –∞–≥–µ–Ω—Ç–∞
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ª—é–±–æ–π –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */

import { executeSelect, describeTable } from '../tools/sql-direct.js';

async function demonstrateAgentIntegration() {
    console.log('ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SQL Tool –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤');
    console.log('=' .repeat(50));
    
    try {
        // 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
        console.log('\nüìã 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã equipment_templates:');
        const structure = await describeTable('equipment_templates');
        console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:', structure?.map(s => s.column_name) || '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –º–µ—Ç–æ–¥');
        
        // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüìä 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:');
        const templates = await executeSelect('equipment_templates', { limit: 3 });
        
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${templates.length} —à–∞–±–ª–æ–Ω–æ–≤:`);
        templates.forEach((template, i) => {
            console.log(`  ${i + 1}. ${template.name} (${template.system_type})`);
            console.log(`     –ê–∫—Ç–∏–≤–µ–Ω: ${template.is_active}`);
            console.log(`     –°–æ–∑–¥–∞–Ω: ${new Date(template.created_at).toLocaleDateString()}`);
        });
        
        // 3. –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã
        console.log('\nüîç 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã:');
        const firstTemplate = templates[0];
        const hasCorrectFields = {
            'UUID ID': typeof firstTemplate.id === 'string' && firstTemplate.id.includes('-'),
            'is_active –ø–æ–ª–µ': firstTemplate.hasOwnProperty('is_active'),
            '–ù–ï–¢ status –ø–æ–ª—è': !firstTemplate.hasOwnProperty('status'),
            'JSON –ø–∞—Ä–∞–º–µ—Ç—Ä—ã': typeof firstTemplate.default_params === 'object'
        };
        
        Object.entries(hasCorrectFields).forEach(([check, passed]) => {
            console.log(`  ${passed ? '‚úÖ' : '‚ùå'} ${check}`);
        });
        
        // 4. –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
        console.log('\nüîß 4. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:');
        const exampleObject = {
            id: generateUUID(),
            name: '–ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞',
            system_type: 'example',
            technical_code: 'EX_' + Date.now(),
            is_active: true, // ‚úÖ –ù–ï status!
            default_params: {
                example: true,
                created_by_agent: true
            },
            description: '–°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç–æ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏'
        };
        
        console.log(JSON.stringify(exampleObject, null, 2));
        
        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü
        console.log('\nüè™ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü:');
        const otherTables = ['networks', 'trading_points', 'operations', 'nomenclature'];
        
        for (const table of otherTables) {
            try {
                const data = await executeSelect(table, { limit: 1 });
                console.log(`  ‚úÖ ${table}: ${data.length} –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ`);
            } catch (error) {
                console.log(`  ‚ùå ${table}: ${error.message}`);
            }
        }
        
        console.log('\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å SQL Tool —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
        console.log('üí° –¢–µ–ø–µ—Ä—å –ª—é–±–æ–π –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –ª–µ–≥–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    }
}

function generateUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
demonstrateAgentIntegration().catch(console.error);