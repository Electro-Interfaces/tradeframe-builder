/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
 */

// –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const defaultConfig = {
  enabled: true,
  baseUrl: 'https://pos.autooplata.ru/tms',
  systemId: '',
  defaultStationId: '',
  authType: 'basic',
  username: 'UserApi',
  password: 'PasswordApi',
  apiKey: '',
  timeout: 30000,
  retryAttempts: 3,
  endpoints: {
    tanks: '/tanks',
    transactions: '/transactions'
  }
};

async function testDefaultAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API');
  console.log('====================================================');
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º –¥–ª—è –ê–ó–° 4 (external_id = 4)
  const testUrl = `${defaultConfig.baseUrl}${defaultConfig.endpoints.tanks}`;
  const system = '15'; // Network external_id –∏–∑ –±–∞–∑—ã (–ù–æ—Ä–¥ –õ–∞–π–Ω)
  const station = '4';  // Trading point external_id (–ê–ó–° 4)
  
  const fullUrl = `${testUrl}?system=${system}&station=${station}`;
  
  console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', fullUrl);
  console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:', defaultConfig.username + ':' + defaultConfig.password);
  
  try {
    // –°–æ–∑–¥–∞–µ–º Basic Auth –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const authString = Buffer.from(`${defaultConfig.username}:${defaultConfig.password}`).toString('base64');
    
    const response = await fetch(fullUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Basic ${authString}`,
        'Accept': 'application/json',
        'User-Agent': 'tradeframe-builder/1.0'
      },
      timeout: defaultConfig.timeout
    });
    
    console.log('üìä HTTP —Å—Ç–∞—Ç—É—Å:', response.status, response.statusText);
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:');
      console.log('üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', Array.isArray(data) ? data.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
      if (Array.isArray(data) && data.length > 0) {
        console.log('üõ¢Ô∏è  –ü–µ—Ä–≤—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä:', JSON.stringify(data[0], null, 2));
      } else {
        console.log('üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(data, null, 2));
      }
    } else {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', response.status, errorText);
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    console.log('\\nüîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...');
    
    const alternativeUrls = [
      `${testUrl}?system=1&station=1`,
      `${testUrl}?systemId=15&stationId=4`,
      `${testUrl}?networkId=15&pointId=4`,
    ];
    
    for (const altUrl of alternativeUrls) {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º:', altUrl);
      try {
        const authString = Buffer.from(`${defaultConfig.username}:${defaultConfig.password}`).toString('base64');
        
        const altResponse = await fetch(altUrl, {
          method: 'GET',
          headers: {
            'Authorization': `Basic ${authString}`,
            'Accept': 'application/json'
          }
        });
        
        console.log('   üìä –°—Ç–∞—Ç—É—Å:', altResponse.status);
        if (altResponse.ok) {
          const altData = await altResponse.json();
          console.log('   ‚úÖ –£—Å–ø–µ—Ö! –†–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', Array.isArray(altData) ? altData.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
          break;
        }
      } catch (altError) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞:', altError.message);
      }
    }
  }
}

testDefaultAPI().catch(console.error);