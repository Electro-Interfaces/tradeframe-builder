/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã API —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –¥–ª—è –ê–ó–° 4
 */

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://tohtryzyffcebtyvkxwh.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvaHRyeXp5ZmZjZWJ0eXZreHdoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg3NTQ0OCwiZXhwIjoyMDcyNDUxNDQ4fQ.kN6uF9YhJzbzu2ugHRQCyzuNOwawsTDtwelGO0uCjyY';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

const TARGET_TRADING_POINT_ID = '6969b08d-1cbe-45c2-ae9c-8002c7022b59'; // –ê–ó–° 4

async function testTanksAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É API —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –¥–ª—è –ê–ó–° 4');
  console.log('ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', TARGET_TRADING_POINT_ID);
  console.log('===============================================\n');
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏
  console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏...');
  
  const { data: configData, error: configError } = await supabase
    .from('system_config')
    .select('*')
    .eq('key', 'trading_network_config')
    .single();
    
  if (configError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', configError);
    console.log('‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"');
  } else if (configData) {
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞');
    const config = JSON.parse(configData.value);
    console.log('   - –í–∫–ª—é—á–µ–Ω–∞:', config.enabled ? '–î–∞' : '–ù–µ—Ç');
    console.log('   - Base URL:', config.baseUrl || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    console.log('   - –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', config.endpoints?.tanks || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    
    if (!config.enabled) {
      console.log('‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
    }
    
    if (!config.endpoints?.tanks) {
      console.log('‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  } else {
    console.log('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    console.log('‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏"');
  }
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –ê–ó–° 4...');
  
  const { data: tradingPoint, error: tpError } = await supabase
    .from('trading_points')
    .select('*')
    .eq('id', TARGET_TRADING_POINT_ID)
    .single();
    
  if (tpError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', tpError);
  } else {
    console.log('‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:');
    console.log('   - –ù–∞–∑–≤–∞–Ω–∏–µ:', tradingPoint.name);
    console.log('   - External ID:', tradingPoint.external_id || '–ù–ï –£–ö–ê–ó–ê–ù');
    console.log('   - Code:', tradingPoint.code || '–Ω–µ —É–∫–∞–∑–∞–Ω');
    
    if (!tradingPoint.external_id && !tradingPoint.code) {
      console.log('‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç external_id –∏–ª–∏ code –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤');
    }
  }
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å tanksApiIntegrationService...');
  
  try {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
    const { tanksApiIntegrationService } = await import('./src/services/tanksApiIntegrationService.js');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    const testResult = await tanksApiIntegrationService.testApiConnection();
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:');
    console.log('   - –£—Å–ø–µ—Ö:', testResult.success ? '–î–∞' : '–ù–µ—Ç');
    console.log('   - –°–æ–æ–±—â–µ–Ω–∏–µ:', testResult.message);
    
    if (testResult.data) {
      console.log('   - –î–∞–Ω–Ω—ã–µ –æ—Ç API:', JSON.stringify(testResult.data, null, 2));
    }
    
  } catch (importError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞:', importError.message);
  }
}

testTanksAPI().catch(console.error);