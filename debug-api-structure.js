// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API
import { tradingNetworkAPI } from './src/services/tradingNetworkAPI.js';

async function debugApiStructure() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ª–∞–¥–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API...');
  
  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ 4
    console.log('\nüè™ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ 4...');
    const transactions = await tradingNetworkAPI.getTransactions(15, 4, '2025-09-02', '2025-09-06');
    
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
    
    if (transactions.length > 0) {
      console.log('\nüîç –ü–ï–†–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø (–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞):');
      console.log(JSON.stringify(transactions[0], null, 2));
      
      console.log('\nüîç –ö–õ–Æ–ß–ò –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
      console.log(Object.keys(transactions[0]));
      
      console.log('\nüîç –¢–ò–ü–´ –î–ê–ù–ù–´–• –ø–æ–ª–µ–π:');
      Object.entries(transactions[0]).forEach(([key, value]) => {
        console.log(`${key}: ${typeof value} = ${value}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
      if (transactions.length > 1) {
        console.log('\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –ö–õ–Æ–ß–ï–ô (–ø–µ—Ä–≤—ã–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏):');
        for (let i = 0; i < Math.min(3, transactions.length); i++) {
          console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${i}: ${Object.keys(transactions[i]).join(', ')}`);
        }
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ API:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugApiStructure();